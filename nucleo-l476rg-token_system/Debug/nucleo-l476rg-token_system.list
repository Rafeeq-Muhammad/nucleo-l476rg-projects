
nucleo-l476rg-token_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055e8  080055e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080055e8  080055e8  000155e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055f0  080055f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055f4  080055f4  000155f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080055f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08005668  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08005668  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d792  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002016  00000000  00000000  0002d832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002f848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  00030298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026fbf  00000000  00000000  00030c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b546  00000000  00000000  00057bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eae6a  00000000  00000000  00063125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014df8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003490  00000000  00000000  0014dfe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005364 	.word	0x08005364

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005364 	.word	0x08005364

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b09f      	sub	sp, #124	; 0x7c
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char main_message_buffer[50] = {0}; //Reusable buffer to store messages to be printed to usart.
 800059e:	2300      	movs	r3, #0
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80005a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005a6:	222e      	movs	r2, #46	; 0x2e
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 fcc6 	bl	8003f3c <memset>
  //char commandTokenOne[5] = {0};
  //char commandTokenTwo[5] = {0};
  //char commandTokenThree[5] = {0};
  char commandArray[3][5]; //Holds the parsed command.
  char translatedCommandArray[30] = {0};
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
 80005c4:	615a      	str	r2, [r3, #20]
 80005c6:	831a      	strh	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fcb2 	bl	8000f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f958 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f9d8 	bl	8000984 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f9a6 	bl	8000924 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  snprintf((char*)main_message_buffer,sizeof(main_message_buffer),"\r\nGround node ready for use. You may begin typing commands.\r\n");
 80005d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005dc:	4a98      	ldr	r2, [pc, #608]	; (8000840 <main+0x2a8>)
 80005de:	2132      	movs	r1, #50	; 0x32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 fcb3 	bl	8003f4c <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)main_message_buffer, strlen(main_message_buffer), 200);
 80005e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fdfa 	bl	80001e4 <strlen>
 80005f0:	4603      	mov	r3, r0
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80005f8:	23c8      	movs	r3, #200	; 0xc8
 80005fa:	4892      	ldr	r0, [pc, #584]	; (8000844 <main+0x2ac>)
 80005fc:	f002 fbc0 	bl	8002d80 <HAL_UART_Transmit>

  /*
   * This is the initialization of PuTTy receiving a character. It tells PuTTy, "hey,..
   * receive the next character I'm about to type."
   */
  HAL_UART_Receive_IT(&huart2, rx_char, 1); //Start listening for interrupts.
 8000600:	2201      	movs	r2, #1
 8000602:	4991      	ldr	r1, [pc, #580]	; (8000848 <main+0x2b0>)
 8000604:	488f      	ldr	r0, [pc, #572]	; (8000844 <main+0x2ac>)
 8000606:	f002 fc4f 	bl	8002ea8 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (rx_complete == 1) {
 800060a:	4b90      	ldr	r3, [pc, #576]	; (800084c <main+0x2b4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d1fb      	bne.n	800060a <main+0x72>

      //Notify the user that a command has been completed.
      snprintf((char*)main_message_buffer,sizeof(main_message_buffer),"\r\nA command has been completed.\r\n");
 8000612:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000616:	4a8e      	ldr	r2, [pc, #568]	; (8000850 <main+0x2b8>)
 8000618:	2132      	movs	r1, #50	; 0x32
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fc96 	bl	8003f4c <sniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)main_message_buffer, strlen(main_message_buffer), 200);
 8000620:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff fddd 	bl	80001e4 <strlen>
 800062a:	4603      	mov	r3, r0
 800062c:	b29a      	uxth	r2, r3
 800062e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000632:	23c8      	movs	r3, #200	; 0xc8
 8000634:	4883      	ldr	r0, [pc, #524]	; (8000844 <main+0x2ac>)
 8000636:	f002 fba3 	bl	8002d80 <HAL_UART_Transmit>

      //Display the complete command.
      snprintf((char*)main_message_buffer,sizeof(main_message_buffer),"Command: %s\r\n", safe_buff);
 800063a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800063e:	4b85      	ldr	r3, [pc, #532]	; (8000854 <main+0x2bc>)
 8000640:	4a85      	ldr	r2, [pc, #532]	; (8000858 <main+0x2c0>)
 8000642:	2132      	movs	r1, #50	; 0x32
 8000644:	f003 fc82 	bl	8003f4c <sniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)main_message_buffer, strlen(main_message_buffer), 200);
 8000648:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff fdc9 	bl	80001e4 <strlen>
 8000652:	4603      	mov	r3, r0
 8000654:	b29a      	uxth	r2, r3
 8000656:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800065a:	23c8      	movs	r3, #200	; 0xc8
 800065c:	4879      	ldr	r0, [pc, #484]	; (8000844 <main+0x2ac>)
 800065e:	f002 fb8f 	bl	8002d80 <HAL_UART_Transmit>

      //Clear the commandToken arrays
      //memset(&commandTokenOne, 0, strlen((char*)commandTokenOne));
      //memset(&commandTokenTwo, 0, strlen((char*)commandTokenTwo));
      //memset(&commandTokenThree, 0, strlen((char*)commandTokenThree));
      for (int i = 0; i < 3; i++) {
 8000662:	2300      	movs	r3, #0
 8000664:	677b      	str	r3, [r7, #116]	; 0x74
 8000666:	e014      	b.n	8000692 <main+0xfa>
        memset(&commandArray[i], 0, strlen((char*)commandArray));
 8000668:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800066c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800066e:	4613      	mov	r3, r2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	4413      	add	r3, r2
 8000674:	18cc      	adds	r4, r1, r3
 8000676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fdb2 	bl	80001e4 <strlen>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	4620      	mov	r0, r4
 8000688:	f003 fc58 	bl	8003f3c <memset>
      for (int i = 0; i < 3; i++) {
 800068c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800068e:	3301      	adds	r3, #1
 8000690:	677b      	str	r3, [r7, #116]	; 0x74
 8000692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000694:	2b02      	cmp	r3, #2
 8000696:	dde7      	ble.n	8000668 <main+0xd0>
      }
      memset(&translatedCommandArray, 0, strlen((char*)translatedCommandArray));
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fda1 	bl	80001e4 <strlen>
 80006a2:	4602      	mov	r2, r0
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fc46 	bl	8003f3c <memset>

      //Turning the raw data into tokens. Store these tokens in commandArray. Commands have a max of three tokens. Tokens have a max length of 10 characters -------------------------------------------------------
      const char s[2] = " ";
 80006b0:	2320      	movs	r3, #32
 80006b2:	80bb      	strh	r3, [r7, #4]
      char *token;
      /*Define where I'm getting tokens from*/
      token = strtok((char*)safe_buff, s);
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4619      	mov	r1, r3
 80006b8:	4866      	ldr	r0, [pc, #408]	; (8000854 <main+0x2bc>)
 80006ba:	f003 fc83 	bl	8003fc4 <strtok>
 80006be:	6738      	str	r0, [r7, #112]	; 0x70
      /* Walk through other tokens, store them to the subsequent positions of commandArray */
      int i = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	66fb      	str	r3, [r7, #108]	; 0x6c
      while( token != NULL ) {
 80006c4:	e013      	b.n	80006ee <main+0x156>
        //} else if (i == 2) {
        //  strcpy(commandTokenTwo, token);
        //} else if (i == 3) {
        //  strcpy(commandTokenThree, token);
        //}
        strcpy(commandArray[i], token);
 80006c6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80006ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80006cc:	4613      	mov	r3, r2
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	4413      	add	r3, r2
 80006d2:	440b      	add	r3, r1
 80006d4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fc6c 	bl	8003fb4 <strcpy>
        
        i++;
 80006dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006de:	3301      	adds	r3, #1
 80006e0:	66fb      	str	r3, [r7, #108]	; 0x6c
        /*Get the next token*/
        token = strtok(NULL, s);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	2000      	movs	r0, #0
 80006e8:	f003 fc6c 	bl	8003fc4 <strtok>
 80006ec:	6738      	str	r0, [r7, #112]	; 0x70
      while( token != NULL ) {
 80006ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1e8      	bne.n	80006c6 <main+0x12e>
      }

      //Display the contents of the tokens
      snprintf((char*)main_message_buffer,sizeof(main_message_buffer),"Token 1: %s\r\n", commandArray[0]);
 80006f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006f8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80006fc:	4a57      	ldr	r2, [pc, #348]	; (800085c <main+0x2c4>)
 80006fe:	2132      	movs	r1, #50	; 0x32
 8000700:	f003 fc24 	bl	8003f4c <sniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)main_message_buffer, strlen(main_message_buffer), 200);
 8000704:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff fd6b 	bl	80001e4 <strlen>
 800070e:	4603      	mov	r3, r0
 8000710:	b29a      	uxth	r2, r3
 8000712:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000716:	23c8      	movs	r3, #200	; 0xc8
 8000718:	484a      	ldr	r0, [pc, #296]	; (8000844 <main+0x2ac>)
 800071a:	f002 fb31 	bl	8002d80 <HAL_UART_Transmit>
      snprintf((char*)main_message_buffer,sizeof(main_message_buffer),"Token 2: %s\r\n", commandArray[1]);
 800071e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000722:	3305      	adds	r3, #5
 8000724:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000728:	4a4d      	ldr	r2, [pc, #308]	; (8000860 <main+0x2c8>)
 800072a:	2132      	movs	r1, #50	; 0x32
 800072c:	f003 fc0e 	bl	8003f4c <sniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)main_message_buffer, strlen(main_message_buffer), 200);
 8000730:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fd55 	bl	80001e4 <strlen>
 800073a:	4603      	mov	r3, r0
 800073c:	b29a      	uxth	r2, r3
 800073e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000742:	23c8      	movs	r3, #200	; 0xc8
 8000744:	483f      	ldr	r0, [pc, #252]	; (8000844 <main+0x2ac>)
 8000746:	f002 fb1b 	bl	8002d80 <HAL_UART_Transmit>
      snprintf((char*)main_message_buffer,sizeof(main_message_buffer),"Token 3: %s\r\n", commandArray[2]);
 800074a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800074e:	330a      	adds	r3, #10
 8000750:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000754:	4a43      	ldr	r2, [pc, #268]	; (8000864 <main+0x2cc>)
 8000756:	2132      	movs	r1, #50	; 0x32
 8000758:	f003 fbf8 	bl	8003f4c <sniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)main_message_buffer, strlen(main_message_buffer), 200);
 800075c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fd3f 	bl	80001e4 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	b29a      	uxth	r2, r3
 800076a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800076e:	23c8      	movs	r3, #200	; 0xc8
 8000770:	4834      	ldr	r0, [pc, #208]	; (8000844 <main+0x2ac>)
 8000772:	f002 fb05 	bl	8002d80 <HAL_UART_Transmit>

      if (strcmp(commandArray[0], "led") == 0) {
 8000776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800077a:	493b      	ldr	r1, [pc, #236]	; (8000868 <main+0x2d0>)
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd27 	bl	80001d0 <strcmp>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d141      	bne.n	800080c <main+0x274>

    	  strcat(translatedCommandArray, "0");
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fd29 	bl	80001e4 <strlen>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	4413      	add	r3, r2
 800079c:	4933      	ldr	r1, [pc, #204]	; (800086c <main+0x2d4>)
 800079e:	461a      	mov	r2, r3
 80007a0:	460b      	mov	r3, r1
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	8013      	strh	r3, [r2, #0]

    	  if (strcmp(commandArray[1], "on") == 0) {
 80007a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007aa:	3305      	adds	r3, #5
 80007ac:	4930      	ldr	r1, [pc, #192]	; (8000870 <main+0x2d8>)
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fd0e 	bl	80001d0 <strcmp>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d10f      	bne.n	80007da <main+0x242>
    		  strcat(translatedCommandArray, "0");
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd10 	bl	80001e4 <strlen>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	4413      	add	r3, r2
 80007ce:	4927      	ldr	r1, [pc, #156]	; (800086c <main+0x2d4>)
 80007d0:	461a      	mov	r2, r3
 80007d2:	460b      	mov	r3, r1
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	8013      	strh	r3, [r2, #0]
 80007d8:	e018      	b.n	800080c <main+0x274>
    	  } else if (strcmp(commandArray[1], "off") == 0) {
 80007da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007de:	3305      	adds	r3, #5
 80007e0:	4924      	ldr	r1, [pc, #144]	; (8000874 <main+0x2dc>)
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fcf4 	bl	80001d0 <strcmp>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d10e      	bne.n	800080c <main+0x274>
    		  strcat(translatedCommandArray, "1");
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fcf6 	bl	80001e4 <strlen>
 80007f8:	4603      	mov	r3, r0
 80007fa:	461a      	mov	r2, r3
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	4413      	add	r3, r2
 8000802:	491d      	ldr	r1, [pc, #116]	; (8000878 <main+0x2e0>)
 8000804:	461a      	mov	r2, r3
 8000806:	460b      	mov	r3, r1
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	8013      	strh	r3, [r2, #0]
    	  }
      }

      snprintf((char*)main_message_buffer,sizeof(main_message_buffer),"translatedCommandArray: %s\r\n\r\n", translatedCommandArray);
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000814:	4a19      	ldr	r2, [pc, #100]	; (800087c <main+0x2e4>)
 8000816:	2132      	movs	r1, #50	; 0x32
 8000818:	f003 fb98 	bl	8003f4c <sniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)main_message_buffer, strlen(main_message_buffer), 200);
 800081c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fcdf 	bl	80001e4 <strlen>
 8000826:	4603      	mov	r3, r0
 8000828:	b29a      	uxth	r2, r3
 800082a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800082e:	23c8      	movs	r3, #200	; 0xc8
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <main+0x2ac>)
 8000832:	f002 faa5 	bl	8002d80 <HAL_UART_Transmit>


      rx_complete = 0;
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <main+0x2b4>)
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
    if (rx_complete == 1) {
 800083c:	e6e5      	b.n	800060a <main+0x72>
 800083e:	bf00      	nop
 8000840:	0800537c 	.word	0x0800537c
 8000844:	20000128 	.word	0x20000128
 8000848:	20000110 	.word	0x20000110
 800084c:	20000114 	.word	0x20000114
 8000850:	080053bc 	.word	0x080053bc
 8000854:	2000008c 	.word	0x2000008c
 8000858:	080053e0 	.word	0x080053e0
 800085c:	080053f0 	.word	0x080053f0
 8000860:	08005400 	.word	0x08005400
 8000864:	08005410 	.word	0x08005410
 8000868:	08005420 	.word	0x08005420
 800086c:	08005424 	.word	0x08005424
 8000870:	08005428 	.word	0x08005428
 8000874:	0800542c 	.word	0x0800542c
 8000878:	08005430 	.word	0x08005430
 800087c:	08005434 	.word	0x08005434

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b096      	sub	sp, #88	; 0x58
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	2244      	movs	r2, #68	; 0x44
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f003 fb54 	bl	8003f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	463b      	mov	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008a6:	f000 ff1f 	bl	80016e8 <HAL_PWREx_ControlVoltageScaling>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008b0:	f000 f95a 	bl	8000b68 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008be:	2310      	movs	r3, #16
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c2:	2302      	movs	r3, #2
 80008c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c6:	2302      	movs	r3, #2
 80008c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008ce:	230a      	movs	r3, #10
 80008d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008d2:	2307      	movs	r3, #7
 80008d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008da:	2302      	movs	r3, #2
 80008dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 ff56 	bl	8001794 <HAL_RCC_OscConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008ee:	f000 f93b 	bl	8000b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f2:	230f      	movs	r3, #15
 80008f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f6:	2303      	movs	r3, #3
 80008f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000906:	463b      	mov	r3, r7
 8000908:	2104      	movs	r1, #4
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fb28 	bl	8001f60 <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000916:	f000 f927 	bl	8000b68 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3758      	adds	r7, #88	; 0x58
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_USART2_UART_Init+0x58>)
 800092a:	4a15      	ldr	r2, [pc, #84]	; (8000980 <MX_USART2_UART_Init+0x5c>)
 800092c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_USART2_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_USART2_UART_Init+0x58>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USART2_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000968:	f002 f9bc 	bl	8002ce4 <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000972:	f000 f8f9 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000128 	.word	0x20000128
 8000980:	40004400 	.word	0x40004400

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <MX_GPIO_Init+0xc4>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4a2a      	ldr	r2, [pc, #168]	; (8000a48 <MX_GPIO_Init+0xc4>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <MX_GPIO_Init+0xc4>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <MX_GPIO_Init+0xc4>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <MX_GPIO_Init+0xc4>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_GPIO_Init+0xc4>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_GPIO_Init+0xc4>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a1e      	ldr	r2, [pc, #120]	; (8000a48 <MX_GPIO_Init+0xc4>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_GPIO_Init+0xc4>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_GPIO_Init+0xc4>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <MX_GPIO_Init+0xc4>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_GPIO_Init+0xc4>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2120      	movs	r1, #32
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a02:	f000 fe4b 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_GPIO_Init+0xc8>)
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480d      	ldr	r0, [pc, #52]	; (8000a50 <MX_GPIO_Init+0xcc>)
 8000a1c:	f000 fc94 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a20:	2320      	movs	r3, #32
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3a:	f000 fc85 	bl	8001348 <HAL_GPIO_Init>

}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	; 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	10210000 	.word	0x10210000
 8000a50:	48000800 	.word	0x48000800

08000a54 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b090      	sub	sp, #64	; 0x40
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart2.Instance)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <HAL_UART_RxCpltCallback+0xfc>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d16f      	bne.n	8000b48 <HAL_UART_RxCpltCallback+0xf4>
        {
            switch (*rx_char)
 8000a68:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <HAL_UART_RxCpltCallback+0x100>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b0d      	cmp	r3, #13
 8000a6e:	d843      	bhi.n	8000af8 <HAL_UART_RxCpltCallback+0xa4>
 8000a70:	a201      	add	r2, pc, #4	; (adr r2, 8000a78 <HAL_UART_RxCpltCallback+0x24>)
 8000a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a76:	bf00      	nop
 8000a78:	08000ab1 	.word	0x08000ab1
 8000a7c:	08000af9 	.word	0x08000af9
 8000a80:	08000af9 	.word	0x08000af9
 8000a84:	08000af9 	.word	0x08000af9
 8000a88:	08000af9 	.word	0x08000af9
 8000a8c:	08000af9 	.word	0x08000af9
 8000a90:	08000af9 	.word	0x08000af9
 8000a94:	08000af9 	.word	0x08000af9
 8000a98:	08000ad1 	.word	0x08000ad1
 8000a9c:	08000af9 	.word	0x08000af9
 8000aa0:	08000ab1 	.word	0x08000ab1
 8000aa4:	08000af9 	.word	0x08000af9
 8000aa8:	08000af9 	.word	0x08000af9
 8000aac:	08000ab1 	.word	0x08000ab1
                // if we receive a carriage return, newline, or null terminator, then we have received a complete command
                case '\r':
                case '\n':
                case '\0':
                {
                  strcpy((char*)safe_buff, (char*)rx_buff);
 8000ab0:	4929      	ldr	r1, [pc, #164]	; (8000b58 <HAL_UART_RxCpltCallback+0x104>)
 8000ab2:	482a      	ldr	r0, [pc, #168]	; (8000b5c <HAL_UART_RxCpltCallback+0x108>)
 8000ab4:	f003 fa7e 	bl	8003fb4 <strcpy>

                    memset(rx_buff, 0, sizeof(rx_buff));
 8000ab8:	2264      	movs	r2, #100	; 0x64
 8000aba:	2100      	movs	r1, #0
 8000abc:	4826      	ldr	r0, [pc, #152]	; (8000b58 <HAL_UART_RxCpltCallback+0x104>)
 8000abe:	f003 fa3d 	bl	8003f3c <memset>
                    rx_count = 0;
 8000ac2:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <HAL_UART_RxCpltCallback+0x10c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]

                    rx_complete = 1;
 8000ac8:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <HAL_UART_RxCpltCallback+0x110>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	601a      	str	r2, [r3, #0]

                    break;
 8000ace:	e033      	b.n	8000b38 <HAL_UART_RxCpltCallback+0xe4>
                 */
                // if we have received a backspace character, then delete the last received character
                case '\b':
                {
                    // set current buffer position to 0; if we are not already at index 0 then move back one index and set that value to 0 as well
                    if (rx_count)
 8000ad0:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <HAL_UART_RxCpltCallback+0x10c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d009      	beq.n	8000aec <HAL_UART_RxCpltCallback+0x98>
                    {
                        rx_buff[rx_count] = 0;
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <HAL_UART_RxCpltCallback+0x10c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a1e      	ldr	r2, [pc, #120]	; (8000b58 <HAL_UART_RxCpltCallback+0x104>)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	54d1      	strb	r1, [r2, r3]
                        rx_count --;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <HAL_UART_RxCpltCallback+0x10c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	; (8000b60 <HAL_UART_RxCpltCallback+0x10c>)
 8000aea:	6013      	str	r3, [r2, #0]
                    }
                    rx_buff[rx_count] = 0;
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <HAL_UART_RxCpltCallback+0x10c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a19      	ldr	r2, [pc, #100]	; (8000b58 <HAL_UART_RxCpltCallback+0x104>)
 8000af2:	2100      	movs	r1, #0
 8000af4:	54d1      	strb	r1, [r2, r3]

                    break;
 8000af6:	e01f      	b.n	8000b38 <HAL_UART_RxCpltCallback+0xe4>
                }

                // we have received some other character, store it to the array
                default:
                {
                    rx_buff[rx_count] = *rx_char;
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <HAL_UART_RxCpltCallback+0x10c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a15      	ldr	r2, [pc, #84]	; (8000b54 <HAL_UART_RxCpltCallback+0x100>)
 8000afe:	7811      	ldrb	r1, [r2, #0]
 8000b00:	4a15      	ldr	r2, [pc, #84]	; (8000b58 <HAL_UART_RxCpltCallback+0x104>)
 8000b02:	54d1      	strb	r1, [r2, r3]
                    rx_count ++;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <HAL_UART_RxCpltCallback+0x10c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	4a15      	ldr	r2, [pc, #84]	; (8000b60 <HAL_UART_RxCpltCallback+0x10c>)
 8000b0c:	6013      	str	r3, [r2, #0]
                    uint8_t show_input[50];
                    strcpy ( (char*)show_input, (char*)rx_char);
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4910      	ldr	r1, [pc, #64]	; (8000b54 <HAL_UART_RxCpltCallback+0x100>)
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 fa4d 	bl	8003fb4 <strcpy>
                    HAL_UART_Transmit(&huart2, show_input, strlen((char*)show_input),1000);
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fb60 	bl	80001e4 <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	f107 010c 	add.w	r1, r7, #12
 8000b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b30:	4807      	ldr	r0, [pc, #28]	; (8000b50 <HAL_UART_RxCpltCallback+0xfc>)
 8000b32:	f002 f925 	bl	8002d80 <HAL_UART_Transmit>
                    break;
 8000b36:	bf00      	nop
                }
            }

            *rx_char = 0; //In the switch statement, one of the cases is a 0, so I assume this is necessary.
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_UART_RxCpltCallback+0x100>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
            /*
             * Leave the following line in the function. If I remove it, the user will only
             * be able to call a single interrupt, thus only be able to type a single
             * character into putty.
             */
            HAL_UART_Receive_IT(&huart2, rx_char, 1);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4904      	ldr	r1, [pc, #16]	; (8000b54 <HAL_UART_RxCpltCallback+0x100>)
 8000b42:	4803      	ldr	r0, [pc, #12]	; (8000b50 <HAL_UART_RxCpltCallback+0xfc>)
 8000b44:	f002 f9b0 	bl	8002ea8 <HAL_UART_Receive_IT>
        }
}
 8000b48:	bf00      	nop
 8000b4a:	3740      	adds	r7, #64	; 0x40
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000128 	.word	0x20000128
 8000b54:	20000110 	.word	0x20000110
 8000b58:	200000ac 	.word	0x200000ac
 8000b5c:	2000008c 	.word	0x2000008c
 8000b60:	20000118 	.word	0x20000118
 8000b64:	20000114 	.word	0x20000114

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6613      	str	r3, [r2, #96]	; 0x60
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_MspInit+0x44>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0ac      	sub	sp, #176	; 0xb0
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2288      	movs	r2, #136	; 0x88
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f003 f9ad 	bl	8003f3c <memset>
  if(huart->Instance==USART2)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a25      	ldr	r2, [pc, #148]	; (8000c7c <HAL_UART_MspInit+0xc0>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d143      	bne.n	8000c74 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bec:	2302      	movs	r3, #2
 8000bee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 fbb7 	bl	800236c <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c04:	f7ff ffb0 	bl	8000b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <HAL_UART_MspInit+0xc4>)
 8000c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0c:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <HAL_UART_MspInit+0xc4>)
 8000c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c12:	6593      	str	r3, [r2, #88]	; 0x58
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xc4>)
 8000c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xc4>)
 8000c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c24:	4a16      	ldr	r2, [pc, #88]	; (8000c80 <HAL_UART_MspInit+0xc4>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xc4>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c38:	230c      	movs	r3, #12
 8000c3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c50:	2307      	movs	r3, #7
 8000c52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c60:	f000 fb72 	bl	8001348 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2026      	movs	r0, #38	; 0x26
 8000c6a:	f000 fab8 	bl	80011de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c6e:	2026      	movs	r0, #38	; 0x26
 8000c70:	f000 fad1 	bl	8001216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c74:	bf00      	nop
 8000c76:	37b0      	adds	r7, #176	; 0xb0
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40004400 	.word	0x40004400
 8000c80:	40021000 	.word	0x40021000

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <NMI_Handler+0x4>

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler+0x4>

08000c96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f000 f98a 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <USART2_IRQHandler+0x10>)
 8000cde:	f002 f927 	bl	8002f30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000128 	.word	0x20000128

08000cec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
	return 1;
 8000cf0:	2301      	movs	r3, #1
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <_kill>:

int _kill(int pid, int sig)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d06:	f003 f8ef 	bl	8003ee8 <__errno>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2216      	movs	r2, #22
 8000d0e:	601a      	str	r2, [r3, #0]
	return -1;
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <_exit>:

void _exit (int status)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ffe7 	bl	8000cfc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d2e:	e7fe      	b.n	8000d2e <_exit+0x12>

08000d30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	e00a      	b.n	8000d58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d42:	f3af 8000 	nop.w
 8000d46:	4601      	mov	r1, r0
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	60ba      	str	r2, [r7, #8]
 8000d4e:	b2ca      	uxtb	r2, r1
 8000d50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3301      	adds	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	dbf0      	blt.n	8000d42 <_read+0x12>
	}

return len;
 8000d60:	687b      	ldr	r3, [r7, #4]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	e009      	b.n	8000d90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	60ba      	str	r2, [r7, #8]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	dbf1      	blt.n	8000d7c <_write+0x12>
	}
	return len;
 8000d98:	687b      	ldr	r3, [r7, #4]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <_close>:

int _close(int file)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
	return -1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dca:	605a      	str	r2, [r3, #4]
	return 0;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <_isatty>:

int _isatty(int file)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
	return 1;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
	return 0;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f003 f854 	bl	8003ee8 <__errno>
 8000e40:	4603      	mov	r3, r0
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <_sbrk+0x64>)
 8000e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20018000 	.word	0x20018000
 8000e6c:	00000400 	.word	0x00000400
 8000e70:	2000011c 	.word	0x2000011c
 8000e74:	200001c0 	.word	0x200001c0

08000e78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <SystemInit+0x5c>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e82:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <SystemInit+0x5c>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <SystemInit+0x60>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a11      	ldr	r2, [pc, #68]	; (8000ed8 <SystemInit+0x60>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <SystemInit+0x60>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <SystemInit+0x60>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <SystemInit+0x60>)
 8000ea4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ea8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000eac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <SystemInit+0x60>)
 8000eb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eb4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <SystemInit+0x60>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <SystemInit+0x60>)
 8000ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <SystemInit+0x60>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00
 8000ed8:	40021000 	.word	0x40021000

08000edc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee0:	f7ff ffca 	bl	8000e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ee4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ee6:	e003      	b.n	8000ef0 <LoopCopyDataInit>

08000ee8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000eea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000eec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000eee:	3104      	adds	r1, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ef0:	480a      	ldr	r0, [pc, #40]	; (8000f1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ef4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ef6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ef8:	d3f6      	bcc.n	8000ee8 <CopyDataInit>
	ldr	r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000efc:	e002      	b.n	8000f04 <LoopFillZerobss>

08000efe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000efe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f00:	f842 3b04 	str.w	r3, [r2], #4

08000f04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <LoopForever+0x16>)
	cmp	r2, r3
 8000f06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f08:	d3f9      	bcc.n	8000efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f002 fff3 	bl	8003ef4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f0e:	f7ff fb43 	bl	8000598 <main>

08000f12 <LoopForever>:

LoopForever:
    b LoopForever
 8000f12:	e7fe      	b.n	8000f12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f14:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000f18:	080055f8 	.word	0x080055f8
	ldr	r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f20:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000f24:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000f28:	200001c0 	.word	0x200001c0

08000f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC1_2_IRQHandler>
	...

08000f30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_Init+0x3c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <HAL_Init+0x3c>)
 8000f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f46:	2003      	movs	r0, #3
 8000f48:	f000 f93e 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f000 f80f 	bl	8000f70 <HAL_InitTick>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	e001      	b.n	8000f62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f5e:	f7ff fe09 	bl	8000b74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f62:	79fb      	ldrb	r3, [r7, #7]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40022000 	.word	0x40022000

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_InitTick+0x6c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d023      	beq.n	8000fcc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_InitTick+0x70>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_InitTick+0x6c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f949 	bl	8001232 <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10f      	bne.n	8000fc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d809      	bhi.n	8000fc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fac:	2200      	movs	r2, #0
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f000 f913 	bl	80011de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_InitTick+0x74>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e007      	b.n	8000fd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e004      	b.n	8000fd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e001      	b.n	8000fd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008
 800100c:	200001ac 	.word	0x200001ac

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200001ac 	.word	0x200001ac

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4907      	ldr	r1, [pc, #28]	; (80010c4 <__NVIC_EnableIRQ+0x38>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001194:	d301      	bcc.n	800119a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2301      	movs	r3, #1
 8001198:	e00f      	b.n	80011ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <SysTick_Config+0x40>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a2:	210f      	movs	r1, #15
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f7ff ff8e 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <SysTick_Config+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <SysTick_Config+0x40>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff29 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011f0:	f7ff ff3e 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ff8e 	bl	800111c <NVIC_EncodePriority>
 8001200:	4602      	mov	r2, r0
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff5d 	bl	80010c8 <__NVIC_SetPriority>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff31 	bl	800108c <__NVIC_EnableIRQ>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffa2 	bl	8001184 <SysTick_Config>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800124a:	b480      	push	{r7}
 800124c:	b085      	sub	sp, #20
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d008      	beq.n	8001274 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2204      	movs	r2, #4
 8001266:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e022      	b.n	80012ba <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 020e 	bic.w	r2, r2, #14
 8001282:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0201 	bic.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001298:	f003 021c 	and.w	r2, r3, #28
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	2101      	movs	r1, #1
 80012a2:	fa01 f202 	lsl.w	r2, r1, r2
 80012a6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d005      	beq.n	80012ea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2204      	movs	r2, #4
 80012e2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e029      	b.n	800133e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 020e 	bic.w	r2, r2, #14
 80012f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0201 	bic.w	r2, r2, #1
 8001308:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f003 021c 	and.w	r2, r3, #28
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	2101      	movs	r1, #1
 8001318:	fa01 f202 	lsl.w	r2, r1, r2
 800131c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	4798      	blx	r3
    }
  }
  return status;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	b480      	push	{r7}
 800134a:	b087      	sub	sp, #28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001356:	e17f      	b.n	8001658 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2101      	movs	r1, #1
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	4013      	ands	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 8171 	beq.w	8001652 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d00b      	beq.n	8001390 <HAL_GPIO_Init+0x48>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d007      	beq.n	8001390 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001384:	2b11      	cmp	r3, #17
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b12      	cmp	r3, #18
 800138e:	d130      	bne.n	80013f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013c6:	2201      	movs	r2, #1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	f003 0201 	and.w	r2, r3, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d118      	bne.n	8001430 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001404:	2201      	movs	r2, #1
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	08db      	lsrs	r3, r3, #3
 800141a:	f003 0201 	and.w	r2, r3, #1
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x128>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b12      	cmp	r3, #18
 800146e:	d123      	bne.n	80014b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	08da      	lsrs	r2, r3, #3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3208      	adds	r2, #8
 8001478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	220f      	movs	r2, #15
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	08da      	lsrs	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3208      	adds	r2, #8
 80014b2:	6939      	ldr	r1, [r7, #16]
 80014b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0203 	and.w	r2, r3, #3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 80ac 	beq.w	8001652 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	4b5f      	ldr	r3, [pc, #380]	; (8001678 <HAL_GPIO_Init+0x330>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fe:	4a5e      	ldr	r2, [pc, #376]	; (8001678 <HAL_GPIO_Init+0x330>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6613      	str	r3, [r2, #96]	; 0x60
 8001506:	4b5c      	ldr	r3, [pc, #368]	; (8001678 <HAL_GPIO_Init+0x330>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001512:	4a5a      	ldr	r2, [pc, #360]	; (800167c <HAL_GPIO_Init+0x334>)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800153c:	d025      	beq.n	800158a <HAL_GPIO_Init+0x242>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4f      	ldr	r2, [pc, #316]	; (8001680 <HAL_GPIO_Init+0x338>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d01f      	beq.n	8001586 <HAL_GPIO_Init+0x23e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4e      	ldr	r2, [pc, #312]	; (8001684 <HAL_GPIO_Init+0x33c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d019      	beq.n	8001582 <HAL_GPIO_Init+0x23a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4d      	ldr	r2, [pc, #308]	; (8001688 <HAL_GPIO_Init+0x340>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0x236>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4c      	ldr	r2, [pc, #304]	; (800168c <HAL_GPIO_Init+0x344>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00d      	beq.n	800157a <HAL_GPIO_Init+0x232>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4b      	ldr	r2, [pc, #300]	; (8001690 <HAL_GPIO_Init+0x348>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x22e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4a      	ldr	r2, [pc, #296]	; (8001694 <HAL_GPIO_Init+0x34c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_GPIO_Init+0x22a>
 800156e:	2306      	movs	r3, #6
 8001570:	e00c      	b.n	800158c <HAL_GPIO_Init+0x244>
 8001572:	2307      	movs	r3, #7
 8001574:	e00a      	b.n	800158c <HAL_GPIO_Init+0x244>
 8001576:	2305      	movs	r3, #5
 8001578:	e008      	b.n	800158c <HAL_GPIO_Init+0x244>
 800157a:	2304      	movs	r3, #4
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x244>
 800157e:	2303      	movs	r3, #3
 8001580:	e004      	b.n	800158c <HAL_GPIO_Init+0x244>
 8001582:	2302      	movs	r3, #2
 8001584:	e002      	b.n	800158c <HAL_GPIO_Init+0x244>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_GPIO_Init+0x244>
 800158a:	2300      	movs	r3, #0
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	f002 0203 	and.w	r2, r2, #3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4093      	lsls	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800159c:	4937      	ldr	r1, [pc, #220]	; (800167c <HAL_GPIO_Init+0x334>)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015aa:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <HAL_GPIO_Init+0x350>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015ce:	4a32      	ldr	r2, [pc, #200]	; (8001698 <HAL_GPIO_Init+0x350>)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80015d4:	4b30      	ldr	r3, [pc, #192]	; (8001698 <HAL_GPIO_Init+0x350>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015f8:	4a27      	ldr	r2, [pc, #156]	; (8001698 <HAL_GPIO_Init+0x350>)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <HAL_GPIO_Init+0x350>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001622:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_GPIO_Init+0x350>)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_GPIO_Init+0x350>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800164c:	4a12      	ldr	r2, [pc, #72]	; (8001698 <HAL_GPIO_Init+0x350>)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa22 f303 	lsr.w	r3, r2, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	f47f ae78 	bne.w	8001358 <HAL_GPIO_Init+0x10>
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000
 8001680:	48000400 	.word	0x48000400
 8001684:	48000800 	.word	0x48000800
 8001688:	48000c00 	.word	0x48000c00
 800168c:	48001000 	.word	0x48001000
 8001690:	48001400 	.word	0x48001400
 8001694:	48001800 	.word	0x48001800
 8001698:	40010400 	.word	0x40010400

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016b8:	e002      	b.n	80016c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ba:	887a      	ldrh	r2, [r7, #2]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40007000 	.word	0x40007000

080016e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f6:	d130      	bne.n	800175a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f8:	4b23      	ldr	r3, [pc, #140]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001704:	d038      	beq.n	8001778 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001714:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2232      	movs	r2, #50	; 0x32
 800171c:	fb02 f303 	mul.w	r3, r2, r3
 8001720:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	0c9b      	lsrs	r3, r3, #18
 8001728:	3301      	adds	r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800172c:	e002      	b.n	8001734 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3b01      	subs	r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001740:	d102      	bne.n	8001748 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f2      	bne.n	800172e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001754:	d110      	bne.n	8001778 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e00f      	b.n	800177a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001766:	d007      	beq.n	8001778 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001770:	4a05      	ldr	r2, [pc, #20]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001776:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40007000 	.word	0x40007000
 800178c:	20000000 	.word	0x20000000
 8001790:	431bde83 	.word	0x431bde83

08001794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e3d4      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017a6:	4ba1      	ldr	r3, [pc, #644]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017b0:	4b9e      	ldr	r3, [pc, #632]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 80e4 	beq.w	8001990 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d007      	beq.n	80017de <HAL_RCC_OscConfig+0x4a>
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b0c      	cmp	r3, #12
 80017d2:	f040 808b 	bne.w	80018ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	f040 8087 	bne.w	80018ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017de:	4b93      	ldr	r3, [pc, #588]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d005      	beq.n	80017f6 <HAL_RCC_OscConfig+0x62>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e3ac      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1a      	ldr	r2, [r3, #32]
 80017fa:	4b8c      	ldr	r3, [pc, #560]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d004      	beq.n	8001810 <HAL_RCC_OscConfig+0x7c>
 8001806:	4b89      	ldr	r3, [pc, #548]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800180e:	e005      	b.n	800181c <HAL_RCC_OscConfig+0x88>
 8001810:	4b86      	ldr	r3, [pc, #536]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800181c:	4293      	cmp	r3, r2
 800181e:	d223      	bcs.n	8001868 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4618      	mov	r0, r3
 8001826:	f000 fd41 	bl	80022ac <RCC_SetFlashLatencyFromMSIRange>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e38d      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001834:	4b7d      	ldr	r3, [pc, #500]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a7c      	ldr	r2, [pc, #496]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 800183a:	f043 0308 	orr.w	r3, r3, #8
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4b7a      	ldr	r3, [pc, #488]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	4977      	ldr	r1, [pc, #476]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001852:	4b76      	ldr	r3, [pc, #472]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	4972      	ldr	r1, [pc, #456]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001862:	4313      	orrs	r3, r2
 8001864:	604b      	str	r3, [r1, #4]
 8001866:	e025      	b.n	80018b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001868:	4b70      	ldr	r3, [pc, #448]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a6f      	ldr	r2, [pc, #444]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 800186e:	f043 0308 	orr.w	r3, r3, #8
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b6d      	ldr	r3, [pc, #436]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	496a      	ldr	r1, [pc, #424]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001886:	4b69      	ldr	r3, [pc, #420]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	4965      	ldr	r1, [pc, #404]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d109      	bne.n	80018b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fd01 	bl	80022ac <RCC_SetFlashLatencyFromMSIRange>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e34d      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018b4:	f000 fc36 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 80018b8:	4602      	mov	r2, r0
 80018ba:	4b5c      	ldr	r3, [pc, #368]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	495a      	ldr	r1, [pc, #360]	; (8001a30 <HAL_RCC_OscConfig+0x29c>)
 80018c6:	5ccb      	ldrb	r3, [r1, r3]
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
 80018d0:	4a58      	ldr	r2, [pc, #352]	; (8001a34 <HAL_RCC_OscConfig+0x2a0>)
 80018d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018d4:	4b58      	ldr	r3, [pc, #352]	; (8001a38 <HAL_RCC_OscConfig+0x2a4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fb49 	bl	8000f70 <HAL_InitTick>
 80018de:	4603      	mov	r3, r0
 80018e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d052      	beq.n	800198e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	e331      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d032      	beq.n	800195a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018f4:	4b4d      	ldr	r3, [pc, #308]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a4c      	ldr	r2, [pc, #304]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001900:	f7ff fb86 	bl	8001010 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001908:	f7ff fb82 	bl	8001010 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e31a      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800191a:	4b44      	ldr	r3, [pc, #272]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001926:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a40      	ldr	r2, [pc, #256]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 800192c:	f043 0308 	orr.w	r3, r3, #8
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	4b3e      	ldr	r3, [pc, #248]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	493b      	ldr	r1, [pc, #236]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001940:	4313      	orrs	r3, r2
 8001942:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001944:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	4936      	ldr	r1, [pc, #216]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]
 8001958:	e01a      	b.n	8001990 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800195a:	4b34      	ldr	r3, [pc, #208]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a33      	ldr	r2, [pc, #204]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001960:	f023 0301 	bic.w	r3, r3, #1
 8001964:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001966:	f7ff fb53 	bl	8001010 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800196e:	f7ff fb4f 	bl	8001010 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e2e7      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001980:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f0      	bne.n	800196e <HAL_RCC_OscConfig+0x1da>
 800198c:	e000      	b.n	8001990 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800198e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d074      	beq.n	8001a86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d005      	beq.n	80019ae <HAL_RCC_OscConfig+0x21a>
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	2b0c      	cmp	r3, #12
 80019a6:	d10e      	bne.n	80019c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d10b      	bne.n	80019c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ae:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d064      	beq.n	8001a84 <HAL_RCC_OscConfig+0x2f0>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d160      	bne.n	8001a84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e2c4      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x24a>
 80019d0:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 80019d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e01d      	b.n	8001a1a <HAL_RCC_OscConfig+0x286>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e6:	d10c      	bne.n	8001a02 <HAL_RCC_OscConfig+0x26e>
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 80019ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0c      	ldr	r2, [pc, #48]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 80019fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	e00b      	b.n	8001a1a <HAL_RCC_OscConfig+0x286>
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d01c      	beq.n	8001a5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff faf5 	bl	8001010 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a28:	e011      	b.n	8001a4e <HAL_RCC_OscConfig+0x2ba>
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	08005454 	.word	0x08005454
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff fae8 	bl	8001010 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e280      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a4e:	4baf      	ldr	r3, [pc, #700]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x2a8>
 8001a5a:	e014      	b.n	8001a86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fad8 	bl	8001010 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff fad4 	bl	8001010 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e26c      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a76:	4ba5      	ldr	r3, [pc, #660]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x2d0>
 8001a82:	e000      	b.n	8001a86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d060      	beq.n	8001b54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x310>
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	2b0c      	cmp	r3, #12
 8001a9c:	d119      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d116      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa4:	4b99      	ldr	r3, [pc, #612]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_OscConfig+0x328>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e249      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abc:	4b93      	ldr	r3, [pc, #588]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	061b      	lsls	r3, r3, #24
 8001aca:	4990      	ldr	r1, [pc, #576]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad0:	e040      	b.n	8001b54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d023      	beq.n	8001b22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ada:	4b8c      	ldr	r3, [pc, #560]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a8b      	ldr	r2, [pc, #556]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fa93 	bl	8001010 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aee:	f7ff fa8f 	bl	8001010 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e227      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b00:	4b82      	ldr	r3, [pc, #520]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0c:	4b7f      	ldr	r3, [pc, #508]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	061b      	lsls	r3, r3, #24
 8001b1a:	497c      	ldr	r1, [pc, #496]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
 8001b20:	e018      	b.n	8001b54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b22:	4b7a      	ldr	r3, [pc, #488]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a79      	ldr	r2, [pc, #484]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2e:	f7ff fa6f 	bl	8001010 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b36:	f7ff fa6b 	bl	8001010 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e203      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b48:	4b70      	ldr	r3, [pc, #448]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f0      	bne.n	8001b36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d03c      	beq.n	8001bda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d01c      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b68:	4b68      	ldr	r3, [pc, #416]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b6e:	4a67      	ldr	r2, [pc, #412]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b78:	f7ff fa4a 	bl	8001010 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b80:	f7ff fa46 	bl	8001010 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e1de      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b92:	4b5e      	ldr	r3, [pc, #376]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0ef      	beq.n	8001b80 <HAL_RCC_OscConfig+0x3ec>
 8001ba0:	e01b      	b.n	8001bda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba2:	4b5a      	ldr	r3, [pc, #360]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba8:	4a58      	ldr	r2, [pc, #352]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb2:	f7ff fa2d 	bl	8001010 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bba:	f7ff fa29 	bl	8001010 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e1c1      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bcc:	4b4f      	ldr	r3, [pc, #316]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1ef      	bne.n	8001bba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80a6 	beq.w	8001d34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be8:	2300      	movs	r3, #0
 8001bea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bec:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10d      	bne.n	8001c14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf8:	4b44      	ldr	r3, [pc, #272]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfc:	4a43      	ldr	r2, [pc, #268]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c02:	6593      	str	r3, [r2, #88]	; 0x58
 8001c04:	4b41      	ldr	r3, [pc, #260]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c10:	2301      	movs	r3, #1
 8001c12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c14:	4b3e      	ldr	r3, [pc, #248]	; (8001d10 <HAL_RCC_OscConfig+0x57c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d118      	bne.n	8001c52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c20:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <HAL_RCC_OscConfig+0x57c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a3a      	ldr	r2, [pc, #232]	; (8001d10 <HAL_RCC_OscConfig+0x57c>)
 8001c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2c:	f7ff f9f0 	bl	8001010 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c34:	f7ff f9ec 	bl	8001010 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e184      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c46:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <HAL_RCC_OscConfig+0x57c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d108      	bne.n	8001c6c <HAL_RCC_OscConfig+0x4d8>
 8001c5a:	4b2c      	ldr	r3, [pc, #176]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c60:	4a2a      	ldr	r2, [pc, #168]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c6a:	e024      	b.n	8001cb6 <HAL_RCC_OscConfig+0x522>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	d110      	bne.n	8001c96 <HAL_RCC_OscConfig+0x502>
 8001c74:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7a:	4a24      	ldr	r2, [pc, #144]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c84:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8a:	4a20      	ldr	r2, [pc, #128]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c94:	e00f      	b.n	8001cb6 <HAL_RCC_OscConfig+0x522>
 8001c96:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001c9e:	f023 0301 	bic.w	r3, r3, #1
 8001ca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cac:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001cae:	f023 0304 	bic.w	r3, r3, #4
 8001cb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d016      	beq.n	8001cec <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7ff f9a7 	bl	8001010 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7ff f9a3 	bl	8001010 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e139      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_RCC_OscConfig+0x578>)
 8001cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0ed      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x532>
 8001cea:	e01a      	b.n	8001d22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cec:	f7ff f990 	bl	8001010 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cf2:	e00f      	b.n	8001d14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf4:	f7ff f98c 	bl	8001010 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d906      	bls.n	8001d14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e122      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d14:	4b90      	ldr	r3, [pc, #576]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1e8      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d22:	7ffb      	ldrb	r3, [r7, #31]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d28:	4b8b      	ldr	r3, [pc, #556]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	4a8a      	ldr	r2, [pc, #552]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d32:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 8108 	beq.w	8001f4e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	f040 80d0 	bne.w	8001ee8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d48:	4b83      	ldr	r3, [pc, #524]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 0203 	and.w	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d130      	bne.n	8001dbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	3b01      	subs	r3, #1
 8001d68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d127      	bne.n	8001dbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d11f      	bne.n	8001dbe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d88:	2a07      	cmp	r2, #7
 8001d8a:	bf14      	ite	ne
 8001d8c:	2201      	movne	r2, #1
 8001d8e:	2200      	moveq	r2, #0
 8001d90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d113      	bne.n	8001dbe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	085b      	lsrs	r3, r3, #1
 8001da2:	3b01      	subs	r3, #1
 8001da4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d109      	bne.n	8001dbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	085b      	lsrs	r3, r3, #1
 8001db6:	3b01      	subs	r3, #1
 8001db8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d06e      	beq.n	8001e9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2b0c      	cmp	r3, #12
 8001dc2:	d069      	beq.n	8001e98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dc4:	4b64      	ldr	r3, [pc, #400]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dd0:	4b61      	ldr	r3, [pc, #388]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0b7      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001de0:	4b5d      	ldr	r3, [pc, #372]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a5c      	ldr	r2, [pc, #368]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dec:	f7ff f910 	bl	8001010 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df4:	f7ff f90c 	bl	8001010 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e0a4      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e06:	4b54      	ldr	r3, [pc, #336]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e12:	4b51      	ldr	r3, [pc, #324]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	4b51      	ldr	r3, [pc, #324]	; (8001f5c <HAL_RCC_OscConfig+0x7c8>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e22:	3a01      	subs	r2, #1
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	4311      	orrs	r1, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e2c:	0212      	lsls	r2, r2, #8
 8001e2e:	4311      	orrs	r1, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e34:	0852      	lsrs	r2, r2, #1
 8001e36:	3a01      	subs	r2, #1
 8001e38:	0552      	lsls	r2, r2, #21
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e40:	0852      	lsrs	r2, r2, #1
 8001e42:	3a01      	subs	r2, #1
 8001e44:	0652      	lsls	r2, r2, #25
 8001e46:	4311      	orrs	r1, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e4c:	0912      	lsrs	r2, r2, #4
 8001e4e:	0452      	lsls	r2, r2, #17
 8001e50:	430a      	orrs	r2, r1
 8001e52:	4941      	ldr	r1, [pc, #260]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e58:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a3e      	ldr	r2, [pc, #248]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e64:	4b3c      	ldr	r3, [pc, #240]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4a3b      	ldr	r2, [pc, #236]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e70:	f7ff f8ce 	bl	8001010 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e78:	f7ff f8ca 	bl	8001010 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e062      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8a:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e96:	e05a      	b.n	8001f4e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e059      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9c:	4b2e      	ldr	r3, [pc, #184]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d152      	bne.n	8001f4e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a2a      	ldr	r2, [pc, #168]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eb4:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ebe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ec0:	f7ff f8a6 	bl	8001010 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec8:	f7ff f8a2 	bl	8001010 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e03a      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eda:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x734>
 8001ee6:	e032      	b.n	8001f4e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d02d      	beq.n	8001f4a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a19      	ldr	r2, [pc, #100]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001ef4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ef8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d105      	bne.n	8001f12 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001f0c:	f023 0303 	bic.w	r3, r3, #3
 8001f10:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	4a10      	ldr	r2, [pc, #64]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001f18:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f20:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7ff f875 	bl	8001010 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7ff f871 	bl	8001010 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e009      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_RCC_OscConfig+0x7c4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x796>
 8001f48:	e001      	b.n	8001f4e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	f99d808c 	.word	0xf99d808c

08001f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0c8      	b.n	8002106 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f74:	4b66      	ldr	r3, [pc, #408]	; (8002110 <HAL_RCC_ClockConfig+0x1b0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d910      	bls.n	8001fa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b63      	ldr	r3, [pc, #396]	; (8002110 <HAL_RCC_ClockConfig+0x1b0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 0207 	bic.w	r2, r3, #7
 8001f8a:	4961      	ldr	r1, [pc, #388]	; (8002110 <HAL_RCC_ClockConfig+0x1b0>)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	4b5f      	ldr	r3, [pc, #380]	; (8002110 <HAL_RCC_ClockConfig+0x1b0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0b0      	b.n	8002106 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d04c      	beq.n	800204a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb8:	4b56      	ldr	r3, [pc, #344]	; (8002114 <HAL_RCC_ClockConfig+0x1b4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d121      	bne.n	8002008 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e09e      	b.n	8002106 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d107      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd0:	4b50      	ldr	r3, [pc, #320]	; (8002114 <HAL_RCC_ClockConfig+0x1b4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d115      	bne.n	8002008 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e092      	b.n	8002106 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d107      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fe8:	4b4a      	ldr	r3, [pc, #296]	; (8002114 <HAL_RCC_ClockConfig+0x1b4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d109      	bne.n	8002008 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e086      	b.n	8002106 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff8:	4b46      	ldr	r3, [pc, #280]	; (8002114 <HAL_RCC_ClockConfig+0x1b4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e07e      	b.n	8002106 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002008:	4b42      	ldr	r3, [pc, #264]	; (8002114 <HAL_RCC_ClockConfig+0x1b4>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 0203 	bic.w	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	493f      	ldr	r1, [pc, #252]	; (8002114 <HAL_RCC_ClockConfig+0x1b4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800201a:	f7fe fff9 	bl	8001010 <HAL_GetTick>
 800201e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002020:	e00a      	b.n	8002038 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002022:	f7fe fff5 	bl	8001010 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e066      	b.n	8002106 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002038:	4b36      	ldr	r3, [pc, #216]	; (8002114 <HAL_RCC_ClockConfig+0x1b4>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 020c 	and.w	r2, r3, #12
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	429a      	cmp	r2, r3
 8002048:	d1eb      	bne.n	8002022 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d008      	beq.n	8002068 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002056:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <HAL_RCC_ClockConfig+0x1b4>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	492c      	ldr	r1, [pc, #176]	; (8002114 <HAL_RCC_ClockConfig+0x1b4>)
 8002064:	4313      	orrs	r3, r2
 8002066:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002068:	4b29      	ldr	r3, [pc, #164]	; (8002110 <HAL_RCC_ClockConfig+0x1b0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d210      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b26      	ldr	r3, [pc, #152]	; (8002110 <HAL_RCC_ClockConfig+0x1b0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 0207 	bic.w	r2, r3, #7
 800207e:	4924      	ldr	r1, [pc, #144]	; (8002110 <HAL_RCC_ClockConfig+0x1b0>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <HAL_RCC_ClockConfig+0x1b0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e036      	b.n	8002106 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_RCC_ClockConfig+0x1b4>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4918      	ldr	r1, [pc, #96]	; (8002114 <HAL_RCC_ClockConfig+0x1b4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_RCC_ClockConfig+0x1b4>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4910      	ldr	r1, [pc, #64]	; (8002114 <HAL_RCC_ClockConfig+0x1b4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020d6:	f000 f825 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 80020da:	4602      	mov	r2, r0
 80020dc:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <HAL_RCC_ClockConfig+0x1b4>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	490c      	ldr	r1, [pc, #48]	; (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	5ccb      	ldrb	r3, [r1, r3]
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	fa22 f303 	lsr.w	r3, r2, r3
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe ff38 	bl	8000f70 <HAL_InitTick>
 8002100:	4603      	mov	r3, r0
 8002102:	72fb      	strb	r3, [r7, #11]

  return status;
 8002104:	7afb      	ldrb	r3, [r7, #11]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40022000 	.word	0x40022000
 8002114:	40021000 	.word	0x40021000
 8002118:	08005454 	.word	0x08005454
 800211c:	20000000 	.word	0x20000000
 8002120:	20000004 	.word	0x20000004

08002124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002124:	b480      	push	{r7}
 8002126:	b089      	sub	sp, #36	; 0x24
 8002128:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002132:	4b3e      	ldr	r3, [pc, #248]	; (800222c <HAL_RCC_GetSysClockFreq+0x108>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800213c:	4b3b      	ldr	r3, [pc, #236]	; (800222c <HAL_RCC_GetSysClockFreq+0x108>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x34>
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2b0c      	cmp	r3, #12
 8002150:	d121      	bne.n	8002196 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d11e      	bne.n	8002196 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002158:	4b34      	ldr	r3, [pc, #208]	; (800222c <HAL_RCC_GetSysClockFreq+0x108>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d107      	bne.n	8002174 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002164:	4b31      	ldr	r3, [pc, #196]	; (800222c <HAL_RCC_GetSysClockFreq+0x108>)
 8002166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	e005      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002174:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_RCC_GetSysClockFreq+0x108>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002180:	4a2b      	ldr	r2, [pc, #172]	; (8002230 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002188:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10d      	bne.n	80021ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002194:	e00a      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b04      	cmp	r3, #4
 800219a:	d102      	bne.n	80021a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800219c:	4b25      	ldr	r3, [pc, #148]	; (8002234 <HAL_RCC_GetSysClockFreq+0x110>)
 800219e:	61bb      	str	r3, [r7, #24]
 80021a0:	e004      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021a8:	4b23      	ldr	r3, [pc, #140]	; (8002238 <HAL_RCC_GetSysClockFreq+0x114>)
 80021aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d134      	bne.n	800221c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021b2:	4b1e      	ldr	r3, [pc, #120]	; (800222c <HAL_RCC_GetSysClockFreq+0x108>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d003      	beq.n	80021ca <HAL_RCC_GetSysClockFreq+0xa6>
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d003      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0xac>
 80021c8:	e005      	b.n	80021d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021ca:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <HAL_RCC_GetSysClockFreq+0x110>)
 80021cc:	617b      	str	r3, [r7, #20]
      break;
 80021ce:	e005      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_RCC_GetSysClockFreq+0x114>)
 80021d2:	617b      	str	r3, [r7, #20]
      break;
 80021d4:	e002      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	617b      	str	r3, [r7, #20]
      break;
 80021da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021dc:	4b13      	ldr	r3, [pc, #76]	; (800222c <HAL_RCC_GetSysClockFreq+0x108>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	3301      	adds	r3, #1
 80021e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_RCC_GetSysClockFreq+0x108>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	fb02 f203 	mul.w	r2, r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_RCC_GetSysClockFreq+0x108>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	0e5b      	lsrs	r3, r3, #25
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	3301      	adds	r3, #1
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800221c:	69bb      	ldr	r3, [r7, #24]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	; 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000
 8002230:	0800546c 	.word	0x0800546c
 8002234:	00f42400 	.word	0x00f42400
 8002238:	007a1200 	.word	0x007a1200

0800223c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <HAL_RCC_GetHCLKFreq+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000000 	.word	0x20000000

08002254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002258:	f7ff fff0 	bl	800223c <HAL_RCC_GetHCLKFreq>
 800225c:	4602      	mov	r2, r0
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	0a1b      	lsrs	r3, r3, #8
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	4904      	ldr	r1, [pc, #16]	; (800227c <HAL_RCC_GetPCLK1Freq+0x28>)
 800226a:	5ccb      	ldrb	r3, [r1, r3]
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000
 800227c:	08005464 	.word	0x08005464

08002280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002284:	f7ff ffda 	bl	800223c <HAL_RCC_GetHCLKFreq>
 8002288:	4602      	mov	r2, r0
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	0adb      	lsrs	r3, r3, #11
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	4904      	ldr	r1, [pc, #16]	; (80022a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002296:	5ccb      	ldrb	r3, [r1, r3]
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	08005464 	.word	0x08005464

080022ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022b4:	2300      	movs	r3, #0
 80022b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022b8:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022c4:	f7ff fa02 	bl	80016cc <HAL_PWREx_GetVoltageRange>
 80022c8:	6178      	str	r0, [r7, #20]
 80022ca:	e014      	b.n	80022f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	4b25      	ldr	r3, [pc, #148]	; (8002364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d0:	4a24      	ldr	r2, [pc, #144]	; (8002364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d6:	6593      	str	r3, [r2, #88]	; 0x58
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022e4:	f7ff f9f2 	bl	80016cc <HAL_PWREx_GetVoltageRange>
 80022e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022ea:	4b1e      	ldr	r3, [pc, #120]	; (8002364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	4a1d      	ldr	r2, [pc, #116]	; (8002364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022fc:	d10b      	bne.n	8002316 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b80      	cmp	r3, #128	; 0x80
 8002302:	d919      	bls.n	8002338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2ba0      	cmp	r3, #160	; 0xa0
 8002308:	d902      	bls.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800230a:	2302      	movs	r3, #2
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	e013      	b.n	8002338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002310:	2301      	movs	r3, #1
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	e010      	b.n	8002338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b80      	cmp	r3, #128	; 0x80
 800231a:	d902      	bls.n	8002322 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800231c:	2303      	movs	r3, #3
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	e00a      	b.n	8002338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d102      	bne.n	800232e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002328:	2302      	movs	r3, #2
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	e004      	b.n	8002338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b70      	cmp	r3, #112	; 0x70
 8002332:	d101      	bne.n	8002338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002334:	2301      	movs	r3, #1
 8002336:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 0207 	bic.w	r2, r3, #7
 8002340:	4909      	ldr	r1, [pc, #36]	; (8002368 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	429a      	cmp	r2, r3
 8002354:	d001      	beq.n	800235a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	40022000 	.word	0x40022000

0800236c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002374:	2300      	movs	r3, #0
 8002376:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002378:	2300      	movs	r3, #0
 800237a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002384:	2b00      	cmp	r3, #0
 8002386:	d041      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800238c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002390:	d02a      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002392:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002396:	d824      	bhi.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002398:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800239c:	d008      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800239e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023a2:	d81e      	bhi.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ac:	d010      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023ae:	e018      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023b0:	4b86      	ldr	r3, [pc, #536]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a85      	ldr	r2, [pc, #532]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023bc:	e015      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 fabb 	bl	8002940 <RCCEx_PLLSAI1_Config>
 80023ca:	4603      	mov	r3, r0
 80023cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ce:	e00c      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3320      	adds	r3, #32
 80023d4:	2100      	movs	r1, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fba6 	bl	8002b28 <RCCEx_PLLSAI2_Config>
 80023dc:	4603      	mov	r3, r0
 80023de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023e0:	e003      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	74fb      	strb	r3, [r7, #19]
      break;
 80023e6:	e000      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023ea:	7cfb      	ldrb	r3, [r7, #19]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10b      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023f0:	4b76      	ldr	r3, [pc, #472]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023fe:	4973      	ldr	r1, [pc, #460]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002406:	e001      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002408:	7cfb      	ldrb	r3, [r7, #19]
 800240a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d041      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800241c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002420:	d02a      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002422:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002426:	d824      	bhi.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800242c:	d008      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800242e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002432:	d81e      	bhi.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800243c:	d010      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800243e:	e018      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002440:	4b62      	ldr	r3, [pc, #392]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a61      	ldr	r2, [pc, #388]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800244c:	e015      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3304      	adds	r3, #4
 8002452:	2100      	movs	r1, #0
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fa73 	bl	8002940 <RCCEx_PLLSAI1_Config>
 800245a:	4603      	mov	r3, r0
 800245c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800245e:	e00c      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3320      	adds	r3, #32
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fb5e 	bl	8002b28 <RCCEx_PLLSAI2_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002470:	e003      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	74fb      	strb	r3, [r7, #19]
      break;
 8002476:	e000      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800247a:	7cfb      	ldrb	r3, [r7, #19]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10b      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002480:	4b52      	ldr	r3, [pc, #328]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800248e:	494f      	ldr	r1, [pc, #316]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002496:	e001      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80a0 	beq.w	80025ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024ae:	4b47      	ldr	r3, [pc, #284]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024be:	2300      	movs	r3, #0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00d      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c4:	4b41      	ldr	r3, [pc, #260]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	4a40      	ldr	r2, [pc, #256]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ce:	6593      	str	r3, [r2, #88]	; 0x58
 80024d0:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024dc:	2301      	movs	r3, #1
 80024de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e0:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a3a      	ldr	r2, [pc, #232]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024ec:	f7fe fd90 	bl	8001010 <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024f2:	e009      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f4:	f7fe fd8c 	bl	8001010 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d902      	bls.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	74fb      	strb	r3, [r7, #19]
        break;
 8002506:	e005      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002508:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0ef      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d15c      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800251a:	4b2c      	ldr	r3, [pc, #176]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002524:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d01f      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	429a      	cmp	r2, r3
 8002536:	d019      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002538:	4b24      	ldr	r3, [pc, #144]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002542:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254a:	4a20      	ldr	r2, [pc, #128]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002554:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255a:	4a1c      	ldr	r2, [pc, #112]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002564:	4a19      	ldr	r2, [pc, #100]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d016      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7fe fd4b 	bl	8001010 <HAL_GetTick>
 800257a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257c:	e00b      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7fe fd47 	bl	8001010 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f241 3288 	movw	r2, #5000	; 0x1388
 800258c:	4293      	cmp	r3, r2
 800258e:	d902      	bls.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	74fb      	strb	r3, [r7, #19]
            break;
 8002594:	e006      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ec      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025a4:	7cfb      	ldrb	r3, [r7, #19]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ba:	4904      	ldr	r1, [pc, #16]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025c2:	e009      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	74bb      	strb	r3, [r7, #18]
 80025c8:	e006      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025ca:	bf00      	nop
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d4:	7cfb      	ldrb	r3, [r7, #19]
 80025d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d8:	7c7b      	ldrb	r3, [r7, #17]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d105      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025de:	4b9e      	ldr	r3, [pc, #632]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e2:	4a9d      	ldr	r2, [pc, #628]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025f6:	4b98      	ldr	r3, [pc, #608]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	f023 0203 	bic.w	r2, r3, #3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002604:	4994      	ldr	r1, [pc, #592]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002618:	4b8f      	ldr	r3, [pc, #572]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	f023 020c 	bic.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002626:	498c      	ldr	r1, [pc, #560]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800263a:	4b87      	ldr	r3, [pc, #540]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002640:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	4983      	ldr	r1, [pc, #524]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800265c:	4b7e      	ldr	r3, [pc, #504]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	497b      	ldr	r1, [pc, #492]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800267e:	4b76      	ldr	r3, [pc, #472]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800268c:	4972      	ldr	r1, [pc, #456]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00a      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026a0:	4b6d      	ldr	r3, [pc, #436]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ae:	496a      	ldr	r1, [pc, #424]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00a      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026c2:	4b65      	ldr	r3, [pc, #404]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d0:	4961      	ldr	r1, [pc, #388]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026e4:	4b5c      	ldr	r3, [pc, #368]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f2:	4959      	ldr	r1, [pc, #356]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002706:	4b54      	ldr	r3, [pc, #336]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002714:	4950      	ldr	r1, [pc, #320]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002728:	4b4b      	ldr	r3, [pc, #300]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	4948      	ldr	r1, [pc, #288]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800274a:	4b43      	ldr	r3, [pc, #268]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002750:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	493f      	ldr	r1, [pc, #252]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d028      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800276c:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800277a:	4937      	ldr	r1, [pc, #220]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800278a:	d106      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800278c:	4b32      	ldr	r3, [pc, #200]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a31      	ldr	r2, [pc, #196]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002796:	60d3      	str	r3, [r2, #12]
 8002798:	e011      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800279e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027a2:	d10c      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3304      	adds	r3, #4
 80027a8:	2101      	movs	r1, #1
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f8c8 	bl	8002940 <RCCEx_PLLSAI1_Config>
 80027b0:	4603      	mov	r3, r0
 80027b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d028      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027ca:	4b23      	ldr	r3, [pc, #140]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	491f      	ldr	r1, [pc, #124]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027e8:	d106      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ea:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	4a1a      	ldr	r2, [pc, #104]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027f4:	60d3      	str	r3, [r2, #12]
 80027f6:	e011      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002800:	d10c      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3304      	adds	r3, #4
 8002806:	2101      	movs	r1, #1
 8002808:	4618      	mov	r0, r3
 800280a:	f000 f899 	bl	8002940 <RCCEx_PLLSAI1_Config>
 800280e:	4603      	mov	r3, r0
 8002810:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d02b      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002836:	4908      	ldr	r1, [pc, #32]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002846:	d109      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4a02      	ldr	r2, [pc, #8]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002852:	60d3      	str	r3, [r2, #12]
 8002854:	e014      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002860:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002864:	d10c      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3304      	adds	r3, #4
 800286a:	2101      	movs	r1, #1
 800286c:	4618      	mov	r0, r3
 800286e:	f000 f867 	bl	8002940 <RCCEx_PLLSAI1_Config>
 8002872:	4603      	mov	r3, r0
 8002874:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002876:	7cfb      	ldrb	r3, [r7, #19]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800287c:	7cfb      	ldrb	r3, [r7, #19]
 800287e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d02f      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800288c:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800289a:	4928      	ldr	r1, [pc, #160]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028aa:	d10d      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3304      	adds	r3, #4
 80028b0:	2102      	movs	r1, #2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f844 	bl	8002940 <RCCEx_PLLSAI1_Config>
 80028b8:	4603      	mov	r3, r0
 80028ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d014      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028c2:	7cfb      	ldrb	r3, [r7, #19]
 80028c4:	74bb      	strb	r3, [r7, #18]
 80028c6:	e011      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d0:	d10c      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3320      	adds	r3, #32
 80028d6:	2102      	movs	r1, #2
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 f925 	bl	8002b28 <RCCEx_PLLSAI2_Config>
 80028de:	4603      	mov	r3, r0
 80028e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028e2:	7cfb      	ldrb	r3, [r7, #19]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028f8:	4b10      	ldr	r3, [pc, #64]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002906:	490d      	ldr	r1, [pc, #52]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002920:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800292a:	4904      	ldr	r1, [pc, #16]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002932:	7cbb      	ldrb	r3, [r7, #18]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000

08002940 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800294e:	4b75      	ldr	r3, [pc, #468]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d018      	beq.n	800298c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800295a:	4b72      	ldr	r3, [pc, #456]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 0203 	and.w	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d10d      	bne.n	8002986 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
       ||
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002972:	4b6c      	ldr	r3, [pc, #432]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
       ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d047      	beq.n	8002a16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
 800298a:	e044      	b.n	8002a16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d018      	beq.n	80029c6 <RCCEx_PLLSAI1_Config+0x86>
 8002994:	2b03      	cmp	r3, #3
 8002996:	d825      	bhi.n	80029e4 <RCCEx_PLLSAI1_Config+0xa4>
 8002998:	2b01      	cmp	r3, #1
 800299a:	d002      	beq.n	80029a2 <RCCEx_PLLSAI1_Config+0x62>
 800299c:	2b02      	cmp	r3, #2
 800299e:	d009      	beq.n	80029b4 <RCCEx_PLLSAI1_Config+0x74>
 80029a0:	e020      	b.n	80029e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029a2:	4b60      	ldr	r3, [pc, #384]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d11d      	bne.n	80029ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b2:	e01a      	b.n	80029ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029b4:	4b5b      	ldr	r3, [pc, #364]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d116      	bne.n	80029ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c4:	e013      	b.n	80029ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029c6:	4b57      	ldr	r3, [pc, #348]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10f      	bne.n	80029f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029d2:	4b54      	ldr	r3, [pc, #336]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029e2:	e006      	b.n	80029f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      break;
 80029e8:	e004      	b.n	80029f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ea:	bf00      	nop
 80029ec:	e002      	b.n	80029f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ee:	bf00      	nop
 80029f0:	e000      	b.n	80029f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10d      	bne.n	8002a16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029fa:	4b4a      	ldr	r3, [pc, #296]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6819      	ldr	r1, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	430b      	orrs	r3, r1
 8002a10:	4944      	ldr	r1, [pc, #272]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d17d      	bne.n	8002b18 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a1c:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a40      	ldr	r2, [pc, #256]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a28:	f7fe faf2 	bl	8001010 <HAL_GetTick>
 8002a2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a2e:	e009      	b.n	8002a44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a30:	f7fe faee 	bl	8001010 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d902      	bls.n	8002a44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	73fb      	strb	r3, [r7, #15]
        break;
 8002a42:	e005      	b.n	8002a50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a44:	4b37      	ldr	r3, [pc, #220]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1ef      	bne.n	8002a30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d160      	bne.n	8002b18 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d111      	bne.n	8002a80 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a5c:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6892      	ldr	r2, [r2, #8]
 8002a6c:	0211      	lsls	r1, r2, #8
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68d2      	ldr	r2, [r2, #12]
 8002a72:	0912      	lsrs	r2, r2, #4
 8002a74:	0452      	lsls	r2, r2, #17
 8002a76:	430a      	orrs	r2, r1
 8002a78:	492a      	ldr	r1, [pc, #168]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	610b      	str	r3, [r1, #16]
 8002a7e:	e027      	b.n	8002ad0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d112      	bne.n	8002aac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a86:	4b27      	ldr	r3, [pc, #156]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6892      	ldr	r2, [r2, #8]
 8002a96:	0211      	lsls	r1, r2, #8
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6912      	ldr	r2, [r2, #16]
 8002a9c:	0852      	lsrs	r2, r2, #1
 8002a9e:	3a01      	subs	r2, #1
 8002aa0:	0552      	lsls	r2, r2, #21
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	491f      	ldr	r1, [pc, #124]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	610b      	str	r3, [r1, #16]
 8002aaa:	e011      	b.n	8002ad0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ab4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6892      	ldr	r2, [r2, #8]
 8002abc:	0211      	lsls	r1, r2, #8
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6952      	ldr	r2, [r2, #20]
 8002ac2:	0852      	lsrs	r2, r2, #1
 8002ac4:	3a01      	subs	r2, #1
 8002ac6:	0652      	lsls	r2, r2, #25
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	4916      	ldr	r1, [pc, #88]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ad0:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ada:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002adc:	f7fe fa98 	bl	8001010 <HAL_GetTick>
 8002ae0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ae2:	e009      	b.n	8002af8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ae4:	f7fe fa94 	bl	8001010 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d902      	bls.n	8002af8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	73fb      	strb	r3, [r7, #15]
          break;
 8002af6:	e005      	b.n	8002b04 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0ef      	beq.n	8002ae4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	4904      	ldr	r1, [pc, #16]	; (8002b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000

08002b28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b36:	4b6a      	ldr	r3, [pc, #424]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d018      	beq.n	8002b74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b42:	4b67      	ldr	r3, [pc, #412]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f003 0203 	and.w	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d10d      	bne.n	8002b6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
       ||
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b5a:	4b61      	ldr	r3, [pc, #388]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
       ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d047      	beq.n	8002bfe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
 8002b72:	e044      	b.n	8002bfe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d018      	beq.n	8002bae <RCCEx_PLLSAI2_Config+0x86>
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d825      	bhi.n	8002bcc <RCCEx_PLLSAI2_Config+0xa4>
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d002      	beq.n	8002b8a <RCCEx_PLLSAI2_Config+0x62>
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d009      	beq.n	8002b9c <RCCEx_PLLSAI2_Config+0x74>
 8002b88:	e020      	b.n	8002bcc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b8a:	4b55      	ldr	r3, [pc, #340]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d11d      	bne.n	8002bd2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9a:	e01a      	b.n	8002bd2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b9c:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d116      	bne.n	8002bd6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bac:	e013      	b.n	8002bd6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bae:	4b4c      	ldr	r3, [pc, #304]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10f      	bne.n	8002bda <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bba:	4b49      	ldr	r3, [pc, #292]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bca:	e006      	b.n	8002bda <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd0:	e004      	b.n	8002bdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e002      	b.n	8002bdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e000      	b.n	8002bdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bda:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10d      	bne.n	8002bfe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002be2:	4b3f      	ldr	r3, [pc, #252]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6819      	ldr	r1, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	430b      	orrs	r3, r1
 8002bf8:	4939      	ldr	r1, [pc, #228]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d167      	bne.n	8002cd4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c04:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a35      	ldr	r2, [pc, #212]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c10:	f7fe f9fe 	bl	8001010 <HAL_GetTick>
 8002c14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c16:	e009      	b.n	8002c2c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c18:	f7fe f9fa 	bl	8001010 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d902      	bls.n	8002c2c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	73fb      	strb	r3, [r7, #15]
        break;
 8002c2a:	e005      	b.n	8002c38 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c2c:	4b2c      	ldr	r3, [pc, #176]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1ef      	bne.n	8002c18 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d14a      	bne.n	8002cd4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d111      	bne.n	8002c68 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c44:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6892      	ldr	r2, [r2, #8]
 8002c54:	0211      	lsls	r1, r2, #8
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68d2      	ldr	r2, [r2, #12]
 8002c5a:	0912      	lsrs	r2, r2, #4
 8002c5c:	0452      	lsls	r2, r2, #17
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	491f      	ldr	r1, [pc, #124]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	614b      	str	r3, [r1, #20]
 8002c66:	e011      	b.n	8002c8c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c68:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6892      	ldr	r2, [r2, #8]
 8002c78:	0211      	lsls	r1, r2, #8
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6912      	ldr	r2, [r2, #16]
 8002c7e:	0852      	lsrs	r2, r2, #1
 8002c80:	3a01      	subs	r2, #1
 8002c82:	0652      	lsls	r2, r2, #25
 8002c84:	430a      	orrs	r2, r1
 8002c86:	4916      	ldr	r1, [pc, #88]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a13      	ldr	r2, [pc, #76]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7fe f9ba 	bl	8001010 <HAL_GetTick>
 8002c9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c9e:	e009      	b.n	8002cb4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ca0:	f7fe f9b6 	bl	8001010 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d902      	bls.n	8002cb4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	73fb      	strb	r3, [r7, #15]
          break;
 8002cb2:	e005      	b.n	8002cc0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0ef      	beq.n	8002ca0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc8:	695a      	ldr	r2, [r3, #20]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	4904      	ldr	r1, [pc, #16]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000

08002ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e040      	b.n	8002d78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fd ff58 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2224      	movs	r2, #36	; 0x24
 8002d10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0201 	bic.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fb26 	bl	8003374 <UART_SetConfig>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e022      	b.n	8002d78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fda4 	bl	8003888 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fe2b 	bl	80039cc <UART_CheckIdleState>
 8002d76:	4603      	mov	r3, r0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	f040 8082 	bne.w	8002e9e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_UART_Transmit+0x26>
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e07a      	b.n	8002ea0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_UART_Transmit+0x38>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e073      	b.n	8002ea0 <HAL_UART_Transmit+0x120>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2221      	movs	r2, #33	; 0x21
 8002dcc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dce:	f7fe f91f 	bl	8001010 <HAL_GetTick>
 8002dd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	88fa      	ldrh	r2, [r7, #6]
 8002dd8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	88fa      	ldrh	r2, [r7, #6]
 8002de0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dec:	d108      	bne.n	8002e00 <HAL_UART_Transmit+0x80>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d104      	bne.n	8002e00 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	e003      	b.n	8002e08 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002e10:	e02d      	b.n	8002e6e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 fe1e 	bl	8003a5e <UART_WaitOnFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e039      	b.n	8002ea0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10b      	bne.n	8002e4a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	881a      	ldrh	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e3e:	b292      	uxth	r2, r2
 8002e40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	3302      	adds	r3, #2
 8002e46:	61bb      	str	r3, [r7, #24]
 8002e48:	e008      	b.n	8002e5c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	b292      	uxth	r2, r2
 8002e54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1cb      	bne.n	8002e12 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2200      	movs	r2, #0
 8002e82:	2140      	movs	r1, #64	; 0x40
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 fdea 	bl	8003a5e <UART_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e005      	b.n	8002ea0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e000      	b.n	8002ea0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002e9e:	2302      	movs	r3, #2
  }
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3720      	adds	r7, #32
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	d131      	bne.n	8002f22 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <HAL_UART_Receive_IT+0x22>
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e02a      	b.n	8002f24 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_UART_Receive_IT+0x34>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e023      	b.n	8002f24 <HAL_UART_Receive_IT+0x7c>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a0f      	ldr	r2, [pc, #60]	; (8002f2c <HAL_UART_Receive_IT+0x84>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00e      	beq.n	8002f12 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f10:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	461a      	mov	r2, r3
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 fe1d 	bl	8003b58 <UART_Start_Receive_IT>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	e000      	b.n	8002f24 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8002f22:	2302      	movs	r3, #2
  }
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40008000 	.word	0x40008000

08002f30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f56:	4013      	ands	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d113      	bne.n	8002f88 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00e      	beq.n	8002f88 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d009      	beq.n	8002f88 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 81ce 	beq.w	800331a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
      }
      return;
 8002f86:	e1c8      	b.n	800331a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 80e3 	beq.w	8003156 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d105      	bne.n	8002fa6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4ba6      	ldr	r3, [pc, #664]	; (8003238 <HAL_UART_IRQHandler+0x308>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80d8 	beq.w	8003156 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d010      	beq.n	8002fd2 <HAL_UART_IRQHandler+0xa2>
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00b      	beq.n	8002fd2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc8:	f043 0201 	orr.w	r2, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d010      	beq.n	8002ffe <HAL_UART_IRQHandler+0xce>
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2202      	movs	r2, #2
 8002fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ff4:	f043 0204 	orr.w	r2, r3, #4
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d010      	beq.n	800302a <HAL_UART_IRQHandler+0xfa>
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2204      	movs	r2, #4
 8003018:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003020:	f043 0202 	orr.w	r2, r3, #2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d015      	beq.n	8003060 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b00      	cmp	r3, #0
 800303c:	d104      	bne.n	8003048 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00b      	beq.n	8003060 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2208      	movs	r2, #8
 800304e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003056:	f043 0208 	orr.w	r2, r3, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003066:	2b00      	cmp	r3, #0
 8003068:	d011      	beq.n	800308e <HAL_UART_IRQHandler+0x15e>
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00c      	beq.n	800308e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800307c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8142 	beq.w	800331e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00c      	beq.n	80030be <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030c4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d0:	2b40      	cmp	r3, #64	; 0x40
 80030d2:	d004      	beq.n	80030de <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d031      	beq.n	8003142 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fdc2 	bl	8003c68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ee:	2b40      	cmp	r3, #64	; 0x40
 80030f0:	d123      	bne.n	800313a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003100:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	2b00      	cmp	r3, #0
 8003108:	d013      	beq.n	8003132 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	4a4b      	ldr	r2, [pc, #300]	; (800323c <HAL_UART_IRQHandler+0x30c>)
 8003110:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe f8d5 	bl	80012c6 <HAL_DMA_Abort_IT>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d017      	beq.n	8003152 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800312c:	4610      	mov	r0, r2
 800312e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003130:	e00f      	b.n	8003152 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f908 	bl	8003348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003138:	e00b      	b.n	8003152 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f904 	bl	8003348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003140:	e007      	b.n	8003152 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f900 	bl	8003348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003150:	e0e5      	b.n	800331e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003152:	bf00      	nop
    return;
 8003154:	e0e3      	b.n	800331e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315a:	2b01      	cmp	r3, #1
 800315c:	f040 80a9 	bne.w	80032b2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80a3 	beq.w	80032b2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 809d 	beq.w	80032b2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2210      	movs	r2, #16
 800317e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	2b40      	cmp	r3, #64	; 0x40
 800318c:	d158      	bne.n	8003240 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003198:	893b      	ldrh	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80c1 	beq.w	8003322 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031a6:	893a      	ldrh	r2, [r7, #8]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	f080 80ba 	bcs.w	8003322 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	893a      	ldrh	r2, [r7, #8]
 80031b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d12a      	bne.n	800321c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0201 	bic.w	r2, r2, #1
 80031e4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0210 	bic.w	r2, r2, #16
 8003210:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe f817 	bl	800124a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003228:	b29b      	uxth	r3, r3
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	b29b      	uxth	r3, r3
 800322e:	4619      	mov	r1, r3
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f893 	bl	800335c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003236:	e074      	b.n	8003322 <HAL_UART_IRQHandler+0x3f2>
 8003238:	04000120 	.word	0x04000120
 800323c:	08003cc7 	.word	0x08003cc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800324c:	b29b      	uxth	r3, r3
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d063      	beq.n	8003326 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800325e:	897b      	ldrh	r3, [r7, #10]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d060      	beq.n	8003326 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003272:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0201 	bic.w	r2, r2, #1
 8003282:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2220      	movs	r2, #32
 8003288:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0210 	bic.w	r2, r2, #16
 80032a4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032a6:	897b      	ldrh	r3, [r7, #10]
 80032a8:	4619      	mov	r1, r3
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f856 	bl	800335c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80032b0:	e039      	b.n	8003326 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00d      	beq.n	80032d8 <HAL_UART_IRQHandler+0x3a8>
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 fdff 	bl	8003ed4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032d6:	e029      	b.n	800332c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00d      	beq.n	80032fe <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d01a      	beq.n	800332a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4798      	blx	r3
    }
    return;
 80032fc:	e015      	b.n	800332a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	d011      	beq.n	800332c <HAL_UART_IRQHandler+0x3fc>
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00c      	beq.n	800332c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fced 	bl	8003cf2 <UART_EndTransmit_IT>
    return;
 8003318:	e008      	b.n	800332c <HAL_UART_IRQHandler+0x3fc>
      return;
 800331a:	bf00      	nop
 800331c:	e006      	b.n	800332c <HAL_UART_IRQHandler+0x3fc>
    return;
 800331e:	bf00      	nop
 8003320:	e004      	b.n	800332c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003322:	bf00      	nop
 8003324:	e002      	b.n	800332c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003326:	bf00      	nop
 8003328:	e000      	b.n	800332c <HAL_UART_IRQHandler+0x3fc>
    return;
 800332a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800332c:	3720      	adds	r7, #32
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop

08003334 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003374:	b5b0      	push	{r4, r5, r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	4313      	orrs	r3, r2
 8003396:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4bad      	ldr	r3, [pc, #692]	; (8003654 <UART_SetConfig+0x2e0>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	69f9      	ldr	r1, [r7, #28]
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4aa2      	ldr	r2, [pc, #648]	; (8003658 <UART_SetConfig+0x2e4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d004      	beq.n	80033dc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a99      	ldr	r2, [pc, #612]	; (800365c <UART_SetConfig+0x2e8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d121      	bne.n	800343e <UART_SetConfig+0xca>
 80033fa:	4b99      	ldr	r3, [pc, #612]	; (8003660 <UART_SetConfig+0x2ec>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b03      	cmp	r3, #3
 8003406:	d817      	bhi.n	8003438 <UART_SetConfig+0xc4>
 8003408:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <UART_SetConfig+0x9c>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003421 	.word	0x08003421
 8003414:	0800342d 	.word	0x0800342d
 8003418:	08003427 	.word	0x08003427
 800341c:	08003433 	.word	0x08003433
 8003420:	2301      	movs	r3, #1
 8003422:	76fb      	strb	r3, [r7, #27]
 8003424:	e0e7      	b.n	80035f6 <UART_SetConfig+0x282>
 8003426:	2302      	movs	r3, #2
 8003428:	76fb      	strb	r3, [r7, #27]
 800342a:	e0e4      	b.n	80035f6 <UART_SetConfig+0x282>
 800342c:	2304      	movs	r3, #4
 800342e:	76fb      	strb	r3, [r7, #27]
 8003430:	e0e1      	b.n	80035f6 <UART_SetConfig+0x282>
 8003432:	2308      	movs	r3, #8
 8003434:	76fb      	strb	r3, [r7, #27]
 8003436:	e0de      	b.n	80035f6 <UART_SetConfig+0x282>
 8003438:	2310      	movs	r3, #16
 800343a:	76fb      	strb	r3, [r7, #27]
 800343c:	e0db      	b.n	80035f6 <UART_SetConfig+0x282>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a88      	ldr	r2, [pc, #544]	; (8003664 <UART_SetConfig+0x2f0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d132      	bne.n	80034ae <UART_SetConfig+0x13a>
 8003448:	4b85      	ldr	r3, [pc, #532]	; (8003660 <UART_SetConfig+0x2ec>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b0c      	cmp	r3, #12
 8003454:	d828      	bhi.n	80034a8 <UART_SetConfig+0x134>
 8003456:	a201      	add	r2, pc, #4	; (adr r2, 800345c <UART_SetConfig+0xe8>)
 8003458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345c:	08003491 	.word	0x08003491
 8003460:	080034a9 	.word	0x080034a9
 8003464:	080034a9 	.word	0x080034a9
 8003468:	080034a9 	.word	0x080034a9
 800346c:	0800349d 	.word	0x0800349d
 8003470:	080034a9 	.word	0x080034a9
 8003474:	080034a9 	.word	0x080034a9
 8003478:	080034a9 	.word	0x080034a9
 800347c:	08003497 	.word	0x08003497
 8003480:	080034a9 	.word	0x080034a9
 8003484:	080034a9 	.word	0x080034a9
 8003488:	080034a9 	.word	0x080034a9
 800348c:	080034a3 	.word	0x080034a3
 8003490:	2300      	movs	r3, #0
 8003492:	76fb      	strb	r3, [r7, #27]
 8003494:	e0af      	b.n	80035f6 <UART_SetConfig+0x282>
 8003496:	2302      	movs	r3, #2
 8003498:	76fb      	strb	r3, [r7, #27]
 800349a:	e0ac      	b.n	80035f6 <UART_SetConfig+0x282>
 800349c:	2304      	movs	r3, #4
 800349e:	76fb      	strb	r3, [r7, #27]
 80034a0:	e0a9      	b.n	80035f6 <UART_SetConfig+0x282>
 80034a2:	2308      	movs	r3, #8
 80034a4:	76fb      	strb	r3, [r7, #27]
 80034a6:	e0a6      	b.n	80035f6 <UART_SetConfig+0x282>
 80034a8:	2310      	movs	r3, #16
 80034aa:	76fb      	strb	r3, [r7, #27]
 80034ac:	e0a3      	b.n	80035f6 <UART_SetConfig+0x282>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6d      	ldr	r2, [pc, #436]	; (8003668 <UART_SetConfig+0x2f4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d120      	bne.n	80034fa <UART_SetConfig+0x186>
 80034b8:	4b69      	ldr	r3, [pc, #420]	; (8003660 <UART_SetConfig+0x2ec>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034c2:	2b30      	cmp	r3, #48	; 0x30
 80034c4:	d013      	beq.n	80034ee <UART_SetConfig+0x17a>
 80034c6:	2b30      	cmp	r3, #48	; 0x30
 80034c8:	d814      	bhi.n	80034f4 <UART_SetConfig+0x180>
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d009      	beq.n	80034e2 <UART_SetConfig+0x16e>
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d810      	bhi.n	80034f4 <UART_SetConfig+0x180>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <UART_SetConfig+0x168>
 80034d6:	2b10      	cmp	r3, #16
 80034d8:	d006      	beq.n	80034e8 <UART_SetConfig+0x174>
 80034da:	e00b      	b.n	80034f4 <UART_SetConfig+0x180>
 80034dc:	2300      	movs	r3, #0
 80034de:	76fb      	strb	r3, [r7, #27]
 80034e0:	e089      	b.n	80035f6 <UART_SetConfig+0x282>
 80034e2:	2302      	movs	r3, #2
 80034e4:	76fb      	strb	r3, [r7, #27]
 80034e6:	e086      	b.n	80035f6 <UART_SetConfig+0x282>
 80034e8:	2304      	movs	r3, #4
 80034ea:	76fb      	strb	r3, [r7, #27]
 80034ec:	e083      	b.n	80035f6 <UART_SetConfig+0x282>
 80034ee:	2308      	movs	r3, #8
 80034f0:	76fb      	strb	r3, [r7, #27]
 80034f2:	e080      	b.n	80035f6 <UART_SetConfig+0x282>
 80034f4:	2310      	movs	r3, #16
 80034f6:	76fb      	strb	r3, [r7, #27]
 80034f8:	e07d      	b.n	80035f6 <UART_SetConfig+0x282>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a5b      	ldr	r2, [pc, #364]	; (800366c <UART_SetConfig+0x2f8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d120      	bne.n	8003546 <UART_SetConfig+0x1d2>
 8003504:	4b56      	ldr	r3, [pc, #344]	; (8003660 <UART_SetConfig+0x2ec>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800350e:	2bc0      	cmp	r3, #192	; 0xc0
 8003510:	d013      	beq.n	800353a <UART_SetConfig+0x1c6>
 8003512:	2bc0      	cmp	r3, #192	; 0xc0
 8003514:	d814      	bhi.n	8003540 <UART_SetConfig+0x1cc>
 8003516:	2b80      	cmp	r3, #128	; 0x80
 8003518:	d009      	beq.n	800352e <UART_SetConfig+0x1ba>
 800351a:	2b80      	cmp	r3, #128	; 0x80
 800351c:	d810      	bhi.n	8003540 <UART_SetConfig+0x1cc>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <UART_SetConfig+0x1b4>
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d006      	beq.n	8003534 <UART_SetConfig+0x1c0>
 8003526:	e00b      	b.n	8003540 <UART_SetConfig+0x1cc>
 8003528:	2300      	movs	r3, #0
 800352a:	76fb      	strb	r3, [r7, #27]
 800352c:	e063      	b.n	80035f6 <UART_SetConfig+0x282>
 800352e:	2302      	movs	r3, #2
 8003530:	76fb      	strb	r3, [r7, #27]
 8003532:	e060      	b.n	80035f6 <UART_SetConfig+0x282>
 8003534:	2304      	movs	r3, #4
 8003536:	76fb      	strb	r3, [r7, #27]
 8003538:	e05d      	b.n	80035f6 <UART_SetConfig+0x282>
 800353a:	2308      	movs	r3, #8
 800353c:	76fb      	strb	r3, [r7, #27]
 800353e:	e05a      	b.n	80035f6 <UART_SetConfig+0x282>
 8003540:	2310      	movs	r3, #16
 8003542:	76fb      	strb	r3, [r7, #27]
 8003544:	e057      	b.n	80035f6 <UART_SetConfig+0x282>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a49      	ldr	r2, [pc, #292]	; (8003670 <UART_SetConfig+0x2fc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d125      	bne.n	800359c <UART_SetConfig+0x228>
 8003550:	4b43      	ldr	r3, [pc, #268]	; (8003660 <UART_SetConfig+0x2ec>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800355e:	d017      	beq.n	8003590 <UART_SetConfig+0x21c>
 8003560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003564:	d817      	bhi.n	8003596 <UART_SetConfig+0x222>
 8003566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356a:	d00b      	beq.n	8003584 <UART_SetConfig+0x210>
 800356c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003570:	d811      	bhi.n	8003596 <UART_SetConfig+0x222>
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <UART_SetConfig+0x20a>
 8003576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357a:	d006      	beq.n	800358a <UART_SetConfig+0x216>
 800357c:	e00b      	b.n	8003596 <UART_SetConfig+0x222>
 800357e:	2300      	movs	r3, #0
 8003580:	76fb      	strb	r3, [r7, #27]
 8003582:	e038      	b.n	80035f6 <UART_SetConfig+0x282>
 8003584:	2302      	movs	r3, #2
 8003586:	76fb      	strb	r3, [r7, #27]
 8003588:	e035      	b.n	80035f6 <UART_SetConfig+0x282>
 800358a:	2304      	movs	r3, #4
 800358c:	76fb      	strb	r3, [r7, #27]
 800358e:	e032      	b.n	80035f6 <UART_SetConfig+0x282>
 8003590:	2308      	movs	r3, #8
 8003592:	76fb      	strb	r3, [r7, #27]
 8003594:	e02f      	b.n	80035f6 <UART_SetConfig+0x282>
 8003596:	2310      	movs	r3, #16
 8003598:	76fb      	strb	r3, [r7, #27]
 800359a:	e02c      	b.n	80035f6 <UART_SetConfig+0x282>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2d      	ldr	r2, [pc, #180]	; (8003658 <UART_SetConfig+0x2e4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d125      	bne.n	80035f2 <UART_SetConfig+0x27e>
 80035a6:	4b2e      	ldr	r3, [pc, #184]	; (8003660 <UART_SetConfig+0x2ec>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035b4:	d017      	beq.n	80035e6 <UART_SetConfig+0x272>
 80035b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ba:	d817      	bhi.n	80035ec <UART_SetConfig+0x278>
 80035bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c0:	d00b      	beq.n	80035da <UART_SetConfig+0x266>
 80035c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c6:	d811      	bhi.n	80035ec <UART_SetConfig+0x278>
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <UART_SetConfig+0x260>
 80035cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d0:	d006      	beq.n	80035e0 <UART_SetConfig+0x26c>
 80035d2:	e00b      	b.n	80035ec <UART_SetConfig+0x278>
 80035d4:	2300      	movs	r3, #0
 80035d6:	76fb      	strb	r3, [r7, #27]
 80035d8:	e00d      	b.n	80035f6 <UART_SetConfig+0x282>
 80035da:	2302      	movs	r3, #2
 80035dc:	76fb      	strb	r3, [r7, #27]
 80035de:	e00a      	b.n	80035f6 <UART_SetConfig+0x282>
 80035e0:	2304      	movs	r3, #4
 80035e2:	76fb      	strb	r3, [r7, #27]
 80035e4:	e007      	b.n	80035f6 <UART_SetConfig+0x282>
 80035e6:	2308      	movs	r3, #8
 80035e8:	76fb      	strb	r3, [r7, #27]
 80035ea:	e004      	b.n	80035f6 <UART_SetConfig+0x282>
 80035ec:	2310      	movs	r3, #16
 80035ee:	76fb      	strb	r3, [r7, #27]
 80035f0:	e001      	b.n	80035f6 <UART_SetConfig+0x282>
 80035f2:	2310      	movs	r3, #16
 80035f4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a17      	ldr	r2, [pc, #92]	; (8003658 <UART_SetConfig+0x2e4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	f040 8087 	bne.w	8003710 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003602:	7efb      	ldrb	r3, [r7, #27]
 8003604:	2b08      	cmp	r3, #8
 8003606:	d837      	bhi.n	8003678 <UART_SetConfig+0x304>
 8003608:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <UART_SetConfig+0x29c>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	08003635 	.word	0x08003635
 8003614:	08003679 	.word	0x08003679
 8003618:	0800363d 	.word	0x0800363d
 800361c:	08003679 	.word	0x08003679
 8003620:	08003643 	.word	0x08003643
 8003624:	08003679 	.word	0x08003679
 8003628:	08003679 	.word	0x08003679
 800362c:	08003679 	.word	0x08003679
 8003630:	0800364b 	.word	0x0800364b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003634:	f7fe fe0e 	bl	8002254 <HAL_RCC_GetPCLK1Freq>
 8003638:	6178      	str	r0, [r7, #20]
        break;
 800363a:	e022      	b.n	8003682 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800363c:	4b0d      	ldr	r3, [pc, #52]	; (8003674 <UART_SetConfig+0x300>)
 800363e:	617b      	str	r3, [r7, #20]
        break;
 8003640:	e01f      	b.n	8003682 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003642:	f7fe fd6f 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 8003646:	6178      	str	r0, [r7, #20]
        break;
 8003648:	e01b      	b.n	8003682 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800364a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800364e:	617b      	str	r3, [r7, #20]
        break;
 8003650:	e017      	b.n	8003682 <UART_SetConfig+0x30e>
 8003652:	bf00      	nop
 8003654:	efff69f3 	.word	0xefff69f3
 8003658:	40008000 	.word	0x40008000
 800365c:	40013800 	.word	0x40013800
 8003660:	40021000 	.word	0x40021000
 8003664:	40004400 	.word	0x40004400
 8003668:	40004800 	.word	0x40004800
 800366c:	40004c00 	.word	0x40004c00
 8003670:	40005000 	.word	0x40005000
 8003674:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	76bb      	strb	r3, [r7, #26]
        break;
 8003680:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80f1 	beq.w	800386c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	429a      	cmp	r2, r3
 8003698:	d305      	bcc.n	80036a6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d902      	bls.n	80036ac <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	76bb      	strb	r3, [r7, #26]
 80036aa:	e0df      	b.n	800386c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f04f 0100 	mov.w	r1, #0
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	020b      	lsls	r3, r1, #8
 80036be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036c2:	0202      	lsls	r2, r0, #8
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	6849      	ldr	r1, [r1, #4]
 80036c8:	0849      	lsrs	r1, r1, #1
 80036ca:	4608      	mov	r0, r1
 80036cc:	f04f 0100 	mov.w	r1, #0
 80036d0:	1814      	adds	r4, r2, r0
 80036d2:	eb43 0501 	adc.w	r5, r3, r1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	461a      	mov	r2, r3
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	4620      	mov	r0, r4
 80036e2:	4629      	mov	r1, r5
 80036e4:	f7fc fddc 	bl	80002a0 <__aeabi_uldivmod>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4613      	mov	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036f6:	d308      	bcc.n	800370a <UART_SetConfig+0x396>
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036fe:	d204      	bcs.n	800370a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	60da      	str	r2, [r3, #12]
 8003708:	e0b0      	b.n	800386c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	76bb      	strb	r3, [r7, #26]
 800370e:	e0ad      	b.n	800386c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003718:	d15c      	bne.n	80037d4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800371a:	7efb      	ldrb	r3, [r7, #27]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d828      	bhi.n	8003772 <UART_SetConfig+0x3fe>
 8003720:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <UART_SetConfig+0x3b4>)
 8003722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003726:	bf00      	nop
 8003728:	0800374d 	.word	0x0800374d
 800372c:	08003755 	.word	0x08003755
 8003730:	0800375d 	.word	0x0800375d
 8003734:	08003773 	.word	0x08003773
 8003738:	08003763 	.word	0x08003763
 800373c:	08003773 	.word	0x08003773
 8003740:	08003773 	.word	0x08003773
 8003744:	08003773 	.word	0x08003773
 8003748:	0800376b 	.word	0x0800376b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800374c:	f7fe fd82 	bl	8002254 <HAL_RCC_GetPCLK1Freq>
 8003750:	6178      	str	r0, [r7, #20]
        break;
 8003752:	e013      	b.n	800377c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003754:	f7fe fd94 	bl	8002280 <HAL_RCC_GetPCLK2Freq>
 8003758:	6178      	str	r0, [r7, #20]
        break;
 800375a:	e00f      	b.n	800377c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800375c:	4b49      	ldr	r3, [pc, #292]	; (8003884 <UART_SetConfig+0x510>)
 800375e:	617b      	str	r3, [r7, #20]
        break;
 8003760:	e00c      	b.n	800377c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003762:	f7fe fcdf 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 8003766:	6178      	str	r0, [r7, #20]
        break;
 8003768:	e008      	b.n	800377c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800376a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800376e:	617b      	str	r3, [r7, #20]
        break;
 8003770:	e004      	b.n	800377c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	76bb      	strb	r3, [r7, #26]
        break;
 800377a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d074      	beq.n	800386c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	005a      	lsls	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	085b      	lsrs	r3, r3, #1
 800378c:	441a      	add	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	fbb2 f3f3 	udiv	r3, r2, r3
 8003796:	b29b      	uxth	r3, r3
 8003798:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2b0f      	cmp	r3, #15
 800379e:	d916      	bls.n	80037ce <UART_SetConfig+0x45a>
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a6:	d212      	bcs.n	80037ce <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f023 030f 	bic.w	r3, r3, #15
 80037b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	085b      	lsrs	r3, r3, #1
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	b29a      	uxth	r2, r3
 80037be:	89fb      	ldrh	r3, [r7, #14]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	89fa      	ldrh	r2, [r7, #14]
 80037ca:	60da      	str	r2, [r3, #12]
 80037cc:	e04e      	b.n	800386c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	76bb      	strb	r3, [r7, #26]
 80037d2:	e04b      	b.n	800386c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037d4:	7efb      	ldrb	r3, [r7, #27]
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d827      	bhi.n	800382a <UART_SetConfig+0x4b6>
 80037da:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <UART_SetConfig+0x46c>)
 80037dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e0:	08003805 	.word	0x08003805
 80037e4:	0800380d 	.word	0x0800380d
 80037e8:	08003815 	.word	0x08003815
 80037ec:	0800382b 	.word	0x0800382b
 80037f0:	0800381b 	.word	0x0800381b
 80037f4:	0800382b 	.word	0x0800382b
 80037f8:	0800382b 	.word	0x0800382b
 80037fc:	0800382b 	.word	0x0800382b
 8003800:	08003823 	.word	0x08003823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003804:	f7fe fd26 	bl	8002254 <HAL_RCC_GetPCLK1Freq>
 8003808:	6178      	str	r0, [r7, #20]
        break;
 800380a:	e013      	b.n	8003834 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800380c:	f7fe fd38 	bl	8002280 <HAL_RCC_GetPCLK2Freq>
 8003810:	6178      	str	r0, [r7, #20]
        break;
 8003812:	e00f      	b.n	8003834 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003814:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <UART_SetConfig+0x510>)
 8003816:	617b      	str	r3, [r7, #20]
        break;
 8003818:	e00c      	b.n	8003834 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800381a:	f7fe fc83 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 800381e:	6178      	str	r0, [r7, #20]
        break;
 8003820:	e008      	b.n	8003834 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003826:	617b      	str	r3, [r7, #20]
        break;
 8003828:	e004      	b.n	8003834 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	76bb      	strb	r3, [r7, #26]
        break;
 8003832:	bf00      	nop
    }

    if (pclk != 0U)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d018      	beq.n	800386c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	085a      	lsrs	r2, r3, #1
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	441a      	add	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	b29b      	uxth	r3, r3
 800384e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	2b0f      	cmp	r3, #15
 8003854:	d908      	bls.n	8003868 <UART_SetConfig+0x4f4>
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385c:	d204      	bcs.n	8003868 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	e001      	b.n	800386c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003878:	7ebb      	ldrb	r3, [r7, #26]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bdb0      	pop	{r4, r5, r7, pc}
 8003882:	bf00      	nop
 8003884:	00f42400 	.word	0x00f42400

08003888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01a      	beq.n	800399e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003986:	d10a      	bne.n	800399e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	605a      	str	r2, [r3, #4]
  }
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039dc:	f7fd fb18 	bl	8001010 <HAL_GetTick>
 80039e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d10e      	bne.n	8003a0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f82d 	bl	8003a5e <UART_WaitOnFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e023      	b.n	8003a56 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d10e      	bne.n	8003a3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f817 	bl	8003a5e <UART_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e00d      	b.n	8003a56 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	603b      	str	r3, [r7, #0]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a6e:	e05e      	b.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a76:	d05a      	beq.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a78:	f7fd faca 	bl	8001010 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d302      	bcc.n	8003a8e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d11b      	bne.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a9c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0201 	bic.w	r2, r2, #1
 8003aac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e043      	b.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d02c      	beq.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae2:	d124      	bne.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aec:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003afc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0201 	bic.w	r2, r2, #1
 8003b0c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e00f      	b.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4013      	ands	r3, r2
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	bf0c      	ite	eq
 8003b3e:	2301      	moveq	r3, #1
 8003b40:	2300      	movne	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d091      	beq.n	8003a70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	88fa      	ldrh	r2, [r7, #6]
 8003b70:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	88fa      	ldrh	r2, [r7, #6]
 8003b78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8a:	d10e      	bne.n	8003baa <UART_Start_Receive_IT+0x52>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <UART_Start_Receive_IT+0x48>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b9e:	e02d      	b.n	8003bfc <UART_Start_Receive_IT+0xa4>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	22ff      	movs	r2, #255	; 0xff
 8003ba4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ba8:	e028      	b.n	8003bfc <UART_Start_Receive_IT+0xa4>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10d      	bne.n	8003bce <UART_Start_Receive_IT+0x76>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d104      	bne.n	8003bc4 <UART_Start_Receive_IT+0x6c>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	22ff      	movs	r2, #255	; 0xff
 8003bbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bc2:	e01b      	b.n	8003bfc <UART_Start_Receive_IT+0xa4>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	227f      	movs	r2, #127	; 0x7f
 8003bc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bcc:	e016      	b.n	8003bfc <UART_Start_Receive_IT+0xa4>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bd6:	d10d      	bne.n	8003bf4 <UART_Start_Receive_IT+0x9c>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d104      	bne.n	8003bea <UART_Start_Receive_IT+0x92>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	227f      	movs	r2, #127	; 0x7f
 8003be4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003be8:	e008      	b.n	8003bfc <UART_Start_Receive_IT+0xa4>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	223f      	movs	r2, #63	; 0x3f
 8003bee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bf2:	e003      	b.n	8003bfc <UART_Start_Receive_IT+0xa4>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2222      	movs	r2, #34	; 0x22
 8003c08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c22:	d107      	bne.n	8003c34 <UART_Start_Receive_IT+0xdc>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d103      	bne.n	8003c34 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a0c      	ldr	r2, [pc, #48]	; (8003c60 <UART_Start_Receive_IT+0x108>)
 8003c30:	665a      	str	r2, [r3, #100]	; 0x64
 8003c32:	e002      	b.n	8003c3a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4a0b      	ldr	r2, [pc, #44]	; (8003c64 <UART_Start_Receive_IT+0x10c>)
 8003c38:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003c50:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	08003dfd 	.word	0x08003dfd
 8003c64:	08003d25 	.word	0x08003d25

08003c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c7e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0201 	bic.w	r2, r2, #1
 8003c8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d107      	bne.n	8003ca8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0210 	bic.w	r2, r2, #16
 8003ca6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f7ff fb2f 	bl	8003348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d08:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fb0c 	bl	8003334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d32:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d38:	2b22      	cmp	r3, #34	; 0x22
 8003d3a:	d151      	bne.n	8003de0 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d42:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d44:	89bb      	ldrh	r3, [r7, #12]
 8003d46:	b2d9      	uxtb	r1, r3
 8003d48:	89fb      	ldrh	r3, [r7, #14]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d50:	400a      	ands	r2, r1
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d13a      	bne.n	8003df4 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d8c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0201 	bic.w	r2, r2, #1
 8003d9c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d10f      	bne.n	8003dd2 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0210 	bic.w	r2, r2, #16
 8003dc0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff fac6 	bl	800335c <HAL_UARTEx_RxEventCallback>
 8003dd0:	e002      	b.n	8003dd8 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fc fe3e 	bl	8000a54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dde:	e009      	b.n	8003df4 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	8b1b      	ldrh	r3, [r3, #24]
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0208 	orr.w	r2, r2, #8
 8003df0:	b292      	uxth	r2, r2
 8003df2:	831a      	strh	r2, [r3, #24]
}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e0a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e10:	2b22      	cmp	r3, #34	; 0x22
 8003e12:	d151      	bne.n	8003eb8 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e1a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e20:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e22:	89ba      	ldrh	r2, [r7, #12]
 8003e24:	89fb      	ldrh	r3, [r7, #14]
 8003e26:	4013      	ands	r3, r2
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	1c9a      	adds	r2, r3, #2
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d13a      	bne.n	8003ecc <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e64:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0201 	bic.w	r2, r2, #1
 8003e74:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d10f      	bne.n	8003eaa <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0210 	bic.w	r2, r2, #16
 8003e98:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff fa5a 	bl	800335c <HAL_UARTEx_RxEventCallback>
 8003ea8:	e002      	b.n	8003eb0 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fc fdd2 	bl	8000a54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003eb6:	e009      	b.n	8003ecc <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	8b1b      	ldrh	r3, [r3, #24]
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0208 	orr.w	r2, r2, #8
 8003ec8:	b292      	uxth	r2, r2
 8003eca:	831a      	strh	r2, [r3, #24]
}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <__errno>:
 8003ee8:	4b01      	ldr	r3, [pc, #4]	; (8003ef0 <__errno+0x8>)
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	2000000c 	.word	0x2000000c

08003ef4 <__libc_init_array>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	4d0d      	ldr	r5, [pc, #52]	; (8003f2c <__libc_init_array+0x38>)
 8003ef8:	4c0d      	ldr	r4, [pc, #52]	; (8003f30 <__libc_init_array+0x3c>)
 8003efa:	1b64      	subs	r4, r4, r5
 8003efc:	10a4      	asrs	r4, r4, #2
 8003efe:	2600      	movs	r6, #0
 8003f00:	42a6      	cmp	r6, r4
 8003f02:	d109      	bne.n	8003f18 <__libc_init_array+0x24>
 8003f04:	4d0b      	ldr	r5, [pc, #44]	; (8003f34 <__libc_init_array+0x40>)
 8003f06:	4c0c      	ldr	r4, [pc, #48]	; (8003f38 <__libc_init_array+0x44>)
 8003f08:	f001 fa2c 	bl	8005364 <_init>
 8003f0c:	1b64      	subs	r4, r4, r5
 8003f0e:	10a4      	asrs	r4, r4, #2
 8003f10:	2600      	movs	r6, #0
 8003f12:	42a6      	cmp	r6, r4
 8003f14:	d105      	bne.n	8003f22 <__libc_init_array+0x2e>
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f1c:	4798      	blx	r3
 8003f1e:	3601      	adds	r6, #1
 8003f20:	e7ee      	b.n	8003f00 <__libc_init_array+0xc>
 8003f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f26:	4798      	blx	r3
 8003f28:	3601      	adds	r6, #1
 8003f2a:	e7f2      	b.n	8003f12 <__libc_init_array+0x1e>
 8003f2c:	080055f0 	.word	0x080055f0
 8003f30:	080055f0 	.word	0x080055f0
 8003f34:	080055f0 	.word	0x080055f0
 8003f38:	080055f4 	.word	0x080055f4

08003f3c <memset>:
 8003f3c:	4402      	add	r2, r0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d100      	bne.n	8003f46 <memset+0xa>
 8003f44:	4770      	bx	lr
 8003f46:	f803 1b01 	strb.w	r1, [r3], #1
 8003f4a:	e7f9      	b.n	8003f40 <memset+0x4>

08003f4c <sniprintf>:
 8003f4c:	b40c      	push	{r2, r3}
 8003f4e:	b530      	push	{r4, r5, lr}
 8003f50:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <sniprintf+0x64>)
 8003f52:	1e0c      	subs	r4, r1, #0
 8003f54:	681d      	ldr	r5, [r3, #0]
 8003f56:	b09d      	sub	sp, #116	; 0x74
 8003f58:	da08      	bge.n	8003f6c <sniprintf+0x20>
 8003f5a:	238b      	movs	r3, #139	; 0x8b
 8003f5c:	602b      	str	r3, [r5, #0]
 8003f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f62:	b01d      	add	sp, #116	; 0x74
 8003f64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f68:	b002      	add	sp, #8
 8003f6a:	4770      	bx	lr
 8003f6c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003f70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003f74:	bf14      	ite	ne
 8003f76:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003f7a:	4623      	moveq	r3, r4
 8003f7c:	9304      	str	r3, [sp, #16]
 8003f7e:	9307      	str	r3, [sp, #28]
 8003f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f84:	9002      	str	r0, [sp, #8]
 8003f86:	9006      	str	r0, [sp, #24]
 8003f88:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f8e:	ab21      	add	r3, sp, #132	; 0x84
 8003f90:	a902      	add	r1, sp, #8
 8003f92:	4628      	mov	r0, r5
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	f000 f9af 	bl	80042f8 <_svfiprintf_r>
 8003f9a:	1c43      	adds	r3, r0, #1
 8003f9c:	bfbc      	itt	lt
 8003f9e:	238b      	movlt	r3, #139	; 0x8b
 8003fa0:	602b      	strlt	r3, [r5, #0]
 8003fa2:	2c00      	cmp	r4, #0
 8003fa4:	d0dd      	beq.n	8003f62 <sniprintf+0x16>
 8003fa6:	9b02      	ldr	r3, [sp, #8]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	701a      	strb	r2, [r3, #0]
 8003fac:	e7d9      	b.n	8003f62 <sniprintf+0x16>
 8003fae:	bf00      	nop
 8003fb0:	2000000c 	.word	0x2000000c

08003fb4 <strcpy>:
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fba:	f803 2b01 	strb.w	r2, [r3], #1
 8003fbe:	2a00      	cmp	r2, #0
 8003fc0:	d1f9      	bne.n	8003fb6 <strcpy+0x2>
 8003fc2:	4770      	bx	lr

08003fc4 <strtok>:
 8003fc4:	4b16      	ldr	r3, [pc, #88]	; (8004020 <strtok+0x5c>)
 8003fc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fc8:	681e      	ldr	r6, [r3, #0]
 8003fca:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003fcc:	4605      	mov	r5, r0
 8003fce:	b9fc      	cbnz	r4, 8004010 <strtok+0x4c>
 8003fd0:	2050      	movs	r0, #80	; 0x50
 8003fd2:	9101      	str	r1, [sp, #4]
 8003fd4:	f000 f882 	bl	80040dc <malloc>
 8003fd8:	9901      	ldr	r1, [sp, #4]
 8003fda:	65b0      	str	r0, [r6, #88]	; 0x58
 8003fdc:	4602      	mov	r2, r0
 8003fde:	b920      	cbnz	r0, 8003fea <strtok+0x26>
 8003fe0:	4b10      	ldr	r3, [pc, #64]	; (8004024 <strtok+0x60>)
 8003fe2:	4811      	ldr	r0, [pc, #68]	; (8004028 <strtok+0x64>)
 8003fe4:	2157      	movs	r1, #87	; 0x57
 8003fe6:	f000 f849 	bl	800407c <__assert_func>
 8003fea:	e9c0 4400 	strd	r4, r4, [r0]
 8003fee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003ff2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003ff6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003ffa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003ffe:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004002:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004006:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800400a:	6184      	str	r4, [r0, #24]
 800400c:	7704      	strb	r4, [r0, #28]
 800400e:	6244      	str	r4, [r0, #36]	; 0x24
 8004010:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004012:	2301      	movs	r3, #1
 8004014:	4628      	mov	r0, r5
 8004016:	b002      	add	sp, #8
 8004018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800401c:	f000 b806 	b.w	800402c <__strtok_r>
 8004020:	2000000c 	.word	0x2000000c
 8004024:	080054a0 	.word	0x080054a0
 8004028:	080054b7 	.word	0x080054b7

0800402c <__strtok_r>:
 800402c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800402e:	b908      	cbnz	r0, 8004034 <__strtok_r+0x8>
 8004030:	6810      	ldr	r0, [r2, #0]
 8004032:	b188      	cbz	r0, 8004058 <__strtok_r+0x2c>
 8004034:	4604      	mov	r4, r0
 8004036:	4620      	mov	r0, r4
 8004038:	f814 5b01 	ldrb.w	r5, [r4], #1
 800403c:	460f      	mov	r7, r1
 800403e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004042:	b91e      	cbnz	r6, 800404c <__strtok_r+0x20>
 8004044:	b965      	cbnz	r5, 8004060 <__strtok_r+0x34>
 8004046:	6015      	str	r5, [r2, #0]
 8004048:	4628      	mov	r0, r5
 800404a:	e005      	b.n	8004058 <__strtok_r+0x2c>
 800404c:	42b5      	cmp	r5, r6
 800404e:	d1f6      	bne.n	800403e <__strtok_r+0x12>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f0      	bne.n	8004036 <__strtok_r+0xa>
 8004054:	6014      	str	r4, [r2, #0]
 8004056:	7003      	strb	r3, [r0, #0]
 8004058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800405a:	461c      	mov	r4, r3
 800405c:	e00c      	b.n	8004078 <__strtok_r+0x4c>
 800405e:	b915      	cbnz	r5, 8004066 <__strtok_r+0x3a>
 8004060:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004064:	460e      	mov	r6, r1
 8004066:	f816 5b01 	ldrb.w	r5, [r6], #1
 800406a:	42ab      	cmp	r3, r5
 800406c:	d1f7      	bne.n	800405e <__strtok_r+0x32>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f3      	beq.n	800405a <__strtok_r+0x2e>
 8004072:	2300      	movs	r3, #0
 8004074:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004078:	6014      	str	r4, [r2, #0]
 800407a:	e7ed      	b.n	8004058 <__strtok_r+0x2c>

0800407c <__assert_func>:
 800407c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800407e:	4614      	mov	r4, r2
 8004080:	461a      	mov	r2, r3
 8004082:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <__assert_func+0x2c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4605      	mov	r5, r0
 8004088:	68d8      	ldr	r0, [r3, #12]
 800408a:	b14c      	cbz	r4, 80040a0 <__assert_func+0x24>
 800408c:	4b07      	ldr	r3, [pc, #28]	; (80040ac <__assert_func+0x30>)
 800408e:	9100      	str	r1, [sp, #0]
 8004090:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004094:	4906      	ldr	r1, [pc, #24]	; (80040b0 <__assert_func+0x34>)
 8004096:	462b      	mov	r3, r5
 8004098:	f000 f80e 	bl	80040b8 <fiprintf>
 800409c:	f000 fdea 	bl	8004c74 <abort>
 80040a0:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <__assert_func+0x38>)
 80040a2:	461c      	mov	r4, r3
 80040a4:	e7f3      	b.n	800408e <__assert_func+0x12>
 80040a6:	bf00      	nop
 80040a8:	2000000c 	.word	0x2000000c
 80040ac:	08005518 	.word	0x08005518
 80040b0:	08005525 	.word	0x08005525
 80040b4:	08005553 	.word	0x08005553

080040b8 <fiprintf>:
 80040b8:	b40e      	push	{r1, r2, r3}
 80040ba:	b503      	push	{r0, r1, lr}
 80040bc:	4601      	mov	r1, r0
 80040be:	ab03      	add	r3, sp, #12
 80040c0:	4805      	ldr	r0, [pc, #20]	; (80040d8 <fiprintf+0x20>)
 80040c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80040c6:	6800      	ldr	r0, [r0, #0]
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	f000 fa3f 	bl	800454c <_vfiprintf_r>
 80040ce:	b002      	add	sp, #8
 80040d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80040d4:	b003      	add	sp, #12
 80040d6:	4770      	bx	lr
 80040d8:	2000000c 	.word	0x2000000c

080040dc <malloc>:
 80040dc:	4b02      	ldr	r3, [pc, #8]	; (80040e8 <malloc+0xc>)
 80040de:	4601      	mov	r1, r0
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	f000 b853 	b.w	800418c <_malloc_r>
 80040e6:	bf00      	nop
 80040e8:	2000000c 	.word	0x2000000c

080040ec <_free_r>:
 80040ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040ee:	2900      	cmp	r1, #0
 80040f0:	d048      	beq.n	8004184 <_free_r+0x98>
 80040f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040f6:	9001      	str	r0, [sp, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f1a1 0404 	sub.w	r4, r1, #4
 80040fe:	bfb8      	it	lt
 8004100:	18e4      	addlt	r4, r4, r3
 8004102:	f001 f805 	bl	8005110 <__malloc_lock>
 8004106:	4a20      	ldr	r2, [pc, #128]	; (8004188 <_free_r+0x9c>)
 8004108:	9801      	ldr	r0, [sp, #4]
 800410a:	6813      	ldr	r3, [r2, #0]
 800410c:	4615      	mov	r5, r2
 800410e:	b933      	cbnz	r3, 800411e <_free_r+0x32>
 8004110:	6063      	str	r3, [r4, #4]
 8004112:	6014      	str	r4, [r2, #0]
 8004114:	b003      	add	sp, #12
 8004116:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800411a:	f000 bfff 	b.w	800511c <__malloc_unlock>
 800411e:	42a3      	cmp	r3, r4
 8004120:	d90b      	bls.n	800413a <_free_r+0x4e>
 8004122:	6821      	ldr	r1, [r4, #0]
 8004124:	1862      	adds	r2, r4, r1
 8004126:	4293      	cmp	r3, r2
 8004128:	bf04      	itt	eq
 800412a:	681a      	ldreq	r2, [r3, #0]
 800412c:	685b      	ldreq	r3, [r3, #4]
 800412e:	6063      	str	r3, [r4, #4]
 8004130:	bf04      	itt	eq
 8004132:	1852      	addeq	r2, r2, r1
 8004134:	6022      	streq	r2, [r4, #0]
 8004136:	602c      	str	r4, [r5, #0]
 8004138:	e7ec      	b.n	8004114 <_free_r+0x28>
 800413a:	461a      	mov	r2, r3
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	b10b      	cbz	r3, 8004144 <_free_r+0x58>
 8004140:	42a3      	cmp	r3, r4
 8004142:	d9fa      	bls.n	800413a <_free_r+0x4e>
 8004144:	6811      	ldr	r1, [r2, #0]
 8004146:	1855      	adds	r5, r2, r1
 8004148:	42a5      	cmp	r5, r4
 800414a:	d10b      	bne.n	8004164 <_free_r+0x78>
 800414c:	6824      	ldr	r4, [r4, #0]
 800414e:	4421      	add	r1, r4
 8004150:	1854      	adds	r4, r2, r1
 8004152:	42a3      	cmp	r3, r4
 8004154:	6011      	str	r1, [r2, #0]
 8004156:	d1dd      	bne.n	8004114 <_free_r+0x28>
 8004158:	681c      	ldr	r4, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	6053      	str	r3, [r2, #4]
 800415e:	4421      	add	r1, r4
 8004160:	6011      	str	r1, [r2, #0]
 8004162:	e7d7      	b.n	8004114 <_free_r+0x28>
 8004164:	d902      	bls.n	800416c <_free_r+0x80>
 8004166:	230c      	movs	r3, #12
 8004168:	6003      	str	r3, [r0, #0]
 800416a:	e7d3      	b.n	8004114 <_free_r+0x28>
 800416c:	6825      	ldr	r5, [r4, #0]
 800416e:	1961      	adds	r1, r4, r5
 8004170:	428b      	cmp	r3, r1
 8004172:	bf04      	itt	eq
 8004174:	6819      	ldreq	r1, [r3, #0]
 8004176:	685b      	ldreq	r3, [r3, #4]
 8004178:	6063      	str	r3, [r4, #4]
 800417a:	bf04      	itt	eq
 800417c:	1949      	addeq	r1, r1, r5
 800417e:	6021      	streq	r1, [r4, #0]
 8004180:	6054      	str	r4, [r2, #4]
 8004182:	e7c7      	b.n	8004114 <_free_r+0x28>
 8004184:	b003      	add	sp, #12
 8004186:	bd30      	pop	{r4, r5, pc}
 8004188:	20000120 	.word	0x20000120

0800418c <_malloc_r>:
 800418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418e:	1ccd      	adds	r5, r1, #3
 8004190:	f025 0503 	bic.w	r5, r5, #3
 8004194:	3508      	adds	r5, #8
 8004196:	2d0c      	cmp	r5, #12
 8004198:	bf38      	it	cc
 800419a:	250c      	movcc	r5, #12
 800419c:	2d00      	cmp	r5, #0
 800419e:	4606      	mov	r6, r0
 80041a0:	db01      	blt.n	80041a6 <_malloc_r+0x1a>
 80041a2:	42a9      	cmp	r1, r5
 80041a4:	d903      	bls.n	80041ae <_malloc_r+0x22>
 80041a6:	230c      	movs	r3, #12
 80041a8:	6033      	str	r3, [r6, #0]
 80041aa:	2000      	movs	r0, #0
 80041ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041ae:	f000 ffaf 	bl	8005110 <__malloc_lock>
 80041b2:	4921      	ldr	r1, [pc, #132]	; (8004238 <_malloc_r+0xac>)
 80041b4:	680a      	ldr	r2, [r1, #0]
 80041b6:	4614      	mov	r4, r2
 80041b8:	b99c      	cbnz	r4, 80041e2 <_malloc_r+0x56>
 80041ba:	4f20      	ldr	r7, [pc, #128]	; (800423c <_malloc_r+0xb0>)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	b923      	cbnz	r3, 80041ca <_malloc_r+0x3e>
 80041c0:	4621      	mov	r1, r4
 80041c2:	4630      	mov	r0, r6
 80041c4:	f000 fc86 	bl	8004ad4 <_sbrk_r>
 80041c8:	6038      	str	r0, [r7, #0]
 80041ca:	4629      	mov	r1, r5
 80041cc:	4630      	mov	r0, r6
 80041ce:	f000 fc81 	bl	8004ad4 <_sbrk_r>
 80041d2:	1c43      	adds	r3, r0, #1
 80041d4:	d123      	bne.n	800421e <_malloc_r+0x92>
 80041d6:	230c      	movs	r3, #12
 80041d8:	6033      	str	r3, [r6, #0]
 80041da:	4630      	mov	r0, r6
 80041dc:	f000 ff9e 	bl	800511c <__malloc_unlock>
 80041e0:	e7e3      	b.n	80041aa <_malloc_r+0x1e>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	1b5b      	subs	r3, r3, r5
 80041e6:	d417      	bmi.n	8004218 <_malloc_r+0x8c>
 80041e8:	2b0b      	cmp	r3, #11
 80041ea:	d903      	bls.n	80041f4 <_malloc_r+0x68>
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	441c      	add	r4, r3
 80041f0:	6025      	str	r5, [r4, #0]
 80041f2:	e004      	b.n	80041fe <_malloc_r+0x72>
 80041f4:	6863      	ldr	r3, [r4, #4]
 80041f6:	42a2      	cmp	r2, r4
 80041f8:	bf0c      	ite	eq
 80041fa:	600b      	streq	r3, [r1, #0]
 80041fc:	6053      	strne	r3, [r2, #4]
 80041fe:	4630      	mov	r0, r6
 8004200:	f000 ff8c 	bl	800511c <__malloc_unlock>
 8004204:	f104 000b 	add.w	r0, r4, #11
 8004208:	1d23      	adds	r3, r4, #4
 800420a:	f020 0007 	bic.w	r0, r0, #7
 800420e:	1ac2      	subs	r2, r0, r3
 8004210:	d0cc      	beq.n	80041ac <_malloc_r+0x20>
 8004212:	1a1b      	subs	r3, r3, r0
 8004214:	50a3      	str	r3, [r4, r2]
 8004216:	e7c9      	b.n	80041ac <_malloc_r+0x20>
 8004218:	4622      	mov	r2, r4
 800421a:	6864      	ldr	r4, [r4, #4]
 800421c:	e7cc      	b.n	80041b8 <_malloc_r+0x2c>
 800421e:	1cc4      	adds	r4, r0, #3
 8004220:	f024 0403 	bic.w	r4, r4, #3
 8004224:	42a0      	cmp	r0, r4
 8004226:	d0e3      	beq.n	80041f0 <_malloc_r+0x64>
 8004228:	1a21      	subs	r1, r4, r0
 800422a:	4630      	mov	r0, r6
 800422c:	f000 fc52 	bl	8004ad4 <_sbrk_r>
 8004230:	3001      	adds	r0, #1
 8004232:	d1dd      	bne.n	80041f0 <_malloc_r+0x64>
 8004234:	e7cf      	b.n	80041d6 <_malloc_r+0x4a>
 8004236:	bf00      	nop
 8004238:	20000120 	.word	0x20000120
 800423c:	20000124 	.word	0x20000124

08004240 <__ssputs_r>:
 8004240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004244:	688e      	ldr	r6, [r1, #8]
 8004246:	429e      	cmp	r6, r3
 8004248:	4682      	mov	sl, r0
 800424a:	460c      	mov	r4, r1
 800424c:	4690      	mov	r8, r2
 800424e:	461f      	mov	r7, r3
 8004250:	d838      	bhi.n	80042c4 <__ssputs_r+0x84>
 8004252:	898a      	ldrh	r2, [r1, #12]
 8004254:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004258:	d032      	beq.n	80042c0 <__ssputs_r+0x80>
 800425a:	6825      	ldr	r5, [r4, #0]
 800425c:	6909      	ldr	r1, [r1, #16]
 800425e:	eba5 0901 	sub.w	r9, r5, r1
 8004262:	6965      	ldr	r5, [r4, #20]
 8004264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004268:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800426c:	3301      	adds	r3, #1
 800426e:	444b      	add	r3, r9
 8004270:	106d      	asrs	r5, r5, #1
 8004272:	429d      	cmp	r5, r3
 8004274:	bf38      	it	cc
 8004276:	461d      	movcc	r5, r3
 8004278:	0553      	lsls	r3, r2, #21
 800427a:	d531      	bpl.n	80042e0 <__ssputs_r+0xa0>
 800427c:	4629      	mov	r1, r5
 800427e:	f7ff ff85 	bl	800418c <_malloc_r>
 8004282:	4606      	mov	r6, r0
 8004284:	b950      	cbnz	r0, 800429c <__ssputs_r+0x5c>
 8004286:	230c      	movs	r3, #12
 8004288:	f8ca 3000 	str.w	r3, [sl]
 800428c:	89a3      	ldrh	r3, [r4, #12]
 800428e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004292:	81a3      	strh	r3, [r4, #12]
 8004294:	f04f 30ff 	mov.w	r0, #4294967295
 8004298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800429c:	6921      	ldr	r1, [r4, #16]
 800429e:	464a      	mov	r2, r9
 80042a0:	f000 ff0e 	bl	80050c0 <memcpy>
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ae:	81a3      	strh	r3, [r4, #12]
 80042b0:	6126      	str	r6, [r4, #16]
 80042b2:	6165      	str	r5, [r4, #20]
 80042b4:	444e      	add	r6, r9
 80042b6:	eba5 0509 	sub.w	r5, r5, r9
 80042ba:	6026      	str	r6, [r4, #0]
 80042bc:	60a5      	str	r5, [r4, #8]
 80042be:	463e      	mov	r6, r7
 80042c0:	42be      	cmp	r6, r7
 80042c2:	d900      	bls.n	80042c6 <__ssputs_r+0x86>
 80042c4:	463e      	mov	r6, r7
 80042c6:	4632      	mov	r2, r6
 80042c8:	6820      	ldr	r0, [r4, #0]
 80042ca:	4641      	mov	r1, r8
 80042cc:	f000 ff06 	bl	80050dc <memmove>
 80042d0:	68a3      	ldr	r3, [r4, #8]
 80042d2:	6822      	ldr	r2, [r4, #0]
 80042d4:	1b9b      	subs	r3, r3, r6
 80042d6:	4432      	add	r2, r6
 80042d8:	60a3      	str	r3, [r4, #8]
 80042da:	6022      	str	r2, [r4, #0]
 80042dc:	2000      	movs	r0, #0
 80042de:	e7db      	b.n	8004298 <__ssputs_r+0x58>
 80042e0:	462a      	mov	r2, r5
 80042e2:	f000 ff21 	bl	8005128 <_realloc_r>
 80042e6:	4606      	mov	r6, r0
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d1e1      	bne.n	80042b0 <__ssputs_r+0x70>
 80042ec:	6921      	ldr	r1, [r4, #16]
 80042ee:	4650      	mov	r0, sl
 80042f0:	f7ff fefc 	bl	80040ec <_free_r>
 80042f4:	e7c7      	b.n	8004286 <__ssputs_r+0x46>
	...

080042f8 <_svfiprintf_r>:
 80042f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fc:	4698      	mov	r8, r3
 80042fe:	898b      	ldrh	r3, [r1, #12]
 8004300:	061b      	lsls	r3, r3, #24
 8004302:	b09d      	sub	sp, #116	; 0x74
 8004304:	4607      	mov	r7, r0
 8004306:	460d      	mov	r5, r1
 8004308:	4614      	mov	r4, r2
 800430a:	d50e      	bpl.n	800432a <_svfiprintf_r+0x32>
 800430c:	690b      	ldr	r3, [r1, #16]
 800430e:	b963      	cbnz	r3, 800432a <_svfiprintf_r+0x32>
 8004310:	2140      	movs	r1, #64	; 0x40
 8004312:	f7ff ff3b 	bl	800418c <_malloc_r>
 8004316:	6028      	str	r0, [r5, #0]
 8004318:	6128      	str	r0, [r5, #16]
 800431a:	b920      	cbnz	r0, 8004326 <_svfiprintf_r+0x2e>
 800431c:	230c      	movs	r3, #12
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	f04f 30ff 	mov.w	r0, #4294967295
 8004324:	e0d1      	b.n	80044ca <_svfiprintf_r+0x1d2>
 8004326:	2340      	movs	r3, #64	; 0x40
 8004328:	616b      	str	r3, [r5, #20]
 800432a:	2300      	movs	r3, #0
 800432c:	9309      	str	r3, [sp, #36]	; 0x24
 800432e:	2320      	movs	r3, #32
 8004330:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004334:	f8cd 800c 	str.w	r8, [sp, #12]
 8004338:	2330      	movs	r3, #48	; 0x30
 800433a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80044e4 <_svfiprintf_r+0x1ec>
 800433e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004342:	f04f 0901 	mov.w	r9, #1
 8004346:	4623      	mov	r3, r4
 8004348:	469a      	mov	sl, r3
 800434a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800434e:	b10a      	cbz	r2, 8004354 <_svfiprintf_r+0x5c>
 8004350:	2a25      	cmp	r2, #37	; 0x25
 8004352:	d1f9      	bne.n	8004348 <_svfiprintf_r+0x50>
 8004354:	ebba 0b04 	subs.w	fp, sl, r4
 8004358:	d00b      	beq.n	8004372 <_svfiprintf_r+0x7a>
 800435a:	465b      	mov	r3, fp
 800435c:	4622      	mov	r2, r4
 800435e:	4629      	mov	r1, r5
 8004360:	4638      	mov	r0, r7
 8004362:	f7ff ff6d 	bl	8004240 <__ssputs_r>
 8004366:	3001      	adds	r0, #1
 8004368:	f000 80aa 	beq.w	80044c0 <_svfiprintf_r+0x1c8>
 800436c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800436e:	445a      	add	r2, fp
 8004370:	9209      	str	r2, [sp, #36]	; 0x24
 8004372:	f89a 3000 	ldrb.w	r3, [sl]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80a2 	beq.w	80044c0 <_svfiprintf_r+0x1c8>
 800437c:	2300      	movs	r3, #0
 800437e:	f04f 32ff 	mov.w	r2, #4294967295
 8004382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004386:	f10a 0a01 	add.w	sl, sl, #1
 800438a:	9304      	str	r3, [sp, #16]
 800438c:	9307      	str	r3, [sp, #28]
 800438e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004392:	931a      	str	r3, [sp, #104]	; 0x68
 8004394:	4654      	mov	r4, sl
 8004396:	2205      	movs	r2, #5
 8004398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800439c:	4851      	ldr	r0, [pc, #324]	; (80044e4 <_svfiprintf_r+0x1ec>)
 800439e:	f7fb ff2f 	bl	8000200 <memchr>
 80043a2:	9a04      	ldr	r2, [sp, #16]
 80043a4:	b9d8      	cbnz	r0, 80043de <_svfiprintf_r+0xe6>
 80043a6:	06d0      	lsls	r0, r2, #27
 80043a8:	bf44      	itt	mi
 80043aa:	2320      	movmi	r3, #32
 80043ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043b0:	0711      	lsls	r1, r2, #28
 80043b2:	bf44      	itt	mi
 80043b4:	232b      	movmi	r3, #43	; 0x2b
 80043b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043ba:	f89a 3000 	ldrb.w	r3, [sl]
 80043be:	2b2a      	cmp	r3, #42	; 0x2a
 80043c0:	d015      	beq.n	80043ee <_svfiprintf_r+0xf6>
 80043c2:	9a07      	ldr	r2, [sp, #28]
 80043c4:	4654      	mov	r4, sl
 80043c6:	2000      	movs	r0, #0
 80043c8:	f04f 0c0a 	mov.w	ip, #10
 80043cc:	4621      	mov	r1, r4
 80043ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043d2:	3b30      	subs	r3, #48	; 0x30
 80043d4:	2b09      	cmp	r3, #9
 80043d6:	d94e      	bls.n	8004476 <_svfiprintf_r+0x17e>
 80043d8:	b1b0      	cbz	r0, 8004408 <_svfiprintf_r+0x110>
 80043da:	9207      	str	r2, [sp, #28]
 80043dc:	e014      	b.n	8004408 <_svfiprintf_r+0x110>
 80043de:	eba0 0308 	sub.w	r3, r0, r8
 80043e2:	fa09 f303 	lsl.w	r3, r9, r3
 80043e6:	4313      	orrs	r3, r2
 80043e8:	9304      	str	r3, [sp, #16]
 80043ea:	46a2      	mov	sl, r4
 80043ec:	e7d2      	b.n	8004394 <_svfiprintf_r+0x9c>
 80043ee:	9b03      	ldr	r3, [sp, #12]
 80043f0:	1d19      	adds	r1, r3, #4
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	9103      	str	r1, [sp, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bfbb      	ittet	lt
 80043fa:	425b      	neglt	r3, r3
 80043fc:	f042 0202 	orrlt.w	r2, r2, #2
 8004400:	9307      	strge	r3, [sp, #28]
 8004402:	9307      	strlt	r3, [sp, #28]
 8004404:	bfb8      	it	lt
 8004406:	9204      	strlt	r2, [sp, #16]
 8004408:	7823      	ldrb	r3, [r4, #0]
 800440a:	2b2e      	cmp	r3, #46	; 0x2e
 800440c:	d10c      	bne.n	8004428 <_svfiprintf_r+0x130>
 800440e:	7863      	ldrb	r3, [r4, #1]
 8004410:	2b2a      	cmp	r3, #42	; 0x2a
 8004412:	d135      	bne.n	8004480 <_svfiprintf_r+0x188>
 8004414:	9b03      	ldr	r3, [sp, #12]
 8004416:	1d1a      	adds	r2, r3, #4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	9203      	str	r2, [sp, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	bfb8      	it	lt
 8004420:	f04f 33ff 	movlt.w	r3, #4294967295
 8004424:	3402      	adds	r4, #2
 8004426:	9305      	str	r3, [sp, #20]
 8004428:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044f4 <_svfiprintf_r+0x1fc>
 800442c:	7821      	ldrb	r1, [r4, #0]
 800442e:	2203      	movs	r2, #3
 8004430:	4650      	mov	r0, sl
 8004432:	f7fb fee5 	bl	8000200 <memchr>
 8004436:	b140      	cbz	r0, 800444a <_svfiprintf_r+0x152>
 8004438:	2340      	movs	r3, #64	; 0x40
 800443a:	eba0 000a 	sub.w	r0, r0, sl
 800443e:	fa03 f000 	lsl.w	r0, r3, r0
 8004442:	9b04      	ldr	r3, [sp, #16]
 8004444:	4303      	orrs	r3, r0
 8004446:	3401      	adds	r4, #1
 8004448:	9304      	str	r3, [sp, #16]
 800444a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800444e:	4826      	ldr	r0, [pc, #152]	; (80044e8 <_svfiprintf_r+0x1f0>)
 8004450:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004454:	2206      	movs	r2, #6
 8004456:	f7fb fed3 	bl	8000200 <memchr>
 800445a:	2800      	cmp	r0, #0
 800445c:	d038      	beq.n	80044d0 <_svfiprintf_r+0x1d8>
 800445e:	4b23      	ldr	r3, [pc, #140]	; (80044ec <_svfiprintf_r+0x1f4>)
 8004460:	bb1b      	cbnz	r3, 80044aa <_svfiprintf_r+0x1b2>
 8004462:	9b03      	ldr	r3, [sp, #12]
 8004464:	3307      	adds	r3, #7
 8004466:	f023 0307 	bic.w	r3, r3, #7
 800446a:	3308      	adds	r3, #8
 800446c:	9303      	str	r3, [sp, #12]
 800446e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004470:	4433      	add	r3, r6
 8004472:	9309      	str	r3, [sp, #36]	; 0x24
 8004474:	e767      	b.n	8004346 <_svfiprintf_r+0x4e>
 8004476:	fb0c 3202 	mla	r2, ip, r2, r3
 800447a:	460c      	mov	r4, r1
 800447c:	2001      	movs	r0, #1
 800447e:	e7a5      	b.n	80043cc <_svfiprintf_r+0xd4>
 8004480:	2300      	movs	r3, #0
 8004482:	3401      	adds	r4, #1
 8004484:	9305      	str	r3, [sp, #20]
 8004486:	4619      	mov	r1, r3
 8004488:	f04f 0c0a 	mov.w	ip, #10
 800448c:	4620      	mov	r0, r4
 800448e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004492:	3a30      	subs	r2, #48	; 0x30
 8004494:	2a09      	cmp	r2, #9
 8004496:	d903      	bls.n	80044a0 <_svfiprintf_r+0x1a8>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0c5      	beq.n	8004428 <_svfiprintf_r+0x130>
 800449c:	9105      	str	r1, [sp, #20]
 800449e:	e7c3      	b.n	8004428 <_svfiprintf_r+0x130>
 80044a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80044a4:	4604      	mov	r4, r0
 80044a6:	2301      	movs	r3, #1
 80044a8:	e7f0      	b.n	800448c <_svfiprintf_r+0x194>
 80044aa:	ab03      	add	r3, sp, #12
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	462a      	mov	r2, r5
 80044b0:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <_svfiprintf_r+0x1f8>)
 80044b2:	a904      	add	r1, sp, #16
 80044b4:	4638      	mov	r0, r7
 80044b6:	f3af 8000 	nop.w
 80044ba:	1c42      	adds	r2, r0, #1
 80044bc:	4606      	mov	r6, r0
 80044be:	d1d6      	bne.n	800446e <_svfiprintf_r+0x176>
 80044c0:	89ab      	ldrh	r3, [r5, #12]
 80044c2:	065b      	lsls	r3, r3, #25
 80044c4:	f53f af2c 	bmi.w	8004320 <_svfiprintf_r+0x28>
 80044c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044ca:	b01d      	add	sp, #116	; 0x74
 80044cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d0:	ab03      	add	r3, sp, #12
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	462a      	mov	r2, r5
 80044d6:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <_svfiprintf_r+0x1f8>)
 80044d8:	a904      	add	r1, sp, #16
 80044da:	4638      	mov	r0, r7
 80044dc:	f000 f9d4 	bl	8004888 <_printf_i>
 80044e0:	e7eb      	b.n	80044ba <_svfiprintf_r+0x1c2>
 80044e2:	bf00      	nop
 80044e4:	08005554 	.word	0x08005554
 80044e8:	0800555e 	.word	0x0800555e
 80044ec:	00000000 	.word	0x00000000
 80044f0:	08004241 	.word	0x08004241
 80044f4:	0800555a 	.word	0x0800555a

080044f8 <__sfputc_r>:
 80044f8:	6893      	ldr	r3, [r2, #8]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	b410      	push	{r4}
 8004500:	6093      	str	r3, [r2, #8]
 8004502:	da08      	bge.n	8004516 <__sfputc_r+0x1e>
 8004504:	6994      	ldr	r4, [r2, #24]
 8004506:	42a3      	cmp	r3, r4
 8004508:	db01      	blt.n	800450e <__sfputc_r+0x16>
 800450a:	290a      	cmp	r1, #10
 800450c:	d103      	bne.n	8004516 <__sfputc_r+0x1e>
 800450e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004512:	f000 baef 	b.w	8004af4 <__swbuf_r>
 8004516:	6813      	ldr	r3, [r2, #0]
 8004518:	1c58      	adds	r0, r3, #1
 800451a:	6010      	str	r0, [r2, #0]
 800451c:	7019      	strb	r1, [r3, #0]
 800451e:	4608      	mov	r0, r1
 8004520:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004524:	4770      	bx	lr

08004526 <__sfputs_r>:
 8004526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004528:	4606      	mov	r6, r0
 800452a:	460f      	mov	r7, r1
 800452c:	4614      	mov	r4, r2
 800452e:	18d5      	adds	r5, r2, r3
 8004530:	42ac      	cmp	r4, r5
 8004532:	d101      	bne.n	8004538 <__sfputs_r+0x12>
 8004534:	2000      	movs	r0, #0
 8004536:	e007      	b.n	8004548 <__sfputs_r+0x22>
 8004538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800453c:	463a      	mov	r2, r7
 800453e:	4630      	mov	r0, r6
 8004540:	f7ff ffda 	bl	80044f8 <__sfputc_r>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	d1f3      	bne.n	8004530 <__sfputs_r+0xa>
 8004548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800454c <_vfiprintf_r>:
 800454c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004550:	460d      	mov	r5, r1
 8004552:	b09d      	sub	sp, #116	; 0x74
 8004554:	4614      	mov	r4, r2
 8004556:	4698      	mov	r8, r3
 8004558:	4606      	mov	r6, r0
 800455a:	b118      	cbz	r0, 8004564 <_vfiprintf_r+0x18>
 800455c:	6983      	ldr	r3, [r0, #24]
 800455e:	b90b      	cbnz	r3, 8004564 <_vfiprintf_r+0x18>
 8004560:	f000 fcaa 	bl	8004eb8 <__sinit>
 8004564:	4b89      	ldr	r3, [pc, #548]	; (800478c <_vfiprintf_r+0x240>)
 8004566:	429d      	cmp	r5, r3
 8004568:	d11b      	bne.n	80045a2 <_vfiprintf_r+0x56>
 800456a:	6875      	ldr	r5, [r6, #4]
 800456c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800456e:	07d9      	lsls	r1, r3, #31
 8004570:	d405      	bmi.n	800457e <_vfiprintf_r+0x32>
 8004572:	89ab      	ldrh	r3, [r5, #12]
 8004574:	059a      	lsls	r2, r3, #22
 8004576:	d402      	bmi.n	800457e <_vfiprintf_r+0x32>
 8004578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800457a:	f000 fd3b 	bl	8004ff4 <__retarget_lock_acquire_recursive>
 800457e:	89ab      	ldrh	r3, [r5, #12]
 8004580:	071b      	lsls	r3, r3, #28
 8004582:	d501      	bpl.n	8004588 <_vfiprintf_r+0x3c>
 8004584:	692b      	ldr	r3, [r5, #16]
 8004586:	b9eb      	cbnz	r3, 80045c4 <_vfiprintf_r+0x78>
 8004588:	4629      	mov	r1, r5
 800458a:	4630      	mov	r0, r6
 800458c:	f000 fb04 	bl	8004b98 <__swsetup_r>
 8004590:	b1c0      	cbz	r0, 80045c4 <_vfiprintf_r+0x78>
 8004592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004594:	07dc      	lsls	r4, r3, #31
 8004596:	d50e      	bpl.n	80045b6 <_vfiprintf_r+0x6a>
 8004598:	f04f 30ff 	mov.w	r0, #4294967295
 800459c:	b01d      	add	sp, #116	; 0x74
 800459e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045a2:	4b7b      	ldr	r3, [pc, #492]	; (8004790 <_vfiprintf_r+0x244>)
 80045a4:	429d      	cmp	r5, r3
 80045a6:	d101      	bne.n	80045ac <_vfiprintf_r+0x60>
 80045a8:	68b5      	ldr	r5, [r6, #8]
 80045aa:	e7df      	b.n	800456c <_vfiprintf_r+0x20>
 80045ac:	4b79      	ldr	r3, [pc, #484]	; (8004794 <_vfiprintf_r+0x248>)
 80045ae:	429d      	cmp	r5, r3
 80045b0:	bf08      	it	eq
 80045b2:	68f5      	ldreq	r5, [r6, #12]
 80045b4:	e7da      	b.n	800456c <_vfiprintf_r+0x20>
 80045b6:	89ab      	ldrh	r3, [r5, #12]
 80045b8:	0598      	lsls	r0, r3, #22
 80045ba:	d4ed      	bmi.n	8004598 <_vfiprintf_r+0x4c>
 80045bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045be:	f000 fd1a 	bl	8004ff6 <__retarget_lock_release_recursive>
 80045c2:	e7e9      	b.n	8004598 <_vfiprintf_r+0x4c>
 80045c4:	2300      	movs	r3, #0
 80045c6:	9309      	str	r3, [sp, #36]	; 0x24
 80045c8:	2320      	movs	r3, #32
 80045ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80045d2:	2330      	movs	r3, #48	; 0x30
 80045d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004798 <_vfiprintf_r+0x24c>
 80045d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045dc:	f04f 0901 	mov.w	r9, #1
 80045e0:	4623      	mov	r3, r4
 80045e2:	469a      	mov	sl, r3
 80045e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045e8:	b10a      	cbz	r2, 80045ee <_vfiprintf_r+0xa2>
 80045ea:	2a25      	cmp	r2, #37	; 0x25
 80045ec:	d1f9      	bne.n	80045e2 <_vfiprintf_r+0x96>
 80045ee:	ebba 0b04 	subs.w	fp, sl, r4
 80045f2:	d00b      	beq.n	800460c <_vfiprintf_r+0xc0>
 80045f4:	465b      	mov	r3, fp
 80045f6:	4622      	mov	r2, r4
 80045f8:	4629      	mov	r1, r5
 80045fa:	4630      	mov	r0, r6
 80045fc:	f7ff ff93 	bl	8004526 <__sfputs_r>
 8004600:	3001      	adds	r0, #1
 8004602:	f000 80aa 	beq.w	800475a <_vfiprintf_r+0x20e>
 8004606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004608:	445a      	add	r2, fp
 800460a:	9209      	str	r2, [sp, #36]	; 0x24
 800460c:	f89a 3000 	ldrb.w	r3, [sl]
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80a2 	beq.w	800475a <_vfiprintf_r+0x20e>
 8004616:	2300      	movs	r3, #0
 8004618:	f04f 32ff 	mov.w	r2, #4294967295
 800461c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004620:	f10a 0a01 	add.w	sl, sl, #1
 8004624:	9304      	str	r3, [sp, #16]
 8004626:	9307      	str	r3, [sp, #28]
 8004628:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800462c:	931a      	str	r3, [sp, #104]	; 0x68
 800462e:	4654      	mov	r4, sl
 8004630:	2205      	movs	r2, #5
 8004632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004636:	4858      	ldr	r0, [pc, #352]	; (8004798 <_vfiprintf_r+0x24c>)
 8004638:	f7fb fde2 	bl	8000200 <memchr>
 800463c:	9a04      	ldr	r2, [sp, #16]
 800463e:	b9d8      	cbnz	r0, 8004678 <_vfiprintf_r+0x12c>
 8004640:	06d1      	lsls	r1, r2, #27
 8004642:	bf44      	itt	mi
 8004644:	2320      	movmi	r3, #32
 8004646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800464a:	0713      	lsls	r3, r2, #28
 800464c:	bf44      	itt	mi
 800464e:	232b      	movmi	r3, #43	; 0x2b
 8004650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004654:	f89a 3000 	ldrb.w	r3, [sl]
 8004658:	2b2a      	cmp	r3, #42	; 0x2a
 800465a:	d015      	beq.n	8004688 <_vfiprintf_r+0x13c>
 800465c:	9a07      	ldr	r2, [sp, #28]
 800465e:	4654      	mov	r4, sl
 8004660:	2000      	movs	r0, #0
 8004662:	f04f 0c0a 	mov.w	ip, #10
 8004666:	4621      	mov	r1, r4
 8004668:	f811 3b01 	ldrb.w	r3, [r1], #1
 800466c:	3b30      	subs	r3, #48	; 0x30
 800466e:	2b09      	cmp	r3, #9
 8004670:	d94e      	bls.n	8004710 <_vfiprintf_r+0x1c4>
 8004672:	b1b0      	cbz	r0, 80046a2 <_vfiprintf_r+0x156>
 8004674:	9207      	str	r2, [sp, #28]
 8004676:	e014      	b.n	80046a2 <_vfiprintf_r+0x156>
 8004678:	eba0 0308 	sub.w	r3, r0, r8
 800467c:	fa09 f303 	lsl.w	r3, r9, r3
 8004680:	4313      	orrs	r3, r2
 8004682:	9304      	str	r3, [sp, #16]
 8004684:	46a2      	mov	sl, r4
 8004686:	e7d2      	b.n	800462e <_vfiprintf_r+0xe2>
 8004688:	9b03      	ldr	r3, [sp, #12]
 800468a:	1d19      	adds	r1, r3, #4
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	9103      	str	r1, [sp, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	bfbb      	ittet	lt
 8004694:	425b      	neglt	r3, r3
 8004696:	f042 0202 	orrlt.w	r2, r2, #2
 800469a:	9307      	strge	r3, [sp, #28]
 800469c:	9307      	strlt	r3, [sp, #28]
 800469e:	bfb8      	it	lt
 80046a0:	9204      	strlt	r2, [sp, #16]
 80046a2:	7823      	ldrb	r3, [r4, #0]
 80046a4:	2b2e      	cmp	r3, #46	; 0x2e
 80046a6:	d10c      	bne.n	80046c2 <_vfiprintf_r+0x176>
 80046a8:	7863      	ldrb	r3, [r4, #1]
 80046aa:	2b2a      	cmp	r3, #42	; 0x2a
 80046ac:	d135      	bne.n	800471a <_vfiprintf_r+0x1ce>
 80046ae:	9b03      	ldr	r3, [sp, #12]
 80046b0:	1d1a      	adds	r2, r3, #4
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	9203      	str	r2, [sp, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	bfb8      	it	lt
 80046ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80046be:	3402      	adds	r4, #2
 80046c0:	9305      	str	r3, [sp, #20]
 80046c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80047a8 <_vfiprintf_r+0x25c>
 80046c6:	7821      	ldrb	r1, [r4, #0]
 80046c8:	2203      	movs	r2, #3
 80046ca:	4650      	mov	r0, sl
 80046cc:	f7fb fd98 	bl	8000200 <memchr>
 80046d0:	b140      	cbz	r0, 80046e4 <_vfiprintf_r+0x198>
 80046d2:	2340      	movs	r3, #64	; 0x40
 80046d4:	eba0 000a 	sub.w	r0, r0, sl
 80046d8:	fa03 f000 	lsl.w	r0, r3, r0
 80046dc:	9b04      	ldr	r3, [sp, #16]
 80046de:	4303      	orrs	r3, r0
 80046e0:	3401      	adds	r4, #1
 80046e2:	9304      	str	r3, [sp, #16]
 80046e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046e8:	482c      	ldr	r0, [pc, #176]	; (800479c <_vfiprintf_r+0x250>)
 80046ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046ee:	2206      	movs	r2, #6
 80046f0:	f7fb fd86 	bl	8000200 <memchr>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	d03f      	beq.n	8004778 <_vfiprintf_r+0x22c>
 80046f8:	4b29      	ldr	r3, [pc, #164]	; (80047a0 <_vfiprintf_r+0x254>)
 80046fa:	bb1b      	cbnz	r3, 8004744 <_vfiprintf_r+0x1f8>
 80046fc:	9b03      	ldr	r3, [sp, #12]
 80046fe:	3307      	adds	r3, #7
 8004700:	f023 0307 	bic.w	r3, r3, #7
 8004704:	3308      	adds	r3, #8
 8004706:	9303      	str	r3, [sp, #12]
 8004708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800470a:	443b      	add	r3, r7
 800470c:	9309      	str	r3, [sp, #36]	; 0x24
 800470e:	e767      	b.n	80045e0 <_vfiprintf_r+0x94>
 8004710:	fb0c 3202 	mla	r2, ip, r2, r3
 8004714:	460c      	mov	r4, r1
 8004716:	2001      	movs	r0, #1
 8004718:	e7a5      	b.n	8004666 <_vfiprintf_r+0x11a>
 800471a:	2300      	movs	r3, #0
 800471c:	3401      	adds	r4, #1
 800471e:	9305      	str	r3, [sp, #20]
 8004720:	4619      	mov	r1, r3
 8004722:	f04f 0c0a 	mov.w	ip, #10
 8004726:	4620      	mov	r0, r4
 8004728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800472c:	3a30      	subs	r2, #48	; 0x30
 800472e:	2a09      	cmp	r2, #9
 8004730:	d903      	bls.n	800473a <_vfiprintf_r+0x1ee>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0c5      	beq.n	80046c2 <_vfiprintf_r+0x176>
 8004736:	9105      	str	r1, [sp, #20]
 8004738:	e7c3      	b.n	80046c2 <_vfiprintf_r+0x176>
 800473a:	fb0c 2101 	mla	r1, ip, r1, r2
 800473e:	4604      	mov	r4, r0
 8004740:	2301      	movs	r3, #1
 8004742:	e7f0      	b.n	8004726 <_vfiprintf_r+0x1da>
 8004744:	ab03      	add	r3, sp, #12
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	462a      	mov	r2, r5
 800474a:	4b16      	ldr	r3, [pc, #88]	; (80047a4 <_vfiprintf_r+0x258>)
 800474c:	a904      	add	r1, sp, #16
 800474e:	4630      	mov	r0, r6
 8004750:	f3af 8000 	nop.w
 8004754:	4607      	mov	r7, r0
 8004756:	1c78      	adds	r0, r7, #1
 8004758:	d1d6      	bne.n	8004708 <_vfiprintf_r+0x1bc>
 800475a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800475c:	07d9      	lsls	r1, r3, #31
 800475e:	d405      	bmi.n	800476c <_vfiprintf_r+0x220>
 8004760:	89ab      	ldrh	r3, [r5, #12]
 8004762:	059a      	lsls	r2, r3, #22
 8004764:	d402      	bmi.n	800476c <_vfiprintf_r+0x220>
 8004766:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004768:	f000 fc45 	bl	8004ff6 <__retarget_lock_release_recursive>
 800476c:	89ab      	ldrh	r3, [r5, #12]
 800476e:	065b      	lsls	r3, r3, #25
 8004770:	f53f af12 	bmi.w	8004598 <_vfiprintf_r+0x4c>
 8004774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004776:	e711      	b.n	800459c <_vfiprintf_r+0x50>
 8004778:	ab03      	add	r3, sp, #12
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	462a      	mov	r2, r5
 800477e:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <_vfiprintf_r+0x258>)
 8004780:	a904      	add	r1, sp, #16
 8004782:	4630      	mov	r0, r6
 8004784:	f000 f880 	bl	8004888 <_printf_i>
 8004788:	e7e4      	b.n	8004754 <_vfiprintf_r+0x208>
 800478a:	bf00      	nop
 800478c:	080055a8 	.word	0x080055a8
 8004790:	080055c8 	.word	0x080055c8
 8004794:	08005588 	.word	0x08005588
 8004798:	08005554 	.word	0x08005554
 800479c:	0800555e 	.word	0x0800555e
 80047a0:	00000000 	.word	0x00000000
 80047a4:	08004527 	.word	0x08004527
 80047a8:	0800555a 	.word	0x0800555a

080047ac <_printf_common>:
 80047ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b0:	4616      	mov	r6, r2
 80047b2:	4699      	mov	r9, r3
 80047b4:	688a      	ldr	r2, [r1, #8]
 80047b6:	690b      	ldr	r3, [r1, #16]
 80047b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047bc:	4293      	cmp	r3, r2
 80047be:	bfb8      	it	lt
 80047c0:	4613      	movlt	r3, r2
 80047c2:	6033      	str	r3, [r6, #0]
 80047c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047c8:	4607      	mov	r7, r0
 80047ca:	460c      	mov	r4, r1
 80047cc:	b10a      	cbz	r2, 80047d2 <_printf_common+0x26>
 80047ce:	3301      	adds	r3, #1
 80047d0:	6033      	str	r3, [r6, #0]
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	0699      	lsls	r1, r3, #26
 80047d6:	bf42      	ittt	mi
 80047d8:	6833      	ldrmi	r3, [r6, #0]
 80047da:	3302      	addmi	r3, #2
 80047dc:	6033      	strmi	r3, [r6, #0]
 80047de:	6825      	ldr	r5, [r4, #0]
 80047e0:	f015 0506 	ands.w	r5, r5, #6
 80047e4:	d106      	bne.n	80047f4 <_printf_common+0x48>
 80047e6:	f104 0a19 	add.w	sl, r4, #25
 80047ea:	68e3      	ldr	r3, [r4, #12]
 80047ec:	6832      	ldr	r2, [r6, #0]
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	42ab      	cmp	r3, r5
 80047f2:	dc26      	bgt.n	8004842 <_printf_common+0x96>
 80047f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047f8:	1e13      	subs	r3, r2, #0
 80047fa:	6822      	ldr	r2, [r4, #0]
 80047fc:	bf18      	it	ne
 80047fe:	2301      	movne	r3, #1
 8004800:	0692      	lsls	r2, r2, #26
 8004802:	d42b      	bmi.n	800485c <_printf_common+0xb0>
 8004804:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004808:	4649      	mov	r1, r9
 800480a:	4638      	mov	r0, r7
 800480c:	47c0      	blx	r8
 800480e:	3001      	adds	r0, #1
 8004810:	d01e      	beq.n	8004850 <_printf_common+0xa4>
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	68e5      	ldr	r5, [r4, #12]
 8004816:	6832      	ldr	r2, [r6, #0]
 8004818:	f003 0306 	and.w	r3, r3, #6
 800481c:	2b04      	cmp	r3, #4
 800481e:	bf08      	it	eq
 8004820:	1aad      	subeq	r5, r5, r2
 8004822:	68a3      	ldr	r3, [r4, #8]
 8004824:	6922      	ldr	r2, [r4, #16]
 8004826:	bf0c      	ite	eq
 8004828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800482c:	2500      	movne	r5, #0
 800482e:	4293      	cmp	r3, r2
 8004830:	bfc4      	itt	gt
 8004832:	1a9b      	subgt	r3, r3, r2
 8004834:	18ed      	addgt	r5, r5, r3
 8004836:	2600      	movs	r6, #0
 8004838:	341a      	adds	r4, #26
 800483a:	42b5      	cmp	r5, r6
 800483c:	d11a      	bne.n	8004874 <_printf_common+0xc8>
 800483e:	2000      	movs	r0, #0
 8004840:	e008      	b.n	8004854 <_printf_common+0xa8>
 8004842:	2301      	movs	r3, #1
 8004844:	4652      	mov	r2, sl
 8004846:	4649      	mov	r1, r9
 8004848:	4638      	mov	r0, r7
 800484a:	47c0      	blx	r8
 800484c:	3001      	adds	r0, #1
 800484e:	d103      	bne.n	8004858 <_printf_common+0xac>
 8004850:	f04f 30ff 	mov.w	r0, #4294967295
 8004854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004858:	3501      	adds	r5, #1
 800485a:	e7c6      	b.n	80047ea <_printf_common+0x3e>
 800485c:	18e1      	adds	r1, r4, r3
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	2030      	movs	r0, #48	; 0x30
 8004862:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004866:	4422      	add	r2, r4
 8004868:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800486c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004870:	3302      	adds	r3, #2
 8004872:	e7c7      	b.n	8004804 <_printf_common+0x58>
 8004874:	2301      	movs	r3, #1
 8004876:	4622      	mov	r2, r4
 8004878:	4649      	mov	r1, r9
 800487a:	4638      	mov	r0, r7
 800487c:	47c0      	blx	r8
 800487e:	3001      	adds	r0, #1
 8004880:	d0e6      	beq.n	8004850 <_printf_common+0xa4>
 8004882:	3601      	adds	r6, #1
 8004884:	e7d9      	b.n	800483a <_printf_common+0x8e>
	...

08004888 <_printf_i>:
 8004888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800488c:	460c      	mov	r4, r1
 800488e:	4691      	mov	r9, r2
 8004890:	7e27      	ldrb	r7, [r4, #24]
 8004892:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004894:	2f78      	cmp	r7, #120	; 0x78
 8004896:	4680      	mov	r8, r0
 8004898:	469a      	mov	sl, r3
 800489a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800489e:	d807      	bhi.n	80048b0 <_printf_i+0x28>
 80048a0:	2f62      	cmp	r7, #98	; 0x62
 80048a2:	d80a      	bhi.n	80048ba <_printf_i+0x32>
 80048a4:	2f00      	cmp	r7, #0
 80048a6:	f000 80d8 	beq.w	8004a5a <_printf_i+0x1d2>
 80048aa:	2f58      	cmp	r7, #88	; 0x58
 80048ac:	f000 80a3 	beq.w	80049f6 <_printf_i+0x16e>
 80048b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048b8:	e03a      	b.n	8004930 <_printf_i+0xa8>
 80048ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048be:	2b15      	cmp	r3, #21
 80048c0:	d8f6      	bhi.n	80048b0 <_printf_i+0x28>
 80048c2:	a001      	add	r0, pc, #4	; (adr r0, 80048c8 <_printf_i+0x40>)
 80048c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048c8:	08004921 	.word	0x08004921
 80048cc:	08004935 	.word	0x08004935
 80048d0:	080048b1 	.word	0x080048b1
 80048d4:	080048b1 	.word	0x080048b1
 80048d8:	080048b1 	.word	0x080048b1
 80048dc:	080048b1 	.word	0x080048b1
 80048e0:	08004935 	.word	0x08004935
 80048e4:	080048b1 	.word	0x080048b1
 80048e8:	080048b1 	.word	0x080048b1
 80048ec:	080048b1 	.word	0x080048b1
 80048f0:	080048b1 	.word	0x080048b1
 80048f4:	08004a41 	.word	0x08004a41
 80048f8:	08004965 	.word	0x08004965
 80048fc:	08004a23 	.word	0x08004a23
 8004900:	080048b1 	.word	0x080048b1
 8004904:	080048b1 	.word	0x080048b1
 8004908:	08004a63 	.word	0x08004a63
 800490c:	080048b1 	.word	0x080048b1
 8004910:	08004965 	.word	0x08004965
 8004914:	080048b1 	.word	0x080048b1
 8004918:	080048b1 	.word	0x080048b1
 800491c:	08004a2b 	.word	0x08004a2b
 8004920:	680b      	ldr	r3, [r1, #0]
 8004922:	1d1a      	adds	r2, r3, #4
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	600a      	str	r2, [r1, #0]
 8004928:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800492c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004930:	2301      	movs	r3, #1
 8004932:	e0a3      	b.n	8004a7c <_printf_i+0x1f4>
 8004934:	6825      	ldr	r5, [r4, #0]
 8004936:	6808      	ldr	r0, [r1, #0]
 8004938:	062e      	lsls	r6, r5, #24
 800493a:	f100 0304 	add.w	r3, r0, #4
 800493e:	d50a      	bpl.n	8004956 <_printf_i+0xce>
 8004940:	6805      	ldr	r5, [r0, #0]
 8004942:	600b      	str	r3, [r1, #0]
 8004944:	2d00      	cmp	r5, #0
 8004946:	da03      	bge.n	8004950 <_printf_i+0xc8>
 8004948:	232d      	movs	r3, #45	; 0x2d
 800494a:	426d      	negs	r5, r5
 800494c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004950:	485e      	ldr	r0, [pc, #376]	; (8004acc <_printf_i+0x244>)
 8004952:	230a      	movs	r3, #10
 8004954:	e019      	b.n	800498a <_printf_i+0x102>
 8004956:	f015 0f40 	tst.w	r5, #64	; 0x40
 800495a:	6805      	ldr	r5, [r0, #0]
 800495c:	600b      	str	r3, [r1, #0]
 800495e:	bf18      	it	ne
 8004960:	b22d      	sxthne	r5, r5
 8004962:	e7ef      	b.n	8004944 <_printf_i+0xbc>
 8004964:	680b      	ldr	r3, [r1, #0]
 8004966:	6825      	ldr	r5, [r4, #0]
 8004968:	1d18      	adds	r0, r3, #4
 800496a:	6008      	str	r0, [r1, #0]
 800496c:	0628      	lsls	r0, r5, #24
 800496e:	d501      	bpl.n	8004974 <_printf_i+0xec>
 8004970:	681d      	ldr	r5, [r3, #0]
 8004972:	e002      	b.n	800497a <_printf_i+0xf2>
 8004974:	0669      	lsls	r1, r5, #25
 8004976:	d5fb      	bpl.n	8004970 <_printf_i+0xe8>
 8004978:	881d      	ldrh	r5, [r3, #0]
 800497a:	4854      	ldr	r0, [pc, #336]	; (8004acc <_printf_i+0x244>)
 800497c:	2f6f      	cmp	r7, #111	; 0x6f
 800497e:	bf0c      	ite	eq
 8004980:	2308      	moveq	r3, #8
 8004982:	230a      	movne	r3, #10
 8004984:	2100      	movs	r1, #0
 8004986:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800498a:	6866      	ldr	r6, [r4, #4]
 800498c:	60a6      	str	r6, [r4, #8]
 800498e:	2e00      	cmp	r6, #0
 8004990:	bfa2      	ittt	ge
 8004992:	6821      	ldrge	r1, [r4, #0]
 8004994:	f021 0104 	bicge.w	r1, r1, #4
 8004998:	6021      	strge	r1, [r4, #0]
 800499a:	b90d      	cbnz	r5, 80049a0 <_printf_i+0x118>
 800499c:	2e00      	cmp	r6, #0
 800499e:	d04d      	beq.n	8004a3c <_printf_i+0x1b4>
 80049a0:	4616      	mov	r6, r2
 80049a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80049a6:	fb03 5711 	mls	r7, r3, r1, r5
 80049aa:	5dc7      	ldrb	r7, [r0, r7]
 80049ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049b0:	462f      	mov	r7, r5
 80049b2:	42bb      	cmp	r3, r7
 80049b4:	460d      	mov	r5, r1
 80049b6:	d9f4      	bls.n	80049a2 <_printf_i+0x11a>
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d10b      	bne.n	80049d4 <_printf_i+0x14c>
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	07df      	lsls	r7, r3, #31
 80049c0:	d508      	bpl.n	80049d4 <_printf_i+0x14c>
 80049c2:	6923      	ldr	r3, [r4, #16]
 80049c4:	6861      	ldr	r1, [r4, #4]
 80049c6:	4299      	cmp	r1, r3
 80049c8:	bfde      	ittt	le
 80049ca:	2330      	movle	r3, #48	; 0x30
 80049cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049d4:	1b92      	subs	r2, r2, r6
 80049d6:	6122      	str	r2, [r4, #16]
 80049d8:	f8cd a000 	str.w	sl, [sp]
 80049dc:	464b      	mov	r3, r9
 80049de:	aa03      	add	r2, sp, #12
 80049e0:	4621      	mov	r1, r4
 80049e2:	4640      	mov	r0, r8
 80049e4:	f7ff fee2 	bl	80047ac <_printf_common>
 80049e8:	3001      	adds	r0, #1
 80049ea:	d14c      	bne.n	8004a86 <_printf_i+0x1fe>
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	b004      	add	sp, #16
 80049f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f6:	4835      	ldr	r0, [pc, #212]	; (8004acc <_printf_i+0x244>)
 80049f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	680e      	ldr	r6, [r1, #0]
 8004a00:	061f      	lsls	r7, r3, #24
 8004a02:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a06:	600e      	str	r6, [r1, #0]
 8004a08:	d514      	bpl.n	8004a34 <_printf_i+0x1ac>
 8004a0a:	07d9      	lsls	r1, r3, #31
 8004a0c:	bf44      	itt	mi
 8004a0e:	f043 0320 	orrmi.w	r3, r3, #32
 8004a12:	6023      	strmi	r3, [r4, #0]
 8004a14:	b91d      	cbnz	r5, 8004a1e <_printf_i+0x196>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	f023 0320 	bic.w	r3, r3, #32
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	2310      	movs	r3, #16
 8004a20:	e7b0      	b.n	8004984 <_printf_i+0xfc>
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	f043 0320 	orr.w	r3, r3, #32
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	2378      	movs	r3, #120	; 0x78
 8004a2c:	4828      	ldr	r0, [pc, #160]	; (8004ad0 <_printf_i+0x248>)
 8004a2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a32:	e7e3      	b.n	80049fc <_printf_i+0x174>
 8004a34:	065e      	lsls	r6, r3, #25
 8004a36:	bf48      	it	mi
 8004a38:	b2ad      	uxthmi	r5, r5
 8004a3a:	e7e6      	b.n	8004a0a <_printf_i+0x182>
 8004a3c:	4616      	mov	r6, r2
 8004a3e:	e7bb      	b.n	80049b8 <_printf_i+0x130>
 8004a40:	680b      	ldr	r3, [r1, #0]
 8004a42:	6826      	ldr	r6, [r4, #0]
 8004a44:	6960      	ldr	r0, [r4, #20]
 8004a46:	1d1d      	adds	r5, r3, #4
 8004a48:	600d      	str	r5, [r1, #0]
 8004a4a:	0635      	lsls	r5, r6, #24
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	d501      	bpl.n	8004a54 <_printf_i+0x1cc>
 8004a50:	6018      	str	r0, [r3, #0]
 8004a52:	e002      	b.n	8004a5a <_printf_i+0x1d2>
 8004a54:	0671      	lsls	r1, r6, #25
 8004a56:	d5fb      	bpl.n	8004a50 <_printf_i+0x1c8>
 8004a58:	8018      	strh	r0, [r3, #0]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	6123      	str	r3, [r4, #16]
 8004a5e:	4616      	mov	r6, r2
 8004a60:	e7ba      	b.n	80049d8 <_printf_i+0x150>
 8004a62:	680b      	ldr	r3, [r1, #0]
 8004a64:	1d1a      	adds	r2, r3, #4
 8004a66:	600a      	str	r2, [r1, #0]
 8004a68:	681e      	ldr	r6, [r3, #0]
 8004a6a:	6862      	ldr	r2, [r4, #4]
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4630      	mov	r0, r6
 8004a70:	f7fb fbc6 	bl	8000200 <memchr>
 8004a74:	b108      	cbz	r0, 8004a7a <_printf_i+0x1f2>
 8004a76:	1b80      	subs	r0, r0, r6
 8004a78:	6060      	str	r0, [r4, #4]
 8004a7a:	6863      	ldr	r3, [r4, #4]
 8004a7c:	6123      	str	r3, [r4, #16]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a84:	e7a8      	b.n	80049d8 <_printf_i+0x150>
 8004a86:	6923      	ldr	r3, [r4, #16]
 8004a88:	4632      	mov	r2, r6
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	4640      	mov	r0, r8
 8004a8e:	47d0      	blx	sl
 8004a90:	3001      	adds	r0, #1
 8004a92:	d0ab      	beq.n	80049ec <_printf_i+0x164>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	079b      	lsls	r3, r3, #30
 8004a98:	d413      	bmi.n	8004ac2 <_printf_i+0x23a>
 8004a9a:	68e0      	ldr	r0, [r4, #12]
 8004a9c:	9b03      	ldr	r3, [sp, #12]
 8004a9e:	4298      	cmp	r0, r3
 8004aa0:	bfb8      	it	lt
 8004aa2:	4618      	movlt	r0, r3
 8004aa4:	e7a4      	b.n	80049f0 <_printf_i+0x168>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	4632      	mov	r2, r6
 8004aaa:	4649      	mov	r1, r9
 8004aac:	4640      	mov	r0, r8
 8004aae:	47d0      	blx	sl
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d09b      	beq.n	80049ec <_printf_i+0x164>
 8004ab4:	3501      	adds	r5, #1
 8004ab6:	68e3      	ldr	r3, [r4, #12]
 8004ab8:	9903      	ldr	r1, [sp, #12]
 8004aba:	1a5b      	subs	r3, r3, r1
 8004abc:	42ab      	cmp	r3, r5
 8004abe:	dcf2      	bgt.n	8004aa6 <_printf_i+0x21e>
 8004ac0:	e7eb      	b.n	8004a9a <_printf_i+0x212>
 8004ac2:	2500      	movs	r5, #0
 8004ac4:	f104 0619 	add.w	r6, r4, #25
 8004ac8:	e7f5      	b.n	8004ab6 <_printf_i+0x22e>
 8004aca:	bf00      	nop
 8004acc:	08005565 	.word	0x08005565
 8004ad0:	08005576 	.word	0x08005576

08004ad4 <_sbrk_r>:
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	4d06      	ldr	r5, [pc, #24]	; (8004af0 <_sbrk_r+0x1c>)
 8004ad8:	2300      	movs	r3, #0
 8004ada:	4604      	mov	r4, r0
 8004adc:	4608      	mov	r0, r1
 8004ade:	602b      	str	r3, [r5, #0]
 8004ae0:	f7fc f994 	bl	8000e0c <_sbrk>
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	d102      	bne.n	8004aee <_sbrk_r+0x1a>
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	b103      	cbz	r3, 8004aee <_sbrk_r+0x1a>
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	200001bc 	.word	0x200001bc

08004af4 <__swbuf_r>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	460e      	mov	r6, r1
 8004af8:	4614      	mov	r4, r2
 8004afa:	4605      	mov	r5, r0
 8004afc:	b118      	cbz	r0, 8004b06 <__swbuf_r+0x12>
 8004afe:	6983      	ldr	r3, [r0, #24]
 8004b00:	b90b      	cbnz	r3, 8004b06 <__swbuf_r+0x12>
 8004b02:	f000 f9d9 	bl	8004eb8 <__sinit>
 8004b06:	4b21      	ldr	r3, [pc, #132]	; (8004b8c <__swbuf_r+0x98>)
 8004b08:	429c      	cmp	r4, r3
 8004b0a:	d12b      	bne.n	8004b64 <__swbuf_r+0x70>
 8004b0c:	686c      	ldr	r4, [r5, #4]
 8004b0e:	69a3      	ldr	r3, [r4, #24]
 8004b10:	60a3      	str	r3, [r4, #8]
 8004b12:	89a3      	ldrh	r3, [r4, #12]
 8004b14:	071a      	lsls	r2, r3, #28
 8004b16:	d52f      	bpl.n	8004b78 <__swbuf_r+0x84>
 8004b18:	6923      	ldr	r3, [r4, #16]
 8004b1a:	b36b      	cbz	r3, 8004b78 <__swbuf_r+0x84>
 8004b1c:	6923      	ldr	r3, [r4, #16]
 8004b1e:	6820      	ldr	r0, [r4, #0]
 8004b20:	1ac0      	subs	r0, r0, r3
 8004b22:	6963      	ldr	r3, [r4, #20]
 8004b24:	b2f6      	uxtb	r6, r6
 8004b26:	4283      	cmp	r3, r0
 8004b28:	4637      	mov	r7, r6
 8004b2a:	dc04      	bgt.n	8004b36 <__swbuf_r+0x42>
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f000 f92e 	bl	8004d90 <_fflush_r>
 8004b34:	bb30      	cbnz	r0, 8004b84 <__swbuf_r+0x90>
 8004b36:	68a3      	ldr	r3, [r4, #8]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	60a3      	str	r3, [r4, #8]
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	6022      	str	r2, [r4, #0]
 8004b42:	701e      	strb	r6, [r3, #0]
 8004b44:	6963      	ldr	r3, [r4, #20]
 8004b46:	3001      	adds	r0, #1
 8004b48:	4283      	cmp	r3, r0
 8004b4a:	d004      	beq.n	8004b56 <__swbuf_r+0x62>
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	07db      	lsls	r3, r3, #31
 8004b50:	d506      	bpl.n	8004b60 <__swbuf_r+0x6c>
 8004b52:	2e0a      	cmp	r6, #10
 8004b54:	d104      	bne.n	8004b60 <__swbuf_r+0x6c>
 8004b56:	4621      	mov	r1, r4
 8004b58:	4628      	mov	r0, r5
 8004b5a:	f000 f919 	bl	8004d90 <_fflush_r>
 8004b5e:	b988      	cbnz	r0, 8004b84 <__swbuf_r+0x90>
 8004b60:	4638      	mov	r0, r7
 8004b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b64:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <__swbuf_r+0x9c>)
 8004b66:	429c      	cmp	r4, r3
 8004b68:	d101      	bne.n	8004b6e <__swbuf_r+0x7a>
 8004b6a:	68ac      	ldr	r4, [r5, #8]
 8004b6c:	e7cf      	b.n	8004b0e <__swbuf_r+0x1a>
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <__swbuf_r+0xa0>)
 8004b70:	429c      	cmp	r4, r3
 8004b72:	bf08      	it	eq
 8004b74:	68ec      	ldreq	r4, [r5, #12]
 8004b76:	e7ca      	b.n	8004b0e <__swbuf_r+0x1a>
 8004b78:	4621      	mov	r1, r4
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f000 f80c 	bl	8004b98 <__swsetup_r>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	d0cb      	beq.n	8004b1c <__swbuf_r+0x28>
 8004b84:	f04f 37ff 	mov.w	r7, #4294967295
 8004b88:	e7ea      	b.n	8004b60 <__swbuf_r+0x6c>
 8004b8a:	bf00      	nop
 8004b8c:	080055a8 	.word	0x080055a8
 8004b90:	080055c8 	.word	0x080055c8
 8004b94:	08005588 	.word	0x08005588

08004b98 <__swsetup_r>:
 8004b98:	4b32      	ldr	r3, [pc, #200]	; (8004c64 <__swsetup_r+0xcc>)
 8004b9a:	b570      	push	{r4, r5, r6, lr}
 8004b9c:	681d      	ldr	r5, [r3, #0]
 8004b9e:	4606      	mov	r6, r0
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	b125      	cbz	r5, 8004bae <__swsetup_r+0x16>
 8004ba4:	69ab      	ldr	r3, [r5, #24]
 8004ba6:	b913      	cbnz	r3, 8004bae <__swsetup_r+0x16>
 8004ba8:	4628      	mov	r0, r5
 8004baa:	f000 f985 	bl	8004eb8 <__sinit>
 8004bae:	4b2e      	ldr	r3, [pc, #184]	; (8004c68 <__swsetup_r+0xd0>)
 8004bb0:	429c      	cmp	r4, r3
 8004bb2:	d10f      	bne.n	8004bd4 <__swsetup_r+0x3c>
 8004bb4:	686c      	ldr	r4, [r5, #4]
 8004bb6:	89a3      	ldrh	r3, [r4, #12]
 8004bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bbc:	0719      	lsls	r1, r3, #28
 8004bbe:	d42c      	bmi.n	8004c1a <__swsetup_r+0x82>
 8004bc0:	06dd      	lsls	r5, r3, #27
 8004bc2:	d411      	bmi.n	8004be8 <__swsetup_r+0x50>
 8004bc4:	2309      	movs	r3, #9
 8004bc6:	6033      	str	r3, [r6, #0]
 8004bc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004bcc:	81a3      	strh	r3, [r4, #12]
 8004bce:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd2:	e03e      	b.n	8004c52 <__swsetup_r+0xba>
 8004bd4:	4b25      	ldr	r3, [pc, #148]	; (8004c6c <__swsetup_r+0xd4>)
 8004bd6:	429c      	cmp	r4, r3
 8004bd8:	d101      	bne.n	8004bde <__swsetup_r+0x46>
 8004bda:	68ac      	ldr	r4, [r5, #8]
 8004bdc:	e7eb      	b.n	8004bb6 <__swsetup_r+0x1e>
 8004bde:	4b24      	ldr	r3, [pc, #144]	; (8004c70 <__swsetup_r+0xd8>)
 8004be0:	429c      	cmp	r4, r3
 8004be2:	bf08      	it	eq
 8004be4:	68ec      	ldreq	r4, [r5, #12]
 8004be6:	e7e6      	b.n	8004bb6 <__swsetup_r+0x1e>
 8004be8:	0758      	lsls	r0, r3, #29
 8004bea:	d512      	bpl.n	8004c12 <__swsetup_r+0x7a>
 8004bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bee:	b141      	cbz	r1, 8004c02 <__swsetup_r+0x6a>
 8004bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bf4:	4299      	cmp	r1, r3
 8004bf6:	d002      	beq.n	8004bfe <__swsetup_r+0x66>
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f7ff fa77 	bl	80040ec <_free_r>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	6363      	str	r3, [r4, #52]	; 0x34
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c08:	81a3      	strh	r3, [r4, #12]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	6063      	str	r3, [r4, #4]
 8004c0e:	6923      	ldr	r3, [r4, #16]
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	89a3      	ldrh	r3, [r4, #12]
 8004c14:	f043 0308 	orr.w	r3, r3, #8
 8004c18:	81a3      	strh	r3, [r4, #12]
 8004c1a:	6923      	ldr	r3, [r4, #16]
 8004c1c:	b94b      	cbnz	r3, 8004c32 <__swsetup_r+0x9a>
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c28:	d003      	beq.n	8004c32 <__swsetup_r+0x9a>
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	f000 fa07 	bl	8005040 <__smakebuf_r>
 8004c32:	89a0      	ldrh	r0, [r4, #12]
 8004c34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c38:	f010 0301 	ands.w	r3, r0, #1
 8004c3c:	d00a      	beq.n	8004c54 <__swsetup_r+0xbc>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60a3      	str	r3, [r4, #8]
 8004c42:	6963      	ldr	r3, [r4, #20]
 8004c44:	425b      	negs	r3, r3
 8004c46:	61a3      	str	r3, [r4, #24]
 8004c48:	6923      	ldr	r3, [r4, #16]
 8004c4a:	b943      	cbnz	r3, 8004c5e <__swsetup_r+0xc6>
 8004c4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c50:	d1ba      	bne.n	8004bc8 <__swsetup_r+0x30>
 8004c52:	bd70      	pop	{r4, r5, r6, pc}
 8004c54:	0781      	lsls	r1, r0, #30
 8004c56:	bf58      	it	pl
 8004c58:	6963      	ldrpl	r3, [r4, #20]
 8004c5a:	60a3      	str	r3, [r4, #8]
 8004c5c:	e7f4      	b.n	8004c48 <__swsetup_r+0xb0>
 8004c5e:	2000      	movs	r0, #0
 8004c60:	e7f7      	b.n	8004c52 <__swsetup_r+0xba>
 8004c62:	bf00      	nop
 8004c64:	2000000c 	.word	0x2000000c
 8004c68:	080055a8 	.word	0x080055a8
 8004c6c:	080055c8 	.word	0x080055c8
 8004c70:	08005588 	.word	0x08005588

08004c74 <abort>:
 8004c74:	b508      	push	{r3, lr}
 8004c76:	2006      	movs	r0, #6
 8004c78:	f000 faa4 	bl	80051c4 <raise>
 8004c7c:	2001      	movs	r0, #1
 8004c7e:	f7fc f84d 	bl	8000d1c <_exit>
	...

08004c84 <__sflush_r>:
 8004c84:	898a      	ldrh	r2, [r1, #12]
 8004c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c8a:	4605      	mov	r5, r0
 8004c8c:	0710      	lsls	r0, r2, #28
 8004c8e:	460c      	mov	r4, r1
 8004c90:	d458      	bmi.n	8004d44 <__sflush_r+0xc0>
 8004c92:	684b      	ldr	r3, [r1, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	dc05      	bgt.n	8004ca4 <__sflush_r+0x20>
 8004c98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	dc02      	bgt.n	8004ca4 <__sflush_r+0x20>
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ca6:	2e00      	cmp	r6, #0
 8004ca8:	d0f9      	beq.n	8004c9e <__sflush_r+0x1a>
 8004caa:	2300      	movs	r3, #0
 8004cac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cb0:	682f      	ldr	r7, [r5, #0]
 8004cb2:	602b      	str	r3, [r5, #0]
 8004cb4:	d032      	beq.n	8004d1c <__sflush_r+0x98>
 8004cb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cb8:	89a3      	ldrh	r3, [r4, #12]
 8004cba:	075a      	lsls	r2, r3, #29
 8004cbc:	d505      	bpl.n	8004cca <__sflush_r+0x46>
 8004cbe:	6863      	ldr	r3, [r4, #4]
 8004cc0:	1ac0      	subs	r0, r0, r3
 8004cc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cc4:	b10b      	cbz	r3, 8004cca <__sflush_r+0x46>
 8004cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cc8:	1ac0      	subs	r0, r0, r3
 8004cca:	2300      	movs	r3, #0
 8004ccc:	4602      	mov	r2, r0
 8004cce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cd0:	6a21      	ldr	r1, [r4, #32]
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	47b0      	blx	r6
 8004cd6:	1c43      	adds	r3, r0, #1
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	d106      	bne.n	8004cea <__sflush_r+0x66>
 8004cdc:	6829      	ldr	r1, [r5, #0]
 8004cde:	291d      	cmp	r1, #29
 8004ce0:	d82c      	bhi.n	8004d3c <__sflush_r+0xb8>
 8004ce2:	4a2a      	ldr	r2, [pc, #168]	; (8004d8c <__sflush_r+0x108>)
 8004ce4:	40ca      	lsrs	r2, r1
 8004ce6:	07d6      	lsls	r6, r2, #31
 8004ce8:	d528      	bpl.n	8004d3c <__sflush_r+0xb8>
 8004cea:	2200      	movs	r2, #0
 8004cec:	6062      	str	r2, [r4, #4]
 8004cee:	04d9      	lsls	r1, r3, #19
 8004cf0:	6922      	ldr	r2, [r4, #16]
 8004cf2:	6022      	str	r2, [r4, #0]
 8004cf4:	d504      	bpl.n	8004d00 <__sflush_r+0x7c>
 8004cf6:	1c42      	adds	r2, r0, #1
 8004cf8:	d101      	bne.n	8004cfe <__sflush_r+0x7a>
 8004cfa:	682b      	ldr	r3, [r5, #0]
 8004cfc:	b903      	cbnz	r3, 8004d00 <__sflush_r+0x7c>
 8004cfe:	6560      	str	r0, [r4, #84]	; 0x54
 8004d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d02:	602f      	str	r7, [r5, #0]
 8004d04:	2900      	cmp	r1, #0
 8004d06:	d0ca      	beq.n	8004c9e <__sflush_r+0x1a>
 8004d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d0c:	4299      	cmp	r1, r3
 8004d0e:	d002      	beq.n	8004d16 <__sflush_r+0x92>
 8004d10:	4628      	mov	r0, r5
 8004d12:	f7ff f9eb 	bl	80040ec <_free_r>
 8004d16:	2000      	movs	r0, #0
 8004d18:	6360      	str	r0, [r4, #52]	; 0x34
 8004d1a:	e7c1      	b.n	8004ca0 <__sflush_r+0x1c>
 8004d1c:	6a21      	ldr	r1, [r4, #32]
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4628      	mov	r0, r5
 8004d22:	47b0      	blx	r6
 8004d24:	1c41      	adds	r1, r0, #1
 8004d26:	d1c7      	bne.n	8004cb8 <__sflush_r+0x34>
 8004d28:	682b      	ldr	r3, [r5, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0c4      	beq.n	8004cb8 <__sflush_r+0x34>
 8004d2e:	2b1d      	cmp	r3, #29
 8004d30:	d001      	beq.n	8004d36 <__sflush_r+0xb2>
 8004d32:	2b16      	cmp	r3, #22
 8004d34:	d101      	bne.n	8004d3a <__sflush_r+0xb6>
 8004d36:	602f      	str	r7, [r5, #0]
 8004d38:	e7b1      	b.n	8004c9e <__sflush_r+0x1a>
 8004d3a:	89a3      	ldrh	r3, [r4, #12]
 8004d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d40:	81a3      	strh	r3, [r4, #12]
 8004d42:	e7ad      	b.n	8004ca0 <__sflush_r+0x1c>
 8004d44:	690f      	ldr	r7, [r1, #16]
 8004d46:	2f00      	cmp	r7, #0
 8004d48:	d0a9      	beq.n	8004c9e <__sflush_r+0x1a>
 8004d4a:	0793      	lsls	r3, r2, #30
 8004d4c:	680e      	ldr	r6, [r1, #0]
 8004d4e:	bf08      	it	eq
 8004d50:	694b      	ldreq	r3, [r1, #20]
 8004d52:	600f      	str	r7, [r1, #0]
 8004d54:	bf18      	it	ne
 8004d56:	2300      	movne	r3, #0
 8004d58:	eba6 0807 	sub.w	r8, r6, r7
 8004d5c:	608b      	str	r3, [r1, #8]
 8004d5e:	f1b8 0f00 	cmp.w	r8, #0
 8004d62:	dd9c      	ble.n	8004c9e <__sflush_r+0x1a>
 8004d64:	6a21      	ldr	r1, [r4, #32]
 8004d66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d68:	4643      	mov	r3, r8
 8004d6a:	463a      	mov	r2, r7
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	47b0      	blx	r6
 8004d70:	2800      	cmp	r0, #0
 8004d72:	dc06      	bgt.n	8004d82 <__sflush_r+0xfe>
 8004d74:	89a3      	ldrh	r3, [r4, #12]
 8004d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d7a:	81a3      	strh	r3, [r4, #12]
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d80:	e78e      	b.n	8004ca0 <__sflush_r+0x1c>
 8004d82:	4407      	add	r7, r0
 8004d84:	eba8 0800 	sub.w	r8, r8, r0
 8004d88:	e7e9      	b.n	8004d5e <__sflush_r+0xda>
 8004d8a:	bf00      	nop
 8004d8c:	20400001 	.word	0x20400001

08004d90 <_fflush_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	690b      	ldr	r3, [r1, #16]
 8004d94:	4605      	mov	r5, r0
 8004d96:	460c      	mov	r4, r1
 8004d98:	b913      	cbnz	r3, 8004da0 <_fflush_r+0x10>
 8004d9a:	2500      	movs	r5, #0
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	bd38      	pop	{r3, r4, r5, pc}
 8004da0:	b118      	cbz	r0, 8004daa <_fflush_r+0x1a>
 8004da2:	6983      	ldr	r3, [r0, #24]
 8004da4:	b90b      	cbnz	r3, 8004daa <_fflush_r+0x1a>
 8004da6:	f000 f887 	bl	8004eb8 <__sinit>
 8004daa:	4b14      	ldr	r3, [pc, #80]	; (8004dfc <_fflush_r+0x6c>)
 8004dac:	429c      	cmp	r4, r3
 8004dae:	d11b      	bne.n	8004de8 <_fflush_r+0x58>
 8004db0:	686c      	ldr	r4, [r5, #4]
 8004db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0ef      	beq.n	8004d9a <_fflush_r+0xa>
 8004dba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004dbc:	07d0      	lsls	r0, r2, #31
 8004dbe:	d404      	bmi.n	8004dca <_fflush_r+0x3a>
 8004dc0:	0599      	lsls	r1, r3, #22
 8004dc2:	d402      	bmi.n	8004dca <_fflush_r+0x3a>
 8004dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dc6:	f000 f915 	bl	8004ff4 <__retarget_lock_acquire_recursive>
 8004dca:	4628      	mov	r0, r5
 8004dcc:	4621      	mov	r1, r4
 8004dce:	f7ff ff59 	bl	8004c84 <__sflush_r>
 8004dd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dd4:	07da      	lsls	r2, r3, #31
 8004dd6:	4605      	mov	r5, r0
 8004dd8:	d4e0      	bmi.n	8004d9c <_fflush_r+0xc>
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	059b      	lsls	r3, r3, #22
 8004dde:	d4dd      	bmi.n	8004d9c <_fflush_r+0xc>
 8004de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004de2:	f000 f908 	bl	8004ff6 <__retarget_lock_release_recursive>
 8004de6:	e7d9      	b.n	8004d9c <_fflush_r+0xc>
 8004de8:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <_fflush_r+0x70>)
 8004dea:	429c      	cmp	r4, r3
 8004dec:	d101      	bne.n	8004df2 <_fflush_r+0x62>
 8004dee:	68ac      	ldr	r4, [r5, #8]
 8004df0:	e7df      	b.n	8004db2 <_fflush_r+0x22>
 8004df2:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <_fflush_r+0x74>)
 8004df4:	429c      	cmp	r4, r3
 8004df6:	bf08      	it	eq
 8004df8:	68ec      	ldreq	r4, [r5, #12]
 8004dfa:	e7da      	b.n	8004db2 <_fflush_r+0x22>
 8004dfc:	080055a8 	.word	0x080055a8
 8004e00:	080055c8 	.word	0x080055c8
 8004e04:	08005588 	.word	0x08005588

08004e08 <std>:
 8004e08:	2300      	movs	r3, #0
 8004e0a:	b510      	push	{r4, lr}
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e16:	6083      	str	r3, [r0, #8]
 8004e18:	8181      	strh	r1, [r0, #12]
 8004e1a:	6643      	str	r3, [r0, #100]	; 0x64
 8004e1c:	81c2      	strh	r2, [r0, #14]
 8004e1e:	6183      	str	r3, [r0, #24]
 8004e20:	4619      	mov	r1, r3
 8004e22:	2208      	movs	r2, #8
 8004e24:	305c      	adds	r0, #92	; 0x5c
 8004e26:	f7ff f889 	bl	8003f3c <memset>
 8004e2a:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <std+0x38>)
 8004e2c:	6263      	str	r3, [r4, #36]	; 0x24
 8004e2e:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <std+0x3c>)
 8004e30:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e32:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <std+0x40>)
 8004e34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e36:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <std+0x44>)
 8004e38:	6224      	str	r4, [r4, #32]
 8004e3a:	6323      	str	r3, [r4, #48]	; 0x30
 8004e3c:	bd10      	pop	{r4, pc}
 8004e3e:	bf00      	nop
 8004e40:	080051fd 	.word	0x080051fd
 8004e44:	0800521f 	.word	0x0800521f
 8004e48:	08005257 	.word	0x08005257
 8004e4c:	0800527b 	.word	0x0800527b

08004e50 <_cleanup_r>:
 8004e50:	4901      	ldr	r1, [pc, #4]	; (8004e58 <_cleanup_r+0x8>)
 8004e52:	f000 b8af 	b.w	8004fb4 <_fwalk_reent>
 8004e56:	bf00      	nop
 8004e58:	08004d91 	.word	0x08004d91

08004e5c <__sfmoreglue>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	1e4a      	subs	r2, r1, #1
 8004e60:	2568      	movs	r5, #104	; 0x68
 8004e62:	4355      	muls	r5, r2
 8004e64:	460e      	mov	r6, r1
 8004e66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e6a:	f7ff f98f 	bl	800418c <_malloc_r>
 8004e6e:	4604      	mov	r4, r0
 8004e70:	b140      	cbz	r0, 8004e84 <__sfmoreglue+0x28>
 8004e72:	2100      	movs	r1, #0
 8004e74:	e9c0 1600 	strd	r1, r6, [r0]
 8004e78:	300c      	adds	r0, #12
 8004e7a:	60a0      	str	r0, [r4, #8]
 8004e7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e80:	f7ff f85c 	bl	8003f3c <memset>
 8004e84:	4620      	mov	r0, r4
 8004e86:	bd70      	pop	{r4, r5, r6, pc}

08004e88 <__sfp_lock_acquire>:
 8004e88:	4801      	ldr	r0, [pc, #4]	; (8004e90 <__sfp_lock_acquire+0x8>)
 8004e8a:	f000 b8b3 	b.w	8004ff4 <__retarget_lock_acquire_recursive>
 8004e8e:	bf00      	nop
 8004e90:	200001b8 	.word	0x200001b8

08004e94 <__sfp_lock_release>:
 8004e94:	4801      	ldr	r0, [pc, #4]	; (8004e9c <__sfp_lock_release+0x8>)
 8004e96:	f000 b8ae 	b.w	8004ff6 <__retarget_lock_release_recursive>
 8004e9a:	bf00      	nop
 8004e9c:	200001b8 	.word	0x200001b8

08004ea0 <__sinit_lock_acquire>:
 8004ea0:	4801      	ldr	r0, [pc, #4]	; (8004ea8 <__sinit_lock_acquire+0x8>)
 8004ea2:	f000 b8a7 	b.w	8004ff4 <__retarget_lock_acquire_recursive>
 8004ea6:	bf00      	nop
 8004ea8:	200001b3 	.word	0x200001b3

08004eac <__sinit_lock_release>:
 8004eac:	4801      	ldr	r0, [pc, #4]	; (8004eb4 <__sinit_lock_release+0x8>)
 8004eae:	f000 b8a2 	b.w	8004ff6 <__retarget_lock_release_recursive>
 8004eb2:	bf00      	nop
 8004eb4:	200001b3 	.word	0x200001b3

08004eb8 <__sinit>:
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	4604      	mov	r4, r0
 8004ebc:	f7ff fff0 	bl	8004ea0 <__sinit_lock_acquire>
 8004ec0:	69a3      	ldr	r3, [r4, #24]
 8004ec2:	b11b      	cbz	r3, 8004ecc <__sinit+0x14>
 8004ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ec8:	f7ff bff0 	b.w	8004eac <__sinit_lock_release>
 8004ecc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ed0:	6523      	str	r3, [r4, #80]	; 0x50
 8004ed2:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <__sinit+0x68>)
 8004ed4:	4a13      	ldr	r2, [pc, #76]	; (8004f24 <__sinit+0x6c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004eda:	42a3      	cmp	r3, r4
 8004edc:	bf04      	itt	eq
 8004ede:	2301      	moveq	r3, #1
 8004ee0:	61a3      	streq	r3, [r4, #24]
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f000 f820 	bl	8004f28 <__sfp>
 8004ee8:	6060      	str	r0, [r4, #4]
 8004eea:	4620      	mov	r0, r4
 8004eec:	f000 f81c 	bl	8004f28 <__sfp>
 8004ef0:	60a0      	str	r0, [r4, #8]
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f000 f818 	bl	8004f28 <__sfp>
 8004ef8:	2200      	movs	r2, #0
 8004efa:	60e0      	str	r0, [r4, #12]
 8004efc:	2104      	movs	r1, #4
 8004efe:	6860      	ldr	r0, [r4, #4]
 8004f00:	f7ff ff82 	bl	8004e08 <std>
 8004f04:	68a0      	ldr	r0, [r4, #8]
 8004f06:	2201      	movs	r2, #1
 8004f08:	2109      	movs	r1, #9
 8004f0a:	f7ff ff7d 	bl	8004e08 <std>
 8004f0e:	68e0      	ldr	r0, [r4, #12]
 8004f10:	2202      	movs	r2, #2
 8004f12:	2112      	movs	r1, #18
 8004f14:	f7ff ff78 	bl	8004e08 <std>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	61a3      	str	r3, [r4, #24]
 8004f1c:	e7d2      	b.n	8004ec4 <__sinit+0xc>
 8004f1e:	bf00      	nop
 8004f20:	0800549c 	.word	0x0800549c
 8004f24:	08004e51 	.word	0x08004e51

08004f28 <__sfp>:
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	4607      	mov	r7, r0
 8004f2c:	f7ff ffac 	bl	8004e88 <__sfp_lock_acquire>
 8004f30:	4b1e      	ldr	r3, [pc, #120]	; (8004fac <__sfp+0x84>)
 8004f32:	681e      	ldr	r6, [r3, #0]
 8004f34:	69b3      	ldr	r3, [r6, #24]
 8004f36:	b913      	cbnz	r3, 8004f3e <__sfp+0x16>
 8004f38:	4630      	mov	r0, r6
 8004f3a:	f7ff ffbd 	bl	8004eb8 <__sinit>
 8004f3e:	3648      	adds	r6, #72	; 0x48
 8004f40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	d503      	bpl.n	8004f50 <__sfp+0x28>
 8004f48:	6833      	ldr	r3, [r6, #0]
 8004f4a:	b30b      	cbz	r3, 8004f90 <__sfp+0x68>
 8004f4c:	6836      	ldr	r6, [r6, #0]
 8004f4e:	e7f7      	b.n	8004f40 <__sfp+0x18>
 8004f50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f54:	b9d5      	cbnz	r5, 8004f8c <__sfp+0x64>
 8004f56:	4b16      	ldr	r3, [pc, #88]	; (8004fb0 <__sfp+0x88>)
 8004f58:	60e3      	str	r3, [r4, #12]
 8004f5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f5e:	6665      	str	r5, [r4, #100]	; 0x64
 8004f60:	f000 f847 	bl	8004ff2 <__retarget_lock_init_recursive>
 8004f64:	f7ff ff96 	bl	8004e94 <__sfp_lock_release>
 8004f68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f70:	6025      	str	r5, [r4, #0]
 8004f72:	61a5      	str	r5, [r4, #24]
 8004f74:	2208      	movs	r2, #8
 8004f76:	4629      	mov	r1, r5
 8004f78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f7c:	f7fe ffde 	bl	8003f3c <memset>
 8004f80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f88:	4620      	mov	r0, r4
 8004f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f8c:	3468      	adds	r4, #104	; 0x68
 8004f8e:	e7d9      	b.n	8004f44 <__sfp+0x1c>
 8004f90:	2104      	movs	r1, #4
 8004f92:	4638      	mov	r0, r7
 8004f94:	f7ff ff62 	bl	8004e5c <__sfmoreglue>
 8004f98:	4604      	mov	r4, r0
 8004f9a:	6030      	str	r0, [r6, #0]
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d1d5      	bne.n	8004f4c <__sfp+0x24>
 8004fa0:	f7ff ff78 	bl	8004e94 <__sfp_lock_release>
 8004fa4:	230c      	movs	r3, #12
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	e7ee      	b.n	8004f88 <__sfp+0x60>
 8004faa:	bf00      	nop
 8004fac:	0800549c 	.word	0x0800549c
 8004fb0:	ffff0001 	.word	0xffff0001

08004fb4 <_fwalk_reent>:
 8004fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fb8:	4606      	mov	r6, r0
 8004fba:	4688      	mov	r8, r1
 8004fbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fc0:	2700      	movs	r7, #0
 8004fc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fc6:	f1b9 0901 	subs.w	r9, r9, #1
 8004fca:	d505      	bpl.n	8004fd8 <_fwalk_reent+0x24>
 8004fcc:	6824      	ldr	r4, [r4, #0]
 8004fce:	2c00      	cmp	r4, #0
 8004fd0:	d1f7      	bne.n	8004fc2 <_fwalk_reent+0xe>
 8004fd2:	4638      	mov	r0, r7
 8004fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fd8:	89ab      	ldrh	r3, [r5, #12]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d907      	bls.n	8004fee <_fwalk_reent+0x3a>
 8004fde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	d003      	beq.n	8004fee <_fwalk_reent+0x3a>
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	4630      	mov	r0, r6
 8004fea:	47c0      	blx	r8
 8004fec:	4307      	orrs	r7, r0
 8004fee:	3568      	adds	r5, #104	; 0x68
 8004ff0:	e7e9      	b.n	8004fc6 <_fwalk_reent+0x12>

08004ff2 <__retarget_lock_init_recursive>:
 8004ff2:	4770      	bx	lr

08004ff4 <__retarget_lock_acquire_recursive>:
 8004ff4:	4770      	bx	lr

08004ff6 <__retarget_lock_release_recursive>:
 8004ff6:	4770      	bx	lr

08004ff8 <__swhatbuf_r>:
 8004ff8:	b570      	push	{r4, r5, r6, lr}
 8004ffa:	460e      	mov	r6, r1
 8004ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005000:	2900      	cmp	r1, #0
 8005002:	b096      	sub	sp, #88	; 0x58
 8005004:	4614      	mov	r4, r2
 8005006:	461d      	mov	r5, r3
 8005008:	da07      	bge.n	800501a <__swhatbuf_r+0x22>
 800500a:	2300      	movs	r3, #0
 800500c:	602b      	str	r3, [r5, #0]
 800500e:	89b3      	ldrh	r3, [r6, #12]
 8005010:	061a      	lsls	r2, r3, #24
 8005012:	d410      	bmi.n	8005036 <__swhatbuf_r+0x3e>
 8005014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005018:	e00e      	b.n	8005038 <__swhatbuf_r+0x40>
 800501a:	466a      	mov	r2, sp
 800501c:	f000 f954 	bl	80052c8 <_fstat_r>
 8005020:	2800      	cmp	r0, #0
 8005022:	dbf2      	blt.n	800500a <__swhatbuf_r+0x12>
 8005024:	9a01      	ldr	r2, [sp, #4]
 8005026:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800502a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800502e:	425a      	negs	r2, r3
 8005030:	415a      	adcs	r2, r3
 8005032:	602a      	str	r2, [r5, #0]
 8005034:	e7ee      	b.n	8005014 <__swhatbuf_r+0x1c>
 8005036:	2340      	movs	r3, #64	; 0x40
 8005038:	2000      	movs	r0, #0
 800503a:	6023      	str	r3, [r4, #0]
 800503c:	b016      	add	sp, #88	; 0x58
 800503e:	bd70      	pop	{r4, r5, r6, pc}

08005040 <__smakebuf_r>:
 8005040:	898b      	ldrh	r3, [r1, #12]
 8005042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005044:	079d      	lsls	r5, r3, #30
 8005046:	4606      	mov	r6, r0
 8005048:	460c      	mov	r4, r1
 800504a:	d507      	bpl.n	800505c <__smakebuf_r+0x1c>
 800504c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	6123      	str	r3, [r4, #16]
 8005054:	2301      	movs	r3, #1
 8005056:	6163      	str	r3, [r4, #20]
 8005058:	b002      	add	sp, #8
 800505a:	bd70      	pop	{r4, r5, r6, pc}
 800505c:	ab01      	add	r3, sp, #4
 800505e:	466a      	mov	r2, sp
 8005060:	f7ff ffca 	bl	8004ff8 <__swhatbuf_r>
 8005064:	9900      	ldr	r1, [sp, #0]
 8005066:	4605      	mov	r5, r0
 8005068:	4630      	mov	r0, r6
 800506a:	f7ff f88f 	bl	800418c <_malloc_r>
 800506e:	b948      	cbnz	r0, 8005084 <__smakebuf_r+0x44>
 8005070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005074:	059a      	lsls	r2, r3, #22
 8005076:	d4ef      	bmi.n	8005058 <__smakebuf_r+0x18>
 8005078:	f023 0303 	bic.w	r3, r3, #3
 800507c:	f043 0302 	orr.w	r3, r3, #2
 8005080:	81a3      	strh	r3, [r4, #12]
 8005082:	e7e3      	b.n	800504c <__smakebuf_r+0xc>
 8005084:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <__smakebuf_r+0x7c>)
 8005086:	62b3      	str	r3, [r6, #40]	; 0x28
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	6020      	str	r0, [r4, #0]
 800508c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	9b00      	ldr	r3, [sp, #0]
 8005094:	6163      	str	r3, [r4, #20]
 8005096:	9b01      	ldr	r3, [sp, #4]
 8005098:	6120      	str	r0, [r4, #16]
 800509a:	b15b      	cbz	r3, 80050b4 <__smakebuf_r+0x74>
 800509c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050a0:	4630      	mov	r0, r6
 80050a2:	f000 f923 	bl	80052ec <_isatty_r>
 80050a6:	b128      	cbz	r0, 80050b4 <__smakebuf_r+0x74>
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	81a3      	strh	r3, [r4, #12]
 80050b4:	89a0      	ldrh	r0, [r4, #12]
 80050b6:	4305      	orrs	r5, r0
 80050b8:	81a5      	strh	r5, [r4, #12]
 80050ba:	e7cd      	b.n	8005058 <__smakebuf_r+0x18>
 80050bc:	08004e51 	.word	0x08004e51

080050c0 <memcpy>:
 80050c0:	440a      	add	r2, r1
 80050c2:	4291      	cmp	r1, r2
 80050c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80050c8:	d100      	bne.n	80050cc <memcpy+0xc>
 80050ca:	4770      	bx	lr
 80050cc:	b510      	push	{r4, lr}
 80050ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050d6:	4291      	cmp	r1, r2
 80050d8:	d1f9      	bne.n	80050ce <memcpy+0xe>
 80050da:	bd10      	pop	{r4, pc}

080050dc <memmove>:
 80050dc:	4288      	cmp	r0, r1
 80050de:	b510      	push	{r4, lr}
 80050e0:	eb01 0402 	add.w	r4, r1, r2
 80050e4:	d902      	bls.n	80050ec <memmove+0x10>
 80050e6:	4284      	cmp	r4, r0
 80050e8:	4623      	mov	r3, r4
 80050ea:	d807      	bhi.n	80050fc <memmove+0x20>
 80050ec:	1e43      	subs	r3, r0, #1
 80050ee:	42a1      	cmp	r1, r4
 80050f0:	d008      	beq.n	8005104 <memmove+0x28>
 80050f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050fa:	e7f8      	b.n	80050ee <memmove+0x12>
 80050fc:	4402      	add	r2, r0
 80050fe:	4601      	mov	r1, r0
 8005100:	428a      	cmp	r2, r1
 8005102:	d100      	bne.n	8005106 <memmove+0x2a>
 8005104:	bd10      	pop	{r4, pc}
 8005106:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800510a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800510e:	e7f7      	b.n	8005100 <memmove+0x24>

08005110 <__malloc_lock>:
 8005110:	4801      	ldr	r0, [pc, #4]	; (8005118 <__malloc_lock+0x8>)
 8005112:	f7ff bf6f 	b.w	8004ff4 <__retarget_lock_acquire_recursive>
 8005116:	bf00      	nop
 8005118:	200001b4 	.word	0x200001b4

0800511c <__malloc_unlock>:
 800511c:	4801      	ldr	r0, [pc, #4]	; (8005124 <__malloc_unlock+0x8>)
 800511e:	f7ff bf6a 	b.w	8004ff6 <__retarget_lock_release_recursive>
 8005122:	bf00      	nop
 8005124:	200001b4 	.word	0x200001b4

08005128 <_realloc_r>:
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	4607      	mov	r7, r0
 800512c:	4614      	mov	r4, r2
 800512e:	460e      	mov	r6, r1
 8005130:	b921      	cbnz	r1, 800513c <_realloc_r+0x14>
 8005132:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005136:	4611      	mov	r1, r2
 8005138:	f7ff b828 	b.w	800418c <_malloc_r>
 800513c:	b922      	cbnz	r2, 8005148 <_realloc_r+0x20>
 800513e:	f7fe ffd5 	bl	80040ec <_free_r>
 8005142:	4625      	mov	r5, r4
 8005144:	4628      	mov	r0, r5
 8005146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005148:	f000 f8f2 	bl	8005330 <_malloc_usable_size_r>
 800514c:	42a0      	cmp	r0, r4
 800514e:	d20f      	bcs.n	8005170 <_realloc_r+0x48>
 8005150:	4621      	mov	r1, r4
 8005152:	4638      	mov	r0, r7
 8005154:	f7ff f81a 	bl	800418c <_malloc_r>
 8005158:	4605      	mov	r5, r0
 800515a:	2800      	cmp	r0, #0
 800515c:	d0f2      	beq.n	8005144 <_realloc_r+0x1c>
 800515e:	4631      	mov	r1, r6
 8005160:	4622      	mov	r2, r4
 8005162:	f7ff ffad 	bl	80050c0 <memcpy>
 8005166:	4631      	mov	r1, r6
 8005168:	4638      	mov	r0, r7
 800516a:	f7fe ffbf 	bl	80040ec <_free_r>
 800516e:	e7e9      	b.n	8005144 <_realloc_r+0x1c>
 8005170:	4635      	mov	r5, r6
 8005172:	e7e7      	b.n	8005144 <_realloc_r+0x1c>

08005174 <_raise_r>:
 8005174:	291f      	cmp	r1, #31
 8005176:	b538      	push	{r3, r4, r5, lr}
 8005178:	4604      	mov	r4, r0
 800517a:	460d      	mov	r5, r1
 800517c:	d904      	bls.n	8005188 <_raise_r+0x14>
 800517e:	2316      	movs	r3, #22
 8005180:	6003      	str	r3, [r0, #0]
 8005182:	f04f 30ff 	mov.w	r0, #4294967295
 8005186:	bd38      	pop	{r3, r4, r5, pc}
 8005188:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800518a:	b112      	cbz	r2, 8005192 <_raise_r+0x1e>
 800518c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005190:	b94b      	cbnz	r3, 80051a6 <_raise_r+0x32>
 8005192:	4620      	mov	r0, r4
 8005194:	f000 f830 	bl	80051f8 <_getpid_r>
 8005198:	462a      	mov	r2, r5
 800519a:	4601      	mov	r1, r0
 800519c:	4620      	mov	r0, r4
 800519e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051a2:	f000 b817 	b.w	80051d4 <_kill_r>
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d00a      	beq.n	80051c0 <_raise_r+0x4c>
 80051aa:	1c59      	adds	r1, r3, #1
 80051ac:	d103      	bne.n	80051b6 <_raise_r+0x42>
 80051ae:	2316      	movs	r3, #22
 80051b0:	6003      	str	r3, [r0, #0]
 80051b2:	2001      	movs	r0, #1
 80051b4:	e7e7      	b.n	8005186 <_raise_r+0x12>
 80051b6:	2400      	movs	r4, #0
 80051b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80051bc:	4628      	mov	r0, r5
 80051be:	4798      	blx	r3
 80051c0:	2000      	movs	r0, #0
 80051c2:	e7e0      	b.n	8005186 <_raise_r+0x12>

080051c4 <raise>:
 80051c4:	4b02      	ldr	r3, [pc, #8]	; (80051d0 <raise+0xc>)
 80051c6:	4601      	mov	r1, r0
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	f7ff bfd3 	b.w	8005174 <_raise_r>
 80051ce:	bf00      	nop
 80051d0:	2000000c 	.word	0x2000000c

080051d4 <_kill_r>:
 80051d4:	b538      	push	{r3, r4, r5, lr}
 80051d6:	4d07      	ldr	r5, [pc, #28]	; (80051f4 <_kill_r+0x20>)
 80051d8:	2300      	movs	r3, #0
 80051da:	4604      	mov	r4, r0
 80051dc:	4608      	mov	r0, r1
 80051de:	4611      	mov	r1, r2
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	f7fb fd8b 	bl	8000cfc <_kill>
 80051e6:	1c43      	adds	r3, r0, #1
 80051e8:	d102      	bne.n	80051f0 <_kill_r+0x1c>
 80051ea:	682b      	ldr	r3, [r5, #0]
 80051ec:	b103      	cbz	r3, 80051f0 <_kill_r+0x1c>
 80051ee:	6023      	str	r3, [r4, #0]
 80051f0:	bd38      	pop	{r3, r4, r5, pc}
 80051f2:	bf00      	nop
 80051f4:	200001bc 	.word	0x200001bc

080051f8 <_getpid_r>:
 80051f8:	f7fb bd78 	b.w	8000cec <_getpid>

080051fc <__sread>:
 80051fc:	b510      	push	{r4, lr}
 80051fe:	460c      	mov	r4, r1
 8005200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005204:	f000 f89c 	bl	8005340 <_read_r>
 8005208:	2800      	cmp	r0, #0
 800520a:	bfab      	itete	ge
 800520c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800520e:	89a3      	ldrhlt	r3, [r4, #12]
 8005210:	181b      	addge	r3, r3, r0
 8005212:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005216:	bfac      	ite	ge
 8005218:	6563      	strge	r3, [r4, #84]	; 0x54
 800521a:	81a3      	strhlt	r3, [r4, #12]
 800521c:	bd10      	pop	{r4, pc}

0800521e <__swrite>:
 800521e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005222:	461f      	mov	r7, r3
 8005224:	898b      	ldrh	r3, [r1, #12]
 8005226:	05db      	lsls	r3, r3, #23
 8005228:	4605      	mov	r5, r0
 800522a:	460c      	mov	r4, r1
 800522c:	4616      	mov	r6, r2
 800522e:	d505      	bpl.n	800523c <__swrite+0x1e>
 8005230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005234:	2302      	movs	r3, #2
 8005236:	2200      	movs	r2, #0
 8005238:	f000 f868 	bl	800530c <_lseek_r>
 800523c:	89a3      	ldrh	r3, [r4, #12]
 800523e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005246:	81a3      	strh	r3, [r4, #12]
 8005248:	4632      	mov	r2, r6
 800524a:	463b      	mov	r3, r7
 800524c:	4628      	mov	r0, r5
 800524e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005252:	f000 b817 	b.w	8005284 <_write_r>

08005256 <__sseek>:
 8005256:	b510      	push	{r4, lr}
 8005258:	460c      	mov	r4, r1
 800525a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800525e:	f000 f855 	bl	800530c <_lseek_r>
 8005262:	1c43      	adds	r3, r0, #1
 8005264:	89a3      	ldrh	r3, [r4, #12]
 8005266:	bf15      	itete	ne
 8005268:	6560      	strne	r0, [r4, #84]	; 0x54
 800526a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800526e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005272:	81a3      	strheq	r3, [r4, #12]
 8005274:	bf18      	it	ne
 8005276:	81a3      	strhne	r3, [r4, #12]
 8005278:	bd10      	pop	{r4, pc}

0800527a <__sclose>:
 800527a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800527e:	f000 b813 	b.w	80052a8 <_close_r>
	...

08005284 <_write_r>:
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4d07      	ldr	r5, [pc, #28]	; (80052a4 <_write_r+0x20>)
 8005288:	4604      	mov	r4, r0
 800528a:	4608      	mov	r0, r1
 800528c:	4611      	mov	r1, r2
 800528e:	2200      	movs	r2, #0
 8005290:	602a      	str	r2, [r5, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	f7fb fd69 	bl	8000d6a <_write>
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d102      	bne.n	80052a2 <_write_r+0x1e>
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	b103      	cbz	r3, 80052a2 <_write_r+0x1e>
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	200001bc 	.word	0x200001bc

080052a8 <_close_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4d06      	ldr	r5, [pc, #24]	; (80052c4 <_close_r+0x1c>)
 80052ac:	2300      	movs	r3, #0
 80052ae:	4604      	mov	r4, r0
 80052b0:	4608      	mov	r0, r1
 80052b2:	602b      	str	r3, [r5, #0]
 80052b4:	f7fb fd75 	bl	8000da2 <_close>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d102      	bne.n	80052c2 <_close_r+0x1a>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	b103      	cbz	r3, 80052c2 <_close_r+0x1a>
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	200001bc 	.word	0x200001bc

080052c8 <_fstat_r>:
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	4d07      	ldr	r5, [pc, #28]	; (80052e8 <_fstat_r+0x20>)
 80052cc:	2300      	movs	r3, #0
 80052ce:	4604      	mov	r4, r0
 80052d0:	4608      	mov	r0, r1
 80052d2:	4611      	mov	r1, r2
 80052d4:	602b      	str	r3, [r5, #0]
 80052d6:	f7fb fd70 	bl	8000dba <_fstat>
 80052da:	1c43      	adds	r3, r0, #1
 80052dc:	d102      	bne.n	80052e4 <_fstat_r+0x1c>
 80052de:	682b      	ldr	r3, [r5, #0]
 80052e0:	b103      	cbz	r3, 80052e4 <_fstat_r+0x1c>
 80052e2:	6023      	str	r3, [r4, #0]
 80052e4:	bd38      	pop	{r3, r4, r5, pc}
 80052e6:	bf00      	nop
 80052e8:	200001bc 	.word	0x200001bc

080052ec <_isatty_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4d06      	ldr	r5, [pc, #24]	; (8005308 <_isatty_r+0x1c>)
 80052f0:	2300      	movs	r3, #0
 80052f2:	4604      	mov	r4, r0
 80052f4:	4608      	mov	r0, r1
 80052f6:	602b      	str	r3, [r5, #0]
 80052f8:	f7fb fd6f 	bl	8000dda <_isatty>
 80052fc:	1c43      	adds	r3, r0, #1
 80052fe:	d102      	bne.n	8005306 <_isatty_r+0x1a>
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	b103      	cbz	r3, 8005306 <_isatty_r+0x1a>
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	bd38      	pop	{r3, r4, r5, pc}
 8005308:	200001bc 	.word	0x200001bc

0800530c <_lseek_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	4d07      	ldr	r5, [pc, #28]	; (800532c <_lseek_r+0x20>)
 8005310:	4604      	mov	r4, r0
 8005312:	4608      	mov	r0, r1
 8005314:	4611      	mov	r1, r2
 8005316:	2200      	movs	r2, #0
 8005318:	602a      	str	r2, [r5, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	f7fb fd68 	bl	8000df0 <_lseek>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d102      	bne.n	800532a <_lseek_r+0x1e>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	b103      	cbz	r3, 800532a <_lseek_r+0x1e>
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	200001bc 	.word	0x200001bc

08005330 <_malloc_usable_size_r>:
 8005330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005334:	1f18      	subs	r0, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	bfbc      	itt	lt
 800533a:	580b      	ldrlt	r3, [r1, r0]
 800533c:	18c0      	addlt	r0, r0, r3
 800533e:	4770      	bx	lr

08005340 <_read_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4d07      	ldr	r5, [pc, #28]	; (8005360 <_read_r+0x20>)
 8005344:	4604      	mov	r4, r0
 8005346:	4608      	mov	r0, r1
 8005348:	4611      	mov	r1, r2
 800534a:	2200      	movs	r2, #0
 800534c:	602a      	str	r2, [r5, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	f7fb fcee 	bl	8000d30 <_read>
 8005354:	1c43      	adds	r3, r0, #1
 8005356:	d102      	bne.n	800535e <_read_r+0x1e>
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	b103      	cbz	r3, 800535e <_read_r+0x1e>
 800535c:	6023      	str	r3, [r4, #0]
 800535e:	bd38      	pop	{r3, r4, r5, pc}
 8005360:	200001bc 	.word	0x200001bc

08005364 <_init>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr

08005370 <_fini>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	bf00      	nop
 8005374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005376:	bc08      	pop	{r3}
 8005378:	469e      	mov	lr, r3
 800537a:	4770      	bx	lr
