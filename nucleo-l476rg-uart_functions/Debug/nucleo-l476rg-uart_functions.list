
nucleo-l476rg-uart_functions.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000494c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08004adc  08004adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d94  08004d94  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08004d94  08004d94  00014d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d9c  08004d9c  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d9c  08004d9c  00014d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004da0  08004da0  00014da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08004da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200000b0  08004e54  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08004e54  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3d3  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002132  00000000  00000000  0002e4b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  000305e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  00031000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000269c0  00000000  00000000  00031940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be3c  00000000  00000000  00058300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea562  00000000  00000000  0006413c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014e69e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cc4  00000000  00000000  0014e6f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ac4 	.word	0x08004ac4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08004ac4 	.word	0x08004ac4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_uldivmod>:
 8000618:	b953      	cbnz	r3, 8000630 <__aeabi_uldivmod+0x18>
 800061a:	b94a      	cbnz	r2, 8000630 <__aeabi_uldivmod+0x18>
 800061c:	2900      	cmp	r1, #0
 800061e:	bf08      	it	eq
 8000620:	2800      	cmpeq	r0, #0
 8000622:	bf1c      	itt	ne
 8000624:	f04f 31ff 	movne.w	r1, #4294967295
 8000628:	f04f 30ff 	movne.w	r0, #4294967295
 800062c:	f000 b96e 	b.w	800090c <__aeabi_idiv0>
 8000630:	f1ad 0c08 	sub.w	ip, sp, #8
 8000634:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000638:	f000 f806 	bl	8000648 <__udivmoddi4>
 800063c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000644:	b004      	add	sp, #16
 8000646:	4770      	bx	lr

08000648 <__udivmoddi4>:
 8000648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800064c:	9d08      	ldr	r5, [sp, #32]
 800064e:	4604      	mov	r4, r0
 8000650:	468c      	mov	ip, r1
 8000652:	2b00      	cmp	r3, #0
 8000654:	f040 8083 	bne.w	800075e <__udivmoddi4+0x116>
 8000658:	428a      	cmp	r2, r1
 800065a:	4617      	mov	r7, r2
 800065c:	d947      	bls.n	80006ee <__udivmoddi4+0xa6>
 800065e:	fab2 f282 	clz	r2, r2
 8000662:	b142      	cbz	r2, 8000676 <__udivmoddi4+0x2e>
 8000664:	f1c2 0020 	rsb	r0, r2, #32
 8000668:	fa24 f000 	lsr.w	r0, r4, r0
 800066c:	4091      	lsls	r1, r2
 800066e:	4097      	lsls	r7, r2
 8000670:	ea40 0c01 	orr.w	ip, r0, r1
 8000674:	4094      	lsls	r4, r2
 8000676:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800067a:	0c23      	lsrs	r3, r4, #16
 800067c:	fbbc f6f8 	udiv	r6, ip, r8
 8000680:	fa1f fe87 	uxth.w	lr, r7
 8000684:	fb08 c116 	mls	r1, r8, r6, ip
 8000688:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800068c:	fb06 f10e 	mul.w	r1, r6, lr
 8000690:	4299      	cmp	r1, r3
 8000692:	d909      	bls.n	80006a8 <__udivmoddi4+0x60>
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	f106 30ff 	add.w	r0, r6, #4294967295
 800069a:	f080 8119 	bcs.w	80008d0 <__udivmoddi4+0x288>
 800069e:	4299      	cmp	r1, r3
 80006a0:	f240 8116 	bls.w	80008d0 <__udivmoddi4+0x288>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	443b      	add	r3, r7
 80006a8:	1a5b      	subs	r3, r3, r1
 80006aa:	b2a4      	uxth	r4, r4
 80006ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80006b0:	fb08 3310 	mls	r3, r8, r0, r3
 80006b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006bc:	45a6      	cmp	lr, r4
 80006be:	d909      	bls.n	80006d4 <__udivmoddi4+0x8c>
 80006c0:	193c      	adds	r4, r7, r4
 80006c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006c6:	f080 8105 	bcs.w	80008d4 <__udivmoddi4+0x28c>
 80006ca:	45a6      	cmp	lr, r4
 80006cc:	f240 8102 	bls.w	80008d4 <__udivmoddi4+0x28c>
 80006d0:	3802      	subs	r0, #2
 80006d2:	443c      	add	r4, r7
 80006d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006d8:	eba4 040e 	sub.w	r4, r4, lr
 80006dc:	2600      	movs	r6, #0
 80006de:	b11d      	cbz	r5, 80006e8 <__udivmoddi4+0xa0>
 80006e0:	40d4      	lsrs	r4, r2
 80006e2:	2300      	movs	r3, #0
 80006e4:	e9c5 4300 	strd	r4, r3, [r5]
 80006e8:	4631      	mov	r1, r6
 80006ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ee:	b902      	cbnz	r2, 80006f2 <__udivmoddi4+0xaa>
 80006f0:	deff      	udf	#255	; 0xff
 80006f2:	fab2 f282 	clz	r2, r2
 80006f6:	2a00      	cmp	r2, #0
 80006f8:	d150      	bne.n	800079c <__udivmoddi4+0x154>
 80006fa:	1bcb      	subs	r3, r1, r7
 80006fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000700:	fa1f f887 	uxth.w	r8, r7
 8000704:	2601      	movs	r6, #1
 8000706:	fbb3 fcfe 	udiv	ip, r3, lr
 800070a:	0c21      	lsrs	r1, r4, #16
 800070c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000710:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000714:	fb08 f30c 	mul.w	r3, r8, ip
 8000718:	428b      	cmp	r3, r1
 800071a:	d907      	bls.n	800072c <__udivmoddi4+0xe4>
 800071c:	1879      	adds	r1, r7, r1
 800071e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000722:	d202      	bcs.n	800072a <__udivmoddi4+0xe2>
 8000724:	428b      	cmp	r3, r1
 8000726:	f200 80e9 	bhi.w	80008fc <__udivmoddi4+0x2b4>
 800072a:	4684      	mov	ip, r0
 800072c:	1ac9      	subs	r1, r1, r3
 800072e:	b2a3      	uxth	r3, r4
 8000730:	fbb1 f0fe 	udiv	r0, r1, lr
 8000734:	fb0e 1110 	mls	r1, lr, r0, r1
 8000738:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800073c:	fb08 f800 	mul.w	r8, r8, r0
 8000740:	45a0      	cmp	r8, r4
 8000742:	d907      	bls.n	8000754 <__udivmoddi4+0x10c>
 8000744:	193c      	adds	r4, r7, r4
 8000746:	f100 33ff 	add.w	r3, r0, #4294967295
 800074a:	d202      	bcs.n	8000752 <__udivmoddi4+0x10a>
 800074c:	45a0      	cmp	r8, r4
 800074e:	f200 80d9 	bhi.w	8000904 <__udivmoddi4+0x2bc>
 8000752:	4618      	mov	r0, r3
 8000754:	eba4 0408 	sub.w	r4, r4, r8
 8000758:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800075c:	e7bf      	b.n	80006de <__udivmoddi4+0x96>
 800075e:	428b      	cmp	r3, r1
 8000760:	d909      	bls.n	8000776 <__udivmoddi4+0x12e>
 8000762:	2d00      	cmp	r5, #0
 8000764:	f000 80b1 	beq.w	80008ca <__udivmoddi4+0x282>
 8000768:	2600      	movs	r6, #0
 800076a:	e9c5 0100 	strd	r0, r1, [r5]
 800076e:	4630      	mov	r0, r6
 8000770:	4631      	mov	r1, r6
 8000772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000776:	fab3 f683 	clz	r6, r3
 800077a:	2e00      	cmp	r6, #0
 800077c:	d14a      	bne.n	8000814 <__udivmoddi4+0x1cc>
 800077e:	428b      	cmp	r3, r1
 8000780:	d302      	bcc.n	8000788 <__udivmoddi4+0x140>
 8000782:	4282      	cmp	r2, r0
 8000784:	f200 80b8 	bhi.w	80008f8 <__udivmoddi4+0x2b0>
 8000788:	1a84      	subs	r4, r0, r2
 800078a:	eb61 0103 	sbc.w	r1, r1, r3
 800078e:	2001      	movs	r0, #1
 8000790:	468c      	mov	ip, r1
 8000792:	2d00      	cmp	r5, #0
 8000794:	d0a8      	beq.n	80006e8 <__udivmoddi4+0xa0>
 8000796:	e9c5 4c00 	strd	r4, ip, [r5]
 800079a:	e7a5      	b.n	80006e8 <__udivmoddi4+0xa0>
 800079c:	f1c2 0320 	rsb	r3, r2, #32
 80007a0:	fa20 f603 	lsr.w	r6, r0, r3
 80007a4:	4097      	lsls	r7, r2
 80007a6:	fa01 f002 	lsl.w	r0, r1, r2
 80007aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ae:	40d9      	lsrs	r1, r3
 80007b0:	4330      	orrs	r0, r6
 80007b2:	0c03      	lsrs	r3, r0, #16
 80007b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007b8:	fa1f f887 	uxth.w	r8, r7
 80007bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80007c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007c4:	fb06 f108 	mul.w	r1, r6, r8
 80007c8:	4299      	cmp	r1, r3
 80007ca:	fa04 f402 	lsl.w	r4, r4, r2
 80007ce:	d909      	bls.n	80007e4 <__udivmoddi4+0x19c>
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007d6:	f080 808d 	bcs.w	80008f4 <__udivmoddi4+0x2ac>
 80007da:	4299      	cmp	r1, r3
 80007dc:	f240 808a 	bls.w	80008f4 <__udivmoddi4+0x2ac>
 80007e0:	3e02      	subs	r6, #2
 80007e2:	443b      	add	r3, r7
 80007e4:	1a5b      	subs	r3, r3, r1
 80007e6:	b281      	uxth	r1, r0
 80007e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80007ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80007f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f4:	fb00 f308 	mul.w	r3, r0, r8
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0x1c4>
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000802:	d273      	bcs.n	80008ec <__udivmoddi4+0x2a4>
 8000804:	428b      	cmp	r3, r1
 8000806:	d971      	bls.n	80008ec <__udivmoddi4+0x2a4>
 8000808:	3802      	subs	r0, #2
 800080a:	4439      	add	r1, r7
 800080c:	1acb      	subs	r3, r1, r3
 800080e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000812:	e778      	b.n	8000706 <__udivmoddi4+0xbe>
 8000814:	f1c6 0c20 	rsb	ip, r6, #32
 8000818:	fa03 f406 	lsl.w	r4, r3, r6
 800081c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000820:	431c      	orrs	r4, r3
 8000822:	fa20 f70c 	lsr.w	r7, r0, ip
 8000826:	fa01 f306 	lsl.w	r3, r1, r6
 800082a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800082e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000832:	431f      	orrs	r7, r3
 8000834:	0c3b      	lsrs	r3, r7, #16
 8000836:	fbb1 f9fe 	udiv	r9, r1, lr
 800083a:	fa1f f884 	uxth.w	r8, r4
 800083e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000842:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000846:	fb09 fa08 	mul.w	sl, r9, r8
 800084a:	458a      	cmp	sl, r1
 800084c:	fa02 f206 	lsl.w	r2, r2, r6
 8000850:	fa00 f306 	lsl.w	r3, r0, r6
 8000854:	d908      	bls.n	8000868 <__udivmoddi4+0x220>
 8000856:	1861      	adds	r1, r4, r1
 8000858:	f109 30ff 	add.w	r0, r9, #4294967295
 800085c:	d248      	bcs.n	80008f0 <__udivmoddi4+0x2a8>
 800085e:	458a      	cmp	sl, r1
 8000860:	d946      	bls.n	80008f0 <__udivmoddi4+0x2a8>
 8000862:	f1a9 0902 	sub.w	r9, r9, #2
 8000866:	4421      	add	r1, r4
 8000868:	eba1 010a 	sub.w	r1, r1, sl
 800086c:	b2bf      	uxth	r7, r7
 800086e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000872:	fb0e 1110 	mls	r1, lr, r0, r1
 8000876:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800087a:	fb00 f808 	mul.w	r8, r0, r8
 800087e:	45b8      	cmp	r8, r7
 8000880:	d907      	bls.n	8000892 <__udivmoddi4+0x24a>
 8000882:	19e7      	adds	r7, r4, r7
 8000884:	f100 31ff 	add.w	r1, r0, #4294967295
 8000888:	d22e      	bcs.n	80008e8 <__udivmoddi4+0x2a0>
 800088a:	45b8      	cmp	r8, r7
 800088c:	d92c      	bls.n	80008e8 <__udivmoddi4+0x2a0>
 800088e:	3802      	subs	r0, #2
 8000890:	4427      	add	r7, r4
 8000892:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000896:	eba7 0708 	sub.w	r7, r7, r8
 800089a:	fba0 8902 	umull	r8, r9, r0, r2
 800089e:	454f      	cmp	r7, r9
 80008a0:	46c6      	mov	lr, r8
 80008a2:	4649      	mov	r1, r9
 80008a4:	d31a      	bcc.n	80008dc <__udivmoddi4+0x294>
 80008a6:	d017      	beq.n	80008d8 <__udivmoddi4+0x290>
 80008a8:	b15d      	cbz	r5, 80008c2 <__udivmoddi4+0x27a>
 80008aa:	ebb3 020e 	subs.w	r2, r3, lr
 80008ae:	eb67 0701 	sbc.w	r7, r7, r1
 80008b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008b6:	40f2      	lsrs	r2, r6
 80008b8:	ea4c 0202 	orr.w	r2, ip, r2
 80008bc:	40f7      	lsrs	r7, r6
 80008be:	e9c5 2700 	strd	r2, r7, [r5]
 80008c2:	2600      	movs	r6, #0
 80008c4:	4631      	mov	r1, r6
 80008c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ca:	462e      	mov	r6, r5
 80008cc:	4628      	mov	r0, r5
 80008ce:	e70b      	b.n	80006e8 <__udivmoddi4+0xa0>
 80008d0:	4606      	mov	r6, r0
 80008d2:	e6e9      	b.n	80006a8 <__udivmoddi4+0x60>
 80008d4:	4618      	mov	r0, r3
 80008d6:	e6fd      	b.n	80006d4 <__udivmoddi4+0x8c>
 80008d8:	4543      	cmp	r3, r8
 80008da:	d2e5      	bcs.n	80008a8 <__udivmoddi4+0x260>
 80008dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80008e0:	eb69 0104 	sbc.w	r1, r9, r4
 80008e4:	3801      	subs	r0, #1
 80008e6:	e7df      	b.n	80008a8 <__udivmoddi4+0x260>
 80008e8:	4608      	mov	r0, r1
 80008ea:	e7d2      	b.n	8000892 <__udivmoddi4+0x24a>
 80008ec:	4660      	mov	r0, ip
 80008ee:	e78d      	b.n	800080c <__udivmoddi4+0x1c4>
 80008f0:	4681      	mov	r9, r0
 80008f2:	e7b9      	b.n	8000868 <__udivmoddi4+0x220>
 80008f4:	4666      	mov	r6, ip
 80008f6:	e775      	b.n	80007e4 <__udivmoddi4+0x19c>
 80008f8:	4630      	mov	r0, r6
 80008fa:	e74a      	b.n	8000792 <__udivmoddi4+0x14a>
 80008fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000900:	4439      	add	r1, r7
 8000902:	e713      	b.n	800072c <__udivmoddi4+0xe4>
 8000904:	3802      	subs	r0, #2
 8000906:	443c      	add	r4, r7
 8000908:	e724      	b.n	8000754 <__udivmoddi4+0x10c>
 800090a:	bf00      	nop

0800090c <__aeabi_idiv0>:
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b096      	sub	sp, #88	; 0x58
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	2244      	movs	r2, #68	; 0x44
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f003 fc5e 	bl	80041e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	463b      	mov	r3, r7
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000932:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000936:	f001 f829 	bl	800198c <HAL_PWREx_ControlVoltageScaling>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000940:	f000 f8d0 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000944:	2302      	movs	r3, #2
 8000946:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800094c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800094e:	2310      	movs	r3, #16
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000952:	2302      	movs	r3, #2
 8000954:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000956:	2302      	movs	r3, #2
 8000958:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800095a:	2301      	movs	r3, #1
 800095c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800095e:	230a      	movs	r3, #10
 8000960:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000962:	2307      	movs	r3, #7
 8000964:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000966:	2302      	movs	r3, #2
 8000968:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800096a:	2302      	movs	r3, #2
 800096c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4618      	mov	r0, r3
 8000974:	f001 f860 	bl	8001a38 <HAL_RCC_OscConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800097e:	f000 f8b1 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000982:	230f      	movs	r3, #15
 8000984:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000986:	2303      	movs	r3, #3
 8000988:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	2104      	movs	r1, #4
 800099a:	4618      	mov	r0, r3
 800099c:	f001 fc32 	bl	8002204 <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009a6:	f000 f89d 	bl	8000ae4 <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3758      	adds	r7, #88	; 0x58
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009ba:	4a15      	ldr	r2, [pc, #84]	; (8000a10 <MX_USART2_UART_Init+0x5c>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009f8:	f002 fac6 	bl	8002f88 <HAL_UART_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a02:	f000 f86f 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200000e0 	.word	0x200000e0
 8000a10:	40004400 	.word	0x40004400

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <MX_GPIO_Init+0xc4>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a2a      	ldr	r2, [pc, #168]	; (8000ad8 <MX_GPIO_Init+0xc4>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <MX_GPIO_Init+0xc4>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <MX_GPIO_Init+0xc4>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a24      	ldr	r2, [pc, #144]	; (8000ad8 <MX_GPIO_Init+0xc4>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <MX_GPIO_Init+0xc4>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <MX_GPIO_Init+0xc4>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <MX_GPIO_Init+0xc4>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_GPIO_Init+0xc4>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_GPIO_Init+0xc4>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4a18      	ldr	r2, [pc, #96]	; (8000ad8 <MX_GPIO_Init+0xc4>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_GPIO_Init+0xc4>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a92:	f000 ff55 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_GPIO_Init+0xc8>)
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <MX_GPIO_Init+0xcc>)
 8000aac:	f000 fd9e 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ab0:	2320      	movs	r3, #32
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aca:	f000 fd8f 	bl	80015ec <HAL_GPIO_Init>

}
 8000ace:	bf00      	nop
 8000ad0:	3728      	adds	r7, #40	; 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	10210000 	.word	0x10210000
 8000ae0:	48000800 	.word	0x48000800

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af6:	f000 fb49 	bl	800118c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afa:	f7ff ff09 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afe:	f7ff ff89 	bl	8000a14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b02:	f7ff ff57 	bl	80009b4 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  initializeCLI();
 8000b06:	f000 fa01 	bl	8000f0c <initializeCLI>

  float f1 = 5;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <main+0x58>)
 8000b0c:	617b      	str	r3, [r7, #20]
  float f2 = 2.5;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <main+0x5c>)
 8000b10:	613b      	str	r3, [r7, #16]
  float f3 = f1 / f2;
 8000b12:	edd7 6a05 	vldr	s13, [r7, #20]
 8000b16:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b1e:	edc7 7a03 	vstr	s15, [r7, #12]
  char message[10];
  sprintf(message, "%f", f3);
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f7ff fd20 	bl	8000568 <__aeabi_f2d>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	4638      	mov	r0, r7
 8000b2e:	4908      	ldr	r1, [pc, #32]	; (8000b50 <main+0x60>)
 8000b30:	f003 fb92 	bl	8004258 <siprintf>
  Transmit(message);
 8000b34:	463b      	mov	r3, r7
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f930 	bl	8000d9c <Transmit>

	  //cli
	  //cleanTransmitWithIcon("Hello");


	  HAL_Delay(1000);
 8000b3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b40:	f000 fba0 	bl	8001284 <HAL_Delay>
 8000b44:	e7fa      	b.n	8000b3c <main+0x4c>
 8000b46:	bf00      	nop
 8000b48:	40a00000 	.word	0x40a00000
 8000b4c:	40200000 	.word	0x40200000
 8000b50:	08004adc 	.word	0x08004adc

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <HAL_MspInit+0x44>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <HAL_MspInit+0x44>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6613      	str	r3, [r2, #96]	; 0x60
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_MspInit+0x44>)
 8000b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_MspInit+0x44>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <HAL_MspInit+0x44>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_MspInit+0x44>)
 8000b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b0ac      	sub	sp, #176	; 0xb0
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2288      	movs	r2, #136	; 0x88
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 fb0f 	bl	80041e0 <memset>
  if(huart->Instance==USART2)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a25      	ldr	r2, [pc, #148]	; (8000c5c <HAL_UART_MspInit+0xc0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d143      	bne.n	8000c54 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 fd19 	bl	8002610 <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be4:	f7ff ff7e 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be8:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <HAL_UART_MspInit+0xc4>)
 8000bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bec:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <HAL_UART_MspInit+0xc4>)
 8000bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <HAL_UART_MspInit+0xc4>)
 8000bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <HAL_UART_MspInit+0xc4>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c04:	4a16      	ldr	r2, [pc, #88]	; (8000c60 <HAL_UART_MspInit+0xc4>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_UART_MspInit+0xc4>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c30:	2307      	movs	r3, #7
 8000c32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c40:	f000 fcd4 	bl	80015ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2026      	movs	r0, #38	; 0x26
 8000c4a:	f000 fc1a 	bl	8001482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c4e:	2026      	movs	r0, #38	; 0x26
 8000c50:	f000 fc33 	bl	80014ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	37b0      	adds	r7, #176	; 0xb0
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40004400 	.word	0x40004400
 8000c60:	40021000 	.word	0x40021000

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <MemManage_Handler+0x4>

08000c76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb0:	f000 fac8 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <USART2_IRQHandler+0x10>)
 8000cbe:	f002 fa89 	bl	80031d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200000e0 	.word	0x200000e0

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f003 fa46 	bl	800418c <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20018000 	.word	0x20018000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	200000cc 	.word	0x200000cc
 8000d34:	200001c0 	.word	0x200001c0

08000d38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <SystemInit+0x5c>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d42:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <SystemInit+0x5c>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <SystemInit+0x60>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a11      	ldr	r2, [pc, #68]	; (8000d98 <SystemInit+0x60>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <SystemInit+0x60>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <SystemInit+0x60>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <SystemInit+0x60>)
 8000d64:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d68:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <SystemInit+0x60>)
 8000d70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d74:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <SystemInit+0x60>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <SystemInit+0x60>)
 8000d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <SystemInit+0x60>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00
 8000d98:	40021000 	.word	0x40021000

08000d9c <Transmit>:
 * Author: Rafeeq Muhammad
 *
 * Description: Accepts an array of characters and transmits that array through uart. The array
 * of characters can be passed in the form of a buffer or a raw string.
 */
void Transmit(char *message) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff fa1d 	bl	80001e4 <strlen>
 8000daa:	4603      	mov	r3, r0
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <Transmit+0x28>)
 8000db6:	f002 f935 	bl	8003024 <HAL_UART_Transmit>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000e0 	.word	0x200000e0

08000dc8 <cleanTransmitWithIcon>:
 *
 * Author: Rafeeq Muhammad
 *
 * Description: cleanTransmit() but with a newline and a token.
 */
void cleanTransmitWithIcon(char *message) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000dce:	af02      	add	r7, sp, #8
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	6018      	str	r0, [r3, #0]
	char cleanTransmit_buf[500];
	snprintf(cleanTransmit_buf, sizeof(cleanTransmit_buf), "\r\n\r\n%s\r\n\r\n%s ", message, icon);
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	f107 000c 	add.w	r0, r7, #12
 8000dda:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <cleanTransmitWithIcon+0x48>)
 8000ddc:	9200      	str	r2, [sp, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <cleanTransmitWithIcon+0x4c>)
 8000de2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000de6:	f003 fa03 	bl	80041f0 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)cleanTransmit_buf, strlen(cleanTransmit_buf), HAL_MAX_DELAY);
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff f9f8 	bl	80001e4 <strlen>
 8000df4:	4603      	mov	r3, r0
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	f107 010c 	add.w	r1, r7, #12
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <cleanTransmitWithIcon+0x50>)
 8000e02:	f002 f90f 	bl	8003024 <HAL_UART_Transmit>
}
 8000e06:	bf00      	nop
 8000e08:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000004 	.word	0x20000004
 8000e14:	08004aec 	.word	0x08004aec
 8000e18:	200000e0 	.word	0x200000e0

08000e1c <HAL_UART_RxCpltCallback>:
 *
 * Authors: Nolan, Rafeeq Muhammad
 *
 * Description: This is an interrupt function. It is called everytime the user inputs a key into PuTTy.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)  {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

    if (huart->Instance == huart2.Instance) {
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <HAL_UART_RxCpltCallback+0xd4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d15b      	bne.n	8000ee8 <HAL_UART_RxCpltCallback+0xcc>

		switch (*rx_char) {
 8000e30:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <HAL_UART_RxCpltCallback+0xd8>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b0d      	cmp	r3, #13
 8000e36:	dc10      	bgt.n	8000e5a <HAL_UART_RxCpltCallback+0x3e>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db3a      	blt.n	8000eb2 <HAL_UART_RxCpltCallback+0x96>
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	2301      	movs	r3, #1
 8000e40:	fa03 f202 	lsl.w	r2, r3, r2
 8000e44:	f242 4301 	movw	r3, #9217	; 0x2401
 8000e48:	4013      	ands	r3, r2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	bf14      	ite	ne
 8000e4e:	2301      	movne	r3, #1
 8000e50:	2300      	moveq	r3, #0
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d103      	bne.n	8000e60 <HAL_UART_RxCpltCallback+0x44>
 8000e58:	e02b      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x96>
 8000e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e5c:	d017      	beq.n	8000e8e <HAL_UART_RxCpltCallback+0x72>
 8000e5e:	e028      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x96>
			//Enter
			case '\r':
			case '\n':
			case '\0':
			{
				if (rx_count){
 8000e60:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <HAL_UART_RxCpltCallback+0xdc>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d00f      	beq.n	8000e88 <HAL_UART_RxCpltCallback+0x6c>
					strcpy((char*)safe_buff, (char*)rx_buff);
 8000e68:	4924      	ldr	r1, [pc, #144]	; (8000efc <HAL_UART_RxCpltCallback+0xe0>)
 8000e6a:	4825      	ldr	r0, [pc, #148]	; (8000f00 <HAL_UART_RxCpltCallback+0xe4>)
 8000e6c:	f003 fa14 	bl	8004298 <strcpy>
					memset(rx_buff, 0, sizeof(rx_buff));
 8000e70:	221e      	movs	r2, #30
 8000e72:	2100      	movs	r1, #0
 8000e74:	4821      	ldr	r0, [pc, #132]	; (8000efc <HAL_UART_RxCpltCallback+0xe0>)
 8000e76:	f003 f9b3 	bl	80041e0 <memset>
					rx_count = 0;
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <HAL_UART_RxCpltCallback+0xdc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
					rx_complete = 1;
 8000e80:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <HAL_UART_RxCpltCallback+0xe8>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	601a      	str	r2, [r3, #0]
					break;
 8000e86:	e024      	b.n	8000ed2 <HAL_UART_RxCpltCallback+0xb6>
				}
				else {
					cleanTransmitWithIcon("No command was entered.");
 8000e88:	481f      	ldr	r0, [pc, #124]	; (8000f08 <HAL_UART_RxCpltCallback+0xec>)
 8000e8a:	f7ff ff9d 	bl	8000dc8 <cleanTransmitWithIcon>
			}

			//Backspace
			case 127:
			{
				if (rx_count)
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <HAL_UART_RxCpltCallback+0xdc>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d01c      	beq.n	8000ed0 <HAL_UART_RxCpltCallback+0xb4>
				{
					rx_count --;
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <HAL_UART_RxCpltCallback+0xdc>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	4a16      	ldr	r2, [pc, #88]	; (8000ef8 <HAL_UART_RxCpltCallback+0xdc>)
 8000e9e:	6013      	str	r3, [r2, #0]
					rx_buff[rx_count] = 0;
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_UART_RxCpltCallback+0xdc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a15      	ldr	r2, [pc, #84]	; (8000efc <HAL_UART_RxCpltCallback+0xe0>)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	54d1      	strb	r1, [r2, r3]
					Transmit((char*)rx_char);
 8000eaa:	4812      	ldr	r0, [pc, #72]	; (8000ef4 <HAL_UART_RxCpltCallback+0xd8>)
 8000eac:	f7ff ff76 	bl	8000d9c <Transmit>
				}
				break;
 8000eb0:	e00e      	b.n	8000ed0 <HAL_UART_RxCpltCallback+0xb4>
			}

			//Any other character
			default:
			{
				rx_buff[rx_count] = *rx_char;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_UART_RxCpltCallback+0xdc>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <HAL_UART_RxCpltCallback+0xd8>)
 8000eb8:	7811      	ldrb	r1, [r2, #0]
 8000eba:	4a10      	ldr	r2, [pc, #64]	; (8000efc <HAL_UART_RxCpltCallback+0xe0>)
 8000ebc:	54d1      	strb	r1, [r2, r3]
				rx_count ++;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_UART_RxCpltCallback+0xdc>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <HAL_UART_RxCpltCallback+0xdc>)
 8000ec6:	6013      	str	r3, [r2, #0]
				Transmit((char*)rx_char);
 8000ec8:	480a      	ldr	r0, [pc, #40]	; (8000ef4 <HAL_UART_RxCpltCallback+0xd8>)
 8000eca:	f7ff ff67 	bl	8000d9c <Transmit>
				break;
 8000ece:	e000      	b.n	8000ed2 <HAL_UART_RxCpltCallback+0xb6>
				break;
 8000ed0:	bf00      	nop
			}
		}

		if (rx_complete == 1) {
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_UART_RxCpltCallback+0xe8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d101      	bne.n	8000ede <HAL_UART_RxCpltCallback+0xc2>
			commandComplete();
 8000eda:	f000 f86d 	bl	8000fb8 <commandComplete>
		}

		HAL_UART_Receive_IT(&huart2, rx_char, 1);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4904      	ldr	r1, [pc, #16]	; (8000ef4 <HAL_UART_RxCpltCallback+0xd8>)
 8000ee2:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <HAL_UART_RxCpltCallback+0xd4>)
 8000ee4:	f002 f932 	bl	800314c <HAL_UART_Receive_IT>
	}
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200000e0 	.word	0x200000e0
 8000ef4:	200001a4 	.word	0x200001a4
 8000ef8:	200000d4 	.word	0x200000d4
 8000efc:	20000164 	.word	0x20000164
 8000f00:	20000184 	.word	0x20000184
 8000f04:	200000d0 	.word	0x200000d0
 8000f08:	08004afc 	.word	0x08004afc

08000f0c <initializeCLI>:
 *
 * Author: Rafeeq Muhammad
 *
 * Description: Initializes the CLI with the name of the project, version, and copyright.
 */
void initializeCLI() {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b09a      	sub	sp, #104	; 0x68
 8000f10:	af00      	add	r7, sp, #0
	char initializeCLI_buf[100];
	snprintf(initializeCLI_buf, sizeof(initializeCLI_buf), "STM32 CapeShell. [Version %s]\r\n", VERSION);
 8000f12:	1d38      	adds	r0, r7, #4
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <initializeCLI+0x3c>)
 8000f16:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <initializeCLI+0x40>)
 8000f18:	2164      	movs	r1, #100	; 0x64
 8000f1a:	f003 f969 	bl	80041f0 <sniprintf>
	Transmit(initializeCLI_buf);
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff3b 	bl	8000d9c <Transmit>
	Transmit("(c) Cajun Advanced Pico-Satellite Experiment. All rights reserved. ~\r\n\r\n");
 8000f26:	480a      	ldr	r0, [pc, #40]	; (8000f50 <initializeCLI+0x44>)
 8000f28:	f7ff ff38 	bl	8000d9c <Transmit>
	Transmit("Type 'help' for a list of commands.\r\n");
 8000f2c:	4809      	ldr	r0, [pc, #36]	; (8000f54 <initializeCLI+0x48>)
 8000f2e:	f7ff ff35 	bl	8000d9c <Transmit>
	newlineCLI();
 8000f32:	f000 f815 	bl	8000f60 <newlineCLI>
	HAL_UART_Receive_IT(&huart2, rx_char, 1);
 8000f36:	2201      	movs	r2, #1
 8000f38:	4907      	ldr	r1, [pc, #28]	; (8000f58 <initializeCLI+0x4c>)
 8000f3a:	4808      	ldr	r0, [pc, #32]	; (8000f5c <initializeCLI+0x50>)
 8000f3c:	f002 f906 	bl	800314c <HAL_UART_Receive_IT>
}
 8000f40:	bf00      	nop
 8000f42:	3768      	adds	r7, #104	; 0x68
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	08004b14 	.word	0x08004b14
 8000f50:	08004b34 	.word	0x08004b34
 8000f54:	08004b80 	.word	0x08004b80
 8000f58:	200001a4 	.word	0x200001a4
 8000f5c:	200000e0 	.word	0x200000e0

08000f60 <newlineCLI>:
 *
 * Author: Rafeeq Muhammad
 *
 * Description: Transmits a new line and a token-starter line.
 */
void newlineCLI() {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b09a      	sub	sp, #104	; 0x68
 8000f64:	af00      	add	r7, sp, #0
	char CLI_buf[100];
	snprintf(CLI_buf, sizeof(CLI_buf), "\r\n%s " , icon);
 8000f66:	1d38      	adds	r0, r7, #4
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <newlineCLI+0x24>)
 8000f6a:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <newlineCLI+0x28>)
 8000f6c:	2164      	movs	r1, #100	; 0x64
 8000f6e:	f003 f93f 	bl	80041f0 <sniprintf>
	Transmit(CLI_buf);
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff11 	bl	8000d9c <Transmit>
}
 8000f7a:	bf00      	nop
 8000f7c:	3768      	adds	r7, #104	; 0x68
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000004 	.word	0x20000004
 8000f88:	08004ba8 	.word	0x08004ba8

08000f8c <unrecognizedCommand>:
 *
 * Author: Rafeeq Muhammad
 *
 * Description: Called when the user inputs an unrecognized command. Notifies the user that the command is unrecognized.
 */
void unrecognizedCommand() {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b09a      	sub	sp, #104	; 0x68
 8000f90:	af00      	add	r7, sp, #0
	char unrecognizedCommand_buf[100];
	snprintf(unrecognizedCommand_buf, sizeof(unrecognizedCommand_buf), "CapeShell: %s: command not found.", safe_buff);
 8000f92:	1d38      	adds	r0, r7, #4
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <unrecognizedCommand+0x24>)
 8000f96:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <unrecognizedCommand+0x28>)
 8000f98:	2164      	movs	r1, #100	; 0x64
 8000f9a:	f003 f929 	bl	80041f0 <sniprintf>
	cleanTransmitWithIcon(unrecognizedCommand_buf);
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff11 	bl	8000dc8 <cleanTransmitWithIcon>
}
 8000fa6:	bf00      	nop
 8000fa8:	3768      	adds	r7, #104	; 0x68
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000184 	.word	0x20000184
 8000fb4:	08004bb0 	.word	0x08004bb0

08000fb8 <commandComplete>:
 *
 * Author: Rafeeq Muhammad
 *
 * Description: Called when the user presses enter and completes their command.
 */
void commandComplete() {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	processCommands();
 8000fbc:	f000 f808 	bl	8000fd0 <processCommands>
	rx_complete = 0;
 8000fc0:	4b02      	ldr	r3, [pc, #8]	; (8000fcc <commandComplete+0x14>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200000d0 	.word	0x200000d0

08000fd0 <processCommands>:
 *
 * Description: Called to process the command the user inputted.
 * Checks and displays if the command exists.
 * Processes correctly inputted commands.
 */
void processCommands() {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000fd6:	af02      	add	r7, sp, #8
	int commandExists = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	char processCommands_buf[500];

	//Check if the command exists
	for (int i = 0; i < listOfCommandsSize; i++) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8000fe4:	e016      	b.n	8001014 <processCommands+0x44>
		if (strcmp(safe_buff, listOfCommands[i]) == 0) {
 8000fe6:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8000fea:	4613      	mov	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4a42      	ldr	r2, [pc, #264]	; (80010fc <processCommands+0x12c>)
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4841      	ldr	r0, [pc, #260]	; (8001100 <processCommands+0x130>)
 8000ffa:	f7ff f8e9 	bl	80001d0 <strcmp>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <processCommands+0x3a>
			commandExists = 1;
 8001004:	2301      	movs	r3, #1
 8001006:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	for (int i = 0; i < listOfCommandsSize; i++) {
 800100a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800100e:	3301      	adds	r3, #1
 8001010:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8001014:	4b3b      	ldr	r3, [pc, #236]	; (8001104 <processCommands+0x134>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 800101c:	429a      	cmp	r2, r3
 800101e:	dbe2      	blt.n	8000fe6 <processCommands+0x16>
		}
	}

	if (commandExists == 1) {
 8001020:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001024:	2b01      	cmp	r3, #1
 8001026:	d162      	bne.n	80010ee <processCommands+0x11e>
		//Process the command
		if (strcmp(safe_buff, "help") == 0) {
 8001028:	4937      	ldr	r1, [pc, #220]	; (8001108 <processCommands+0x138>)
 800102a:	4835      	ldr	r0, [pc, #212]	; (8001100 <processCommands+0x130>)
 800102c:	f7ff f8d0 	bl	80001d0 <strcmp>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d12a      	bne.n	800108c <processCommands+0xbc>
			snprintf(processCommands_buf, sizeof(processCommands_buf), "\r\n\r\nCommands\r\n\r\n");
 8001036:	463b      	mov	r3, r7
 8001038:	4a34      	ldr	r2, [pc, #208]	; (800110c <processCommands+0x13c>)
 800103a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800103e:	4618      	mov	r0, r3
 8001040:	f003 f8d6 	bl	80041f0 <sniprintf>
			Transmit(processCommands_buf);
 8001044:	463b      	mov	r3, r7
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fea8 	bl	8000d9c <Transmit>
			//Transmit(listOfCommands[1]);
			for (int i = 0; i < listOfCommandsSize; i++) {
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8001052:	e012      	b.n	800107a <processCommands+0xaa>
				Transmit(listOfCommands[i]);
 8001054:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4a26      	ldr	r2, [pc, #152]	; (80010fc <processCommands+0x12c>)
 8001062:	4413      	add	r3, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fe99 	bl	8000d9c <Transmit>
				Transmit("\r\n");
 800106a:	4829      	ldr	r0, [pc, #164]	; (8001110 <processCommands+0x140>)
 800106c:	f7ff fe96 	bl	8000d9c <Transmit>
			for (int i = 0; i < listOfCommandsSize; i++) {
 8001070:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001074:	3301      	adds	r3, #1
 8001076:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800107a:	4b22      	ldr	r3, [pc, #136]	; (8001104 <processCommands+0x134>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8001082:	429a      	cmp	r2, r3
 8001084:	dbe6      	blt.n	8001054 <processCommands+0x84>
			}
			newlineCLI();
 8001086:	f7ff ff6b 	bl	8000f60 <newlineCLI>
		}
	}
	else {
		unrecognizedCommand();
	}
}
 800108a:	e032      	b.n	80010f2 <processCommands+0x122>
		else if (strcmp(safe_buff, "info") == 0) {
 800108c:	4921      	ldr	r1, [pc, #132]	; (8001114 <processCommands+0x144>)
 800108e:	481c      	ldr	r0, [pc, #112]	; (8001100 <processCommands+0x130>)
 8001090:	f7ff f89e 	bl	80001d0 <strcmp>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d116      	bne.n	80010c8 <processCommands+0xf8>
			Transmit("\r\n\r\nAuthor: Rafeeq Muhammad\r\n");
 800109a:	481f      	ldr	r0, [pc, #124]	; (8001118 <processCommands+0x148>)
 800109c:	f7ff fe7e 	bl	8000d9c <Transmit>
			snprintf(
 80010a0:	4638      	mov	r0, r7
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <processCommands+0x14c>)
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <processCommands+0x150>)
 80010a8:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <processCommands+0x154>)
 80010aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80010ae:	f003 f89f 	bl	80041f0 <sniprintf>
			Transmit(processCommands_buf);
 80010b2:	463b      	mov	r3, r7
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fe71 	bl	8000d9c <Transmit>
			Transmit("Latest build notes: Fixed the backspace error. Backspace is now fully functional.");
 80010ba:	481b      	ldr	r0, [pc, #108]	; (8001128 <processCommands+0x158>)
 80010bc:	f7ff fe6e 	bl	8000d9c <Transmit>
			cleanTransmitWithIcon("CapeShell is a prototype CLI for the Cajun Advanced Pico-Satellite Experiment.");
 80010c0:	481a      	ldr	r0, [pc, #104]	; (800112c <processCommands+0x15c>)
 80010c2:	f7ff fe81 	bl	8000dc8 <cleanTransmitWithIcon>
}
 80010c6:	e014      	b.n	80010f2 <processCommands+0x122>
		else if (strcmp(safe_buff, "goat") == 0) {
 80010c8:	4919      	ldr	r1, [pc, #100]	; (8001130 <processCommands+0x160>)
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <processCommands+0x130>)
 80010cc:	f7ff f880 	bl	80001d0 <strcmp>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10d      	bne.n	80010f2 <processCommands+0x122>
			snprintf(processCommands_buf, sizeof(processCommands_buf), "Rizwan Merchant, aka RizLord, the God of Cape");
 80010d6:	463b      	mov	r3, r7
 80010d8:	4a16      	ldr	r2, [pc, #88]	; (8001134 <processCommands+0x164>)
 80010da:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 f886 	bl	80041f0 <sniprintf>
			cleanTransmitWithIcon(processCommands_buf);
 80010e4:	463b      	mov	r3, r7
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fe6e 	bl	8000dc8 <cleanTransmitWithIcon>
}
 80010ec:	e001      	b.n	80010f2 <processCommands+0x122>
		unrecognizedCommand();
 80010ee:	f7ff ff4d 	bl	8000f8c <unrecognizedCommand>
}
 80010f2:	bf00      	nop
 80010f4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000024 	.word	0x20000024
 8001100:	20000184 	.word	0x20000184
 8001104:	20000020 	.word	0x20000020
 8001108:	08004bd4 	.word	0x08004bd4
 800110c:	08004bdc 	.word	0x08004bdc
 8001110:	08004bf0 	.word	0x08004bf0
 8001114:	08004bf4 	.word	0x08004bf4
 8001118:	08004bfc 	.word	0x08004bfc
 800111c:	20000014 	.word	0x20000014
 8001120:	20000008 	.word	0x20000008
 8001124:	08004c1c 	.word	0x08004c1c
 8001128:	08004c3c 	.word	0x08004c3c
 800112c:	08004c90 	.word	0x08004c90
 8001130:	08004ce0 	.word	0x08004ce0
 8001134:	08004ce8 	.word	0x08004ce8

08001138 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001170 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800113c:	f7ff fdfc 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001140:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001142:	e003      	b.n	800114c <LoopCopyDataInit>

08001144 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001146:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001148:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800114a:	3104      	adds	r1, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800114c:	480a      	ldr	r0, [pc, #40]	; (8001178 <LoopForever+0xa>)
	ldr	r3, =_edata
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001150:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001152:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001154:	d3f6      	bcc.n	8001144 <CopyDataInit>
	ldr	r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001158:	e002      	b.n	8001160 <LoopFillZerobss>

0800115a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800115a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800115c:	f842 3b04 	str.w	r3, [r2], #4

08001160 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <LoopForever+0x16>)
	cmp	r2, r3
 8001162:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001164:	d3f9      	bcc.n	800115a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001166:	f003 f817 	bl	8004198 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800116a:	f7ff fcc1 	bl	8000af0 <main>

0800116e <LoopForever>:

LoopForever:
    b LoopForever
 800116e:	e7fe      	b.n	800116e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001170:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001174:	08004da4 	.word	0x08004da4
	ldr	r0, =_sdata
 8001178:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800117c:	200000b0 	.word	0x200000b0
	ldr	r2, =_sbss
 8001180:	200000b0 	.word	0x200000b0
	ldr	r3, = _ebss
 8001184:	200001bc 	.word	0x200001bc

08001188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_2_IRQHandler>
	...

0800118c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_Init+0x3c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <HAL_Init+0x3c>)
 800119c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a2:	2003      	movs	r0, #3
 80011a4:	f000 f962 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011a8:	2000      	movs	r0, #0
 80011aa:	f000 f80f 	bl	80011cc <HAL_InitTick>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	71fb      	strb	r3, [r7, #7]
 80011b8:	e001      	b.n	80011be <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ba:	f7ff fccb 	bl	8000b54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011be:	79fb      	ldrb	r3, [r7, #7]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40022000 	.word	0x40022000

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_InitTick+0x6c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d023      	beq.n	8001228 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_InitTick+0x70>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_InitTick+0x6c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f96d 	bl	80014d6 <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10f      	bne.n	8001222 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d809      	bhi.n	800121c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 f937 	bl	8001482 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001214:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <HAL_InitTick+0x74>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e007      	b.n	800122c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e004      	b.n	800122c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	e001      	b.n	800122c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800122c:	7bfb      	ldrb	r3, [r7, #15]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000048 	.word	0x20000048
 800123c:	20000000 	.word	0x20000000
 8001240:	20000044 	.word	0x20000044

08001244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_IncTick+0x20>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x24>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <HAL_IncTick+0x24>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000048 	.word	0x20000048
 8001268:	200001a8 	.word	0x200001a8

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	200001a8 	.word	0x200001a8

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff ffee 	bl	800126c <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_Delay+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012aa:	bf00      	nop
 80012ac:	f7ff ffde 	bl	800126c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000048 	.word	0x20000048

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	4907      	ldr	r1, [pc, #28]	; (8001368 <__NVIC_EnableIRQ+0x38>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2001      	movs	r0, #1
 8001352:	fa00 f202 	lsl.w	r2, r0, r2
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e100 	.word	0xe000e100

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db0a      	blt.n	8001396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	490c      	ldr	r1, [pc, #48]	; (80013b8 <__NVIC_SetPriority+0x4c>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001394:	e00a      	b.n	80013ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4908      	ldr	r1, [pc, #32]	; (80013bc <__NVIC_SetPriority+0x50>)
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3b04      	subs	r3, #4
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2b04      	cmp	r3, #4
 80013dc:	bf28      	it	cs
 80013de:	2304      	movcs	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d902      	bls.n	80013f0 <NVIC_EncodePriority+0x30>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3b03      	subs	r3, #3
 80013ee:	e000      	b.n	80013f2 <NVIC_EncodePriority+0x32>
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	4313      	orrs	r3, r2
         );
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001438:	d301      	bcc.n	800143e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143a:	2301      	movs	r3, #1
 800143c:	e00f      	b.n	800145e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <SysTick_Config+0x40>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001446:	210f      	movs	r1, #15
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f7ff ff8e 	bl	800136c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <SysTick_Config+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <SysTick_Config+0x40>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff29 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff3e 	bl	8001314 <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff8e 	bl	80013c0 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5d 	bl	800136c <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff31 	bl	8001330 <__NVIC_EnableIRQ>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffa2 	bl	8001428 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d008      	beq.n	8001518 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2204      	movs	r2, #4
 800150a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e022      	b.n	800155e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 020e 	bic.w	r2, r2, #14
 8001526:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0201 	bic.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153c:	f003 021c 	and.w	r2, r3, #28
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	2101      	movs	r1, #1
 8001546:	fa01 f202 	lsl.w	r2, r1, r2
 800154a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d005      	beq.n	800158e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2204      	movs	r2, #4
 8001586:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	e029      	b.n	80015e2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 020e 	bic.w	r2, r2, #14
 800159c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f003 021c 	and.w	r2, r3, #28
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	2101      	movs	r1, #1
 80015bc:	fa01 f202 	lsl.w	r2, r1, r2
 80015c0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	4798      	blx	r3
    }
  }
  return status;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fa:	e17f      	b.n	80018fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	2101      	movs	r1, #1
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 8171 	beq.w	80018f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d00b      	beq.n	8001634 <HAL_GPIO_Init+0x48>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d007      	beq.n	8001634 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001628:	2b11      	cmp	r3, #17
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b12      	cmp	r3, #18
 8001632:	d130      	bne.n	8001696 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800166a:	2201      	movs	r2, #1
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	f003 0201 	and.w	r2, r3, #1
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d118      	bne.n	80016d4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016a8:	2201      	movs	r2, #1
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	08db      	lsrs	r3, r3, #3
 80016be:	f003 0201 	and.w	r2, r3, #1
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	2203      	movs	r2, #3
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x128>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b12      	cmp	r3, #18
 8001712:	d123      	bne.n	800175c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	08da      	lsrs	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3208      	adds	r2, #8
 800171c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	220f      	movs	r2, #15
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	08da      	lsrs	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3208      	adds	r2, #8
 8001756:	6939      	ldr	r1, [r7, #16]
 8001758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0203 	and.w	r2, r3, #3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 80ac 	beq.w	80018f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	4b5f      	ldr	r3, [pc, #380]	; (800191c <HAL_GPIO_Init+0x330>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a2:	4a5e      	ldr	r2, [pc, #376]	; (800191c <HAL_GPIO_Init+0x330>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6613      	str	r3, [r2, #96]	; 0x60
 80017aa:	4b5c      	ldr	r3, [pc, #368]	; (800191c <HAL_GPIO_Init+0x330>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017b6:	4a5a      	ldr	r2, [pc, #360]	; (8001920 <HAL_GPIO_Init+0x334>)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	089b      	lsrs	r3, r3, #2
 80017bc:	3302      	adds	r3, #2
 80017be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	220f      	movs	r2, #15
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017e0:	d025      	beq.n	800182e <HAL_GPIO_Init+0x242>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4f      	ldr	r2, [pc, #316]	; (8001924 <HAL_GPIO_Init+0x338>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d01f      	beq.n	800182a <HAL_GPIO_Init+0x23e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4e      	ldr	r2, [pc, #312]	; (8001928 <HAL_GPIO_Init+0x33c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d019      	beq.n	8001826 <HAL_GPIO_Init+0x23a>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4d      	ldr	r2, [pc, #308]	; (800192c <HAL_GPIO_Init+0x340>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d013      	beq.n	8001822 <HAL_GPIO_Init+0x236>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4c      	ldr	r2, [pc, #304]	; (8001930 <HAL_GPIO_Init+0x344>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d00d      	beq.n	800181e <HAL_GPIO_Init+0x232>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4b      	ldr	r2, [pc, #300]	; (8001934 <HAL_GPIO_Init+0x348>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d007      	beq.n	800181a <HAL_GPIO_Init+0x22e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4a      	ldr	r2, [pc, #296]	; (8001938 <HAL_GPIO_Init+0x34c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d101      	bne.n	8001816 <HAL_GPIO_Init+0x22a>
 8001812:	2306      	movs	r3, #6
 8001814:	e00c      	b.n	8001830 <HAL_GPIO_Init+0x244>
 8001816:	2307      	movs	r3, #7
 8001818:	e00a      	b.n	8001830 <HAL_GPIO_Init+0x244>
 800181a:	2305      	movs	r3, #5
 800181c:	e008      	b.n	8001830 <HAL_GPIO_Init+0x244>
 800181e:	2304      	movs	r3, #4
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x244>
 8001822:	2303      	movs	r3, #3
 8001824:	e004      	b.n	8001830 <HAL_GPIO_Init+0x244>
 8001826:	2302      	movs	r3, #2
 8001828:	e002      	b.n	8001830 <HAL_GPIO_Init+0x244>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_GPIO_Init+0x244>
 800182e:	2300      	movs	r3, #0
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	f002 0203 	and.w	r2, r2, #3
 8001836:	0092      	lsls	r2, r2, #2
 8001838:	4093      	lsls	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001840:	4937      	ldr	r1, [pc, #220]	; (8001920 <HAL_GPIO_Init+0x334>)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3302      	adds	r3, #2
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <HAL_GPIO_Init+0x350>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001872:	4a32      	ldr	r2, [pc, #200]	; (800193c <HAL_GPIO_Init+0x350>)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001878:	4b30      	ldr	r3, [pc, #192]	; (800193c <HAL_GPIO_Init+0x350>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800189c:	4a27      	ldr	r2, [pc, #156]	; (800193c <HAL_GPIO_Init+0x350>)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <HAL_GPIO_Init+0x350>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018c6:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_GPIO_Init+0x350>)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_GPIO_Init+0x350>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018f0:	4a12      	ldr	r2, [pc, #72]	; (800193c <HAL_GPIO_Init+0x350>)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	f47f ae78 	bne.w	80015fc <HAL_GPIO_Init+0x10>
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	371c      	adds	r7, #28
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	40010000 	.word	0x40010000
 8001924:	48000400 	.word	0x48000400
 8001928:	48000800 	.word	0x48000800
 800192c:	48000c00 	.word	0x48000c00
 8001930:	48001000 	.word	0x48001000
 8001934:	48001400 	.word	0x48001400
 8001938:	48001800 	.word	0x48001800
 800193c:	40010400 	.word	0x40010400

08001940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
 800194c:	4613      	mov	r3, r2
 800194e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001950:	787b      	ldrb	r3, [r7, #1]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001956:	887a      	ldrh	r2, [r7, #2]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800195c:	e002      	b.n	8001964 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <HAL_PWREx_GetVoltageRange+0x18>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40007000 	.word	0x40007000

0800198c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800199a:	d130      	bne.n	80019fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a8:	d038      	beq.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019b2:	4a1e      	ldr	r2, [pc, #120]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2232      	movs	r2, #50	; 0x32
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	4a1b      	ldr	r2, [pc, #108]	; (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	0c9b      	lsrs	r3, r3, #18
 80019cc:	3301      	adds	r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d0:	e002      	b.n	80019d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e4:	d102      	bne.n	80019ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f2      	bne.n	80019d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f8:	d110      	bne.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e00f      	b.n	8001a1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0a:	d007      	beq.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a14:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40007000 	.word	0x40007000
 8001a30:	20000000 	.word	0x20000000
 8001a34:	431bde83 	.word	0x431bde83

08001a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e3d4      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a4a:	4ba1      	ldr	r3, [pc, #644]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a54:	4b9e      	ldr	r3, [pc, #632]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 80e4 	beq.w	8001c34 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <HAL_RCC_OscConfig+0x4a>
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	2b0c      	cmp	r3, #12
 8001a76:	f040 808b 	bne.w	8001b90 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	f040 8087 	bne.w	8001b90 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a82:	4b93      	ldr	r3, [pc, #588]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d005      	beq.n	8001a9a <HAL_RCC_OscConfig+0x62>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e3ac      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a1a      	ldr	r2, [r3, #32]
 8001a9e:	4b8c      	ldr	r3, [pc, #560]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d004      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x7c>
 8001aaa:	4b89      	ldr	r3, [pc, #548]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab2:	e005      	b.n	8001ac0 <HAL_RCC_OscConfig+0x88>
 8001ab4:	4b86      	ldr	r3, [pc, #536]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aba:	091b      	lsrs	r3, r3, #4
 8001abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d223      	bcs.n	8001b0c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fd41 	bl	8002550 <RCC_SetFlashLatencyFromMSIRange>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e38d      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ad8:	4b7d      	ldr	r3, [pc, #500]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a7c      	ldr	r2, [pc, #496]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001ade:	f043 0308 	orr.w	r3, r3, #8
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b7a      	ldr	r3, [pc, #488]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4977      	ldr	r1, [pc, #476]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af6:	4b76      	ldr	r3, [pc, #472]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	4972      	ldr	r1, [pc, #456]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
 8001b0a:	e025      	b.n	8001b58 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b0c:	4b70      	ldr	r3, [pc, #448]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a6f      	ldr	r2, [pc, #444]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b12:	f043 0308 	orr.w	r3, r3, #8
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b6d      	ldr	r3, [pc, #436]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	496a      	ldr	r1, [pc, #424]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b2a:	4b69      	ldr	r3, [pc, #420]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	4965      	ldr	r1, [pc, #404]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d109      	bne.n	8001b58 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fd01 	bl	8002550 <RCC_SetFlashLatencyFromMSIRange>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e34d      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b58:	f000 fc36 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b5c      	ldr	r3, [pc, #368]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	091b      	lsrs	r3, r3, #4
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	495a      	ldr	r1, [pc, #360]	; (8001cd4 <HAL_RCC_OscConfig+0x29c>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
 8001b74:	4a58      	ldr	r2, [pc, #352]	; (8001cd8 <HAL_RCC_OscConfig+0x2a0>)
 8001b76:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b78:	4b58      	ldr	r3, [pc, #352]	; (8001cdc <HAL_RCC_OscConfig+0x2a4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fb25 	bl	80011cc <HAL_InitTick>
 8001b82:	4603      	mov	r3, r0
 8001b84:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d052      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	e331      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d032      	beq.n	8001bfe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b98:	4b4d      	ldr	r3, [pc, #308]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a4c      	ldr	r2, [pc, #304]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fb62 	bl	800126c <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bac:	f7ff fb5e 	bl	800126c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e31a      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bbe:	4b44      	ldr	r3, [pc, #272]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bca:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a40      	ldr	r2, [pc, #256]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b3e      	ldr	r3, [pc, #248]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	493b      	ldr	r1, [pc, #236]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be8:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	4936      	ldr	r1, [pc, #216]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
 8001bfc:	e01a      	b.n	8001c34 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bfe:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a33      	ldr	r2, [pc, #204]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c0a:	f7ff fb2f 	bl	800126c <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c12:	f7ff fb2b 	bl	800126c <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e2e7      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f0      	bne.n	8001c12 <HAL_RCC_OscConfig+0x1da>
 8001c30:	e000      	b.n	8001c34 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d074      	beq.n	8001d2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d005      	beq.n	8001c52 <HAL_RCC_OscConfig+0x21a>
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2b0c      	cmp	r3, #12
 8001c4a:	d10e      	bne.n	8001c6a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d10b      	bne.n	8001c6a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c52:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d064      	beq.n	8001d28 <HAL_RCC_OscConfig+0x2f0>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d160      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e2c4      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c72:	d106      	bne.n	8001c82 <HAL_RCC_OscConfig+0x24a>
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a15      	ldr	r2, [pc, #84]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	e01d      	b.n	8001cbe <HAL_RCC_OscConfig+0x286>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c8a:	d10c      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x26e>
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	e00b      	b.n	8001cbe <HAL_RCC_OscConfig+0x286>
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d01c      	beq.n	8001d00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7ff fad1 	bl	800126c <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ccc:	e011      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2ba>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08004d18 	.word	0x08004d18
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	20000044 	.word	0x20000044
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff fac4 	bl	800126c <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e280      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf2:	4baf      	ldr	r3, [pc, #700]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x2a8>
 8001cfe:	e014      	b.n	8001d2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fab4 	bl	800126c <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff fab0 	bl	800126c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e26c      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d1a:	4ba5      	ldr	r3, [pc, #660]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x2d0>
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d060      	beq.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_OscConfig+0x310>
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2b0c      	cmp	r3, #12
 8001d40:	d119      	bne.n	8001d76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d116      	bne.n	8001d76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d48:	4b99      	ldr	r3, [pc, #612]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_OscConfig+0x328>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e249      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d60:	4b93      	ldr	r3, [pc, #588]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	4990      	ldr	r1, [pc, #576]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d74:	e040      	b.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d023      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d7e:	4b8c      	ldr	r3, [pc, #560]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a8b      	ldr	r2, [pc, #556]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8a:	f7ff fa6f 	bl	800126c <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d92:	f7ff fa6b 	bl	800126c <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e227      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da4:	4b82      	ldr	r3, [pc, #520]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	4b7f      	ldr	r3, [pc, #508]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	061b      	lsls	r3, r3, #24
 8001dbe:	497c      	ldr	r1, [pc, #496]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
 8001dc4:	e018      	b.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc6:	4b7a      	ldr	r3, [pc, #488]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a79      	ldr	r2, [pc, #484]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd2:	f7ff fa4b 	bl	800126c <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dda:	f7ff fa47 	bl	800126c <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e203      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dec:	4b70      	ldr	r3, [pc, #448]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d03c      	beq.n	8001e7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01c      	beq.n	8001e46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0c:	4b68      	ldr	r3, [pc, #416]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e12:	4a67      	ldr	r2, [pc, #412]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fa26 	bl	800126c <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff fa22 	bl	800126c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e1de      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e36:	4b5e      	ldr	r3, [pc, #376]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ef      	beq.n	8001e24 <HAL_RCC_OscConfig+0x3ec>
 8001e44:	e01b      	b.n	8001e7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e46:	4b5a      	ldr	r3, [pc, #360]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e4c:	4a58      	ldr	r2, [pc, #352]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e56:	f7ff fa09 	bl	800126c <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5e:	f7ff fa05 	bl	800126c <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e1c1      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e70:	4b4f      	ldr	r3, [pc, #316]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1ef      	bne.n	8001e5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80a6 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e90:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10d      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9c:	4b44      	ldr	r3, [pc, #272]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	4a43      	ldr	r2, [pc, #268]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea8:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb8:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <HAL_RCC_OscConfig+0x57c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d118      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ec4:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <HAL_RCC_OscConfig+0x57c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a3a      	ldr	r2, [pc, #232]	; (8001fb4 <HAL_RCC_OscConfig+0x57c>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ece:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed0:	f7ff f9cc 	bl	800126c <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed8:	f7ff f9c8 	bl	800126c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e184      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eea:	4b32      	ldr	r3, [pc, #200]	; (8001fb4 <HAL_RCC_OscConfig+0x57c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d108      	bne.n	8001f10 <HAL_RCC_OscConfig+0x4d8>
 8001efe:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	4a2a      	ldr	r2, [pc, #168]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f0e:	e024      	b.n	8001f5a <HAL_RCC_OscConfig+0x522>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d110      	bne.n	8001f3a <HAL_RCC_OscConfig+0x502>
 8001f18:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1e:	4a24      	ldr	r2, [pc, #144]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f28:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2e:	4a20      	ldr	r2, [pc, #128]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f38:	e00f      	b.n	8001f5a <HAL_RCC_OscConfig+0x522>
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f40:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f42:	f023 0301 	bic.w	r3, r3, #1
 8001f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f4a:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f50:	4a17      	ldr	r2, [pc, #92]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f52:	f023 0304 	bic.w	r3, r3, #4
 8001f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d016      	beq.n	8001f90 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7ff f983 	bl	800126c <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7ff f97f 	bl	800126c <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e139      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0ed      	beq.n	8001f6a <HAL_RCC_OscConfig+0x532>
 8001f8e:	e01a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f90:	f7ff f96c 	bl	800126c <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f96:	e00f      	b.n	8001fb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f98:	f7ff f968 	bl	800126c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d906      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e122      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fb8:	4b90      	ldr	r3, [pc, #576]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1e8      	bne.n	8001f98 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc6:	7ffb      	ldrb	r3, [r7, #31]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fcc:	4b8b      	ldr	r3, [pc, #556]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	4a8a      	ldr	r2, [pc, #552]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 8001fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 8108 	beq.w	80021f2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	f040 80d0 	bne.w	800218c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fec:	4b83      	ldr	r3, [pc, #524]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f003 0203 	and.w	r2, r3, #3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d130      	bne.n	8002062 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	3b01      	subs	r3, #1
 800200c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	429a      	cmp	r2, r3
 8002010:	d127      	bne.n	8002062 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800201e:	429a      	cmp	r2, r3
 8002020:	d11f      	bne.n	8002062 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800202c:	2a07      	cmp	r2, #7
 800202e:	bf14      	ite	ne
 8002030:	2201      	movne	r2, #1
 8002032:	2200      	moveq	r2, #0
 8002034:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002036:	4293      	cmp	r3, r2
 8002038:	d113      	bne.n	8002062 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002044:	085b      	lsrs	r3, r3, #1
 8002046:	3b01      	subs	r3, #1
 8002048:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d109      	bne.n	8002062 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	085b      	lsrs	r3, r3, #1
 800205a:	3b01      	subs	r3, #1
 800205c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d06e      	beq.n	8002140 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	d069      	beq.n	800213c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002068:	4b64      	ldr	r3, [pc, #400]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d105      	bne.n	8002080 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002074:	4b61      	ldr	r3, [pc, #388]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b7      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002084:	4b5d      	ldr	r3, [pc, #372]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a5c      	ldr	r2, [pc, #368]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 800208a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800208e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002090:	f7ff f8ec 	bl	800126c <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002098:	f7ff f8e8 	bl	800126c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e0a4      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020aa:	4b54      	ldr	r3, [pc, #336]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b6:	4b51      	ldr	r3, [pc, #324]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	4b51      	ldr	r3, [pc, #324]	; (8002200 <HAL_RCC_OscConfig+0x7c8>)
 80020bc:	4013      	ands	r3, r2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020c6:	3a01      	subs	r2, #1
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	4311      	orrs	r1, r2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020d0:	0212      	lsls	r2, r2, #8
 80020d2:	4311      	orrs	r1, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020d8:	0852      	lsrs	r2, r2, #1
 80020da:	3a01      	subs	r2, #1
 80020dc:	0552      	lsls	r2, r2, #21
 80020de:	4311      	orrs	r1, r2
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020e4:	0852      	lsrs	r2, r2, #1
 80020e6:	3a01      	subs	r2, #1
 80020e8:	0652      	lsls	r2, r2, #25
 80020ea:	4311      	orrs	r1, r2
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020f0:	0912      	lsrs	r2, r2, #4
 80020f2:	0452      	lsls	r2, r2, #17
 80020f4:	430a      	orrs	r2, r1
 80020f6:	4941      	ldr	r1, [pc, #260]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020fc:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a3e      	ldr	r2, [pc, #248]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 8002102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002106:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002108:	4b3c      	ldr	r3, [pc, #240]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a3b      	ldr	r2, [pc, #236]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 800210e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002112:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002114:	f7ff f8aa 	bl	800126c <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff f8a6 	bl	800126c <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e062      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212e:	4b33      	ldr	r3, [pc, #204]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800213a:	e05a      	b.n	80021f2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e059      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002140:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d152      	bne.n	80021f2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800214c:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a2a      	ldr	r2, [pc, #168]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 8002152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002156:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002158:	4b28      	ldr	r3, [pc, #160]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a27      	ldr	r2, [pc, #156]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 800215e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002162:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002164:	f7ff f882 	bl	800126c <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216c:	f7ff f87e 	bl	800126c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e03a      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217e:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x734>
 800218a:	e032      	b.n	80021f2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	d02d      	beq.n	80021ee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002192:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a19      	ldr	r2, [pc, #100]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 8002198:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800219c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d105      	bne.n	80021b6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	4a13      	ldr	r2, [pc, #76]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 80021b0:	f023 0303 	bic.w	r3, r3, #3
 80021b4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	4a10      	ldr	r2, [pc, #64]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 80021bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7ff f851 	bl	800126c <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ce:	f7ff f84d 	bl	800126c <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e009      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_RCC_OscConfig+0x7c4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f0      	bne.n	80021ce <HAL_RCC_OscConfig+0x796>
 80021ec:	e001      	b.n	80021f2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3720      	adds	r7, #32
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	f99d808c 	.word	0xf99d808c

08002204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0c8      	b.n	80023aa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002218:	4b66      	ldr	r3, [pc, #408]	; (80023b4 <HAL_RCC_ClockConfig+0x1b0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d910      	bls.n	8002248 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b63      	ldr	r3, [pc, #396]	; (80023b4 <HAL_RCC_ClockConfig+0x1b0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 0207 	bic.w	r2, r3, #7
 800222e:	4961      	ldr	r1, [pc, #388]	; (80023b4 <HAL_RCC_ClockConfig+0x1b0>)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b5f      	ldr	r3, [pc, #380]	; (80023b4 <HAL_RCC_ClockConfig+0x1b0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0b0      	b.n	80023aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d04c      	beq.n	80022ee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d107      	bne.n	800226c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225c:	4b56      	ldr	r3, [pc, #344]	; (80023b8 <HAL_RCC_ClockConfig+0x1b4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d121      	bne.n	80022ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e09e      	b.n	80023aa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d107      	bne.n	8002284 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002274:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d115      	bne.n	80022ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e092      	b.n	80023aa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d107      	bne.n	800229c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800228c:	4b4a      	ldr	r3, [pc, #296]	; (80023b8 <HAL_RCC_ClockConfig+0x1b4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d109      	bne.n	80022ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e086      	b.n	80023aa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800229c:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <HAL_RCC_ClockConfig+0x1b4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e07e      	b.n	80023aa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022ac:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <HAL_RCC_ClockConfig+0x1b4>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f023 0203 	bic.w	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	493f      	ldr	r1, [pc, #252]	; (80023b8 <HAL_RCC_ClockConfig+0x1b4>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022be:	f7fe ffd5 	bl	800126c <HAL_GetTick>
 80022c2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c4:	e00a      	b.n	80022dc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c6:	f7fe ffd1 	bl	800126c <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e066      	b.n	80023aa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <HAL_RCC_ClockConfig+0x1b4>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 020c 	and.w	r2, r3, #12
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d1eb      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d008      	beq.n	800230c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fa:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <HAL_RCC_ClockConfig+0x1b4>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	492c      	ldr	r1, [pc, #176]	; (80023b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002308:	4313      	orrs	r3, r2
 800230a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800230c:	4b29      	ldr	r3, [pc, #164]	; (80023b4 <HAL_RCC_ClockConfig+0x1b0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d210      	bcs.n	800233c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <HAL_RCC_ClockConfig+0x1b0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 0207 	bic.w	r2, r3, #7
 8002322:	4924      	ldr	r1, [pc, #144]	; (80023b4 <HAL_RCC_ClockConfig+0x1b0>)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <HAL_RCC_ClockConfig+0x1b0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e036      	b.n	80023aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002348:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <HAL_RCC_ClockConfig+0x1b4>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4918      	ldr	r1, [pc, #96]	; (80023b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002356:	4313      	orrs	r3, r2
 8002358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002366:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4910      	ldr	r1, [pc, #64]	; (80023b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800237a:	f000 f825 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 800237e:	4602      	mov	r2, r0
 8002380:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	490c      	ldr	r1, [pc, #48]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	5ccb      	ldrb	r3, [r1, r3]
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe ff14 	bl	80011cc <HAL_InitTick>
 80023a4:	4603      	mov	r3, r0
 80023a6:	72fb      	strb	r3, [r7, #11]

  return status;
 80023a8:	7afb      	ldrb	r3, [r7, #11]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40022000 	.word	0x40022000
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08004d18 	.word	0x08004d18
 80023c0:	20000000 	.word	0x20000000
 80023c4:	20000044 	.word	0x20000044

080023c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	; 0x24
 80023cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d6:	4b3e      	ldr	r3, [pc, #248]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023e0:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x34>
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	2b0c      	cmp	r3, #12
 80023f4:	d121      	bne.n	800243a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d11e      	bne.n	800243a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023fc:	4b34      	ldr	r3, [pc, #208]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d107      	bne.n	8002418 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002408:	4b31      	ldr	r3, [pc, #196]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800240a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800240e:	0a1b      	lsrs	r3, r3, #8
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	e005      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002418:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002424:	4a2b      	ldr	r2, [pc, #172]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10d      	bne.n	8002450 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b04      	cmp	r3, #4
 800243e:	d102      	bne.n	8002446 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002440:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	e004      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	2b08      	cmp	r3, #8
 800244a:	d101      	bne.n	8002450 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800244c:	4b23      	ldr	r3, [pc, #140]	; (80024dc <HAL_RCC_GetSysClockFreq+0x114>)
 800244e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	2b0c      	cmp	r3, #12
 8002454:	d134      	bne.n	80024c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002456:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d003      	beq.n	800246e <HAL_RCC_GetSysClockFreq+0xa6>
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b03      	cmp	r3, #3
 800246a:	d003      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0xac>
 800246c:	e005      	b.n	800247a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800246e:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002470:	617b      	str	r3, [r7, #20]
      break;
 8002472:	e005      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002474:	4b19      	ldr	r3, [pc, #100]	; (80024dc <HAL_RCC_GetSysClockFreq+0x114>)
 8002476:	617b      	str	r3, [r7, #20]
      break;
 8002478:	e002      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	617b      	str	r3, [r7, #20]
      break;
 800247e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002480:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	3301      	adds	r3, #1
 800248c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	fb02 f203 	mul.w	r2, r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024a6:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	0e5b      	lsrs	r3, r3, #25
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	3301      	adds	r3, #1
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80024be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024c0:	69bb      	ldr	r3, [r7, #24]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3724      	adds	r7, #36	; 0x24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	08004d30 	.word	0x08004d30
 80024d8:	00f42400 	.word	0x00f42400
 80024dc:	007a1200 	.word	0x007a1200

080024e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000000 	.word	0x20000000

080024f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024fc:	f7ff fff0 	bl	80024e0 <HAL_RCC_GetHCLKFreq>
 8002500:	4602      	mov	r2, r0
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	4904      	ldr	r1, [pc, #16]	; (8002520 <HAL_RCC_GetPCLK1Freq+0x28>)
 800250e:	5ccb      	ldrb	r3, [r1, r3]
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	08004d28 	.word	0x08004d28

08002524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002528:	f7ff ffda 	bl	80024e0 <HAL_RCC_GetHCLKFreq>
 800252c:	4602      	mov	r2, r0
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	0adb      	lsrs	r3, r3, #11
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4904      	ldr	r1, [pc, #16]	; (800254c <HAL_RCC_GetPCLK2Freq+0x28>)
 800253a:	5ccb      	ldrb	r3, [r1, r3]
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40021000 	.word	0x40021000
 800254c:	08004d28 	.word	0x08004d28

08002550 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800255c:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002568:	f7ff fa02 	bl	8001970 <HAL_PWREx_GetVoltageRange>
 800256c:	6178      	str	r0, [r7, #20]
 800256e:	e014      	b.n	800259a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	4a24      	ldr	r2, [pc, #144]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257a:	6593      	str	r3, [r2, #88]	; 0x58
 800257c:	4b22      	ldr	r3, [pc, #136]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002588:	f7ff f9f2 	bl	8001970 <HAL_PWREx_GetVoltageRange>
 800258c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a0:	d10b      	bne.n	80025ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b80      	cmp	r3, #128	; 0x80
 80025a6:	d919      	bls.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2ba0      	cmp	r3, #160	; 0xa0
 80025ac:	d902      	bls.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025ae:	2302      	movs	r3, #2
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	e013      	b.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025b4:	2301      	movs	r3, #1
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	e010      	b.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b80      	cmp	r3, #128	; 0x80
 80025be:	d902      	bls.n	80025c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025c0:	2303      	movs	r3, #3
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	e00a      	b.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b80      	cmp	r3, #128	; 0x80
 80025ca:	d102      	bne.n	80025d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025cc:	2302      	movs	r3, #2
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	e004      	b.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b70      	cmp	r3, #112	; 0x70
 80025d6:	d101      	bne.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025d8:	2301      	movs	r3, #1
 80025da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 0207 	bic.w	r2, r3, #7
 80025e4:	4909      	ldr	r1, [pc, #36]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d001      	beq.n	80025fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	40022000 	.word	0x40022000

08002610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002618:	2300      	movs	r3, #0
 800261a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800261c:	2300      	movs	r3, #0
 800261e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002628:	2b00      	cmp	r3, #0
 800262a:	d041      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002630:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002634:	d02a      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002636:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800263a:	d824      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800263c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002640:	d008      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002642:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002646:	d81e      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800264c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002650:	d010      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002652:	e018      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002654:	4b86      	ldr	r3, [pc, #536]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4a85      	ldr	r2, [pc, #532]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002660:	e015      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3304      	adds	r3, #4
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fabb 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 800266e:	4603      	mov	r3, r0
 8002670:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002672:	e00c      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3320      	adds	r3, #32
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fba6 	bl	8002dcc <RCCEx_PLLSAI2_Config>
 8002680:	4603      	mov	r3, r0
 8002682:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002684:	e003      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	74fb      	strb	r3, [r7, #19]
      break;
 800268a:	e000      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800268c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10b      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002694:	4b76      	ldr	r3, [pc, #472]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026a2:	4973      	ldr	r1, [pc, #460]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026aa:	e001      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ac:	7cfb      	ldrb	r3, [r7, #19]
 80026ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d041      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026c4:	d02a      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80026c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026ca:	d824      	bhi.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026d0:	d008      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026d6:	d81e      	bhi.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80026dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e0:	d010      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026e2:	e018      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026e4:	4b62      	ldr	r3, [pc, #392]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a61      	ldr	r2, [pc, #388]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026f0:	e015      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fa73 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 80026fe:	4603      	mov	r3, r0
 8002700:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002702:	e00c      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3320      	adds	r3, #32
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fb5e 	bl	8002dcc <RCCEx_PLLSAI2_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002714:	e003      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	74fb      	strb	r3, [r7, #19]
      break;
 800271a:	e000      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800271c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10b      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002724:	4b52      	ldr	r3, [pc, #328]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002732:	494f      	ldr	r1, [pc, #316]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800273a:	e001      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80a0 	beq.w	800288e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800274e:	2300      	movs	r3, #0
 8002750:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002752:	4b47      	ldr	r3, [pc, #284]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002762:	2300      	movs	r3, #0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00d      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002768:	4b41      	ldr	r3, [pc, #260]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	4a40      	ldr	r2, [pc, #256]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002772:	6593      	str	r3, [r2, #88]	; 0x58
 8002774:	4b3e      	ldr	r3, [pc, #248]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002780:	2301      	movs	r3, #1
 8002782:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002784:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a3a      	ldr	r2, [pc, #232]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800278a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002790:	f7fe fd6c 	bl	800126c <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002796:	e009      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002798:	f7fe fd68 	bl	800126c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d902      	bls.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	74fb      	strb	r3, [r7, #19]
        break;
 80027aa:	e005      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027ac:	4b31      	ldr	r3, [pc, #196]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0ef      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80027b8:	7cfb      	ldrb	r3, [r7, #19]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d15c      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027be:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01f      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d019      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027dc:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027e8:	4b21      	ldr	r3, [pc, #132]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ee:	4a20      	ldr	r2, [pc, #128]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fe:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002808:	4a19      	ldr	r2, [pc, #100]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d016      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7fe fd27 	bl	800126c <HAL_GetTick>
 800281e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002820:	e00b      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7fe fd23 	bl	800126c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002830:	4293      	cmp	r3, r2
 8002832:	d902      	bls.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	74fb      	strb	r3, [r7, #19]
            break;
 8002838:	e006      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ec      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002848:	7cfb      	ldrb	r3, [r7, #19]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10c      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800285e:	4904      	ldr	r1, [pc, #16]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002866:	e009      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	74bb      	strb	r3, [r7, #18]
 800286c:	e006      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002878:	7cfb      	ldrb	r3, [r7, #19]
 800287a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800287c:	7c7b      	ldrb	r3, [r7, #17]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d105      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002882:	4b9e      	ldr	r3, [pc, #632]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	4a9d      	ldr	r2, [pc, #628]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800289a:	4b98      	ldr	r3, [pc, #608]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	f023 0203 	bic.w	r2, r3, #3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	4994      	ldr	r1, [pc, #592]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028bc:	4b8f      	ldr	r3, [pc, #572]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	f023 020c 	bic.w	r2, r3, #12
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ca:	498c      	ldr	r1, [pc, #560]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028de:	4b87      	ldr	r3, [pc, #540]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	4983      	ldr	r1, [pc, #524]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002900:	4b7e      	ldr	r3, [pc, #504]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	497b      	ldr	r1, [pc, #492]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002922:	4b76      	ldr	r3, [pc, #472]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002930:	4972      	ldr	r1, [pc, #456]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002944:	4b6d      	ldr	r3, [pc, #436]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002952:	496a      	ldr	r1, [pc, #424]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002966:	4b65      	ldr	r3, [pc, #404]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002974:	4961      	ldr	r1, [pc, #388]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002988:	4b5c      	ldr	r3, [pc, #368]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002996:	4959      	ldr	r1, [pc, #356]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029aa:	4b54      	ldr	r3, [pc, #336]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b8:	4950      	ldr	r1, [pc, #320]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029cc:	4b4b      	ldr	r3, [pc, #300]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	4948      	ldr	r1, [pc, #288]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029ee:	4b43      	ldr	r3, [pc, #268]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fc:	493f      	ldr	r1, [pc, #252]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d028      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a10:	4b3a      	ldr	r3, [pc, #232]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a1e:	4937      	ldr	r1, [pc, #220]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a30:	4b32      	ldr	r3, [pc, #200]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4a31      	ldr	r2, [pc, #196]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3a:	60d3      	str	r3, [r2, #12]
 8002a3c:	e011      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a46:	d10c      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f8c8 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d028      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a6e:	4b23      	ldr	r3, [pc, #140]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	491f      	ldr	r1, [pc, #124]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4a1a      	ldr	r2, [pc, #104]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a98:	60d3      	str	r3, [r2, #12]
 8002a9a:	e011      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	2101      	movs	r1, #1
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 f899 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ab6:	7cfb      	ldrb	r3, [r7, #19]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002abc:	7cfb      	ldrb	r3, [r7, #19]
 8002abe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d02b      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ada:	4908      	ldr	r1, [pc, #32]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aea:	d109      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a02      	ldr	r2, [pc, #8]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af6:	60d3      	str	r3, [r2, #12]
 8002af8:	e014      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	2101      	movs	r1, #1
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 f867 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 8002b16:	4603      	mov	r3, r0
 8002b18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b1a:	7cfb      	ldrb	r3, [r7, #19]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d02f      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b30:	4b2b      	ldr	r3, [pc, #172]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b3e:	4928      	ldr	r1, [pc, #160]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b4e:	d10d      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	2102      	movs	r1, #2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f844 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b60:	7cfb      	ldrb	r3, [r7, #19]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d014      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b66:	7cfb      	ldrb	r3, [r7, #19]
 8002b68:	74bb      	strb	r3, [r7, #18]
 8002b6a:	e011      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3320      	adds	r3, #32
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 f925 	bl	8002dcc <RCCEx_PLLSAI2_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b86:	7cfb      	ldrb	r3, [r7, #19]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b9c:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002baa:	490d      	ldr	r1, [pc, #52]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00b      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bce:	4904      	ldr	r1, [pc, #16]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bd6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000

08002be4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bf2:	4b75      	ldr	r3, [pc, #468]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d018      	beq.n	8002c30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bfe:	4b72      	ldr	r3, [pc, #456]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f003 0203 	and.w	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d10d      	bne.n	8002c2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
       ||
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c16:	4b6c      	ldr	r3, [pc, #432]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
       ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d047      	beq.n	8002cba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
 8002c2e:	e044      	b.n	8002cba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d018      	beq.n	8002c6a <RCCEx_PLLSAI1_Config+0x86>
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d825      	bhi.n	8002c88 <RCCEx_PLLSAI1_Config+0xa4>
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d002      	beq.n	8002c46 <RCCEx_PLLSAI1_Config+0x62>
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d009      	beq.n	8002c58 <RCCEx_PLLSAI1_Config+0x74>
 8002c44:	e020      	b.n	8002c88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c46:	4b60      	ldr	r3, [pc, #384]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d11d      	bne.n	8002c8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c56:	e01a      	b.n	8002c8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c58:	4b5b      	ldr	r3, [pc, #364]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d116      	bne.n	8002c92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c68:	e013      	b.n	8002c92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c6a:	4b57      	ldr	r3, [pc, #348]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10f      	bne.n	8002c96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c76:	4b54      	ldr	r3, [pc, #336]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c86:	e006      	b.n	8002c96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8c:	e004      	b.n	8002c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e002      	b.n	8002c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c92:	bf00      	nop
 8002c94:	e000      	b.n	8002c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c96:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10d      	bne.n	8002cba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c9e:	4b4a      	ldr	r3, [pc, #296]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6819      	ldr	r1, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	4944      	ldr	r1, [pc, #272]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d17d      	bne.n	8002dbc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cc0:	4b41      	ldr	r3, [pc, #260]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a40      	ldr	r2, [pc, #256]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ccc:	f7fe face 	bl	800126c <HAL_GetTick>
 8002cd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cd2:	e009      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cd4:	f7fe faca 	bl	800126c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d902      	bls.n	8002ce8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ce6:	e005      	b.n	8002cf4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ce8:	4b37      	ldr	r3, [pc, #220]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1ef      	bne.n	8002cd4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d160      	bne.n	8002dbc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d111      	bne.n	8002d24 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d00:	4b31      	ldr	r3, [pc, #196]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6892      	ldr	r2, [r2, #8]
 8002d10:	0211      	lsls	r1, r2, #8
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68d2      	ldr	r2, [r2, #12]
 8002d16:	0912      	lsrs	r2, r2, #4
 8002d18:	0452      	lsls	r2, r2, #17
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	492a      	ldr	r1, [pc, #168]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	610b      	str	r3, [r1, #16]
 8002d22:	e027      	b.n	8002d74 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d112      	bne.n	8002d50 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d2a:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6892      	ldr	r2, [r2, #8]
 8002d3a:	0211      	lsls	r1, r2, #8
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6912      	ldr	r2, [r2, #16]
 8002d40:	0852      	lsrs	r2, r2, #1
 8002d42:	3a01      	subs	r2, #1
 8002d44:	0552      	lsls	r2, r2, #21
 8002d46:	430a      	orrs	r2, r1
 8002d48:	491f      	ldr	r1, [pc, #124]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	610b      	str	r3, [r1, #16]
 8002d4e:	e011      	b.n	8002d74 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d50:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6892      	ldr	r2, [r2, #8]
 8002d60:	0211      	lsls	r1, r2, #8
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6952      	ldr	r2, [r2, #20]
 8002d66:	0852      	lsrs	r2, r2, #1
 8002d68:	3a01      	subs	r2, #1
 8002d6a:	0652      	lsls	r2, r2, #25
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	4916      	ldr	r1, [pc, #88]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d80:	f7fe fa74 	bl	800126c <HAL_GetTick>
 8002d84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d86:	e009      	b.n	8002d9c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d88:	f7fe fa70 	bl	800126c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d902      	bls.n	8002d9c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	73fb      	strb	r3, [r7, #15]
          break;
 8002d9a:	e005      	b.n	8002da8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ef      	beq.n	8002d88 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	4904      	ldr	r1, [pc, #16]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000

08002dcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dda:	4b6a      	ldr	r3, [pc, #424]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d018      	beq.n	8002e18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002de6:	4b67      	ldr	r3, [pc, #412]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f003 0203 	and.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d10d      	bne.n	8002e12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
       ||
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002dfe:	4b61      	ldr	r3, [pc, #388]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d047      	beq.n	8002ea2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	e044      	b.n	8002ea2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d018      	beq.n	8002e52 <RCCEx_PLLSAI2_Config+0x86>
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d825      	bhi.n	8002e70 <RCCEx_PLLSAI2_Config+0xa4>
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d002      	beq.n	8002e2e <RCCEx_PLLSAI2_Config+0x62>
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d009      	beq.n	8002e40 <RCCEx_PLLSAI2_Config+0x74>
 8002e2c:	e020      	b.n	8002e70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e2e:	4b55      	ldr	r3, [pc, #340]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d11d      	bne.n	8002e76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e3e:	e01a      	b.n	8002e76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e40:	4b50      	ldr	r3, [pc, #320]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d116      	bne.n	8002e7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e50:	e013      	b.n	8002e7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e52:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10f      	bne.n	8002e7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e5e:	4b49      	ldr	r3, [pc, #292]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e6e:	e006      	b.n	8002e7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
      break;
 8002e74:	e004      	b.n	8002e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e76:	bf00      	nop
 8002e78:	e002      	b.n	8002e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e7a:	bf00      	nop
 8002e7c:	e000      	b.n	8002e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10d      	bne.n	8002ea2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e86:	4b3f      	ldr	r3, [pc, #252]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	4939      	ldr	r1, [pc, #228]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d167      	bne.n	8002f78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ea8:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a35      	ldr	r2, [pc, #212]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb4:	f7fe f9da 	bl	800126c <HAL_GetTick>
 8002eb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002eba:	e009      	b.n	8002ed0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ebc:	f7fe f9d6 	bl	800126c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d902      	bls.n	8002ed0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	73fb      	strb	r3, [r7, #15]
        break;
 8002ece:	e005      	b.n	8002edc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ed0:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1ef      	bne.n	8002ebc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d14a      	bne.n	8002f78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d111      	bne.n	8002f0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ee8:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6892      	ldr	r2, [r2, #8]
 8002ef8:	0211      	lsls	r1, r2, #8
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68d2      	ldr	r2, [r2, #12]
 8002efe:	0912      	lsrs	r2, r2, #4
 8002f00:	0452      	lsls	r2, r2, #17
 8002f02:	430a      	orrs	r2, r1
 8002f04:	491f      	ldr	r1, [pc, #124]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	614b      	str	r3, [r1, #20]
 8002f0a:	e011      	b.n	8002f30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6892      	ldr	r2, [r2, #8]
 8002f1c:	0211      	lsls	r1, r2, #8
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6912      	ldr	r2, [r2, #16]
 8002f22:	0852      	lsrs	r2, r2, #1
 8002f24:	3a01      	subs	r2, #1
 8002f26:	0652      	lsls	r2, r2, #25
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	4916      	ldr	r1, [pc, #88]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fe f996 	bl	800126c <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f42:	e009      	b.n	8002f58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f44:	f7fe f992 	bl	800126c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d902      	bls.n	8002f58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	73fb      	strb	r3, [r7, #15]
          break;
 8002f56:	e005      	b.n	8002f64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ef      	beq.n	8002f44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	4904      	ldr	r1, [pc, #16]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000

08002f88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e040      	b.n	800301c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd fdf6 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2224      	movs	r2, #36	; 0x24
 8002fb4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0201 	bic.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fb26 	bl	8003618 <UART_SetConfig>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e022      	b.n	800301c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fda4 	bl	8003b2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003002:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fe2b 	bl	8003c70 <UART_CheckIdleState>
 800301a:	4603      	mov	r3, r0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	; 0x28
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	4613      	mov	r3, r2
 8003032:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003038:	2b20      	cmp	r3, #32
 800303a:	f040 8082 	bne.w	8003142 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <HAL_UART_Transmit+0x26>
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e07a      	b.n	8003144 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_UART_Transmit+0x38>
 8003058:	2302      	movs	r3, #2
 800305a:	e073      	b.n	8003144 <HAL_UART_Transmit+0x120>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2221      	movs	r2, #33	; 0x21
 8003070:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003072:	f7fe f8fb 	bl	800126c <HAL_GetTick>
 8003076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	88fa      	ldrh	r2, [r7, #6]
 800307c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	88fa      	ldrh	r2, [r7, #6]
 8003084:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003090:	d108      	bne.n	80030a4 <HAL_UART_Transmit+0x80>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d104      	bne.n	80030a4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	e003      	b.n	80030ac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80030b4:	e02d      	b.n	8003112 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2200      	movs	r2, #0
 80030be:	2180      	movs	r1, #128	; 0x80
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fe1e 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e039      	b.n	8003144 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10b      	bne.n	80030ee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	881a      	ldrh	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030e2:	b292      	uxth	r2, r2
 80030e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	3302      	adds	r3, #2
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	e008      	b.n	8003100 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	781a      	ldrb	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	b292      	uxth	r2, r2
 80030f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3301      	adds	r3, #1
 80030fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003118:	b29b      	uxth	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1cb      	bne.n	80030b6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2200      	movs	r2, #0
 8003126:	2140      	movs	r1, #64	; 0x40
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fdea 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e005      	b.n	8003144 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	e000      	b.n	8003144 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003142:	2302      	movs	r3, #2
  }
}
 8003144:	4618      	mov	r0, r3
 8003146:	3720      	adds	r7, #32
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	4613      	mov	r3, r2
 8003158:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800315e:	2b20      	cmp	r3, #32
 8003160:	d131      	bne.n	80031c6 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_UART_Receive_IT+0x22>
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e02a      	b.n	80031c8 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_UART_Receive_IT+0x34>
 800317c:	2302      	movs	r3, #2
 800317e:	e023      	b.n	80031c8 <HAL_UART_Receive_IT+0x7c>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a0f      	ldr	r2, [pc, #60]	; (80031d0 <HAL_UART_Receive_IT+0x84>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00e      	beq.n	80031b6 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80031b4:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	461a      	mov	r2, r3
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fe1d 	bl	8003dfc <UART_Start_Receive_IT>
 80031c2:	4603      	mov	r3, r0
 80031c4:	e000      	b.n	80031c8 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
  }
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40008000 	.word	0x40008000

080031d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80031fa:	4013      	ands	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d113      	bne.n	800322c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00e      	beq.n	800322c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d009      	beq.n	800322c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 81ce 	beq.w	80035be <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4798      	blx	r3
      }
      return;
 800322a:	e1c8      	b.n	80035be <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 80e3 	beq.w	80033fa <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d105      	bne.n	800324a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4ba6      	ldr	r3, [pc, #664]	; (80034dc <HAL_UART_IRQHandler+0x308>)
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80d8 	beq.w	80033fa <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d010      	beq.n	8003276 <HAL_UART_IRQHandler+0xa2>
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00b      	beq.n	8003276 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2201      	movs	r2, #1
 8003264:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800326c:	f043 0201 	orr.w	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d010      	beq.n	80032a2 <HAL_UART_IRQHandler+0xce>
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2202      	movs	r2, #2
 8003290:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003298:	f043 0204 	orr.w	r2, r3, #4
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d010      	beq.n	80032ce <HAL_UART_IRQHandler+0xfa>
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00b      	beq.n	80032ce <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2204      	movs	r2, #4
 80032bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032c4:	f043 0202 	orr.w	r2, r3, #2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d015      	beq.n	8003304 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d104      	bne.n	80032ec <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00b      	beq.n	8003304 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2208      	movs	r2, #8
 80032f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032fa:	f043 0208 	orr.w	r2, r3, #8
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800330a:	2b00      	cmp	r3, #0
 800330c:	d011      	beq.n	8003332 <HAL_UART_IRQHandler+0x15e>
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00c      	beq.n	8003332 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003328:	f043 0220 	orr.w	r2, r3, #32
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8142 	beq.w	80035c2 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00c      	beq.n	8003362 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d007      	beq.n	8003362 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003368:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003374:	2b40      	cmp	r3, #64	; 0x40
 8003376:	d004      	beq.n	8003382 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800337e:	2b00      	cmp	r3, #0
 8003380:	d031      	beq.n	80033e6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fdc2 	bl	8003f0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b40      	cmp	r3, #64	; 0x40
 8003394:	d123      	bne.n	80033de <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d013      	beq.n	80033d6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	4a4b      	ldr	r2, [pc, #300]	; (80034e0 <HAL_UART_IRQHandler+0x30c>)
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe f8d5 	bl	800156a <HAL_DMA_Abort_IT>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d017      	beq.n	80033f6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80033d0:	4610      	mov	r0, r2
 80033d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d4:	e00f      	b.n	80033f6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f908 	bl	80035ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033dc:	e00b      	b.n	80033f6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f904 	bl	80035ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e4:	e007      	b.n	80033f6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f900 	bl	80035ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80033f4:	e0e5      	b.n	80035c2 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f6:	bf00      	nop
    return;
 80033f8:	e0e3      	b.n	80035c2 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fe:	2b01      	cmp	r3, #1
 8003400:	f040 80a9 	bne.w	8003556 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80a3 	beq.w	8003556 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 809d 	beq.w	8003556 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2210      	movs	r2, #16
 8003422:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342e:	2b40      	cmp	r3, #64	; 0x40
 8003430:	d158      	bne.n	80034e4 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800343c:	893b      	ldrh	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80c1 	beq.w	80035c6 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800344a:	893a      	ldrh	r2, [r7, #8]
 800344c:	429a      	cmp	r2, r3
 800344e:	f080 80ba 	bcs.w	80035c6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	893a      	ldrh	r2, [r7, #8]
 8003456:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d12a      	bne.n	80034c0 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003478:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0201 	bic.w	r2, r2, #1
 8003488:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003498:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0210 	bic.w	r2, r2, #16
 80034b4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe f817 	bl	80014ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	4619      	mov	r1, r3
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f893 	bl	8003600 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034da:	e074      	b.n	80035c6 <HAL_UART_IRQHandler+0x3f2>
 80034dc:	04000120 	.word	0x04000120
 80034e0:	08003f6b 	.word	0x08003f6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d063      	beq.n	80035ca <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003502:	897b      	ldrh	r3, [r7, #10]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d060      	beq.n	80035ca <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003516:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0210 	bic.w	r2, r2, #16
 8003548:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800354a:	897b      	ldrh	r3, [r7, #10]
 800354c:	4619      	mov	r1, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f856 	bl	8003600 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003554:	e039      	b.n	80035ca <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00d      	beq.n	800357c <HAL_UART_IRQHandler+0x3a8>
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d008      	beq.n	800357c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003572:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 fdff 	bl	8004178 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800357a:	e029      	b.n	80035d0 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00d      	beq.n	80035a2 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003594:	2b00      	cmp	r3, #0
 8003596:	d01a      	beq.n	80035ce <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	4798      	blx	r3
    }
    return;
 80035a0:	e015      	b.n	80035ce <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d011      	beq.n	80035d0 <HAL_UART_IRQHandler+0x3fc>
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00c      	beq.n	80035d0 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fced 	bl	8003f96 <UART_EndTransmit_IT>
    return;
 80035bc:	e008      	b.n	80035d0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80035be:	bf00      	nop
 80035c0:	e006      	b.n	80035d0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80035c2:	bf00      	nop
 80035c4:	e004      	b.n	80035d0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80035c6:	bf00      	nop
 80035c8:	e002      	b.n	80035d0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80035ca:	bf00      	nop
 80035cc:	e000      	b.n	80035d0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80035ce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80035d0:	3720      	adds	r7, #32
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop

080035d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003618:	b5b0      	push	{r4, r5, r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	4313      	orrs	r3, r2
 800363a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	4bad      	ldr	r3, [pc, #692]	; (80038f8 <UART_SetConfig+0x2e0>)
 8003644:	4013      	ands	r3, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	69f9      	ldr	r1, [r7, #28]
 800364c:	430b      	orrs	r3, r1
 800364e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4aa2      	ldr	r2, [pc, #648]	; (80038fc <UART_SetConfig+0x2e4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	4313      	orrs	r3, r2
 800367e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	430a      	orrs	r2, r1
 8003692:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a99      	ldr	r2, [pc, #612]	; (8003900 <UART_SetConfig+0x2e8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d121      	bne.n	80036e2 <UART_SetConfig+0xca>
 800369e:	4b99      	ldr	r3, [pc, #612]	; (8003904 <UART_SetConfig+0x2ec>)
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d817      	bhi.n	80036dc <UART_SetConfig+0xc4>
 80036ac:	a201      	add	r2, pc, #4	; (adr r2, 80036b4 <UART_SetConfig+0x9c>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	080036c5 	.word	0x080036c5
 80036b8:	080036d1 	.word	0x080036d1
 80036bc:	080036cb 	.word	0x080036cb
 80036c0:	080036d7 	.word	0x080036d7
 80036c4:	2301      	movs	r3, #1
 80036c6:	76fb      	strb	r3, [r7, #27]
 80036c8:	e0e7      	b.n	800389a <UART_SetConfig+0x282>
 80036ca:	2302      	movs	r3, #2
 80036cc:	76fb      	strb	r3, [r7, #27]
 80036ce:	e0e4      	b.n	800389a <UART_SetConfig+0x282>
 80036d0:	2304      	movs	r3, #4
 80036d2:	76fb      	strb	r3, [r7, #27]
 80036d4:	e0e1      	b.n	800389a <UART_SetConfig+0x282>
 80036d6:	2308      	movs	r3, #8
 80036d8:	76fb      	strb	r3, [r7, #27]
 80036da:	e0de      	b.n	800389a <UART_SetConfig+0x282>
 80036dc:	2310      	movs	r3, #16
 80036de:	76fb      	strb	r3, [r7, #27]
 80036e0:	e0db      	b.n	800389a <UART_SetConfig+0x282>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a88      	ldr	r2, [pc, #544]	; (8003908 <UART_SetConfig+0x2f0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d132      	bne.n	8003752 <UART_SetConfig+0x13a>
 80036ec:	4b85      	ldr	r3, [pc, #532]	; (8003904 <UART_SetConfig+0x2ec>)
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b0c      	cmp	r3, #12
 80036f8:	d828      	bhi.n	800374c <UART_SetConfig+0x134>
 80036fa:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <UART_SetConfig+0xe8>)
 80036fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003700:	08003735 	.word	0x08003735
 8003704:	0800374d 	.word	0x0800374d
 8003708:	0800374d 	.word	0x0800374d
 800370c:	0800374d 	.word	0x0800374d
 8003710:	08003741 	.word	0x08003741
 8003714:	0800374d 	.word	0x0800374d
 8003718:	0800374d 	.word	0x0800374d
 800371c:	0800374d 	.word	0x0800374d
 8003720:	0800373b 	.word	0x0800373b
 8003724:	0800374d 	.word	0x0800374d
 8003728:	0800374d 	.word	0x0800374d
 800372c:	0800374d 	.word	0x0800374d
 8003730:	08003747 	.word	0x08003747
 8003734:	2300      	movs	r3, #0
 8003736:	76fb      	strb	r3, [r7, #27]
 8003738:	e0af      	b.n	800389a <UART_SetConfig+0x282>
 800373a:	2302      	movs	r3, #2
 800373c:	76fb      	strb	r3, [r7, #27]
 800373e:	e0ac      	b.n	800389a <UART_SetConfig+0x282>
 8003740:	2304      	movs	r3, #4
 8003742:	76fb      	strb	r3, [r7, #27]
 8003744:	e0a9      	b.n	800389a <UART_SetConfig+0x282>
 8003746:	2308      	movs	r3, #8
 8003748:	76fb      	strb	r3, [r7, #27]
 800374a:	e0a6      	b.n	800389a <UART_SetConfig+0x282>
 800374c:	2310      	movs	r3, #16
 800374e:	76fb      	strb	r3, [r7, #27]
 8003750:	e0a3      	b.n	800389a <UART_SetConfig+0x282>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a6d      	ldr	r2, [pc, #436]	; (800390c <UART_SetConfig+0x2f4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d120      	bne.n	800379e <UART_SetConfig+0x186>
 800375c:	4b69      	ldr	r3, [pc, #420]	; (8003904 <UART_SetConfig+0x2ec>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003762:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003766:	2b30      	cmp	r3, #48	; 0x30
 8003768:	d013      	beq.n	8003792 <UART_SetConfig+0x17a>
 800376a:	2b30      	cmp	r3, #48	; 0x30
 800376c:	d814      	bhi.n	8003798 <UART_SetConfig+0x180>
 800376e:	2b20      	cmp	r3, #32
 8003770:	d009      	beq.n	8003786 <UART_SetConfig+0x16e>
 8003772:	2b20      	cmp	r3, #32
 8003774:	d810      	bhi.n	8003798 <UART_SetConfig+0x180>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <UART_SetConfig+0x168>
 800377a:	2b10      	cmp	r3, #16
 800377c:	d006      	beq.n	800378c <UART_SetConfig+0x174>
 800377e:	e00b      	b.n	8003798 <UART_SetConfig+0x180>
 8003780:	2300      	movs	r3, #0
 8003782:	76fb      	strb	r3, [r7, #27]
 8003784:	e089      	b.n	800389a <UART_SetConfig+0x282>
 8003786:	2302      	movs	r3, #2
 8003788:	76fb      	strb	r3, [r7, #27]
 800378a:	e086      	b.n	800389a <UART_SetConfig+0x282>
 800378c:	2304      	movs	r3, #4
 800378e:	76fb      	strb	r3, [r7, #27]
 8003790:	e083      	b.n	800389a <UART_SetConfig+0x282>
 8003792:	2308      	movs	r3, #8
 8003794:	76fb      	strb	r3, [r7, #27]
 8003796:	e080      	b.n	800389a <UART_SetConfig+0x282>
 8003798:	2310      	movs	r3, #16
 800379a:	76fb      	strb	r3, [r7, #27]
 800379c:	e07d      	b.n	800389a <UART_SetConfig+0x282>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a5b      	ldr	r2, [pc, #364]	; (8003910 <UART_SetConfig+0x2f8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d120      	bne.n	80037ea <UART_SetConfig+0x1d2>
 80037a8:	4b56      	ldr	r3, [pc, #344]	; (8003904 <UART_SetConfig+0x2ec>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037b2:	2bc0      	cmp	r3, #192	; 0xc0
 80037b4:	d013      	beq.n	80037de <UART_SetConfig+0x1c6>
 80037b6:	2bc0      	cmp	r3, #192	; 0xc0
 80037b8:	d814      	bhi.n	80037e4 <UART_SetConfig+0x1cc>
 80037ba:	2b80      	cmp	r3, #128	; 0x80
 80037bc:	d009      	beq.n	80037d2 <UART_SetConfig+0x1ba>
 80037be:	2b80      	cmp	r3, #128	; 0x80
 80037c0:	d810      	bhi.n	80037e4 <UART_SetConfig+0x1cc>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <UART_SetConfig+0x1b4>
 80037c6:	2b40      	cmp	r3, #64	; 0x40
 80037c8:	d006      	beq.n	80037d8 <UART_SetConfig+0x1c0>
 80037ca:	e00b      	b.n	80037e4 <UART_SetConfig+0x1cc>
 80037cc:	2300      	movs	r3, #0
 80037ce:	76fb      	strb	r3, [r7, #27]
 80037d0:	e063      	b.n	800389a <UART_SetConfig+0x282>
 80037d2:	2302      	movs	r3, #2
 80037d4:	76fb      	strb	r3, [r7, #27]
 80037d6:	e060      	b.n	800389a <UART_SetConfig+0x282>
 80037d8:	2304      	movs	r3, #4
 80037da:	76fb      	strb	r3, [r7, #27]
 80037dc:	e05d      	b.n	800389a <UART_SetConfig+0x282>
 80037de:	2308      	movs	r3, #8
 80037e0:	76fb      	strb	r3, [r7, #27]
 80037e2:	e05a      	b.n	800389a <UART_SetConfig+0x282>
 80037e4:	2310      	movs	r3, #16
 80037e6:	76fb      	strb	r3, [r7, #27]
 80037e8:	e057      	b.n	800389a <UART_SetConfig+0x282>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a49      	ldr	r2, [pc, #292]	; (8003914 <UART_SetConfig+0x2fc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d125      	bne.n	8003840 <UART_SetConfig+0x228>
 80037f4:	4b43      	ldr	r3, [pc, #268]	; (8003904 <UART_SetConfig+0x2ec>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003802:	d017      	beq.n	8003834 <UART_SetConfig+0x21c>
 8003804:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003808:	d817      	bhi.n	800383a <UART_SetConfig+0x222>
 800380a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380e:	d00b      	beq.n	8003828 <UART_SetConfig+0x210>
 8003810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003814:	d811      	bhi.n	800383a <UART_SetConfig+0x222>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <UART_SetConfig+0x20a>
 800381a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800381e:	d006      	beq.n	800382e <UART_SetConfig+0x216>
 8003820:	e00b      	b.n	800383a <UART_SetConfig+0x222>
 8003822:	2300      	movs	r3, #0
 8003824:	76fb      	strb	r3, [r7, #27]
 8003826:	e038      	b.n	800389a <UART_SetConfig+0x282>
 8003828:	2302      	movs	r3, #2
 800382a:	76fb      	strb	r3, [r7, #27]
 800382c:	e035      	b.n	800389a <UART_SetConfig+0x282>
 800382e:	2304      	movs	r3, #4
 8003830:	76fb      	strb	r3, [r7, #27]
 8003832:	e032      	b.n	800389a <UART_SetConfig+0x282>
 8003834:	2308      	movs	r3, #8
 8003836:	76fb      	strb	r3, [r7, #27]
 8003838:	e02f      	b.n	800389a <UART_SetConfig+0x282>
 800383a:	2310      	movs	r3, #16
 800383c:	76fb      	strb	r3, [r7, #27]
 800383e:	e02c      	b.n	800389a <UART_SetConfig+0x282>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a2d      	ldr	r2, [pc, #180]	; (80038fc <UART_SetConfig+0x2e4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d125      	bne.n	8003896 <UART_SetConfig+0x27e>
 800384a:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <UART_SetConfig+0x2ec>)
 800384c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003850:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003854:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003858:	d017      	beq.n	800388a <UART_SetConfig+0x272>
 800385a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800385e:	d817      	bhi.n	8003890 <UART_SetConfig+0x278>
 8003860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003864:	d00b      	beq.n	800387e <UART_SetConfig+0x266>
 8003866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386a:	d811      	bhi.n	8003890 <UART_SetConfig+0x278>
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <UART_SetConfig+0x260>
 8003870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003874:	d006      	beq.n	8003884 <UART_SetConfig+0x26c>
 8003876:	e00b      	b.n	8003890 <UART_SetConfig+0x278>
 8003878:	2300      	movs	r3, #0
 800387a:	76fb      	strb	r3, [r7, #27]
 800387c:	e00d      	b.n	800389a <UART_SetConfig+0x282>
 800387e:	2302      	movs	r3, #2
 8003880:	76fb      	strb	r3, [r7, #27]
 8003882:	e00a      	b.n	800389a <UART_SetConfig+0x282>
 8003884:	2304      	movs	r3, #4
 8003886:	76fb      	strb	r3, [r7, #27]
 8003888:	e007      	b.n	800389a <UART_SetConfig+0x282>
 800388a:	2308      	movs	r3, #8
 800388c:	76fb      	strb	r3, [r7, #27]
 800388e:	e004      	b.n	800389a <UART_SetConfig+0x282>
 8003890:	2310      	movs	r3, #16
 8003892:	76fb      	strb	r3, [r7, #27]
 8003894:	e001      	b.n	800389a <UART_SetConfig+0x282>
 8003896:	2310      	movs	r3, #16
 8003898:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a17      	ldr	r2, [pc, #92]	; (80038fc <UART_SetConfig+0x2e4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	f040 8087 	bne.w	80039b4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038a6:	7efb      	ldrb	r3, [r7, #27]
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d837      	bhi.n	800391c <UART_SetConfig+0x304>
 80038ac:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <UART_SetConfig+0x29c>)
 80038ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b2:	bf00      	nop
 80038b4:	080038d9 	.word	0x080038d9
 80038b8:	0800391d 	.word	0x0800391d
 80038bc:	080038e1 	.word	0x080038e1
 80038c0:	0800391d 	.word	0x0800391d
 80038c4:	080038e7 	.word	0x080038e7
 80038c8:	0800391d 	.word	0x0800391d
 80038cc:	0800391d 	.word	0x0800391d
 80038d0:	0800391d 	.word	0x0800391d
 80038d4:	080038ef 	.word	0x080038ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d8:	f7fe fe0e 	bl	80024f8 <HAL_RCC_GetPCLK1Freq>
 80038dc:	6178      	str	r0, [r7, #20]
        break;
 80038de:	e022      	b.n	8003926 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <UART_SetConfig+0x300>)
 80038e2:	617b      	str	r3, [r7, #20]
        break;
 80038e4:	e01f      	b.n	8003926 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038e6:	f7fe fd6f 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 80038ea:	6178      	str	r0, [r7, #20]
        break;
 80038ec:	e01b      	b.n	8003926 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038f2:	617b      	str	r3, [r7, #20]
        break;
 80038f4:	e017      	b.n	8003926 <UART_SetConfig+0x30e>
 80038f6:	bf00      	nop
 80038f8:	efff69f3 	.word	0xefff69f3
 80038fc:	40008000 	.word	0x40008000
 8003900:	40013800 	.word	0x40013800
 8003904:	40021000 	.word	0x40021000
 8003908:	40004400 	.word	0x40004400
 800390c:	40004800 	.word	0x40004800
 8003910:	40004c00 	.word	0x40004c00
 8003914:	40005000 	.word	0x40005000
 8003918:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	76bb      	strb	r3, [r7, #26]
        break;
 8003924:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80f1 	beq.w	8003b10 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	4413      	add	r3, r2
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	429a      	cmp	r2, r3
 800393c:	d305      	bcc.n	800394a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	429a      	cmp	r2, r3
 8003948:	d902      	bls.n	8003950 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	76bb      	strb	r3, [r7, #26]
 800394e:	e0df      	b.n	8003b10 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	4618      	mov	r0, r3
 8003954:	f04f 0100 	mov.w	r1, #0
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	020b      	lsls	r3, r1, #8
 8003962:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003966:	0202      	lsls	r2, r0, #8
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	6849      	ldr	r1, [r1, #4]
 800396c:	0849      	lsrs	r1, r1, #1
 800396e:	4608      	mov	r0, r1
 8003970:	f04f 0100 	mov.w	r1, #0
 8003974:	1814      	adds	r4, r2, r0
 8003976:	eb43 0501 	adc.w	r5, r3, r1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	461a      	mov	r2, r3
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	4620      	mov	r0, r4
 8003986:	4629      	mov	r1, r5
 8003988:	f7fc fe46 	bl	8000618 <__aeabi_uldivmod>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4613      	mov	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800399a:	d308      	bcc.n	80039ae <UART_SetConfig+0x396>
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a2:	d204      	bcs.n	80039ae <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	60da      	str	r2, [r3, #12]
 80039ac:	e0b0      	b.n	8003b10 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	76bb      	strb	r3, [r7, #26]
 80039b2:	e0ad      	b.n	8003b10 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039bc:	d15c      	bne.n	8003a78 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80039be:	7efb      	ldrb	r3, [r7, #27]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d828      	bhi.n	8003a16 <UART_SetConfig+0x3fe>
 80039c4:	a201      	add	r2, pc, #4	; (adr r2, 80039cc <UART_SetConfig+0x3b4>)
 80039c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ca:	bf00      	nop
 80039cc:	080039f1 	.word	0x080039f1
 80039d0:	080039f9 	.word	0x080039f9
 80039d4:	08003a01 	.word	0x08003a01
 80039d8:	08003a17 	.word	0x08003a17
 80039dc:	08003a07 	.word	0x08003a07
 80039e0:	08003a17 	.word	0x08003a17
 80039e4:	08003a17 	.word	0x08003a17
 80039e8:	08003a17 	.word	0x08003a17
 80039ec:	08003a0f 	.word	0x08003a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f0:	f7fe fd82 	bl	80024f8 <HAL_RCC_GetPCLK1Freq>
 80039f4:	6178      	str	r0, [r7, #20]
        break;
 80039f6:	e013      	b.n	8003a20 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039f8:	f7fe fd94 	bl	8002524 <HAL_RCC_GetPCLK2Freq>
 80039fc:	6178      	str	r0, [r7, #20]
        break;
 80039fe:	e00f      	b.n	8003a20 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a00:	4b49      	ldr	r3, [pc, #292]	; (8003b28 <UART_SetConfig+0x510>)
 8003a02:	617b      	str	r3, [r7, #20]
        break;
 8003a04:	e00c      	b.n	8003a20 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a06:	f7fe fcdf 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 8003a0a:	6178      	str	r0, [r7, #20]
        break;
 8003a0c:	e008      	b.n	8003a20 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a12:	617b      	str	r3, [r7, #20]
        break;
 8003a14:	e004      	b.n	8003a20 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	76bb      	strb	r3, [r7, #26]
        break;
 8003a1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d074      	beq.n	8003b10 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	005a      	lsls	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	085b      	lsrs	r3, r3, #1
 8003a30:	441a      	add	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b0f      	cmp	r3, #15
 8003a42:	d916      	bls.n	8003a72 <UART_SetConfig+0x45a>
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4a:	d212      	bcs.n	8003a72 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	f023 030f 	bic.w	r3, r3, #15
 8003a54:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	89fb      	ldrh	r3, [r7, #14]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	89fa      	ldrh	r2, [r7, #14]
 8003a6e:	60da      	str	r2, [r3, #12]
 8003a70:	e04e      	b.n	8003b10 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	76bb      	strb	r3, [r7, #26]
 8003a76:	e04b      	b.n	8003b10 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a78:	7efb      	ldrb	r3, [r7, #27]
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d827      	bhi.n	8003ace <UART_SetConfig+0x4b6>
 8003a7e:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <UART_SetConfig+0x46c>)
 8003a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a84:	08003aa9 	.word	0x08003aa9
 8003a88:	08003ab1 	.word	0x08003ab1
 8003a8c:	08003ab9 	.word	0x08003ab9
 8003a90:	08003acf 	.word	0x08003acf
 8003a94:	08003abf 	.word	0x08003abf
 8003a98:	08003acf 	.word	0x08003acf
 8003a9c:	08003acf 	.word	0x08003acf
 8003aa0:	08003acf 	.word	0x08003acf
 8003aa4:	08003ac7 	.word	0x08003ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa8:	f7fe fd26 	bl	80024f8 <HAL_RCC_GetPCLK1Freq>
 8003aac:	6178      	str	r0, [r7, #20]
        break;
 8003aae:	e013      	b.n	8003ad8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab0:	f7fe fd38 	bl	8002524 <HAL_RCC_GetPCLK2Freq>
 8003ab4:	6178      	str	r0, [r7, #20]
        break;
 8003ab6:	e00f      	b.n	8003ad8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <UART_SetConfig+0x510>)
 8003aba:	617b      	str	r3, [r7, #20]
        break;
 8003abc:	e00c      	b.n	8003ad8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003abe:	f7fe fc83 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 8003ac2:	6178      	str	r0, [r7, #20]
        break;
 8003ac4:	e008      	b.n	8003ad8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aca:	617b      	str	r3, [r7, #20]
        break;
 8003acc:	e004      	b.n	8003ad8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	76bb      	strb	r3, [r7, #26]
        break;
 8003ad6:	bf00      	nop
    }

    if (pclk != 0U)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d018      	beq.n	8003b10 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	085a      	lsrs	r2, r3, #1
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	441a      	add	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2b0f      	cmp	r3, #15
 8003af8:	d908      	bls.n	8003b0c <UART_SetConfig+0x4f4>
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b00:	d204      	bcs.n	8003b0c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	e001      	b.n	8003b10 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b1c:	7ebb      	ldrb	r3, [r7, #26]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3720      	adds	r7, #32
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bdb0      	pop	{r4, r5, r7, pc}
 8003b26:	bf00      	nop
 8003b28:	00f42400 	.word	0x00f42400

08003b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01a      	beq.n	8003c42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2a:	d10a      	bne.n	8003c42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
  }
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c80:	f7fd faf4 	bl	800126c <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d10e      	bne.n	8003cb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f82d 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e023      	b.n	8003cfa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d10e      	bne.n	8003cde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f817 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e00d      	b.n	8003cfa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	603b      	str	r3, [r7, #0]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d12:	e05e      	b.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1a:	d05a      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1c:	f7fd faa6 	bl	800126c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d302      	bcc.n	8003d32 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d11b      	bne.n	8003d6a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d40:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2220      	movs	r2, #32
 8003d56:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e043      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d02c      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d86:	d124      	bne.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d90:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003da0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e00f      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	bf0c      	ite	eq
 8003de2:	2301      	moveq	r3, #1
 8003de4:	2300      	movne	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d091      	beq.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	88fa      	ldrh	r2, [r7, #6]
 8003e14:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	88fa      	ldrh	r2, [r7, #6]
 8003e1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2e:	d10e      	bne.n	8003e4e <UART_Start_Receive_IT+0x52>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d105      	bne.n	8003e44 <UART_Start_Receive_IT+0x48>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e42:	e02d      	b.n	8003ea0 <UART_Start_Receive_IT+0xa4>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	22ff      	movs	r2, #255	; 0xff
 8003e48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e4c:	e028      	b.n	8003ea0 <UART_Start_Receive_IT+0xa4>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10d      	bne.n	8003e72 <UART_Start_Receive_IT+0x76>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d104      	bne.n	8003e68 <UART_Start_Receive_IT+0x6c>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	22ff      	movs	r2, #255	; 0xff
 8003e62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e66:	e01b      	b.n	8003ea0 <UART_Start_Receive_IT+0xa4>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	227f      	movs	r2, #127	; 0x7f
 8003e6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e70:	e016      	b.n	8003ea0 <UART_Start_Receive_IT+0xa4>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e7a:	d10d      	bne.n	8003e98 <UART_Start_Receive_IT+0x9c>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d104      	bne.n	8003e8e <UART_Start_Receive_IT+0x92>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	227f      	movs	r2, #127	; 0x7f
 8003e88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e8c:	e008      	b.n	8003ea0 <UART_Start_Receive_IT+0xa4>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	223f      	movs	r2, #63	; 0x3f
 8003e92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e96:	e003      	b.n	8003ea0 <UART_Start_Receive_IT+0xa4>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2222      	movs	r2, #34	; 0x22
 8003eac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0201 	orr.w	r2, r2, #1
 8003ebc:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec6:	d107      	bne.n	8003ed8 <UART_Start_Receive_IT+0xdc>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d103      	bne.n	8003ed8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4a0c      	ldr	r2, [pc, #48]	; (8003f04 <UART_Start_Receive_IT+0x108>)
 8003ed4:	665a      	str	r2, [r3, #100]	; 0x64
 8003ed6:	e002      	b.n	8003ede <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4a0b      	ldr	r2, [pc, #44]	; (8003f08 <UART_Start_Receive_IT+0x10c>)
 8003edc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003ef4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	080040a1 	.word	0x080040a1
 8003f08:	08003fc9 	.word	0x08003fc9

08003f0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f22:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d107      	bne.n	8003f4c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0210 	bic.w	r2, r2, #16
 8003f4a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f7ff fb2f 	bl	80035ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fac:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fb0c 	bl	80035d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003fd6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fdc:	2b22      	cmp	r3, #34	; 0x22
 8003fde:	d151      	bne.n	8004084 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fe6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fe8:	89bb      	ldrh	r3, [r7, #12]
 8003fea:	b2d9      	uxtb	r1, r3
 8003fec:	89fb      	ldrh	r3, [r7, #14]
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff4:	400a      	ands	r2, r1
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d13a      	bne.n	8004098 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004030:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0201 	bic.w	r2, r2, #1
 8004040:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004052:	2b01      	cmp	r3, #1
 8004054:	d10f      	bne.n	8004076 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0210 	bic.w	r2, r2, #16
 8004064:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff fac6 	bl	8003600 <HAL_UARTEx_RxEventCallback>
 8004074:	e002      	b.n	800407c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fc fed0 	bl	8000e1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004082:	e009      	b.n	8004098 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	8b1b      	ldrh	r3, [r3, #24]
 800408a:	b29a      	uxth	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0208 	orr.w	r2, r2, #8
 8004094:	b292      	uxth	r2, r2
 8004096:	831a      	strh	r2, [r3, #24]
}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040ae:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040b4:	2b22      	cmp	r3, #34	; 0x22
 80040b6:	d151      	bne.n	800415c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040be:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80040c6:	89ba      	ldrh	r2, [r7, #12]
 80040c8:	89fb      	ldrh	r3, [r7, #14]
 80040ca:	4013      	ands	r3, r2
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d6:	1c9a      	adds	r2, r3, #2
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d13a      	bne.n	8004170 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004108:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0201 	bic.w	r2, r2, #1
 8004118:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800412a:	2b01      	cmp	r3, #1
 800412c:	d10f      	bne.n	800414e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0210 	bic.w	r2, r2, #16
 800413c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004144:	4619      	mov	r1, r3
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff fa5a 	bl	8003600 <HAL_UARTEx_RxEventCallback>
 800414c:	e002      	b.n	8004154 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fc fe64 	bl	8000e1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800415a:	e009      	b.n	8004170 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	8b1b      	ldrh	r3, [r3, #24]
 8004162:	b29a      	uxth	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 0208 	orr.w	r2, r2, #8
 800416c:	b292      	uxth	r2, r2
 800416e:	831a      	strh	r2, [r3, #24]
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <__errno>:
 800418c:	4b01      	ldr	r3, [pc, #4]	; (8004194 <__errno+0x8>)
 800418e:	6818      	ldr	r0, [r3, #0]
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	2000004c 	.word	0x2000004c

08004198 <__libc_init_array>:
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	4d0d      	ldr	r5, [pc, #52]	; (80041d0 <__libc_init_array+0x38>)
 800419c:	4c0d      	ldr	r4, [pc, #52]	; (80041d4 <__libc_init_array+0x3c>)
 800419e:	1b64      	subs	r4, r4, r5
 80041a0:	10a4      	asrs	r4, r4, #2
 80041a2:	2600      	movs	r6, #0
 80041a4:	42a6      	cmp	r6, r4
 80041a6:	d109      	bne.n	80041bc <__libc_init_array+0x24>
 80041a8:	4d0b      	ldr	r5, [pc, #44]	; (80041d8 <__libc_init_array+0x40>)
 80041aa:	4c0c      	ldr	r4, [pc, #48]	; (80041dc <__libc_init_array+0x44>)
 80041ac:	f000 fc8a 	bl	8004ac4 <_init>
 80041b0:	1b64      	subs	r4, r4, r5
 80041b2:	10a4      	asrs	r4, r4, #2
 80041b4:	2600      	movs	r6, #0
 80041b6:	42a6      	cmp	r6, r4
 80041b8:	d105      	bne.n	80041c6 <__libc_init_array+0x2e>
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
 80041bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c0:	4798      	blx	r3
 80041c2:	3601      	adds	r6, #1
 80041c4:	e7ee      	b.n	80041a4 <__libc_init_array+0xc>
 80041c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ca:	4798      	blx	r3
 80041cc:	3601      	adds	r6, #1
 80041ce:	e7f2      	b.n	80041b6 <__libc_init_array+0x1e>
 80041d0:	08004d9c 	.word	0x08004d9c
 80041d4:	08004d9c 	.word	0x08004d9c
 80041d8:	08004d9c 	.word	0x08004d9c
 80041dc:	08004da0 	.word	0x08004da0

080041e0 <memset>:
 80041e0:	4402      	add	r2, r0
 80041e2:	4603      	mov	r3, r0
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d100      	bne.n	80041ea <memset+0xa>
 80041e8:	4770      	bx	lr
 80041ea:	f803 1b01 	strb.w	r1, [r3], #1
 80041ee:	e7f9      	b.n	80041e4 <memset+0x4>

080041f0 <sniprintf>:
 80041f0:	b40c      	push	{r2, r3}
 80041f2:	b530      	push	{r4, r5, lr}
 80041f4:	4b17      	ldr	r3, [pc, #92]	; (8004254 <sniprintf+0x64>)
 80041f6:	1e0c      	subs	r4, r1, #0
 80041f8:	681d      	ldr	r5, [r3, #0]
 80041fa:	b09d      	sub	sp, #116	; 0x74
 80041fc:	da08      	bge.n	8004210 <sniprintf+0x20>
 80041fe:	238b      	movs	r3, #139	; 0x8b
 8004200:	602b      	str	r3, [r5, #0]
 8004202:	f04f 30ff 	mov.w	r0, #4294967295
 8004206:	b01d      	add	sp, #116	; 0x74
 8004208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800420c:	b002      	add	sp, #8
 800420e:	4770      	bx	lr
 8004210:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004214:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004218:	bf14      	ite	ne
 800421a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800421e:	4623      	moveq	r3, r4
 8004220:	9304      	str	r3, [sp, #16]
 8004222:	9307      	str	r3, [sp, #28]
 8004224:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004228:	9002      	str	r0, [sp, #8]
 800422a:	9006      	str	r0, [sp, #24]
 800422c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004230:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004232:	ab21      	add	r3, sp, #132	; 0x84
 8004234:	a902      	add	r1, sp, #8
 8004236:	4628      	mov	r0, r5
 8004238:	9301      	str	r3, [sp, #4]
 800423a:	f000 f891 	bl	8004360 <_svfiprintf_r>
 800423e:	1c43      	adds	r3, r0, #1
 8004240:	bfbc      	itt	lt
 8004242:	238b      	movlt	r3, #139	; 0x8b
 8004244:	602b      	strlt	r3, [r5, #0]
 8004246:	2c00      	cmp	r4, #0
 8004248:	d0dd      	beq.n	8004206 <sniprintf+0x16>
 800424a:	9b02      	ldr	r3, [sp, #8]
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
 8004250:	e7d9      	b.n	8004206 <sniprintf+0x16>
 8004252:	bf00      	nop
 8004254:	2000004c 	.word	0x2000004c

08004258 <siprintf>:
 8004258:	b40e      	push	{r1, r2, r3}
 800425a:	b500      	push	{lr}
 800425c:	b09c      	sub	sp, #112	; 0x70
 800425e:	ab1d      	add	r3, sp, #116	; 0x74
 8004260:	9002      	str	r0, [sp, #8]
 8004262:	9006      	str	r0, [sp, #24]
 8004264:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004268:	4809      	ldr	r0, [pc, #36]	; (8004290 <siprintf+0x38>)
 800426a:	9107      	str	r1, [sp, #28]
 800426c:	9104      	str	r1, [sp, #16]
 800426e:	4909      	ldr	r1, [pc, #36]	; (8004294 <siprintf+0x3c>)
 8004270:	f853 2b04 	ldr.w	r2, [r3], #4
 8004274:	9105      	str	r1, [sp, #20]
 8004276:	6800      	ldr	r0, [r0, #0]
 8004278:	9301      	str	r3, [sp, #4]
 800427a:	a902      	add	r1, sp, #8
 800427c:	f000 f870 	bl	8004360 <_svfiprintf_r>
 8004280:	9b02      	ldr	r3, [sp, #8]
 8004282:	2200      	movs	r2, #0
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	b01c      	add	sp, #112	; 0x70
 8004288:	f85d eb04 	ldr.w	lr, [sp], #4
 800428c:	b003      	add	sp, #12
 800428e:	4770      	bx	lr
 8004290:	2000004c 	.word	0x2000004c
 8004294:	ffff0208 	.word	0xffff0208

08004298 <strcpy>:
 8004298:	4603      	mov	r3, r0
 800429a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800429e:	f803 2b01 	strb.w	r2, [r3], #1
 80042a2:	2a00      	cmp	r2, #0
 80042a4:	d1f9      	bne.n	800429a <strcpy+0x2>
 80042a6:	4770      	bx	lr

080042a8 <__ssputs_r>:
 80042a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ac:	688e      	ldr	r6, [r1, #8]
 80042ae:	429e      	cmp	r6, r3
 80042b0:	4682      	mov	sl, r0
 80042b2:	460c      	mov	r4, r1
 80042b4:	4690      	mov	r8, r2
 80042b6:	461f      	mov	r7, r3
 80042b8:	d838      	bhi.n	800432c <__ssputs_r+0x84>
 80042ba:	898a      	ldrh	r2, [r1, #12]
 80042bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042c0:	d032      	beq.n	8004328 <__ssputs_r+0x80>
 80042c2:	6825      	ldr	r5, [r4, #0]
 80042c4:	6909      	ldr	r1, [r1, #16]
 80042c6:	eba5 0901 	sub.w	r9, r5, r1
 80042ca:	6965      	ldr	r5, [r4, #20]
 80042cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042d4:	3301      	adds	r3, #1
 80042d6:	444b      	add	r3, r9
 80042d8:	106d      	asrs	r5, r5, #1
 80042da:	429d      	cmp	r5, r3
 80042dc:	bf38      	it	cc
 80042de:	461d      	movcc	r5, r3
 80042e0:	0553      	lsls	r3, r2, #21
 80042e2:	d531      	bpl.n	8004348 <__ssputs_r+0xa0>
 80042e4:	4629      	mov	r1, r5
 80042e6:	f000 fb47 	bl	8004978 <_malloc_r>
 80042ea:	4606      	mov	r6, r0
 80042ec:	b950      	cbnz	r0, 8004304 <__ssputs_r+0x5c>
 80042ee:	230c      	movs	r3, #12
 80042f0:	f8ca 3000 	str.w	r3, [sl]
 80042f4:	89a3      	ldrh	r3, [r4, #12]
 80042f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042fa:	81a3      	strh	r3, [r4, #12]
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004304:	6921      	ldr	r1, [r4, #16]
 8004306:	464a      	mov	r2, r9
 8004308:	f000 fabe 	bl	8004888 <memcpy>
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004316:	81a3      	strh	r3, [r4, #12]
 8004318:	6126      	str	r6, [r4, #16]
 800431a:	6165      	str	r5, [r4, #20]
 800431c:	444e      	add	r6, r9
 800431e:	eba5 0509 	sub.w	r5, r5, r9
 8004322:	6026      	str	r6, [r4, #0]
 8004324:	60a5      	str	r5, [r4, #8]
 8004326:	463e      	mov	r6, r7
 8004328:	42be      	cmp	r6, r7
 800432a:	d900      	bls.n	800432e <__ssputs_r+0x86>
 800432c:	463e      	mov	r6, r7
 800432e:	4632      	mov	r2, r6
 8004330:	6820      	ldr	r0, [r4, #0]
 8004332:	4641      	mov	r1, r8
 8004334:	f000 fab6 	bl	80048a4 <memmove>
 8004338:	68a3      	ldr	r3, [r4, #8]
 800433a:	6822      	ldr	r2, [r4, #0]
 800433c:	1b9b      	subs	r3, r3, r6
 800433e:	4432      	add	r2, r6
 8004340:	60a3      	str	r3, [r4, #8]
 8004342:	6022      	str	r2, [r4, #0]
 8004344:	2000      	movs	r0, #0
 8004346:	e7db      	b.n	8004300 <__ssputs_r+0x58>
 8004348:	462a      	mov	r2, r5
 800434a:	f000 fb6f 	bl	8004a2c <_realloc_r>
 800434e:	4606      	mov	r6, r0
 8004350:	2800      	cmp	r0, #0
 8004352:	d1e1      	bne.n	8004318 <__ssputs_r+0x70>
 8004354:	6921      	ldr	r1, [r4, #16]
 8004356:	4650      	mov	r0, sl
 8004358:	f000 fabe 	bl	80048d8 <_free_r>
 800435c:	e7c7      	b.n	80042ee <__ssputs_r+0x46>
	...

08004360 <_svfiprintf_r>:
 8004360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004364:	4698      	mov	r8, r3
 8004366:	898b      	ldrh	r3, [r1, #12]
 8004368:	061b      	lsls	r3, r3, #24
 800436a:	b09d      	sub	sp, #116	; 0x74
 800436c:	4607      	mov	r7, r0
 800436e:	460d      	mov	r5, r1
 8004370:	4614      	mov	r4, r2
 8004372:	d50e      	bpl.n	8004392 <_svfiprintf_r+0x32>
 8004374:	690b      	ldr	r3, [r1, #16]
 8004376:	b963      	cbnz	r3, 8004392 <_svfiprintf_r+0x32>
 8004378:	2140      	movs	r1, #64	; 0x40
 800437a:	f000 fafd 	bl	8004978 <_malloc_r>
 800437e:	6028      	str	r0, [r5, #0]
 8004380:	6128      	str	r0, [r5, #16]
 8004382:	b920      	cbnz	r0, 800438e <_svfiprintf_r+0x2e>
 8004384:	230c      	movs	r3, #12
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	f04f 30ff 	mov.w	r0, #4294967295
 800438c:	e0d1      	b.n	8004532 <_svfiprintf_r+0x1d2>
 800438e:	2340      	movs	r3, #64	; 0x40
 8004390:	616b      	str	r3, [r5, #20]
 8004392:	2300      	movs	r3, #0
 8004394:	9309      	str	r3, [sp, #36]	; 0x24
 8004396:	2320      	movs	r3, #32
 8004398:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800439c:	f8cd 800c 	str.w	r8, [sp, #12]
 80043a0:	2330      	movs	r3, #48	; 0x30
 80043a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800454c <_svfiprintf_r+0x1ec>
 80043a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043aa:	f04f 0901 	mov.w	r9, #1
 80043ae:	4623      	mov	r3, r4
 80043b0:	469a      	mov	sl, r3
 80043b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043b6:	b10a      	cbz	r2, 80043bc <_svfiprintf_r+0x5c>
 80043b8:	2a25      	cmp	r2, #37	; 0x25
 80043ba:	d1f9      	bne.n	80043b0 <_svfiprintf_r+0x50>
 80043bc:	ebba 0b04 	subs.w	fp, sl, r4
 80043c0:	d00b      	beq.n	80043da <_svfiprintf_r+0x7a>
 80043c2:	465b      	mov	r3, fp
 80043c4:	4622      	mov	r2, r4
 80043c6:	4629      	mov	r1, r5
 80043c8:	4638      	mov	r0, r7
 80043ca:	f7ff ff6d 	bl	80042a8 <__ssputs_r>
 80043ce:	3001      	adds	r0, #1
 80043d0:	f000 80aa 	beq.w	8004528 <_svfiprintf_r+0x1c8>
 80043d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043d6:	445a      	add	r2, fp
 80043d8:	9209      	str	r2, [sp, #36]	; 0x24
 80043da:	f89a 3000 	ldrb.w	r3, [sl]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 80a2 	beq.w	8004528 <_svfiprintf_r+0x1c8>
 80043e4:	2300      	movs	r3, #0
 80043e6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043ee:	f10a 0a01 	add.w	sl, sl, #1
 80043f2:	9304      	str	r3, [sp, #16]
 80043f4:	9307      	str	r3, [sp, #28]
 80043f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043fa:	931a      	str	r3, [sp, #104]	; 0x68
 80043fc:	4654      	mov	r4, sl
 80043fe:	2205      	movs	r2, #5
 8004400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004404:	4851      	ldr	r0, [pc, #324]	; (800454c <_svfiprintf_r+0x1ec>)
 8004406:	f7fb fefb 	bl	8000200 <memchr>
 800440a:	9a04      	ldr	r2, [sp, #16]
 800440c:	b9d8      	cbnz	r0, 8004446 <_svfiprintf_r+0xe6>
 800440e:	06d0      	lsls	r0, r2, #27
 8004410:	bf44      	itt	mi
 8004412:	2320      	movmi	r3, #32
 8004414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004418:	0711      	lsls	r1, r2, #28
 800441a:	bf44      	itt	mi
 800441c:	232b      	movmi	r3, #43	; 0x2b
 800441e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004422:	f89a 3000 	ldrb.w	r3, [sl]
 8004426:	2b2a      	cmp	r3, #42	; 0x2a
 8004428:	d015      	beq.n	8004456 <_svfiprintf_r+0xf6>
 800442a:	9a07      	ldr	r2, [sp, #28]
 800442c:	4654      	mov	r4, sl
 800442e:	2000      	movs	r0, #0
 8004430:	f04f 0c0a 	mov.w	ip, #10
 8004434:	4621      	mov	r1, r4
 8004436:	f811 3b01 	ldrb.w	r3, [r1], #1
 800443a:	3b30      	subs	r3, #48	; 0x30
 800443c:	2b09      	cmp	r3, #9
 800443e:	d94e      	bls.n	80044de <_svfiprintf_r+0x17e>
 8004440:	b1b0      	cbz	r0, 8004470 <_svfiprintf_r+0x110>
 8004442:	9207      	str	r2, [sp, #28]
 8004444:	e014      	b.n	8004470 <_svfiprintf_r+0x110>
 8004446:	eba0 0308 	sub.w	r3, r0, r8
 800444a:	fa09 f303 	lsl.w	r3, r9, r3
 800444e:	4313      	orrs	r3, r2
 8004450:	9304      	str	r3, [sp, #16]
 8004452:	46a2      	mov	sl, r4
 8004454:	e7d2      	b.n	80043fc <_svfiprintf_r+0x9c>
 8004456:	9b03      	ldr	r3, [sp, #12]
 8004458:	1d19      	adds	r1, r3, #4
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	9103      	str	r1, [sp, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	bfbb      	ittet	lt
 8004462:	425b      	neglt	r3, r3
 8004464:	f042 0202 	orrlt.w	r2, r2, #2
 8004468:	9307      	strge	r3, [sp, #28]
 800446a:	9307      	strlt	r3, [sp, #28]
 800446c:	bfb8      	it	lt
 800446e:	9204      	strlt	r2, [sp, #16]
 8004470:	7823      	ldrb	r3, [r4, #0]
 8004472:	2b2e      	cmp	r3, #46	; 0x2e
 8004474:	d10c      	bne.n	8004490 <_svfiprintf_r+0x130>
 8004476:	7863      	ldrb	r3, [r4, #1]
 8004478:	2b2a      	cmp	r3, #42	; 0x2a
 800447a:	d135      	bne.n	80044e8 <_svfiprintf_r+0x188>
 800447c:	9b03      	ldr	r3, [sp, #12]
 800447e:	1d1a      	adds	r2, r3, #4
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	9203      	str	r2, [sp, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	bfb8      	it	lt
 8004488:	f04f 33ff 	movlt.w	r3, #4294967295
 800448c:	3402      	adds	r4, #2
 800448e:	9305      	str	r3, [sp, #20]
 8004490:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800455c <_svfiprintf_r+0x1fc>
 8004494:	7821      	ldrb	r1, [r4, #0]
 8004496:	2203      	movs	r2, #3
 8004498:	4650      	mov	r0, sl
 800449a:	f7fb feb1 	bl	8000200 <memchr>
 800449e:	b140      	cbz	r0, 80044b2 <_svfiprintf_r+0x152>
 80044a0:	2340      	movs	r3, #64	; 0x40
 80044a2:	eba0 000a 	sub.w	r0, r0, sl
 80044a6:	fa03 f000 	lsl.w	r0, r3, r0
 80044aa:	9b04      	ldr	r3, [sp, #16]
 80044ac:	4303      	orrs	r3, r0
 80044ae:	3401      	adds	r4, #1
 80044b0:	9304      	str	r3, [sp, #16]
 80044b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b6:	4826      	ldr	r0, [pc, #152]	; (8004550 <_svfiprintf_r+0x1f0>)
 80044b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044bc:	2206      	movs	r2, #6
 80044be:	f7fb fe9f 	bl	8000200 <memchr>
 80044c2:	2800      	cmp	r0, #0
 80044c4:	d038      	beq.n	8004538 <_svfiprintf_r+0x1d8>
 80044c6:	4b23      	ldr	r3, [pc, #140]	; (8004554 <_svfiprintf_r+0x1f4>)
 80044c8:	bb1b      	cbnz	r3, 8004512 <_svfiprintf_r+0x1b2>
 80044ca:	9b03      	ldr	r3, [sp, #12]
 80044cc:	3307      	adds	r3, #7
 80044ce:	f023 0307 	bic.w	r3, r3, #7
 80044d2:	3308      	adds	r3, #8
 80044d4:	9303      	str	r3, [sp, #12]
 80044d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d8:	4433      	add	r3, r6
 80044da:	9309      	str	r3, [sp, #36]	; 0x24
 80044dc:	e767      	b.n	80043ae <_svfiprintf_r+0x4e>
 80044de:	fb0c 3202 	mla	r2, ip, r2, r3
 80044e2:	460c      	mov	r4, r1
 80044e4:	2001      	movs	r0, #1
 80044e6:	e7a5      	b.n	8004434 <_svfiprintf_r+0xd4>
 80044e8:	2300      	movs	r3, #0
 80044ea:	3401      	adds	r4, #1
 80044ec:	9305      	str	r3, [sp, #20]
 80044ee:	4619      	mov	r1, r3
 80044f0:	f04f 0c0a 	mov.w	ip, #10
 80044f4:	4620      	mov	r0, r4
 80044f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044fa:	3a30      	subs	r2, #48	; 0x30
 80044fc:	2a09      	cmp	r2, #9
 80044fe:	d903      	bls.n	8004508 <_svfiprintf_r+0x1a8>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0c5      	beq.n	8004490 <_svfiprintf_r+0x130>
 8004504:	9105      	str	r1, [sp, #20]
 8004506:	e7c3      	b.n	8004490 <_svfiprintf_r+0x130>
 8004508:	fb0c 2101 	mla	r1, ip, r1, r2
 800450c:	4604      	mov	r4, r0
 800450e:	2301      	movs	r3, #1
 8004510:	e7f0      	b.n	80044f4 <_svfiprintf_r+0x194>
 8004512:	ab03      	add	r3, sp, #12
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	462a      	mov	r2, r5
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <_svfiprintf_r+0x1f8>)
 800451a:	a904      	add	r1, sp, #16
 800451c:	4638      	mov	r0, r7
 800451e:	f3af 8000 	nop.w
 8004522:	1c42      	adds	r2, r0, #1
 8004524:	4606      	mov	r6, r0
 8004526:	d1d6      	bne.n	80044d6 <_svfiprintf_r+0x176>
 8004528:	89ab      	ldrh	r3, [r5, #12]
 800452a:	065b      	lsls	r3, r3, #25
 800452c:	f53f af2c 	bmi.w	8004388 <_svfiprintf_r+0x28>
 8004530:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004532:	b01d      	add	sp, #116	; 0x74
 8004534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004538:	ab03      	add	r3, sp, #12
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	462a      	mov	r2, r5
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <_svfiprintf_r+0x1f8>)
 8004540:	a904      	add	r1, sp, #16
 8004542:	4638      	mov	r0, r7
 8004544:	f000 f87a 	bl	800463c <_printf_i>
 8004548:	e7eb      	b.n	8004522 <_svfiprintf_r+0x1c2>
 800454a:	bf00      	nop
 800454c:	08004d60 	.word	0x08004d60
 8004550:	08004d6a 	.word	0x08004d6a
 8004554:	00000000 	.word	0x00000000
 8004558:	080042a9 	.word	0x080042a9
 800455c:	08004d66 	.word	0x08004d66

08004560 <_printf_common>:
 8004560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004564:	4616      	mov	r6, r2
 8004566:	4699      	mov	r9, r3
 8004568:	688a      	ldr	r2, [r1, #8]
 800456a:	690b      	ldr	r3, [r1, #16]
 800456c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004570:	4293      	cmp	r3, r2
 8004572:	bfb8      	it	lt
 8004574:	4613      	movlt	r3, r2
 8004576:	6033      	str	r3, [r6, #0]
 8004578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800457c:	4607      	mov	r7, r0
 800457e:	460c      	mov	r4, r1
 8004580:	b10a      	cbz	r2, 8004586 <_printf_common+0x26>
 8004582:	3301      	adds	r3, #1
 8004584:	6033      	str	r3, [r6, #0]
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	0699      	lsls	r1, r3, #26
 800458a:	bf42      	ittt	mi
 800458c:	6833      	ldrmi	r3, [r6, #0]
 800458e:	3302      	addmi	r3, #2
 8004590:	6033      	strmi	r3, [r6, #0]
 8004592:	6825      	ldr	r5, [r4, #0]
 8004594:	f015 0506 	ands.w	r5, r5, #6
 8004598:	d106      	bne.n	80045a8 <_printf_common+0x48>
 800459a:	f104 0a19 	add.w	sl, r4, #25
 800459e:	68e3      	ldr	r3, [r4, #12]
 80045a0:	6832      	ldr	r2, [r6, #0]
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	42ab      	cmp	r3, r5
 80045a6:	dc26      	bgt.n	80045f6 <_printf_common+0x96>
 80045a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045ac:	1e13      	subs	r3, r2, #0
 80045ae:	6822      	ldr	r2, [r4, #0]
 80045b0:	bf18      	it	ne
 80045b2:	2301      	movne	r3, #1
 80045b4:	0692      	lsls	r2, r2, #26
 80045b6:	d42b      	bmi.n	8004610 <_printf_common+0xb0>
 80045b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045bc:	4649      	mov	r1, r9
 80045be:	4638      	mov	r0, r7
 80045c0:	47c0      	blx	r8
 80045c2:	3001      	adds	r0, #1
 80045c4:	d01e      	beq.n	8004604 <_printf_common+0xa4>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	68e5      	ldr	r5, [r4, #12]
 80045ca:	6832      	ldr	r2, [r6, #0]
 80045cc:	f003 0306 	and.w	r3, r3, #6
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	bf08      	it	eq
 80045d4:	1aad      	subeq	r5, r5, r2
 80045d6:	68a3      	ldr	r3, [r4, #8]
 80045d8:	6922      	ldr	r2, [r4, #16]
 80045da:	bf0c      	ite	eq
 80045dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045e0:	2500      	movne	r5, #0
 80045e2:	4293      	cmp	r3, r2
 80045e4:	bfc4      	itt	gt
 80045e6:	1a9b      	subgt	r3, r3, r2
 80045e8:	18ed      	addgt	r5, r5, r3
 80045ea:	2600      	movs	r6, #0
 80045ec:	341a      	adds	r4, #26
 80045ee:	42b5      	cmp	r5, r6
 80045f0:	d11a      	bne.n	8004628 <_printf_common+0xc8>
 80045f2:	2000      	movs	r0, #0
 80045f4:	e008      	b.n	8004608 <_printf_common+0xa8>
 80045f6:	2301      	movs	r3, #1
 80045f8:	4652      	mov	r2, sl
 80045fa:	4649      	mov	r1, r9
 80045fc:	4638      	mov	r0, r7
 80045fe:	47c0      	blx	r8
 8004600:	3001      	adds	r0, #1
 8004602:	d103      	bne.n	800460c <_printf_common+0xac>
 8004604:	f04f 30ff 	mov.w	r0, #4294967295
 8004608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460c:	3501      	adds	r5, #1
 800460e:	e7c6      	b.n	800459e <_printf_common+0x3e>
 8004610:	18e1      	adds	r1, r4, r3
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	2030      	movs	r0, #48	; 0x30
 8004616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800461a:	4422      	add	r2, r4
 800461c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004624:	3302      	adds	r3, #2
 8004626:	e7c7      	b.n	80045b8 <_printf_common+0x58>
 8004628:	2301      	movs	r3, #1
 800462a:	4622      	mov	r2, r4
 800462c:	4649      	mov	r1, r9
 800462e:	4638      	mov	r0, r7
 8004630:	47c0      	blx	r8
 8004632:	3001      	adds	r0, #1
 8004634:	d0e6      	beq.n	8004604 <_printf_common+0xa4>
 8004636:	3601      	adds	r6, #1
 8004638:	e7d9      	b.n	80045ee <_printf_common+0x8e>
	...

0800463c <_printf_i>:
 800463c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004640:	460c      	mov	r4, r1
 8004642:	4691      	mov	r9, r2
 8004644:	7e27      	ldrb	r7, [r4, #24]
 8004646:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004648:	2f78      	cmp	r7, #120	; 0x78
 800464a:	4680      	mov	r8, r0
 800464c:	469a      	mov	sl, r3
 800464e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004652:	d807      	bhi.n	8004664 <_printf_i+0x28>
 8004654:	2f62      	cmp	r7, #98	; 0x62
 8004656:	d80a      	bhi.n	800466e <_printf_i+0x32>
 8004658:	2f00      	cmp	r7, #0
 800465a:	f000 80d8 	beq.w	800480e <_printf_i+0x1d2>
 800465e:	2f58      	cmp	r7, #88	; 0x58
 8004660:	f000 80a3 	beq.w	80047aa <_printf_i+0x16e>
 8004664:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800466c:	e03a      	b.n	80046e4 <_printf_i+0xa8>
 800466e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004672:	2b15      	cmp	r3, #21
 8004674:	d8f6      	bhi.n	8004664 <_printf_i+0x28>
 8004676:	a001      	add	r0, pc, #4	; (adr r0, 800467c <_printf_i+0x40>)
 8004678:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800467c:	080046d5 	.word	0x080046d5
 8004680:	080046e9 	.word	0x080046e9
 8004684:	08004665 	.word	0x08004665
 8004688:	08004665 	.word	0x08004665
 800468c:	08004665 	.word	0x08004665
 8004690:	08004665 	.word	0x08004665
 8004694:	080046e9 	.word	0x080046e9
 8004698:	08004665 	.word	0x08004665
 800469c:	08004665 	.word	0x08004665
 80046a0:	08004665 	.word	0x08004665
 80046a4:	08004665 	.word	0x08004665
 80046a8:	080047f5 	.word	0x080047f5
 80046ac:	08004719 	.word	0x08004719
 80046b0:	080047d7 	.word	0x080047d7
 80046b4:	08004665 	.word	0x08004665
 80046b8:	08004665 	.word	0x08004665
 80046bc:	08004817 	.word	0x08004817
 80046c0:	08004665 	.word	0x08004665
 80046c4:	08004719 	.word	0x08004719
 80046c8:	08004665 	.word	0x08004665
 80046cc:	08004665 	.word	0x08004665
 80046d0:	080047df 	.word	0x080047df
 80046d4:	680b      	ldr	r3, [r1, #0]
 80046d6:	1d1a      	adds	r2, r3, #4
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	600a      	str	r2, [r1, #0]
 80046dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0a3      	b.n	8004830 <_printf_i+0x1f4>
 80046e8:	6825      	ldr	r5, [r4, #0]
 80046ea:	6808      	ldr	r0, [r1, #0]
 80046ec:	062e      	lsls	r6, r5, #24
 80046ee:	f100 0304 	add.w	r3, r0, #4
 80046f2:	d50a      	bpl.n	800470a <_printf_i+0xce>
 80046f4:	6805      	ldr	r5, [r0, #0]
 80046f6:	600b      	str	r3, [r1, #0]
 80046f8:	2d00      	cmp	r5, #0
 80046fa:	da03      	bge.n	8004704 <_printf_i+0xc8>
 80046fc:	232d      	movs	r3, #45	; 0x2d
 80046fe:	426d      	negs	r5, r5
 8004700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004704:	485e      	ldr	r0, [pc, #376]	; (8004880 <_printf_i+0x244>)
 8004706:	230a      	movs	r3, #10
 8004708:	e019      	b.n	800473e <_printf_i+0x102>
 800470a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800470e:	6805      	ldr	r5, [r0, #0]
 8004710:	600b      	str	r3, [r1, #0]
 8004712:	bf18      	it	ne
 8004714:	b22d      	sxthne	r5, r5
 8004716:	e7ef      	b.n	80046f8 <_printf_i+0xbc>
 8004718:	680b      	ldr	r3, [r1, #0]
 800471a:	6825      	ldr	r5, [r4, #0]
 800471c:	1d18      	adds	r0, r3, #4
 800471e:	6008      	str	r0, [r1, #0]
 8004720:	0628      	lsls	r0, r5, #24
 8004722:	d501      	bpl.n	8004728 <_printf_i+0xec>
 8004724:	681d      	ldr	r5, [r3, #0]
 8004726:	e002      	b.n	800472e <_printf_i+0xf2>
 8004728:	0669      	lsls	r1, r5, #25
 800472a:	d5fb      	bpl.n	8004724 <_printf_i+0xe8>
 800472c:	881d      	ldrh	r5, [r3, #0]
 800472e:	4854      	ldr	r0, [pc, #336]	; (8004880 <_printf_i+0x244>)
 8004730:	2f6f      	cmp	r7, #111	; 0x6f
 8004732:	bf0c      	ite	eq
 8004734:	2308      	moveq	r3, #8
 8004736:	230a      	movne	r3, #10
 8004738:	2100      	movs	r1, #0
 800473a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800473e:	6866      	ldr	r6, [r4, #4]
 8004740:	60a6      	str	r6, [r4, #8]
 8004742:	2e00      	cmp	r6, #0
 8004744:	bfa2      	ittt	ge
 8004746:	6821      	ldrge	r1, [r4, #0]
 8004748:	f021 0104 	bicge.w	r1, r1, #4
 800474c:	6021      	strge	r1, [r4, #0]
 800474e:	b90d      	cbnz	r5, 8004754 <_printf_i+0x118>
 8004750:	2e00      	cmp	r6, #0
 8004752:	d04d      	beq.n	80047f0 <_printf_i+0x1b4>
 8004754:	4616      	mov	r6, r2
 8004756:	fbb5 f1f3 	udiv	r1, r5, r3
 800475a:	fb03 5711 	mls	r7, r3, r1, r5
 800475e:	5dc7      	ldrb	r7, [r0, r7]
 8004760:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004764:	462f      	mov	r7, r5
 8004766:	42bb      	cmp	r3, r7
 8004768:	460d      	mov	r5, r1
 800476a:	d9f4      	bls.n	8004756 <_printf_i+0x11a>
 800476c:	2b08      	cmp	r3, #8
 800476e:	d10b      	bne.n	8004788 <_printf_i+0x14c>
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	07df      	lsls	r7, r3, #31
 8004774:	d508      	bpl.n	8004788 <_printf_i+0x14c>
 8004776:	6923      	ldr	r3, [r4, #16]
 8004778:	6861      	ldr	r1, [r4, #4]
 800477a:	4299      	cmp	r1, r3
 800477c:	bfde      	ittt	le
 800477e:	2330      	movle	r3, #48	; 0x30
 8004780:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004784:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004788:	1b92      	subs	r2, r2, r6
 800478a:	6122      	str	r2, [r4, #16]
 800478c:	f8cd a000 	str.w	sl, [sp]
 8004790:	464b      	mov	r3, r9
 8004792:	aa03      	add	r2, sp, #12
 8004794:	4621      	mov	r1, r4
 8004796:	4640      	mov	r0, r8
 8004798:	f7ff fee2 	bl	8004560 <_printf_common>
 800479c:	3001      	adds	r0, #1
 800479e:	d14c      	bne.n	800483a <_printf_i+0x1fe>
 80047a0:	f04f 30ff 	mov.w	r0, #4294967295
 80047a4:	b004      	add	sp, #16
 80047a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047aa:	4835      	ldr	r0, [pc, #212]	; (8004880 <_printf_i+0x244>)
 80047ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	680e      	ldr	r6, [r1, #0]
 80047b4:	061f      	lsls	r7, r3, #24
 80047b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80047ba:	600e      	str	r6, [r1, #0]
 80047bc:	d514      	bpl.n	80047e8 <_printf_i+0x1ac>
 80047be:	07d9      	lsls	r1, r3, #31
 80047c0:	bf44      	itt	mi
 80047c2:	f043 0320 	orrmi.w	r3, r3, #32
 80047c6:	6023      	strmi	r3, [r4, #0]
 80047c8:	b91d      	cbnz	r5, 80047d2 <_printf_i+0x196>
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	f023 0320 	bic.w	r3, r3, #32
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	2310      	movs	r3, #16
 80047d4:	e7b0      	b.n	8004738 <_printf_i+0xfc>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	f043 0320 	orr.w	r3, r3, #32
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	2378      	movs	r3, #120	; 0x78
 80047e0:	4828      	ldr	r0, [pc, #160]	; (8004884 <_printf_i+0x248>)
 80047e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047e6:	e7e3      	b.n	80047b0 <_printf_i+0x174>
 80047e8:	065e      	lsls	r6, r3, #25
 80047ea:	bf48      	it	mi
 80047ec:	b2ad      	uxthmi	r5, r5
 80047ee:	e7e6      	b.n	80047be <_printf_i+0x182>
 80047f0:	4616      	mov	r6, r2
 80047f2:	e7bb      	b.n	800476c <_printf_i+0x130>
 80047f4:	680b      	ldr	r3, [r1, #0]
 80047f6:	6826      	ldr	r6, [r4, #0]
 80047f8:	6960      	ldr	r0, [r4, #20]
 80047fa:	1d1d      	adds	r5, r3, #4
 80047fc:	600d      	str	r5, [r1, #0]
 80047fe:	0635      	lsls	r5, r6, #24
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	d501      	bpl.n	8004808 <_printf_i+0x1cc>
 8004804:	6018      	str	r0, [r3, #0]
 8004806:	e002      	b.n	800480e <_printf_i+0x1d2>
 8004808:	0671      	lsls	r1, r6, #25
 800480a:	d5fb      	bpl.n	8004804 <_printf_i+0x1c8>
 800480c:	8018      	strh	r0, [r3, #0]
 800480e:	2300      	movs	r3, #0
 8004810:	6123      	str	r3, [r4, #16]
 8004812:	4616      	mov	r6, r2
 8004814:	e7ba      	b.n	800478c <_printf_i+0x150>
 8004816:	680b      	ldr	r3, [r1, #0]
 8004818:	1d1a      	adds	r2, r3, #4
 800481a:	600a      	str	r2, [r1, #0]
 800481c:	681e      	ldr	r6, [r3, #0]
 800481e:	6862      	ldr	r2, [r4, #4]
 8004820:	2100      	movs	r1, #0
 8004822:	4630      	mov	r0, r6
 8004824:	f7fb fcec 	bl	8000200 <memchr>
 8004828:	b108      	cbz	r0, 800482e <_printf_i+0x1f2>
 800482a:	1b80      	subs	r0, r0, r6
 800482c:	6060      	str	r0, [r4, #4]
 800482e:	6863      	ldr	r3, [r4, #4]
 8004830:	6123      	str	r3, [r4, #16]
 8004832:	2300      	movs	r3, #0
 8004834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004838:	e7a8      	b.n	800478c <_printf_i+0x150>
 800483a:	6923      	ldr	r3, [r4, #16]
 800483c:	4632      	mov	r2, r6
 800483e:	4649      	mov	r1, r9
 8004840:	4640      	mov	r0, r8
 8004842:	47d0      	blx	sl
 8004844:	3001      	adds	r0, #1
 8004846:	d0ab      	beq.n	80047a0 <_printf_i+0x164>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	079b      	lsls	r3, r3, #30
 800484c:	d413      	bmi.n	8004876 <_printf_i+0x23a>
 800484e:	68e0      	ldr	r0, [r4, #12]
 8004850:	9b03      	ldr	r3, [sp, #12]
 8004852:	4298      	cmp	r0, r3
 8004854:	bfb8      	it	lt
 8004856:	4618      	movlt	r0, r3
 8004858:	e7a4      	b.n	80047a4 <_printf_i+0x168>
 800485a:	2301      	movs	r3, #1
 800485c:	4632      	mov	r2, r6
 800485e:	4649      	mov	r1, r9
 8004860:	4640      	mov	r0, r8
 8004862:	47d0      	blx	sl
 8004864:	3001      	adds	r0, #1
 8004866:	d09b      	beq.n	80047a0 <_printf_i+0x164>
 8004868:	3501      	adds	r5, #1
 800486a:	68e3      	ldr	r3, [r4, #12]
 800486c:	9903      	ldr	r1, [sp, #12]
 800486e:	1a5b      	subs	r3, r3, r1
 8004870:	42ab      	cmp	r3, r5
 8004872:	dcf2      	bgt.n	800485a <_printf_i+0x21e>
 8004874:	e7eb      	b.n	800484e <_printf_i+0x212>
 8004876:	2500      	movs	r5, #0
 8004878:	f104 0619 	add.w	r6, r4, #25
 800487c:	e7f5      	b.n	800486a <_printf_i+0x22e>
 800487e:	bf00      	nop
 8004880:	08004d71 	.word	0x08004d71
 8004884:	08004d82 	.word	0x08004d82

08004888 <memcpy>:
 8004888:	440a      	add	r2, r1
 800488a:	4291      	cmp	r1, r2
 800488c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004890:	d100      	bne.n	8004894 <memcpy+0xc>
 8004892:	4770      	bx	lr
 8004894:	b510      	push	{r4, lr}
 8004896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800489a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800489e:	4291      	cmp	r1, r2
 80048a0:	d1f9      	bne.n	8004896 <memcpy+0xe>
 80048a2:	bd10      	pop	{r4, pc}

080048a4 <memmove>:
 80048a4:	4288      	cmp	r0, r1
 80048a6:	b510      	push	{r4, lr}
 80048a8:	eb01 0402 	add.w	r4, r1, r2
 80048ac:	d902      	bls.n	80048b4 <memmove+0x10>
 80048ae:	4284      	cmp	r4, r0
 80048b0:	4623      	mov	r3, r4
 80048b2:	d807      	bhi.n	80048c4 <memmove+0x20>
 80048b4:	1e43      	subs	r3, r0, #1
 80048b6:	42a1      	cmp	r1, r4
 80048b8:	d008      	beq.n	80048cc <memmove+0x28>
 80048ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048c2:	e7f8      	b.n	80048b6 <memmove+0x12>
 80048c4:	4402      	add	r2, r0
 80048c6:	4601      	mov	r1, r0
 80048c8:	428a      	cmp	r2, r1
 80048ca:	d100      	bne.n	80048ce <memmove+0x2a>
 80048cc:	bd10      	pop	{r4, pc}
 80048ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048d6:	e7f7      	b.n	80048c8 <memmove+0x24>

080048d8 <_free_r>:
 80048d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048da:	2900      	cmp	r1, #0
 80048dc:	d048      	beq.n	8004970 <_free_r+0x98>
 80048de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048e2:	9001      	str	r0, [sp, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f1a1 0404 	sub.w	r4, r1, #4
 80048ea:	bfb8      	it	lt
 80048ec:	18e4      	addlt	r4, r4, r3
 80048ee:	f000 f8d3 	bl	8004a98 <__malloc_lock>
 80048f2:	4a20      	ldr	r2, [pc, #128]	; (8004974 <_free_r+0x9c>)
 80048f4:	9801      	ldr	r0, [sp, #4]
 80048f6:	6813      	ldr	r3, [r2, #0]
 80048f8:	4615      	mov	r5, r2
 80048fa:	b933      	cbnz	r3, 800490a <_free_r+0x32>
 80048fc:	6063      	str	r3, [r4, #4]
 80048fe:	6014      	str	r4, [r2, #0]
 8004900:	b003      	add	sp, #12
 8004902:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004906:	f000 b8cd 	b.w	8004aa4 <__malloc_unlock>
 800490a:	42a3      	cmp	r3, r4
 800490c:	d90b      	bls.n	8004926 <_free_r+0x4e>
 800490e:	6821      	ldr	r1, [r4, #0]
 8004910:	1862      	adds	r2, r4, r1
 8004912:	4293      	cmp	r3, r2
 8004914:	bf04      	itt	eq
 8004916:	681a      	ldreq	r2, [r3, #0]
 8004918:	685b      	ldreq	r3, [r3, #4]
 800491a:	6063      	str	r3, [r4, #4]
 800491c:	bf04      	itt	eq
 800491e:	1852      	addeq	r2, r2, r1
 8004920:	6022      	streq	r2, [r4, #0]
 8004922:	602c      	str	r4, [r5, #0]
 8004924:	e7ec      	b.n	8004900 <_free_r+0x28>
 8004926:	461a      	mov	r2, r3
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	b10b      	cbz	r3, 8004930 <_free_r+0x58>
 800492c:	42a3      	cmp	r3, r4
 800492e:	d9fa      	bls.n	8004926 <_free_r+0x4e>
 8004930:	6811      	ldr	r1, [r2, #0]
 8004932:	1855      	adds	r5, r2, r1
 8004934:	42a5      	cmp	r5, r4
 8004936:	d10b      	bne.n	8004950 <_free_r+0x78>
 8004938:	6824      	ldr	r4, [r4, #0]
 800493a:	4421      	add	r1, r4
 800493c:	1854      	adds	r4, r2, r1
 800493e:	42a3      	cmp	r3, r4
 8004940:	6011      	str	r1, [r2, #0]
 8004942:	d1dd      	bne.n	8004900 <_free_r+0x28>
 8004944:	681c      	ldr	r4, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	6053      	str	r3, [r2, #4]
 800494a:	4421      	add	r1, r4
 800494c:	6011      	str	r1, [r2, #0]
 800494e:	e7d7      	b.n	8004900 <_free_r+0x28>
 8004950:	d902      	bls.n	8004958 <_free_r+0x80>
 8004952:	230c      	movs	r3, #12
 8004954:	6003      	str	r3, [r0, #0]
 8004956:	e7d3      	b.n	8004900 <_free_r+0x28>
 8004958:	6825      	ldr	r5, [r4, #0]
 800495a:	1961      	adds	r1, r4, r5
 800495c:	428b      	cmp	r3, r1
 800495e:	bf04      	itt	eq
 8004960:	6819      	ldreq	r1, [r3, #0]
 8004962:	685b      	ldreq	r3, [r3, #4]
 8004964:	6063      	str	r3, [r4, #4]
 8004966:	bf04      	itt	eq
 8004968:	1949      	addeq	r1, r1, r5
 800496a:	6021      	streq	r1, [r4, #0]
 800496c:	6054      	str	r4, [r2, #4]
 800496e:	e7c7      	b.n	8004900 <_free_r+0x28>
 8004970:	b003      	add	sp, #12
 8004972:	bd30      	pop	{r4, r5, pc}
 8004974:	200000d8 	.word	0x200000d8

08004978 <_malloc_r>:
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497a:	1ccd      	adds	r5, r1, #3
 800497c:	f025 0503 	bic.w	r5, r5, #3
 8004980:	3508      	adds	r5, #8
 8004982:	2d0c      	cmp	r5, #12
 8004984:	bf38      	it	cc
 8004986:	250c      	movcc	r5, #12
 8004988:	2d00      	cmp	r5, #0
 800498a:	4606      	mov	r6, r0
 800498c:	db01      	blt.n	8004992 <_malloc_r+0x1a>
 800498e:	42a9      	cmp	r1, r5
 8004990:	d903      	bls.n	800499a <_malloc_r+0x22>
 8004992:	230c      	movs	r3, #12
 8004994:	6033      	str	r3, [r6, #0]
 8004996:	2000      	movs	r0, #0
 8004998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800499a:	f000 f87d 	bl	8004a98 <__malloc_lock>
 800499e:	4921      	ldr	r1, [pc, #132]	; (8004a24 <_malloc_r+0xac>)
 80049a0:	680a      	ldr	r2, [r1, #0]
 80049a2:	4614      	mov	r4, r2
 80049a4:	b99c      	cbnz	r4, 80049ce <_malloc_r+0x56>
 80049a6:	4f20      	ldr	r7, [pc, #128]	; (8004a28 <_malloc_r+0xb0>)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	b923      	cbnz	r3, 80049b6 <_malloc_r+0x3e>
 80049ac:	4621      	mov	r1, r4
 80049ae:	4630      	mov	r0, r6
 80049b0:	f000 f862 	bl	8004a78 <_sbrk_r>
 80049b4:	6038      	str	r0, [r7, #0]
 80049b6:	4629      	mov	r1, r5
 80049b8:	4630      	mov	r0, r6
 80049ba:	f000 f85d 	bl	8004a78 <_sbrk_r>
 80049be:	1c43      	adds	r3, r0, #1
 80049c0:	d123      	bne.n	8004a0a <_malloc_r+0x92>
 80049c2:	230c      	movs	r3, #12
 80049c4:	6033      	str	r3, [r6, #0]
 80049c6:	4630      	mov	r0, r6
 80049c8:	f000 f86c 	bl	8004aa4 <__malloc_unlock>
 80049cc:	e7e3      	b.n	8004996 <_malloc_r+0x1e>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	1b5b      	subs	r3, r3, r5
 80049d2:	d417      	bmi.n	8004a04 <_malloc_r+0x8c>
 80049d4:	2b0b      	cmp	r3, #11
 80049d6:	d903      	bls.n	80049e0 <_malloc_r+0x68>
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	441c      	add	r4, r3
 80049dc:	6025      	str	r5, [r4, #0]
 80049de:	e004      	b.n	80049ea <_malloc_r+0x72>
 80049e0:	6863      	ldr	r3, [r4, #4]
 80049e2:	42a2      	cmp	r2, r4
 80049e4:	bf0c      	ite	eq
 80049e6:	600b      	streq	r3, [r1, #0]
 80049e8:	6053      	strne	r3, [r2, #4]
 80049ea:	4630      	mov	r0, r6
 80049ec:	f000 f85a 	bl	8004aa4 <__malloc_unlock>
 80049f0:	f104 000b 	add.w	r0, r4, #11
 80049f4:	1d23      	adds	r3, r4, #4
 80049f6:	f020 0007 	bic.w	r0, r0, #7
 80049fa:	1ac2      	subs	r2, r0, r3
 80049fc:	d0cc      	beq.n	8004998 <_malloc_r+0x20>
 80049fe:	1a1b      	subs	r3, r3, r0
 8004a00:	50a3      	str	r3, [r4, r2]
 8004a02:	e7c9      	b.n	8004998 <_malloc_r+0x20>
 8004a04:	4622      	mov	r2, r4
 8004a06:	6864      	ldr	r4, [r4, #4]
 8004a08:	e7cc      	b.n	80049a4 <_malloc_r+0x2c>
 8004a0a:	1cc4      	adds	r4, r0, #3
 8004a0c:	f024 0403 	bic.w	r4, r4, #3
 8004a10:	42a0      	cmp	r0, r4
 8004a12:	d0e3      	beq.n	80049dc <_malloc_r+0x64>
 8004a14:	1a21      	subs	r1, r4, r0
 8004a16:	4630      	mov	r0, r6
 8004a18:	f000 f82e 	bl	8004a78 <_sbrk_r>
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	d1dd      	bne.n	80049dc <_malloc_r+0x64>
 8004a20:	e7cf      	b.n	80049c2 <_malloc_r+0x4a>
 8004a22:	bf00      	nop
 8004a24:	200000d8 	.word	0x200000d8
 8004a28:	200000dc 	.word	0x200000dc

08004a2c <_realloc_r>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	4607      	mov	r7, r0
 8004a30:	4614      	mov	r4, r2
 8004a32:	460e      	mov	r6, r1
 8004a34:	b921      	cbnz	r1, 8004a40 <_realloc_r+0x14>
 8004a36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	f7ff bf9c 	b.w	8004978 <_malloc_r>
 8004a40:	b922      	cbnz	r2, 8004a4c <_realloc_r+0x20>
 8004a42:	f7ff ff49 	bl	80048d8 <_free_r>
 8004a46:	4625      	mov	r5, r4
 8004a48:	4628      	mov	r0, r5
 8004a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a4c:	f000 f830 	bl	8004ab0 <_malloc_usable_size_r>
 8004a50:	42a0      	cmp	r0, r4
 8004a52:	d20f      	bcs.n	8004a74 <_realloc_r+0x48>
 8004a54:	4621      	mov	r1, r4
 8004a56:	4638      	mov	r0, r7
 8004a58:	f7ff ff8e 	bl	8004978 <_malloc_r>
 8004a5c:	4605      	mov	r5, r0
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d0f2      	beq.n	8004a48 <_realloc_r+0x1c>
 8004a62:	4631      	mov	r1, r6
 8004a64:	4622      	mov	r2, r4
 8004a66:	f7ff ff0f 	bl	8004888 <memcpy>
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4638      	mov	r0, r7
 8004a6e:	f7ff ff33 	bl	80048d8 <_free_r>
 8004a72:	e7e9      	b.n	8004a48 <_realloc_r+0x1c>
 8004a74:	4635      	mov	r5, r6
 8004a76:	e7e7      	b.n	8004a48 <_realloc_r+0x1c>

08004a78 <_sbrk_r>:
 8004a78:	b538      	push	{r3, r4, r5, lr}
 8004a7a:	4d06      	ldr	r5, [pc, #24]	; (8004a94 <_sbrk_r+0x1c>)
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	4604      	mov	r4, r0
 8004a80:	4608      	mov	r0, r1
 8004a82:	602b      	str	r3, [r5, #0]
 8004a84:	f7fc f922 	bl	8000ccc <_sbrk>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	d102      	bne.n	8004a92 <_sbrk_r+0x1a>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	b103      	cbz	r3, 8004a92 <_sbrk_r+0x1a>
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	bd38      	pop	{r3, r4, r5, pc}
 8004a94:	200001ac 	.word	0x200001ac

08004a98 <__malloc_lock>:
 8004a98:	4801      	ldr	r0, [pc, #4]	; (8004aa0 <__malloc_lock+0x8>)
 8004a9a:	f000 b811 	b.w	8004ac0 <__retarget_lock_acquire_recursive>
 8004a9e:	bf00      	nop
 8004aa0:	200001b4 	.word	0x200001b4

08004aa4 <__malloc_unlock>:
 8004aa4:	4801      	ldr	r0, [pc, #4]	; (8004aac <__malloc_unlock+0x8>)
 8004aa6:	f000 b80c 	b.w	8004ac2 <__retarget_lock_release_recursive>
 8004aaa:	bf00      	nop
 8004aac:	200001b4 	.word	0x200001b4

08004ab0 <_malloc_usable_size_r>:
 8004ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ab4:	1f18      	subs	r0, r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	bfbc      	itt	lt
 8004aba:	580b      	ldrlt	r3, [r1, r0]
 8004abc:	18c0      	addlt	r0, r0, r3
 8004abe:	4770      	bx	lr

08004ac0 <__retarget_lock_acquire_recursive>:
 8004ac0:	4770      	bx	lr

08004ac2 <__retarget_lock_release_recursive>:
 8004ac2:	4770      	bx	lr

08004ac4 <_init>:
 8004ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac6:	bf00      	nop
 8004ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aca:	bc08      	pop	{r3}
 8004acc:	469e      	mov	lr, r3
 8004ace:	4770      	bx	lr

08004ad0 <_fini>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	bf00      	nop
 8004ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad6:	bc08      	pop	{r3}
 8004ad8:	469e      	mov	lr, r3
 8004ada:	4770      	bx	lr
