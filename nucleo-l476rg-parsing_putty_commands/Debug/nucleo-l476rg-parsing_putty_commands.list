
nucleo-l476rg-parsing_putty_commands.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005180  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08005310  08005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005594  08005594  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005594  08005594  00015594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800559c  0800559c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800559c  0800559c  0001559c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055a0  080055a0  000155a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080055a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000070  08005614  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08005614  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7d1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002003  00000000  00000000  0002d871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002f878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  000302c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026fbf  00000000  00000000  00030c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b53d  00000000  00000000  00057c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eae8c  00000000  00000000  0006314c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014dfd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003494  00000000  00000000  0014e02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052f8 	.word	0x080052f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080052f8 	.word	0x080052f8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b5b0      	push	{r4, r5, r7, lr}
 800059a:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 800059e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fc90 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f92c 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f9ac 	bl	8000904 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ac:	f000 f97a 	bl	80008a4 <MX_USART2_UART_Init>

  /*
   * The next lines of code are used for an initial transmitting to PuTTy that the program has been run...
   * and I can start typing into the terminal.
   */
  strcpy( (char*)tx_buff, "\r\n\r\nSetup complete. You may begin typing commands.\r\n\r\n"); //
 80005b0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80005b4:	4a84      	ldr	r2, [pc, #528]	; (80007c8 <main+0x230>)
 80005b6:	461c      	mov	r4, r3
 80005b8:	4615      	mov	r5, r2
 80005ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005ca:	6020      	str	r0, [r4, #0]
 80005cc:	3404      	adds	r4, #4
 80005ce:	8021      	strh	r1, [r4, #0]
 80005d0:	3402      	adds	r4, #2
 80005d2:	0c0b      	lsrs	r3, r1, #16
 80005d4:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, tx_buff, strlen((char*)tx_buff), 500); //TWO
 80005d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe02 	bl	80001e4 <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80005e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005ec:	4877      	ldr	r0, [pc, #476]	; (80007cc <main+0x234>)
 80005ee:	f002 fb91 	bl	8002d14 <HAL_UART_Transmit>

  /*
   * This is the initialization of PuTTy receiving a character. It tells PuTTy, "hey,..
   * receive the next character I'm about to type."
   */
  HAL_UART_Receive_IT(&huart2, rx_char, 1); //Start listening for interrupts.
 80005f2:	2201      	movs	r2, #1
 80005f4:	4976      	ldr	r1, [pc, #472]	; (80007d0 <main+0x238>)
 80005f6:	4875      	ldr	r0, [pc, #468]	; (80007cc <main+0x234>)
 80005f8:	f002 fc20 	bl	8002e3c <HAL_UART_Receive_IT>
	   * If I get a enter key, rx_complete is true
	   * Move the cursor down, aka transmit \r\n; print the contents of safe_buff. This is my command.
	   * ;move the cursor to the next spot.
	   * Set rx_complete to false to reset the debounce.
	   */
	  if (rx_complete)
 80005fc:	4b75      	ldr	r3, [pc, #468]	; (80007d4 <main+0x23c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0fb      	beq.n	80005fc <main+0x64>
	  {
		  /*
		   * The following code displays to PuTTy what the command was.
		   */
		  strcpy( (char*)message, "\r\n");
 8000604:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000608:	4a73      	ldr	r2, [pc, #460]	; (80007d8 <main+0x240>)
 800060a:	6812      	ldr	r2, [r2, #0]
 800060c:	4611      	mov	r1, r2
 800060e:	8019      	strh	r1, [r3, #0]
 8000610:	3302      	adds	r3, #2
 8000612:	0c12      	lsrs	r2, r2, #16
 8000614:	701a      	strb	r2, [r3, #0]
		  strcpy( (char*)message1, "----------------------------------");
 8000616:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800061a:	4a70      	ldr	r2, [pc, #448]	; (80007dc <main+0x244>)
 800061c:	461c      	mov	r4, r3
 800061e:	4615      	mov	r5, r2
 8000620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000628:	682b      	ldr	r3, [r5, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	8022      	strh	r2, [r4, #0]
 800062e:	3402      	adds	r4, #2
 8000630:	0c1b      	lsrs	r3, r3, #16
 8000632:	7023      	strb	r3, [r4, #0]
		  snprintf(
 8000634:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000638:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800063c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000640:	9303      	str	r3, [sp, #12]
 8000642:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000646:	9302      	str	r3, [sp, #8]
 8000648:	4b65      	ldr	r3, [pc, #404]	; (80007e0 <main+0x248>)
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	4613      	mov	r3, r2
 8000654:	4a63      	ldr	r2, [pc, #396]	; (80007e4 <main+0x24c>)
 8000656:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800065a:	f003 fc4f 	bl	8003efc <sniprintf>
				  (char*)tx_buff,
				  sizeof(tx_buff),
				  "\r\n%s%sThe command is was: %s%s%s",
				  message1, message, safe_buff, message, message
				  );
		  HAL_UART_Transmit(&huart2, tx_buff, strlen((char*)tx_buff), 500);
 800065e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fdbe 	bl	80001e4 <strlen>
 8000668:	4603      	mov	r3, r0
 800066a:	b29a      	uxth	r2, r3
 800066c:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8000670:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000674:	4855      	ldr	r0, [pc, #340]	; (80007cc <main+0x234>)
 8000676:	f002 fb4d 	bl	8002d14 <HAL_UART_Transmit>
		   * in fact display parsed tokens to PuTTy.
		   *
		   */

		 //char str[80] = "This is - www.tutorialspoint.com - website";
		 const char s[2] = " ";
 800067a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800067e:	2220      	movs	r2, #32
 8000680:	801a      	strh	r2, [r3, #0]
		 char *token;

		 /* get the first token */
		 token = strtok((char*)safe_buff, s);
 8000682:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000686:	4619      	mov	r1, r3
 8000688:	4855      	ldr	r0, [pc, #340]	; (80007e0 <main+0x248>)
 800068a:	f003 fc73 	bl	8003f74 <strtok>
 800068e:	f8c7 04f4 	str.w	r0, [r7, #1268]	; 0x4f4

		 /* walk through other tokens */
		 while( token != NULL ) {
 8000692:	e090      	b.n	80007b6 <main+0x21e>
			 char commandCompareArray[50]; //This array holds what I'm comparing the token too.
			 strcpy( (char*)commandCompareArray, "turn");
 8000694:	463b      	mov	r3, r7
 8000696:	4a54      	ldr	r2, [pc, #336]	; (80007e8 <main+0x250>)
 8000698:	e892 0003 	ldmia.w	r2, {r0, r1}
 800069c:	6018      	str	r0, [r3, #0]
 800069e:	3304      	adds	r3, #4
 80006a0:	7019      	strb	r1, [r3, #0]
			 int stringsAreEqual = strcmp((const char*)token, (const char*)commandCompareArray);
 80006a2:	463b      	mov	r3, r7
 80006a4:	4619      	mov	r1, r3
 80006a6:	f8d7 04f4 	ldr.w	r0, [r7, #1268]	; 0x4f4
 80006aa:	f7ff fd91 	bl	80001d0 <strcmp>
 80006ae:	f8c7 04f0 	str.w	r0, [r7, #1264]	; 0x4f0
			 switch(stringsAreEqual)
 80006b2:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d175      	bne.n	80007a6 <main+0x20e>
			 {
			 case 0: /*The strings were equal*/
				 snprintf(
 80006ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80006be:	4a4b      	ldr	r2, [pc, #300]	; (80007ec <main+0x254>)
 80006c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 fc19 	bl	8003efc <sniprintf>
				 (char*)tx_buff,
				 sizeof(tx_buff),
				 "The first token was: turn\r\n\r\n"
				 );
				 HAL_UART_Transmit(&huart2, tx_buff, strlen((char*)tx_buff), 500);
 80006ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fd88 	bl	80001e4 <strlen>
 80006d4:	4603      	mov	r3, r0
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80006dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006e0:	483a      	ldr	r0, [pc, #232]	; (80007cc <main+0x234>)
 80006e2:	f002 fb17 	bl	8002d14 <HAL_UART_Transmit>


				 /*
				  * Get the next token
				  */
				 token = strtok(NULL, s);
 80006e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006ea:	4619      	mov	r1, r3
 80006ec:	2000      	movs	r0, #0
 80006ee:	f003 fc41 	bl	8003f74 <strtok>
 80006f2:	f8c7 04f4 	str.w	r0, [r7, #1268]	; 0x4f4
				 strcpy( (char*)commandCompareArray, "on");
 80006f6:	463b      	mov	r3, r7
 80006f8:	4a3d      	ldr	r2, [pc, #244]	; (80007f0 <main+0x258>)
 80006fa:	6812      	ldr	r2, [r2, #0]
 80006fc:	4611      	mov	r1, r2
 80006fe:	8019      	strh	r1, [r3, #0]
 8000700:	3302      	adds	r3, #2
 8000702:	0c12      	lsrs	r2, r2, #16
 8000704:	701a      	strb	r2, [r3, #0]
				 int stringsAreEqual = strcmp((const char*)token, (const char*)commandCompareArray);
 8000706:	463b      	mov	r3, r7
 8000708:	4619      	mov	r1, r3
 800070a:	f8d7 04f4 	ldr.w	r0, [r7, #1268]	; 0x4f4
 800070e:	f7ff fd5f 	bl	80001d0 <strcmp>
 8000712:	f8c7 04ec 	str.w	r0, [r7, #1260]	; 0x4ec
 8000716:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 800071a:	2b00      	cmp	r3, #0
 800071c:	d143      	bne.n	80007a6 <main+0x20e>

				 switch (stringsAreEqual)
				 {
				 case 0: /*The strings were equal*/
					 snprintf(
 800071e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000722:	4a34      	ldr	r2, [pc, #208]	; (80007f4 <main+0x25c>)
 8000724:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000728:	4618      	mov	r0, r3
 800072a:	f003 fbe7 	bl	8003efc <sniprintf>
					 (char*)tx_buff,
					 sizeof(tx_buff),
					 "The second token was: on\r\n\r\n"
					 );
					 HAL_UART_Transmit(&huart2, tx_buff, strlen((char*)tx_buff), 500);
 800072e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff fd56 	bl	80001e4 <strlen>
 8000738:	4603      	mov	r3, r0
 800073a:	b29a      	uxth	r2, r3
 800073c:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8000740:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000744:	4821      	ldr	r0, [pc, #132]	; (80007cc <main+0x234>)
 8000746:	f002 fae5 	bl	8002d14 <HAL_UART_Transmit>


					 /*
					  * Get the next token
					  */
					 token = strtok(NULL, s);
 800074a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800074e:	4619      	mov	r1, r3
 8000750:	2000      	movs	r0, #0
 8000752:	f003 fc0f 	bl	8003f74 <strtok>
 8000756:	f8c7 04f4 	str.w	r0, [r7, #1268]	; 0x4f4
					 strcpy( (char*)commandCompareArray, "led");
 800075a:	463b      	mov	r3, r7
 800075c:	4a26      	ldr	r2, [pc, #152]	; (80007f8 <main+0x260>)
 800075e:	601a      	str	r2, [r3, #0]
					 int stringsAreEqual = strcmp((const char*)token, (const char*)commandCompareArray);
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	f8d7 04f4 	ldr.w	r0, [r7, #1268]	; 0x4f4
 8000768:	f7ff fd32 	bl	80001d0 <strcmp>
 800076c:	f8c7 04e8 	str.w	r0, [r7, #1256]	; 0x4e8
 8000770:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 8000774:	2b00      	cmp	r3, #0
 8000776:	d116      	bne.n	80007a6 <main+0x20e>
					 switch (stringsAreEqual)
					 {
					 case 0: /*The strings were equal*/
						 snprintf(
 8000778:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800077c:	4a1f      	ldr	r2, [pc, #124]	; (80007fc <main+0x264>)
 800077e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000782:	4618      	mov	r0, r3
 8000784:	f003 fbba 	bl	8003efc <sniprintf>
						 (char*)tx_buff,
						 sizeof(tx_buff),
						 "The third token was: led\r\n\r\n"
						 );
						 HAL_UART_Transmit(&huart2, tx_buff, strlen((char*)tx_buff), 500);
 8000788:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fd29 	bl	80001e4 <strlen>
 8000792:	4603      	mov	r3, r0
 8000794:	b29a      	uxth	r2, r3
 8000796:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800079a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800079e:	480b      	ldr	r0, [pc, #44]	; (80007cc <main+0x234>)
 80007a0:	f002 fab8 	bl	8002d14 <HAL_UART_Transmit>
						  * Coding this to where it only works if they don't type anything
						  * after the command is too much work. I'm not designing a CLI, I'm
						  * just making a radio project.
						  */
						 //token = strtok(NULL, s);
						 break;
 80007a4:	bf00      	nop
			  * I don't have a compare match because the user didn't put in a correct command,
			  * I'm still going to want to loop through the rest of the string.
			  * Otherwise I think for the next command string, there's residue from
			  * the previous string.
			  */
			token = strtok(NULL, s);
 80007a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007aa:	4619      	mov	r1, r3
 80007ac:	2000      	movs	r0, #0
 80007ae:	f003 fbe1 	bl	8003f74 <strtok>
 80007b2:	f8c7 04f4 	str.w	r0, [r7, #1268]	; 0x4f4
		 while( token != NULL ) {
 80007b6:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	f47f af6a 	bne.w	8000694 <main+0xfc>


		  /*
		   * IMPORTANT. Reset rx_complete. Otherwise the rx complete code will run all the time.
		   */
		  rx_complete = false;
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <main+0x23c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
	  if (rx_complete)
 80007c6:	e719      	b.n	80005fc <main+0x64>
 80007c8:	08005310 	.word	0x08005310
 80007cc:	20000104 	.word	0x20000104
 80007d0:	200000f0 	.word	0x200000f0
 80007d4:	200000f1 	.word	0x200000f1
 80007d8:	08005348 	.word	0x08005348
 80007dc:	0800534c 	.word	0x0800534c
 80007e0:	20000188 	.word	0x20000188
 80007e4:	08005370 	.word	0x08005370
 80007e8:	08005394 	.word	0x08005394
 80007ec:	0800539c 	.word	0x0800539c
 80007f0:	080053bc 	.word	0x080053bc
 80007f4:	080053c0 	.word	0x080053c0
 80007f8:	0064656c 	.word	0x0064656c
 80007fc:	080053e0 	.word	0x080053e0

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b096      	sub	sp, #88	; 0x58
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2244      	movs	r2, #68	; 0x44
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f003 fb6c 	bl	8003eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	463b      	mov	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000822:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000826:	f000 ff29 	bl	800167c <HAL_PWREx_ControlVoltageScaling>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000830:	f000 f964 	bl	8000afc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000834:	2302      	movs	r3, #2
 8000836:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083e:	2310      	movs	r3, #16
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000842:	2302      	movs	r3, #2
 8000844:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000846:	2302      	movs	r3, #2
 8000848:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800084a:	2301      	movs	r3, #1
 800084c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800084e:	230a      	movs	r3, #10
 8000850:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000852:	2307      	movs	r3, #7
 8000854:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000856:	2302      	movs	r3, #2
 8000858:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800085a:	2302      	movs	r3, #2
 800085c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4618      	mov	r0, r3
 8000864:	f000 ff60 	bl	8001728 <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800086e:	f000 f945 	bl	8000afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	230f      	movs	r3, #15
 8000874:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2303      	movs	r3, #3
 8000878:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000886:	463b      	mov	r3, r7
 8000888:	2104      	movs	r1, #4
 800088a:	4618      	mov	r0, r3
 800088c:	f001 fb32 	bl	8001ef4 <HAL_RCC_ClockConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000896:	f000 f931 	bl	8000afc <Error_Handler>
  }
}
 800089a:	bf00      	nop
 800089c:	3758      	adds	r7, #88	; 0x58
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008aa:	4a15      	ldr	r2, [pc, #84]	; (8000900 <MX_USART2_UART_Init+0x5c>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008e8:	f002 f9c6 	bl	8002c78 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008f2:	f000 f903 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000104 	.word	0x20000104
 8000900:	40004400 	.word	0x40004400

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <MX_GPIO_Init+0xc4>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a2a      	ldr	r2, [pc, #168]	; (80009c8 <MX_GPIO_Init+0xc4>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <MX_GPIO_Init+0xc4>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <MX_GPIO_Init+0xc4>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a24      	ldr	r2, [pc, #144]	; (80009c8 <MX_GPIO_Init+0xc4>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <MX_GPIO_Init+0xc4>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <MX_GPIO_Init+0xc4>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a1e      	ldr	r2, [pc, #120]	; (80009c8 <MX_GPIO_Init+0xc4>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <MX_GPIO_Init+0xc4>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_GPIO_Init+0xc4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4a18      	ldr	r2, [pc, #96]	; (80009c8 <MX_GPIO_Init+0xc4>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_GPIO_Init+0xc4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2120      	movs	r1, #32
 800097e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000982:	f000 fe55 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_GPIO_Init+0xc8>)
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <MX_GPIO_Init+0xcc>)
 800099c:	f000 fc9e 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009a0:	2320      	movs	r3, #32
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ba:	f000 fc8f 	bl	80012dc <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000
 80009cc:	10210000 	.word	0x10210000
 80009d0:	48000800 	.word	0x48000800

080009d4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b090      	sub	sp, #64	; 0x40
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart2.Instance)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b3f      	ldr	r3, [pc, #252]	; (8000ae0 <HAL_UART_RxCpltCallback+0x10c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d177      	bne.n	8000ad8 <HAL_UART_RxCpltCallback+0x104>
        {
            switch (*rx_char)
 80009e8:	4b3e      	ldr	r3, [pc, #248]	; (8000ae4 <HAL_UART_RxCpltCallback+0x110>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b0d      	cmp	r3, #13
 80009ee:	d84b      	bhi.n	8000a88 <HAL_UART_RxCpltCallback+0xb4>
 80009f0:	a201      	add	r2, pc, #4	; (adr r2, 80009f8 <HAL_UART_RxCpltCallback+0x24>)
 80009f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f6:	bf00      	nop
 80009f8:	08000a31 	.word	0x08000a31
 80009fc:	08000a89 	.word	0x08000a89
 8000a00:	08000a89 	.word	0x08000a89
 8000a04:	08000a89 	.word	0x08000a89
 8000a08:	08000a89 	.word	0x08000a89
 8000a0c:	08000a89 	.word	0x08000a89
 8000a10:	08000a89 	.word	0x08000a89
 8000a14:	08000a89 	.word	0x08000a89
 8000a18:	08000a61 	.word	0x08000a61
 8000a1c:	08000a89 	.word	0x08000a89
 8000a20:	08000a31 	.word	0x08000a31
 8000a24:	08000a89 	.word	0x08000a89
 8000a28:	08000a89 	.word	0x08000a89
 8000a2c:	08000a31 	.word	0x08000a31
                case '\r':
                case '\n':
                case '\0':
                {
                    //The C library function void *memcpy(void *dest, const void *src, size_t n) copies n characters from memory area src to memory area dest.
                    memcpy(safe_buff, rx_buff, rx_count + 1);
 8000a30:	4b2d      	ldr	r3, [pc, #180]	; (8000ae8 <HAL_UART_RxCpltCallback+0x114>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	3301      	adds	r3, #1
 8000a36:	461a      	mov	r2, r3
 8000a38:	492c      	ldr	r1, [pc, #176]	; (8000aec <HAL_UART_RxCpltCallback+0x118>)
 8000a3a:	482d      	ldr	r0, [pc, #180]	; (8000af0 <HAL_UART_RxCpltCallback+0x11c>)
 8000a3c:	f003 fa48 	bl	8003ed0 <memcpy>
                    last_command_count = rx_count;
 8000a40:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <HAL_UART_RxCpltCallback+0x114>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a2b      	ldr	r2, [pc, #172]	; (8000af4 <HAL_UART_RxCpltCallback+0x120>)
 8000a46:	6013      	str	r3, [r2, #0]

                    memset(rx_buff, 0, sizeof(rx_buff));
 8000a48:	2264      	movs	r2, #100	; 0x64
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4827      	ldr	r0, [pc, #156]	; (8000aec <HAL_UART_RxCpltCallback+0x118>)
 8000a4e:	f003 fa4d 	bl	8003eec <memset>
                    rx_count = 0;
 8000a52:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <HAL_UART_RxCpltCallback+0x114>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
    #ifdef ECHO_RECEIVED_CHARACTERS
                    uint8_t new_line[2] = {'\r', '\n'};
                    HAL_UART_Transmit(&huart2, new_line, 2, 100);        // transmit CRLF
    #endif

                    rx_complete = true;
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <HAL_UART_RxCpltCallback+0x124>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
                    break;
 8000a5e:	e033      	b.n	8000ac8 <HAL_UART_RxCpltCallback+0xf4>
                 */
                // if we have received a backspace character, then delete the last received character
                case '\b':
                {
                    // set current buffer position to 0; if we are not already at index 0 then move back one index and set that value to 0 as well
                    if (rx_count)
 8000a60:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <HAL_UART_RxCpltCallback+0x114>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d009      	beq.n	8000a7c <HAL_UART_RxCpltCallback+0xa8>
                    {
                        rx_buff[rx_count] = 0;
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <HAL_UART_RxCpltCallback+0x114>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1f      	ldr	r2, [pc, #124]	; (8000aec <HAL_UART_RxCpltCallback+0x118>)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	54d1      	strb	r1, [r2, r3]
                        rx_count --;
 8000a72:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <HAL_UART_RxCpltCallback+0x114>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <HAL_UART_RxCpltCallback+0x114>)
 8000a7a:	6013      	str	r3, [r2, #0]
                    HAL_UART_Transmit(&huart2, &rx_char, 1, 100);        // transmit backspace character to move our cursor back once on the terminal
                    HAL_UART_Transmit(&huart2, &tx_char, 1, 100);        // transmit space character to clear the character that was there
                    HAL_UART_Transmit(&huart2, &rx_char, 1, 100);        // transmit backspace character to once again move back a space
    #endif
                    }
                    rx_buff[rx_count] = 0;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <HAL_UART_RxCpltCallback+0x114>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a1a      	ldr	r2, [pc, #104]	; (8000aec <HAL_UART_RxCpltCallback+0x118>)
 8000a82:	2100      	movs	r1, #0
 8000a84:	54d1      	strb	r1, [r2, r3]



                    break;
 8000a86:	e01f      	b.n	8000ac8 <HAL_UART_RxCpltCallback+0xf4>
                }

                // we have received some other character, store it to the array
                default:
                {
                    rx_buff[rx_count] = *rx_char;
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <HAL_UART_RxCpltCallback+0x114>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <HAL_UART_RxCpltCallback+0x110>)
 8000a8e:	7811      	ldrb	r1, [r2, #0]
 8000a90:	4a16      	ldr	r2, [pc, #88]	; (8000aec <HAL_UART_RxCpltCallback+0x118>)
 8000a92:	54d1      	strb	r1, [r2, r3]
                    rx_count ++;
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_UART_RxCpltCallback+0x114>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <HAL_UART_RxCpltCallback+0x114>)
 8000a9c:	6013      	str	r3, [r2, #0]
    #endif
                    //Show the input being entered by user on the terminal
                    uint8_t show_input[50];
                    //sprintf(show_input, "%c", *rx_char);
                    //sprintf(show_input, *rx_char);
                    strcpy ( (char*)show_input, (char*)rx_char);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4910      	ldr	r1, [pc, #64]	; (8000ae4 <HAL_UART_RxCpltCallback+0x110>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 fa5d 	bl	8003f64 <strcpy>
                    HAL_UART_Transmit(&huart2, show_input, strlen((char*)show_input),1000);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fb98 	bl	80001e4 <strlen>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	f107 010c 	add.w	r1, r7, #12
 8000abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <HAL_UART_RxCpltCallback+0x10c>)
 8000ac2:	f002 f927 	bl	8002d14 <HAL_UART_Transmit>
                    break;
 8000ac6:	bf00      	nop
                }
            }

            *rx_char = 0; //In the switch statement, one of the cases is a 0, so I assume this is necessary.
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_UART_RxCpltCallback+0x110>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
            /*
             * Leave the following line in the function. If I remove it, the user will only
             * be able to call a single interrupt, thus only be able to type a single
             * character into putty.
             */
            HAL_UART_Receive_IT(&huart2, rx_char, 1);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4904      	ldr	r1, [pc, #16]	; (8000ae4 <HAL_UART_RxCpltCallback+0x110>)
 8000ad2:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <HAL_UART_RxCpltCallback+0x10c>)
 8000ad4:	f002 f9b2 	bl	8002e3c <HAL_UART_Receive_IT>

        }
}
 8000ad8:	bf00      	nop
 8000ada:	3740      	adds	r7, #64	; 0x40
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000104 	.word	0x20000104
 8000ae4:	200000f0 	.word	0x200000f0
 8000ae8:	200001ec 	.word	0x200001ec
 8000aec:	2000008c 	.word	0x2000008c
 8000af0:	20000188 	.word	0x20000188
 8000af4:	20000100 	.word	0x20000100
 8000af8:	200000f1 	.word	0x200000f1

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_MspInit+0x44>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b12:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <HAL_MspInit+0x44>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6613      	str	r3, [r2, #96]	; 0x60
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_MspInit+0x44>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_MspInit+0x44>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x44>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6593      	str	r3, [r2, #88]	; 0x58
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x44>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0ac      	sub	sp, #176	; 0xb0
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2288      	movs	r2, #136	; 0x88
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 f9bb 	bl	8003eec <memset>
  if(huart->Instance==USART2)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a25      	ldr	r2, [pc, #148]	; (8000c10 <HAL_UART_MspInit+0xc0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d143      	bne.n	8000c08 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 fbb7 	bl	8002300 <HAL_RCCEx_PeriphCLKConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b98:	f7ff ffb0 	bl	8000afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <HAL_UART_MspInit+0xc4>)
 8000b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba0:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <HAL_UART_MspInit+0xc4>)
 8000ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <HAL_UART_MspInit+0xc4>)
 8000baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <HAL_UART_MspInit+0xc4>)
 8000bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb8:	4a16      	ldr	r2, [pc, #88]	; (8000c14 <HAL_UART_MspInit+0xc4>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_UART_MspInit+0xc4>)
 8000bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bcc:	230c      	movs	r3, #12
 8000bce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000be4:	2307      	movs	r3, #7
 8000be6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f000 fb72 	bl	80012dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2026      	movs	r0, #38	; 0x26
 8000bfe:	f000 fab8 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c02:	2026      	movs	r0, #38	; 0x26
 8000c04:	f000 fad1 	bl	80011aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c08:	bf00      	nop
 8000c0a:	37b0      	adds	r7, #176	; 0xb0
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40004400 	.word	0x40004400
 8000c14:	40021000 	.word	0x40021000

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler+0x4>

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 f98a 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <USART2_IRQHandler+0x10>)
 8000c72:	f002 f927 	bl	8002ec4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000104 	.word	0x20000104

08000c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
	return 1;
 8000c84:	2301      	movs	r3, #1
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <_kill>:

int _kill(int pid, int sig)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c9a:	f003 f8ef 	bl	8003e7c <__errno>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2216      	movs	r2, #22
 8000ca2:	601a      	str	r2, [r3, #0]
	return -1;
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <_exit>:

void _exit (int status)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ffe7 	bl	8000c90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cc2:	e7fe      	b.n	8000cc2 <_exit+0x12>

08000cc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	e00a      	b.n	8000cec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cd6:	f3af 8000 	nop.w
 8000cda:	4601      	mov	r1, r0
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	60ba      	str	r2, [r7, #8]
 8000ce2:	b2ca      	uxtb	r2, r1
 8000ce4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbf0      	blt.n	8000cd6 <_read+0x12>
	}

return len;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	e009      	b.n	8000d24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	60ba      	str	r2, [r7, #8]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3301      	adds	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	dbf1      	blt.n	8000d10 <_write+0x12>
	}
	return len;
 8000d2c:	687b      	ldr	r3, [r7, #4]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_close>:

int _close(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_isatty>:

int _isatty(int file)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
	return 1;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d207      	bcs.n	8000de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd0:	f003 f854 	bl	8003e7c <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20018000 	.word	0x20018000
 8000e00:	00000400 	.word	0x00000400
 8000e04:	200000f4 	.word	0x200000f4
 8000e08:	20000208 	.word	0x20000208

08000e0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <SystemInit+0x5c>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e16:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <SystemInit+0x5c>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <SystemInit+0x60>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <SystemInit+0x60>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <SystemInit+0x60>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <SystemInit+0x60>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <SystemInit+0x60>)
 8000e38:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e3c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e40:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <SystemInit+0x60>)
 8000e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e48:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <SystemInit+0x60>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <SystemInit+0x60>)
 8000e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e54:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <SystemInit+0x60>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00
 8000e6c:	40021000 	.word	0x40021000

08000e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e74:	f7ff ffca 	bl	8000e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e7a:	e003      	b.n	8000e84 <LoopCopyDataInit>

08000e7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e82:	3104      	adds	r1, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e84:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e8c:	d3f6      	bcc.n	8000e7c <CopyDataInit>
	ldr	r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e90:	e002      	b.n	8000e98 <LoopFillZerobss>

08000e92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e94:	f842 3b04 	str.w	r3, [r2], #4

08000e98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <LoopForever+0x16>)
	cmp	r2, r3
 8000e9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e9c:	d3f9      	bcc.n	8000e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f002 fff3 	bl	8003e88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ea2:	f7ff fb79 	bl	8000598 <main>

08000ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea6:	e7fe      	b.n	8000ea6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000eac:	080055a4 	.word	0x080055a4
	ldr	r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000eb4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000eb8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000ebc:	20000204 	.word	0x20000204

08000ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC1_2_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_Init+0x3c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <HAL_Init+0x3c>)
 8000ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eda:	2003      	movs	r0, #3
 8000edc:	f000 f93e 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f000 f80f 	bl	8000f04 <HAL_InitTick>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	71fb      	strb	r3, [r7, #7]
 8000ef0:	e001      	b.n	8000ef6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef2:	f7ff fe09 	bl	8000b08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40022000 	.word	0x40022000

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <HAL_InitTick+0x6c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d023      	beq.n	8000f60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_InitTick+0x70>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_InitTick+0x6c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f949 	bl	80011c6 <HAL_SYSTICK_Config>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10f      	bne.n	8000f5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d809      	bhi.n	8000f54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 f913 	bl	8001172 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_InitTick+0x74>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e007      	b.n	8000f64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	e004      	b.n	8000f64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e001      	b.n	8000f64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000004 	.word	0x20000004

08000f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x20>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	200001f0 	.word	0x200001f0

08000fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <HAL_GetTick+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	200001f0 	.word	0x200001f0

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4907      	ldr	r1, [pc, #28]	; (8001058 <__NVIC_EnableIRQ+0x38>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001128:	d301      	bcc.n	800112e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <SysTick_Config+0x40>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001136:	210f      	movs	r1, #15
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f7ff ff8e 	bl	800105c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SysTick_Config+0x40>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <SysTick_Config+0x40>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff29 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001184:	f7ff ff3e 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001188:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff ff8e 	bl	80010b0 <NVIC_EncodePriority>
 8001194:	4602      	mov	r2, r0
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff5d 	bl	800105c <__NVIC_SetPriority>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff31 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ffa2 	bl	8001118 <SysTick_Config>
 80011d4:	4603      	mov	r3, r0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011de:	b480      	push	{r7}
 80011e0:	b085      	sub	sp, #20
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d008      	beq.n	8001208 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2204      	movs	r2, #4
 80011fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e022      	b.n	800124e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 020e 	bic.w	r2, r2, #14
 8001216:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0201 	bic.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122c:	f003 021c 	and.w	r2, r3, #28
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	2101      	movs	r1, #1
 8001236:	fa01 f202 	lsl.w	r2, r1, r2
 800123a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d005      	beq.n	800127e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2204      	movs	r2, #4
 8001276:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	e029      	b.n	80012d2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 020e 	bic.w	r2, r2, #14
 800128c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0201 	bic.w	r2, r2, #1
 800129c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f003 021c 	and.w	r2, r3, #28
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f202 	lsl.w	r2, r1, r2
 80012b0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	4798      	blx	r3
    }
  }
  return status;
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ea:	e17f      	b.n	80015ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	2101      	movs	r1, #1
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8171 	beq.w	80015e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d00b      	beq.n	8001324 <HAL_GPIO_Init+0x48>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d007      	beq.n	8001324 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001318:	2b11      	cmp	r3, #17
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b12      	cmp	r3, #18
 8001322:	d130      	bne.n	8001386 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800135a:	2201      	movs	r2, #1
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	f003 0201 	and.w	r2, r3, #1
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b03      	cmp	r3, #3
 8001390:	d118      	bne.n	80013c4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001398:	2201      	movs	r2, #1
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	08db      	lsrs	r3, r3, #3
 80013ae:	f003 0201 	and.w	r2, r3, #1
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x128>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b12      	cmp	r3, #18
 8001402:	d123      	bne.n	800144c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	08da      	lsrs	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3208      	adds	r2, #8
 800140c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	220f      	movs	r2, #15
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	08da      	lsrs	r2, r3, #3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3208      	adds	r2, #8
 8001446:	6939      	ldr	r1, [r7, #16]
 8001448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0203 	and.w	r2, r3, #3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80ac 	beq.w	80015e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	4b5f      	ldr	r3, [pc, #380]	; (800160c <HAL_GPIO_Init+0x330>)
 8001490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001492:	4a5e      	ldr	r2, [pc, #376]	; (800160c <HAL_GPIO_Init+0x330>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6613      	str	r3, [r2, #96]	; 0x60
 800149a:	4b5c      	ldr	r3, [pc, #368]	; (800160c <HAL_GPIO_Init+0x330>)
 800149c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014a6:	4a5a      	ldr	r2, [pc, #360]	; (8001610 <HAL_GPIO_Init+0x334>)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	089b      	lsrs	r3, r3, #2
 80014ac:	3302      	adds	r3, #2
 80014ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	220f      	movs	r2, #15
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014d0:	d025      	beq.n	800151e <HAL_GPIO_Init+0x242>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4f      	ldr	r2, [pc, #316]	; (8001614 <HAL_GPIO_Init+0x338>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d01f      	beq.n	800151a <HAL_GPIO_Init+0x23e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4e      	ldr	r2, [pc, #312]	; (8001618 <HAL_GPIO_Init+0x33c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d019      	beq.n	8001516 <HAL_GPIO_Init+0x23a>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4d      	ldr	r2, [pc, #308]	; (800161c <HAL_GPIO_Init+0x340>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d013      	beq.n	8001512 <HAL_GPIO_Init+0x236>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4c      	ldr	r2, [pc, #304]	; (8001620 <HAL_GPIO_Init+0x344>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00d      	beq.n	800150e <HAL_GPIO_Init+0x232>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4b      	ldr	r2, [pc, #300]	; (8001624 <HAL_GPIO_Init+0x348>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d007      	beq.n	800150a <HAL_GPIO_Init+0x22e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4a      	ldr	r2, [pc, #296]	; (8001628 <HAL_GPIO_Init+0x34c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d101      	bne.n	8001506 <HAL_GPIO_Init+0x22a>
 8001502:	2306      	movs	r3, #6
 8001504:	e00c      	b.n	8001520 <HAL_GPIO_Init+0x244>
 8001506:	2307      	movs	r3, #7
 8001508:	e00a      	b.n	8001520 <HAL_GPIO_Init+0x244>
 800150a:	2305      	movs	r3, #5
 800150c:	e008      	b.n	8001520 <HAL_GPIO_Init+0x244>
 800150e:	2304      	movs	r3, #4
 8001510:	e006      	b.n	8001520 <HAL_GPIO_Init+0x244>
 8001512:	2303      	movs	r3, #3
 8001514:	e004      	b.n	8001520 <HAL_GPIO_Init+0x244>
 8001516:	2302      	movs	r3, #2
 8001518:	e002      	b.n	8001520 <HAL_GPIO_Init+0x244>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_GPIO_Init+0x244>
 800151e:	2300      	movs	r3, #0
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	f002 0203 	and.w	r2, r2, #3
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4093      	lsls	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001530:	4937      	ldr	r1, [pc, #220]	; (8001610 <HAL_GPIO_Init+0x334>)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	3302      	adds	r3, #2
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800153e:	4b3b      	ldr	r3, [pc, #236]	; (800162c <HAL_GPIO_Init+0x350>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	43db      	mvns	r3, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001562:	4a32      	ldr	r2, [pc, #200]	; (800162c <HAL_GPIO_Init+0x350>)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001568:	4b30      	ldr	r3, [pc, #192]	; (800162c <HAL_GPIO_Init+0x350>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800158c:	4a27      	ldr	r2, [pc, #156]	; (800162c <HAL_GPIO_Init+0x350>)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <HAL_GPIO_Init+0x350>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015b6:	4a1d      	ldr	r2, [pc, #116]	; (800162c <HAL_GPIO_Init+0x350>)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_GPIO_Init+0x350>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e0:	4a12      	ldr	r2, [pc, #72]	; (800162c <HAL_GPIO_Init+0x350>)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa22 f303 	lsr.w	r3, r2, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f47f ae78 	bne.w	80012ec <HAL_GPIO_Init+0x10>
  }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	40010000 	.word	0x40010000
 8001614:	48000400 	.word	0x48000400
 8001618:	48000800 	.word	0x48000800
 800161c:	48000c00 	.word	0x48000c00
 8001620:	48001000 	.word	0x48001000
 8001624:	48001400 	.word	0x48001400
 8001628:	48001800 	.word	0x48001800
 800162c:	40010400 	.word	0x40010400

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800164c:	e002      	b.n	8001654 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <HAL_PWREx_GetVoltageRange+0x18>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40007000 	.word	0x40007000

0800167c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800168a:	d130      	bne.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800168c:	4b23      	ldr	r3, [pc, #140]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001698:	d038      	beq.n	800170c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016a2:	4a1e      	ldr	r2, [pc, #120]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016aa:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2232      	movs	r2, #50	; 0x32
 80016b0:	fb02 f303 	mul.w	r3, r2, r3
 80016b4:	4a1b      	ldr	r2, [pc, #108]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016b6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ba:	0c9b      	lsrs	r3, r3, #18
 80016bc:	3301      	adds	r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c0:	e002      	b.n	80016c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d4:	d102      	bne.n	80016dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f2      	bne.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e8:	d110      	bne.n	800170c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e00f      	b.n	800170e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fa:	d007      	beq.n	800170c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001704:	4a05      	ldr	r2, [pc, #20]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40007000 	.word	0x40007000
 8001720:	20000000 	.word	0x20000000
 8001724:	431bde83 	.word	0x431bde83

08001728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e3d4      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800173a:	4ba1      	ldr	r3, [pc, #644]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001744:	4b9e      	ldr	r3, [pc, #632]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 80e4 	beq.w	8001924 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d007      	beq.n	8001772 <HAL_RCC_OscConfig+0x4a>
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2b0c      	cmp	r3, #12
 8001766:	f040 808b 	bne.w	8001880 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2b01      	cmp	r3, #1
 800176e:	f040 8087 	bne.w	8001880 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001772:	4b93      	ldr	r3, [pc, #588]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d005      	beq.n	800178a <HAL_RCC_OscConfig+0x62>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e3ac      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1a      	ldr	r2, [r3, #32]
 800178e:	4b8c      	ldr	r3, [pc, #560]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d004      	beq.n	80017a4 <HAL_RCC_OscConfig+0x7c>
 800179a:	4b89      	ldr	r3, [pc, #548]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017a2:	e005      	b.n	80017b0 <HAL_RCC_OscConfig+0x88>
 80017a4:	4b86      	ldr	r3, [pc, #536]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80017a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d223      	bcs.n	80017fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fd41 	bl	8002240 <RCC_SetFlashLatencyFromMSIRange>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e38d      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017c8:	4b7d      	ldr	r3, [pc, #500]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a7c      	ldr	r2, [pc, #496]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80017ce:	f043 0308 	orr.w	r3, r3, #8
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b7a      	ldr	r3, [pc, #488]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4977      	ldr	r1, [pc, #476]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e6:	4b76      	ldr	r3, [pc, #472]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	4972      	ldr	r1, [pc, #456]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	604b      	str	r3, [r1, #4]
 80017fa:	e025      	b.n	8001848 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017fc:	4b70      	ldr	r3, [pc, #448]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a6f      	ldr	r2, [pc, #444]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b6d      	ldr	r3, [pc, #436]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	496a      	ldr	r1, [pc, #424]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800181a:	4b69      	ldr	r3, [pc, #420]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	4965      	ldr	r1, [pc, #404]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800182a:	4313      	orrs	r3, r2
 800182c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d109      	bne.n	8001848 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4618      	mov	r0, r3
 800183a:	f000 fd01 	bl	8002240 <RCC_SetFlashLatencyFromMSIRange>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e34d      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001848:	f000 fc36 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 800184c:	4602      	mov	r2, r0
 800184e:	4b5c      	ldr	r3, [pc, #368]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	091b      	lsrs	r3, r3, #4
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	495a      	ldr	r1, [pc, #360]	; (80019c4 <HAL_RCC_OscConfig+0x29c>)
 800185a:	5ccb      	ldrb	r3, [r1, r3]
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	fa22 f303 	lsr.w	r3, r2, r3
 8001864:	4a58      	ldr	r2, [pc, #352]	; (80019c8 <HAL_RCC_OscConfig+0x2a0>)
 8001866:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001868:	4b58      	ldr	r3, [pc, #352]	; (80019cc <HAL_RCC_OscConfig+0x2a4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fb49 	bl	8000f04 <HAL_InitTick>
 8001872:	4603      	mov	r3, r0
 8001874:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d052      	beq.n	8001922 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	e331      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d032      	beq.n	80018ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001888:	4b4d      	ldr	r3, [pc, #308]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a4c      	ldr	r2, [pc, #304]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001894:	f7ff fb86 	bl	8000fa4 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800189c:	f7ff fb82 	bl	8000fa4 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e31a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ae:	4b44      	ldr	r3, [pc, #272]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ba:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a40      	ldr	r2, [pc, #256]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018c0:	f043 0308 	orr.w	r3, r3, #8
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	493b      	ldr	r1, [pc, #236]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d8:	4b39      	ldr	r3, [pc, #228]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	4936      	ldr	r1, [pc, #216]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
 80018ec:	e01a      	b.n	8001924 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018ee:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a33      	ldr	r2, [pc, #204]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018fa:	f7ff fb53 	bl	8000fa4 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001902:	f7ff fb4f 	bl	8000fa4 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e2e7      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001914:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f0      	bne.n	8001902 <HAL_RCC_OscConfig+0x1da>
 8001920:	e000      	b.n	8001924 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001922:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d074      	beq.n	8001a1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2b08      	cmp	r3, #8
 8001934:	d005      	beq.n	8001942 <HAL_RCC_OscConfig+0x21a>
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b0c      	cmp	r3, #12
 800193a:	d10e      	bne.n	800195a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d10b      	bne.n	800195a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001942:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d064      	beq.n	8001a18 <HAL_RCC_OscConfig+0x2f0>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d160      	bne.n	8001a18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e2c4      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001962:	d106      	bne.n	8001972 <HAL_RCC_OscConfig+0x24a>
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800196a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e01d      	b.n	80019ae <HAL_RCC_OscConfig+0x286>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800197a:	d10c      	bne.n	8001996 <HAL_RCC_OscConfig+0x26e>
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001982:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800198e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	e00b      	b.n	80019ae <HAL_RCC_OscConfig+0x286>
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800199c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80019a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d01c      	beq.n	80019f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b6:	f7ff faf5 	bl	8000fa4 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019bc:	e011      	b.n	80019e2 <HAL_RCC_OscConfig+0x2ba>
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	08005400 	.word	0x08005400
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff fae8 	bl	8000fa4 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e280      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e2:	4baf      	ldr	r3, [pc, #700]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x2a8>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fad8 	bl	8000fa4 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fad4 	bl	8000fa4 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e26c      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a0a:	4ba5      	ldr	r3, [pc, #660]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x2d0>
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d060      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d005      	beq.n	8001a38 <HAL_RCC_OscConfig+0x310>
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2b0c      	cmp	r3, #12
 8001a30:	d119      	bne.n	8001a66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d116      	bne.n	8001a66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a38:	4b99      	ldr	r3, [pc, #612]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_OscConfig+0x328>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e249      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a50:	4b93      	ldr	r3, [pc, #588]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	061b      	lsls	r3, r3, #24
 8001a5e:	4990      	ldr	r1, [pc, #576]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a64:	e040      	b.n	8001ae8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d023      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a6e:	4b8c      	ldr	r3, [pc, #560]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a8b      	ldr	r2, [pc, #556]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fa93 	bl	8000fa4 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a82:	f7ff fa8f 	bl	8000fa4 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e227      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a94:	4b82      	ldr	r3, [pc, #520]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b7f      	ldr	r3, [pc, #508]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	497c      	ldr	r1, [pc, #496]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
 8001ab4:	e018      	b.n	8001ae8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab6:	4b7a      	ldr	r3, [pc, #488]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a79      	ldr	r2, [pc, #484]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fa6f 	bl	8000fa4 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aca:	f7ff fa6b 	bl	8000fa4 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e203      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001adc:	4b70      	ldr	r3, [pc, #448]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f0      	bne.n	8001aca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d03c      	beq.n	8001b6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d01c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afc:	4b68      	ldr	r3, [pc, #416]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b02:	4a67      	ldr	r2, [pc, #412]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0c:	f7ff fa4a 	bl	8000fa4 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b14:	f7ff fa46 	bl	8000fa4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e1de      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b26:	4b5e      	ldr	r3, [pc, #376]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0ef      	beq.n	8001b14 <HAL_RCC_OscConfig+0x3ec>
 8001b34:	e01b      	b.n	8001b6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b36:	4b5a      	ldr	r3, [pc, #360]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3c:	4a58      	ldr	r2, [pc, #352]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b46:	f7ff fa2d 	bl	8000fa4 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4e:	f7ff fa29 	bl	8000fa4 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e1c1      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b60:	4b4f      	ldr	r3, [pc, #316]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1ef      	bne.n	8001b4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80a6 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b80:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10d      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8c:	4b44      	ldr	r3, [pc, #272]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	4a43      	ldr	r2, [pc, #268]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b96:	6593      	str	r3, [r2, #88]	; 0x58
 8001b98:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	; (8001ca4 <HAL_RCC_OscConfig+0x57c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d118      	bne.n	8001be6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bb4:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <HAL_RCC_OscConfig+0x57c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a3a      	ldr	r2, [pc, #232]	; (8001ca4 <HAL_RCC_OscConfig+0x57c>)
 8001bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff f9f0 	bl	8000fa4 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc8:	f7ff f9ec 	bl	8000fa4 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e184      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bda:	4b32      	ldr	r3, [pc, #200]	; (8001ca4 <HAL_RCC_OscConfig+0x57c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d108      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4d8>
 8001bee:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf4:	4a2a      	ldr	r2, [pc, #168]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bfe:	e024      	b.n	8001c4a <HAL_RCC_OscConfig+0x522>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	d110      	bne.n	8001c2a <HAL_RCC_OscConfig+0x502>
 8001c08:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0e:	4a24      	ldr	r2, [pc, #144]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1e:	4a20      	ldr	r2, [pc, #128]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c28:	e00f      	b.n	8001c4a <HAL_RCC_OscConfig+0x522>
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c30:	4a1b      	ldr	r2, [pc, #108]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c32:	f023 0301 	bic.w	r3, r3, #1
 8001c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c3a:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c40:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c42:	f023 0304 	bic.w	r3, r3, #4
 8001c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d016      	beq.n	8001c80 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c52:	f7ff f9a7 	bl	8000fa4 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7ff f9a3 	bl	8000fa4 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e139      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0ed      	beq.n	8001c5a <HAL_RCC_OscConfig+0x532>
 8001c7e:	e01a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c80:	f7ff f990 	bl	8000fa4 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c86:	e00f      	b.n	8001ca8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c88:	f7ff f98c 	bl	8000fa4 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d906      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e122      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca8:	4b90      	ldr	r3, [pc, #576]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1e8      	bne.n	8001c88 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cb6:	7ffb      	ldrb	r3, [r7, #31]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d105      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbc:	4b8b      	ldr	r3, [pc, #556]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	4a8a      	ldr	r2, [pc, #552]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 8108 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	f040 80d0 	bne.w	8001e7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cdc:	4b83      	ldr	r3, [pc, #524]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f003 0203 	and.w	r2, r3, #3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d130      	bne.n	8001d52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d127      	bne.n	8001d52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d11f      	bne.n	8001d52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d1c:	2a07      	cmp	r2, #7
 8001d1e:	bf14      	ite	ne
 8001d20:	2201      	movne	r2, #1
 8001d22:	2200      	moveq	r2, #0
 8001d24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d113      	bne.n	8001d52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d34:	085b      	lsrs	r3, r3, #1
 8001d36:	3b01      	subs	r3, #1
 8001d38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d109      	bne.n	8001d52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	085b      	lsrs	r3, r3, #1
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d06e      	beq.n	8001e30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	2b0c      	cmp	r3, #12
 8001d56:	d069      	beq.n	8001e2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d58:	4b64      	ldr	r3, [pc, #400]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d105      	bne.n	8001d70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d64:	4b61      	ldr	r3, [pc, #388]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0b7      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d74:	4b5d      	ldr	r3, [pc, #372]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a5c      	ldr	r2, [pc, #368]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d80:	f7ff f910 	bl	8000fa4 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d88:	f7ff f90c 	bl	8000fa4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e0a4      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d9a:	4b54      	ldr	r3, [pc, #336]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da6:	4b51      	ldr	r3, [pc, #324]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	4b51      	ldr	r3, [pc, #324]	; (8001ef0 <HAL_RCC_OscConfig+0x7c8>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001db6:	3a01      	subs	r2, #1
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	4311      	orrs	r1, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dc0:	0212      	lsls	r2, r2, #8
 8001dc2:	4311      	orrs	r1, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dc8:	0852      	lsrs	r2, r2, #1
 8001dca:	3a01      	subs	r2, #1
 8001dcc:	0552      	lsls	r2, r2, #21
 8001dce:	4311      	orrs	r1, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dd4:	0852      	lsrs	r2, r2, #1
 8001dd6:	3a01      	subs	r2, #1
 8001dd8:	0652      	lsls	r2, r2, #25
 8001dda:	4311      	orrs	r1, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001de0:	0912      	lsrs	r2, r2, #4
 8001de2:	0452      	lsls	r2, r2, #17
 8001de4:	430a      	orrs	r2, r1
 8001de6:	4941      	ldr	r1, [pc, #260]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dec:	4b3f      	ldr	r3, [pc, #252]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a3e      	ldr	r2, [pc, #248]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001df8:	4b3c      	ldr	r3, [pc, #240]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4a3b      	ldr	r2, [pc, #236]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e04:	f7ff f8ce 	bl	8000fa4 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7ff f8ca 	bl	8000fa4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e062      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1e:	4b33      	ldr	r3, [pc, #204]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e2a:	e05a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e059      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e30:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d152      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2a      	ldr	r2, [pc, #168]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e48:	4b28      	ldr	r3, [pc, #160]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4a27      	ldr	r2, [pc, #156]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e54:	f7ff f8a6 	bl	8000fa4 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7ff f8a2 	bl	8000fa4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e03a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x734>
 8001e7a:	e032      	b.n	8001ee2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	2b0c      	cmp	r3, #12
 8001e80:	d02d      	beq.n	8001ede <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a19      	ldr	r2, [pc, #100]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001e88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e8c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d105      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	4a13      	ldr	r2, [pc, #76]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001ea0:	f023 0303 	bic.w	r3, r3, #3
 8001ea4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	4a10      	ldr	r2, [pc, #64]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001eac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb6:	f7ff f875 	bl	8000fa4 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7ff f871 	bl	8000fa4 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e009      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_RCC_OscConfig+0x7c4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f0      	bne.n	8001ebe <HAL_RCC_OscConfig+0x796>
 8001edc:	e001      	b.n	8001ee2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3720      	adds	r7, #32
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	f99d808c 	.word	0xf99d808c

08001ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0c8      	b.n	800209a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f08:	4b66      	ldr	r3, [pc, #408]	; (80020a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d910      	bls.n	8001f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f16:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 0207 	bic.w	r2, r3, #7
 8001f1e:	4961      	ldr	r1, [pc, #388]	; (80020a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	4b5f      	ldr	r3, [pc, #380]	; (80020a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0b0      	b.n	800209a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d04c      	beq.n	8001fde <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d107      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4c:	4b56      	ldr	r3, [pc, #344]	; (80020a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d121      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e09e      	b.n	800209a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d107      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f64:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d115      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e092      	b.n	800209a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d107      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f7c:	4b4a      	ldr	r3, [pc, #296]	; (80020a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d109      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e086      	b.n	800209a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f8c:	4b46      	ldr	r3, [pc, #280]	; (80020a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e07e      	b.n	800209a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f9c:	4b42      	ldr	r3, [pc, #264]	; (80020a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f023 0203 	bic.w	r2, r3, #3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	493f      	ldr	r1, [pc, #252]	; (80020a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fae:	f7fe fff9 	bl	8000fa4 <HAL_GetTick>
 8001fb2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb6:	f7fe fff5 	bl	8000fa4 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e066      	b.n	800209a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fcc:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 020c 	and.w	r2, r3, #12
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d1eb      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d008      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fea:	4b2f      	ldr	r3, [pc, #188]	; (80020a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	492c      	ldr	r1, [pc, #176]	; (80020a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d210      	bcs.n	800202c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <HAL_RCC_ClockConfig+0x1b0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 0207 	bic.w	r2, r3, #7
 8002012:	4924      	ldr	r1, [pc, #144]	; (80020a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <HAL_RCC_ClockConfig+0x1b0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e036      	b.n	800209a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002038:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_RCC_ClockConfig+0x1b4>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4918      	ldr	r1, [pc, #96]	; (80020a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4910      	ldr	r1, [pc, #64]	; (80020a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800206a:	f000 f825 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 800206e:	4602      	mov	r2, r0
 8002070:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	490c      	ldr	r1, [pc, #48]	; (80020ac <HAL_RCC_ClockConfig+0x1b8>)
 800207c:	5ccb      	ldrb	r3, [r1, r3]
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	fa22 f303 	lsr.w	r3, r2, r3
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe ff38 	bl	8000f04 <HAL_InitTick>
 8002094:	4603      	mov	r3, r0
 8002096:	72fb      	strb	r3, [r7, #11]

  return status;
 8002098:	7afb      	ldrb	r3, [r7, #11]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40022000 	.word	0x40022000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	08005400 	.word	0x08005400
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000004 	.word	0x20000004

080020b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c6:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d0:	4b3b      	ldr	r3, [pc, #236]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0x34>
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d121      	bne.n	800212a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d11e      	bne.n	800212a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020ec:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d107      	bne.n	8002108 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020f8:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	e005      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002108:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002114:	4a2b      	ldr	r2, [pc, #172]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10d      	bne.n	8002140 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002128:	e00a      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	2b04      	cmp	r3, #4
 800212e:	d102      	bne.n	8002136 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002130:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	e004      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2b08      	cmp	r3, #8
 800213a:	d101      	bne.n	8002140 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800213c:	4b23      	ldr	r3, [pc, #140]	; (80021cc <HAL_RCC_GetSysClockFreq+0x114>)
 800213e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	2b0c      	cmp	r3, #12
 8002144:	d134      	bne.n	80021b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d003      	beq.n	800215e <HAL_RCC_GetSysClockFreq+0xa6>
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2b03      	cmp	r3, #3
 800215a:	d003      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0xac>
 800215c:	e005      	b.n	800216a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800215e:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002160:	617b      	str	r3, [r7, #20]
      break;
 8002162:	e005      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002164:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_RCC_GetSysClockFreq+0x114>)
 8002166:	617b      	str	r3, [r7, #20]
      break;
 8002168:	e002      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	617b      	str	r3, [r7, #20]
      break;
 800216e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002170:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	3301      	adds	r3, #1
 800217c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	fb02 f203 	mul.w	r2, r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	fbb2 f3f3 	udiv	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	0e5b      	lsrs	r3, r3, #25
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	3301      	adds	r3, #1
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021b0:	69bb      	ldr	r3, [r7, #24]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	; 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	08005418 	.word	0x08005418
 80021c8:	00f42400 	.word	0x00f42400
 80021cc:	007a1200 	.word	0x007a1200

080021d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000000 	.word	0x20000000

080021e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021ec:	f7ff fff0 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	4904      	ldr	r1, [pc, #16]	; (8002210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000
 8002210:	08005410 	.word	0x08005410

08002214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002218:	f7ff ffda 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	0adb      	lsrs	r3, r3, #11
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4904      	ldr	r1, [pc, #16]	; (800223c <HAL_RCC_GetPCLK2Freq+0x28>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002234:	4618      	mov	r0, r3
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	08005410 	.word	0x08005410

08002240 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800224c:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002258:	f7ff fa02 	bl	8001660 <HAL_PWREx_GetVoltageRange>
 800225c:	6178      	str	r0, [r7, #20]
 800225e:	e014      	b.n	800228a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002260:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002264:	4a24      	ldr	r2, [pc, #144]	; (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226a:	6593      	str	r3, [r2, #88]	; 0x58
 800226c:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002278:	f7ff f9f2 	bl	8001660 <HAL_PWREx_GetVoltageRange>
 800227c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800227e:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002288:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002290:	d10b      	bne.n	80022aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b80      	cmp	r3, #128	; 0x80
 8002296:	d919      	bls.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2ba0      	cmp	r3, #160	; 0xa0
 800229c:	d902      	bls.n	80022a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800229e:	2302      	movs	r3, #2
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	e013      	b.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022a4:	2301      	movs	r3, #1
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	e010      	b.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b80      	cmp	r3, #128	; 0x80
 80022ae:	d902      	bls.n	80022b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022b0:	2303      	movs	r3, #3
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	e00a      	b.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b80      	cmp	r3, #128	; 0x80
 80022ba:	d102      	bne.n	80022c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022bc:	2302      	movs	r3, #2
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	e004      	b.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b70      	cmp	r3, #112	; 0x70
 80022c6:	d101      	bne.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022c8:	2301      	movs	r3, #1
 80022ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f023 0207 	bic.w	r2, r3, #7
 80022d4:	4909      	ldr	r1, [pc, #36]	; (80022fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d001      	beq.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40022000 	.word	0x40022000

08002300 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002308:	2300      	movs	r3, #0
 800230a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800230c:	2300      	movs	r3, #0
 800230e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002318:	2b00      	cmp	r3, #0
 800231a:	d041      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002320:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002324:	d02a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002326:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800232a:	d824      	bhi.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800232c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002330:	d008      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002332:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002336:	d81e      	bhi.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800233c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002340:	d010      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002342:	e018      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002344:	4b86      	ldr	r3, [pc, #536]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a85      	ldr	r2, [pc, #532]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002350:	e015      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3304      	adds	r3, #4
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fabb 	bl	80028d4 <RCCEx_PLLSAI1_Config>
 800235e:	4603      	mov	r3, r0
 8002360:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002362:	e00c      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3320      	adds	r3, #32
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fba6 	bl	8002abc <RCCEx_PLLSAI2_Config>
 8002370:	4603      	mov	r3, r0
 8002372:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002374:	e003      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	74fb      	strb	r3, [r7, #19]
      break;
 800237a:	e000      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800237c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800237e:	7cfb      	ldrb	r3, [r7, #19]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10b      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002384:	4b76      	ldr	r3, [pc, #472]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002392:	4973      	ldr	r1, [pc, #460]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800239a:	e001      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800239c:	7cfb      	ldrb	r3, [r7, #19]
 800239e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d041      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023b4:	d02a      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023ba:	d824      	bhi.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023c0:	d008      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023c6:	d81e      	bhi.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d0:	d010      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023d2:	e018      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023d4:	4b62      	ldr	r3, [pc, #392]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4a61      	ldr	r2, [pc, #388]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023e0:	e015      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fa73 	bl	80028d4 <RCCEx_PLLSAI1_Config>
 80023ee:	4603      	mov	r3, r0
 80023f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023f2:	e00c      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3320      	adds	r3, #32
 80023f8:	2100      	movs	r1, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 fb5e 	bl	8002abc <RCCEx_PLLSAI2_Config>
 8002400:	4603      	mov	r3, r0
 8002402:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002404:	e003      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	74fb      	strb	r3, [r7, #19]
      break;
 800240a:	e000      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800240c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10b      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002414:	4b52      	ldr	r3, [pc, #328]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002422:	494f      	ldr	r1, [pc, #316]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800242a:	e001      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80a0 	beq.w	800257e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002442:	4b47      	ldr	r3, [pc, #284]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002452:	2300      	movs	r3, #0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00d      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002458:	4b41      	ldr	r3, [pc, #260]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	4a40      	ldr	r2, [pc, #256]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002462:	6593      	str	r3, [r2, #88]	; 0x58
 8002464:	4b3e      	ldr	r3, [pc, #248]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002470:	2301      	movs	r3, #1
 8002472:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002474:	4b3b      	ldr	r3, [pc, #236]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a3a      	ldr	r2, [pc, #232]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800247a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002480:	f7fe fd90 	bl	8000fa4 <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002486:	e009      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002488:	f7fe fd8c 	bl	8000fa4 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d902      	bls.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	74fb      	strb	r3, [r7, #19]
        break;
 800249a:	e005      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800249c:	4b31      	ldr	r3, [pc, #196]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0ef      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d15c      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024ae:	4b2c      	ldr	r3, [pc, #176]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d01f      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d019      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024cc:	4b24      	ldr	r3, [pc, #144]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024d8:	4b21      	ldr	r3, [pc, #132]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024de:	4a20      	ldr	r2, [pc, #128]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024f8:	4a19      	ldr	r2, [pc, #100]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d016      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7fe fd4b 	bl	8000fa4 <HAL_GetTick>
 800250e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002510:	e00b      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002512:	f7fe fd47 	bl	8000fa4 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002520:	4293      	cmp	r3, r2
 8002522:	d902      	bls.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	74fb      	strb	r3, [r7, #19]
            break;
 8002528:	e006      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ec      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10c      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002544:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800254e:	4904      	ldr	r1, [pc, #16]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002556:	e009      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	74bb      	strb	r3, [r7, #18]
 800255c:	e006      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000
 8002564:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002568:	7cfb      	ldrb	r3, [r7, #19]
 800256a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800256c:	7c7b      	ldrb	r3, [r7, #17]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d105      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002572:	4b9e      	ldr	r3, [pc, #632]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	4a9d      	ldr	r2, [pc, #628]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800258a:	4b98      	ldr	r3, [pc, #608]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002590:	f023 0203 	bic.w	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002598:	4994      	ldr	r1, [pc, #592]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025ac:	4b8f      	ldr	r3, [pc, #572]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b2:	f023 020c 	bic.w	r2, r3, #12
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	498c      	ldr	r1, [pc, #560]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ce:	4b87      	ldr	r3, [pc, #540]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	4983      	ldr	r1, [pc, #524]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025f0:	4b7e      	ldr	r3, [pc, #504]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	497b      	ldr	r1, [pc, #492]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002612:	4b76      	ldr	r3, [pc, #472]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002620:	4972      	ldr	r1, [pc, #456]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002634:	4b6d      	ldr	r3, [pc, #436]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	496a      	ldr	r1, [pc, #424]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002656:	4b65      	ldr	r3, [pc, #404]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	4961      	ldr	r1, [pc, #388]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002678:	4b5c      	ldr	r3, [pc, #368]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002686:	4959      	ldr	r1, [pc, #356]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800269a:	4b54      	ldr	r3, [pc, #336]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a8:	4950      	ldr	r1, [pc, #320]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026bc:	4b4b      	ldr	r3, [pc, #300]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ca:	4948      	ldr	r1, [pc, #288]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026de:	4b43      	ldr	r3, [pc, #268]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ec:	493f      	ldr	r1, [pc, #252]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d028      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002700:	4b3a      	ldr	r3, [pc, #232]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800270e:	4937      	ldr	r1, [pc, #220]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800271a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800271e:	d106      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002720:	4b32      	ldr	r3, [pc, #200]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4a31      	ldr	r2, [pc, #196]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800272a:	60d3      	str	r3, [r2, #12]
 800272c:	e011      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002732:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002736:	d10c      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3304      	adds	r3, #4
 800273c:	2101      	movs	r1, #1
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f8c8 	bl	80028d4 <RCCEx_PLLSAI1_Config>
 8002744:	4603      	mov	r3, r0
 8002746:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d028      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800275e:	4b23      	ldr	r3, [pc, #140]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	491f      	ldr	r1, [pc, #124]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800277c:	d106      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800277e:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	4a1a      	ldr	r2, [pc, #104]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002784:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002788:	60d3      	str	r3, [r2, #12]
 800278a:	e011      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002794:	d10c      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3304      	adds	r3, #4
 800279a:	2101      	movs	r1, #1
 800279c:	4618      	mov	r0, r3
 800279e:	f000 f899 	bl	80028d4 <RCCEx_PLLSAI1_Config>
 80027a2:	4603      	mov	r3, r0
 80027a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027a6:	7cfb      	ldrb	r3, [r7, #19]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d02b      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ca:	4908      	ldr	r1, [pc, #32]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027da:	d109      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027dc:	4b03      	ldr	r3, [pc, #12]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a02      	ldr	r2, [pc, #8]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027e6:	60d3      	str	r3, [r2, #12]
 80027e8:	e014      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027f8:	d10c      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2101      	movs	r1, #1
 8002800:	4618      	mov	r0, r3
 8002802:	f000 f867 	bl	80028d4 <RCCEx_PLLSAI1_Config>
 8002806:	4603      	mov	r3, r0
 8002808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800280a:	7cfb      	ldrb	r3, [r7, #19]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d02f      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002820:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800282e:	4928      	ldr	r1, [pc, #160]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800283a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800283e:	d10d      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3304      	adds	r3, #4
 8002844:	2102      	movs	r1, #2
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f844 	bl	80028d4 <RCCEx_PLLSAI1_Config>
 800284c:	4603      	mov	r3, r0
 800284e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002850:	7cfb      	ldrb	r3, [r7, #19]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d014      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002856:	7cfb      	ldrb	r3, [r7, #19]
 8002858:	74bb      	strb	r3, [r7, #18]
 800285a:	e011      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002864:	d10c      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3320      	adds	r3, #32
 800286a:	2102      	movs	r1, #2
 800286c:	4618      	mov	r0, r3
 800286e:	f000 f925 	bl	8002abc <RCCEx_PLLSAI2_Config>
 8002872:	4603      	mov	r3, r0
 8002874:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002876:	7cfb      	ldrb	r3, [r7, #19]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800287c:	7cfb      	ldrb	r3, [r7, #19]
 800287e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800289a:	490d      	ldr	r1, [pc, #52]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028be:	4904      	ldr	r1, [pc, #16]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000

080028d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028e2:	4b75      	ldr	r3, [pc, #468]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d018      	beq.n	8002920 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028ee:	4b72      	ldr	r3, [pc, #456]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0203 	and.w	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d10d      	bne.n	800291a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
       ||
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002906:	4b6c      	ldr	r3, [pc, #432]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
       ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d047      	beq.n	80029aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	e044      	b.n	80029aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b03      	cmp	r3, #3
 8002926:	d018      	beq.n	800295a <RCCEx_PLLSAI1_Config+0x86>
 8002928:	2b03      	cmp	r3, #3
 800292a:	d825      	bhi.n	8002978 <RCCEx_PLLSAI1_Config+0xa4>
 800292c:	2b01      	cmp	r3, #1
 800292e:	d002      	beq.n	8002936 <RCCEx_PLLSAI1_Config+0x62>
 8002930:	2b02      	cmp	r3, #2
 8002932:	d009      	beq.n	8002948 <RCCEx_PLLSAI1_Config+0x74>
 8002934:	e020      	b.n	8002978 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002936:	4b60      	ldr	r3, [pc, #384]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d11d      	bne.n	800297e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002946:	e01a      	b.n	800297e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002948:	4b5b      	ldr	r3, [pc, #364]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	2b00      	cmp	r3, #0
 8002952:	d116      	bne.n	8002982 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002958:	e013      	b.n	8002982 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800295a:	4b57      	ldr	r3, [pc, #348]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10f      	bne.n	8002986 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002966:	4b54      	ldr	r3, [pc, #336]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002976:	e006      	b.n	8002986 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
      break;
 800297c:	e004      	b.n	8002988 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800297e:	bf00      	nop
 8002980:	e002      	b.n	8002988 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002982:	bf00      	nop
 8002984:	e000      	b.n	8002988 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002986:	bf00      	nop
    }

    if(status == HAL_OK)
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10d      	bne.n	80029aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800298e:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6819      	ldr	r1, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	3b01      	subs	r3, #1
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	430b      	orrs	r3, r1
 80029a4:	4944      	ldr	r1, [pc, #272]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d17d      	bne.n	8002aac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029b0:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a40      	ldr	r2, [pc, #256]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029bc:	f7fe faf2 	bl	8000fa4 <HAL_GetTick>
 80029c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029c2:	e009      	b.n	80029d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029c4:	f7fe faee 	bl	8000fa4 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d902      	bls.n	80029d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	73fb      	strb	r3, [r7, #15]
        break;
 80029d6:	e005      	b.n	80029e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029d8:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ef      	bne.n	80029c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d160      	bne.n	8002aac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d111      	bne.n	8002a14 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029f0:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6892      	ldr	r2, [r2, #8]
 8002a00:	0211      	lsls	r1, r2, #8
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68d2      	ldr	r2, [r2, #12]
 8002a06:	0912      	lsrs	r2, r2, #4
 8002a08:	0452      	lsls	r2, r2, #17
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	492a      	ldr	r1, [pc, #168]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	610b      	str	r3, [r1, #16]
 8002a12:	e027      	b.n	8002a64 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d112      	bne.n	8002a40 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a1a:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6892      	ldr	r2, [r2, #8]
 8002a2a:	0211      	lsls	r1, r2, #8
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6912      	ldr	r2, [r2, #16]
 8002a30:	0852      	lsrs	r2, r2, #1
 8002a32:	3a01      	subs	r2, #1
 8002a34:	0552      	lsls	r2, r2, #21
 8002a36:	430a      	orrs	r2, r1
 8002a38:	491f      	ldr	r1, [pc, #124]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	610b      	str	r3, [r1, #16]
 8002a3e:	e011      	b.n	8002a64 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6892      	ldr	r2, [r2, #8]
 8002a50:	0211      	lsls	r1, r2, #8
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6952      	ldr	r2, [r2, #20]
 8002a56:	0852      	lsrs	r2, r2, #1
 8002a58:	3a01      	subs	r2, #1
 8002a5a:	0652      	lsls	r2, r2, #25
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	4916      	ldr	r1, [pc, #88]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a13      	ldr	r2, [pc, #76]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7fe fa98 	bl	8000fa4 <HAL_GetTick>
 8002a74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a76:	e009      	b.n	8002a8c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a78:	f7fe fa94 	bl	8000fa4 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d902      	bls.n	8002a8c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	73fb      	strb	r3, [r7, #15]
          break;
 8002a8a:	e005      	b.n	8002a98 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0ef      	beq.n	8002a78 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	4904      	ldr	r1, [pc, #16]	; (8002ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000

08002abc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aca:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d018      	beq.n	8002b08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ad6:	4b67      	ldr	r3, [pc, #412]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0203 	and.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d10d      	bne.n	8002b02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
       ||
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002aee:	4b61      	ldr	r3, [pc, #388]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
       ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d047      	beq.n	8002b92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
 8002b06:	e044      	b.n	8002b92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d018      	beq.n	8002b42 <RCCEx_PLLSAI2_Config+0x86>
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d825      	bhi.n	8002b60 <RCCEx_PLLSAI2_Config+0xa4>
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d002      	beq.n	8002b1e <RCCEx_PLLSAI2_Config+0x62>
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d009      	beq.n	8002b30 <RCCEx_PLLSAI2_Config+0x74>
 8002b1c:	e020      	b.n	8002b60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b1e:	4b55      	ldr	r3, [pc, #340]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d11d      	bne.n	8002b66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2e:	e01a      	b.n	8002b66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b30:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d116      	bne.n	8002b6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b40:	e013      	b.n	8002b6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b42:	4b4c      	ldr	r3, [pc, #304]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10f      	bne.n	8002b6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b4e:	4b49      	ldr	r3, [pc, #292]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b5e:	e006      	b.n	8002b6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
      break;
 8002b64:	e004      	b.n	8002b70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b66:	bf00      	nop
 8002b68:	e002      	b.n	8002b70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10d      	bne.n	8002b92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b76:	4b3f      	ldr	r3, [pc, #252]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	4939      	ldr	r1, [pc, #228]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d167      	bne.n	8002c68 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b98:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a35      	ldr	r2, [pc, #212]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba4:	f7fe f9fe 	bl	8000fa4 <HAL_GetTick>
 8002ba8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002baa:	e009      	b.n	8002bc0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bac:	f7fe f9fa 	bl	8000fa4 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d902      	bls.n	8002bc0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	73fb      	strb	r3, [r7, #15]
        break;
 8002bbe:	e005      	b.n	8002bcc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bc0:	4b2c      	ldr	r3, [pc, #176]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ef      	bne.n	8002bac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d14a      	bne.n	8002c68 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d111      	bne.n	8002bfc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bd8:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6892      	ldr	r2, [r2, #8]
 8002be8:	0211      	lsls	r1, r2, #8
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68d2      	ldr	r2, [r2, #12]
 8002bee:	0912      	lsrs	r2, r2, #4
 8002bf0:	0452      	lsls	r2, r2, #17
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	491f      	ldr	r1, [pc, #124]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	614b      	str	r3, [r1, #20]
 8002bfa:	e011      	b.n	8002c20 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6892      	ldr	r2, [r2, #8]
 8002c0c:	0211      	lsls	r1, r2, #8
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6912      	ldr	r2, [r2, #16]
 8002c12:	0852      	lsrs	r2, r2, #1
 8002c14:	3a01      	subs	r2, #1
 8002c16:	0652      	lsls	r2, r2, #25
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	4916      	ldr	r1, [pc, #88]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c20:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a13      	ldr	r2, [pc, #76]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7fe f9ba 	bl	8000fa4 <HAL_GetTick>
 8002c30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c32:	e009      	b.n	8002c48 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c34:	f7fe f9b6 	bl	8000fa4 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d902      	bls.n	8002c48 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	73fb      	strb	r3, [r7, #15]
          break;
 8002c46:	e005      	b.n	8002c54 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c48:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0ef      	beq.n	8002c34 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	4904      	ldr	r1, [pc, #16]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000

08002c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e040      	b.n	8002d0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fd ff58 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2224      	movs	r2, #36	; 0x24
 8002ca4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0201 	bic.w	r2, r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fb26 	bl	8003308 <UART_SetConfig>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e022      	b.n	8002d0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fda4 	bl	800381c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fe2b 	bl	8003960 <UART_CheckIdleState>
 8002d0a:	4603      	mov	r3, r0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	; 0x28
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	f040 8082 	bne.w	8002e32 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_UART_Transmit+0x26>
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e07a      	b.n	8002e34 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_UART_Transmit+0x38>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e073      	b.n	8002e34 <HAL_UART_Transmit+0x120>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2221      	movs	r2, #33	; 0x21
 8002d60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d62:	f7fe f91f 	bl	8000fa4 <HAL_GetTick>
 8002d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	88fa      	ldrh	r2, [r7, #6]
 8002d6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	88fa      	ldrh	r2, [r7, #6]
 8002d74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d80:	d108      	bne.n	8002d94 <HAL_UART_Transmit+0x80>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d104      	bne.n	8002d94 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	e003      	b.n	8002d9c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002da4:	e02d      	b.n	8002e02 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2200      	movs	r2, #0
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fe1e 	bl	80039f2 <UART_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e039      	b.n	8002e34 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	881a      	ldrh	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd2:	b292      	uxth	r2, r2
 8002dd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	3302      	adds	r3, #2
 8002dda:	61bb      	str	r3, [r7, #24]
 8002ddc:	e008      	b.n	8002df0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	781a      	ldrb	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	b292      	uxth	r2, r2
 8002de8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3301      	adds	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1cb      	bne.n	8002da6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2200      	movs	r2, #0
 8002e16:	2140      	movs	r1, #64	; 0x40
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 fdea 	bl	80039f2 <UART_WaitOnFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e005      	b.n	8002e34 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e000      	b.n	8002e34 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002e32:	2302      	movs	r3, #2
  }
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3720      	adds	r7, #32
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	4613      	mov	r3, r2
 8002e48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4e:	2b20      	cmp	r3, #32
 8002e50:	d131      	bne.n	8002eb6 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_UART_Receive_IT+0x22>
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e02a      	b.n	8002eb8 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_UART_Receive_IT+0x34>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e023      	b.n	8002eb8 <HAL_UART_Receive_IT+0x7c>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a0f      	ldr	r2, [pc, #60]	; (8002ec0 <HAL_UART_Receive_IT+0x84>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00e      	beq.n	8002ea6 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ea4:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fe1d 	bl	8003aec <UART_Start_Receive_IT>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	e000      	b.n	8002eb8 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
  }
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40008000 	.word	0x40008000

08002ec4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002eea:	4013      	ands	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d113      	bne.n	8002f1c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00e      	beq.n	8002f1c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d009      	beq.n	8002f1c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 81ce 	beq.w	80032ae <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
      }
      return;
 8002f1a:	e1c8      	b.n	80032ae <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80e3 	beq.w	80030ea <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d105      	bne.n	8002f3a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4ba6      	ldr	r3, [pc, #664]	; (80031cc <HAL_UART_IRQHandler+0x308>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 80d8 	beq.w	80030ea <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d010      	beq.n	8002f66 <HAL_UART_IRQHandler+0xa2>
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2201      	movs	r2, #1
 8002f54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5c:	f043 0201 	orr.w	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d010      	beq.n	8002f92 <HAL_UART_IRQHandler+0xce>
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f88:	f043 0204 	orr.w	r2, r3, #4
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d010      	beq.n	8002fbe <HAL_UART_IRQHandler+0xfa>
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00b      	beq.n	8002fbe <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2204      	movs	r2, #4
 8002fac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb4:	f043 0202 	orr.w	r2, r3, #2
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d015      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d104      	bne.n	8002fdc <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00b      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fea:	f043 0208 	orr.w	r2, r3, #8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d011      	beq.n	8003022 <HAL_UART_IRQHandler+0x15e>
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00c      	beq.n	8003022 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003010:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003018:	f043 0220 	orr.w	r2, r3, #32
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8142 	beq.w	80032b2 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00c      	beq.n	8003052 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d007      	beq.n	8003052 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003058:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d004      	beq.n	8003072 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800306e:	2b00      	cmp	r3, #0
 8003070:	d031      	beq.n	80030d6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fdc2 	bl	8003bfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	d123      	bne.n	80030ce <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003094:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	2b00      	cmp	r3, #0
 800309c:	d013      	beq.n	80030c6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	4a4b      	ldr	r2, [pc, #300]	; (80031d0 <HAL_UART_IRQHandler+0x30c>)
 80030a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe f8d5 	bl	800125a <HAL_DMA_Abort_IT>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d017      	beq.n	80030e6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80030c0:	4610      	mov	r0, r2
 80030c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c4:	e00f      	b.n	80030e6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f908 	bl	80032dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030cc:	e00b      	b.n	80030e6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f904 	bl	80032dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d4:	e007      	b.n	80030e6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f900 	bl	80032dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80030e4:	e0e5      	b.n	80032b2 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e6:	bf00      	nop
    return;
 80030e8:	e0e3      	b.n	80032b2 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	f040 80a9 	bne.w	8003246 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 80a3 	beq.w	8003246 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 809d 	beq.w	8003246 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2210      	movs	r2, #16
 8003112:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311e:	2b40      	cmp	r3, #64	; 0x40
 8003120:	d158      	bne.n	80031d4 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800312c:	893b      	ldrh	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 80c1 	beq.w	80032b6 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800313a:	893a      	ldrh	r2, [r7, #8]
 800313c:	429a      	cmp	r2, r3
 800313e:	f080 80ba 	bcs.w	80032b6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	893a      	ldrh	r2, [r7, #8]
 8003146:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d12a      	bne.n	80031b0 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003168:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003188:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0210 	bic.w	r2, r2, #16
 80031a4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fe f817 	bl	80011de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	4619      	mov	r1, r3
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f893 	bl	80032f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80031ca:	e074      	b.n	80032b6 <HAL_UART_IRQHandler+0x3f2>
 80031cc:	04000120 	.word	0x04000120
 80031d0:	08003c5b 	.word	0x08003c5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d063      	beq.n	80032ba <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80031f2:	897b      	ldrh	r3, [r7, #10]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d060      	beq.n	80032ba <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003206:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0210 	bic.w	r2, r2, #16
 8003238:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800323a:	897b      	ldrh	r3, [r7, #10]
 800323c:	4619      	mov	r1, r3
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f856 	bl	80032f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003244:	e039      	b.n	80032ba <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00d      	beq.n	800326c <HAL_UART_IRQHandler+0x3a8>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003262:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 fdff 	bl	8003e68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800326a:	e029      	b.n	80032c0 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00d      	beq.n	8003292 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01a      	beq.n	80032be <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
    }
    return;
 8003290:	e015      	b.n	80032be <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b00      	cmp	r3, #0
 800329a:	d011      	beq.n	80032c0 <HAL_UART_IRQHandler+0x3fc>
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00c      	beq.n	80032c0 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fced 	bl	8003c86 <UART_EndTransmit_IT>
    return;
 80032ac:	e008      	b.n	80032c0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80032ae:	bf00      	nop
 80032b0:	e006      	b.n	80032c0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80032b2:	bf00      	nop
 80032b4:	e004      	b.n	80032c0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80032b6:	bf00      	nop
 80032b8:	e002      	b.n	80032c0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80032ba:	bf00      	nop
 80032bc:	e000      	b.n	80032c0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80032be:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80032c0:	3720      	adds	r7, #32
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop

080032c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003308:	b5b0      	push	{r4, r5, r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	4313      	orrs	r3, r2
 800332a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	4bad      	ldr	r3, [pc, #692]	; (80035e8 <UART_SetConfig+0x2e0>)
 8003334:	4013      	ands	r3, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	69f9      	ldr	r1, [r7, #28]
 800333c:	430b      	orrs	r3, r1
 800333e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4aa2      	ldr	r2, [pc, #648]	; (80035ec <UART_SetConfig+0x2e4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	4313      	orrs	r3, r2
 800336e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	430a      	orrs	r2, r1
 8003382:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a99      	ldr	r2, [pc, #612]	; (80035f0 <UART_SetConfig+0x2e8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d121      	bne.n	80033d2 <UART_SetConfig+0xca>
 800338e:	4b99      	ldr	r3, [pc, #612]	; (80035f4 <UART_SetConfig+0x2ec>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	2b03      	cmp	r3, #3
 800339a:	d817      	bhi.n	80033cc <UART_SetConfig+0xc4>
 800339c:	a201      	add	r2, pc, #4	; (adr r2, 80033a4 <UART_SetConfig+0x9c>)
 800339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a2:	bf00      	nop
 80033a4:	080033b5 	.word	0x080033b5
 80033a8:	080033c1 	.word	0x080033c1
 80033ac:	080033bb 	.word	0x080033bb
 80033b0:	080033c7 	.word	0x080033c7
 80033b4:	2301      	movs	r3, #1
 80033b6:	76fb      	strb	r3, [r7, #27]
 80033b8:	e0e7      	b.n	800358a <UART_SetConfig+0x282>
 80033ba:	2302      	movs	r3, #2
 80033bc:	76fb      	strb	r3, [r7, #27]
 80033be:	e0e4      	b.n	800358a <UART_SetConfig+0x282>
 80033c0:	2304      	movs	r3, #4
 80033c2:	76fb      	strb	r3, [r7, #27]
 80033c4:	e0e1      	b.n	800358a <UART_SetConfig+0x282>
 80033c6:	2308      	movs	r3, #8
 80033c8:	76fb      	strb	r3, [r7, #27]
 80033ca:	e0de      	b.n	800358a <UART_SetConfig+0x282>
 80033cc:	2310      	movs	r3, #16
 80033ce:	76fb      	strb	r3, [r7, #27]
 80033d0:	e0db      	b.n	800358a <UART_SetConfig+0x282>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a88      	ldr	r2, [pc, #544]	; (80035f8 <UART_SetConfig+0x2f0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d132      	bne.n	8003442 <UART_SetConfig+0x13a>
 80033dc:	4b85      	ldr	r3, [pc, #532]	; (80035f4 <UART_SetConfig+0x2ec>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	2b0c      	cmp	r3, #12
 80033e8:	d828      	bhi.n	800343c <UART_SetConfig+0x134>
 80033ea:	a201      	add	r2, pc, #4	; (adr r2, 80033f0 <UART_SetConfig+0xe8>)
 80033ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f0:	08003425 	.word	0x08003425
 80033f4:	0800343d 	.word	0x0800343d
 80033f8:	0800343d 	.word	0x0800343d
 80033fc:	0800343d 	.word	0x0800343d
 8003400:	08003431 	.word	0x08003431
 8003404:	0800343d 	.word	0x0800343d
 8003408:	0800343d 	.word	0x0800343d
 800340c:	0800343d 	.word	0x0800343d
 8003410:	0800342b 	.word	0x0800342b
 8003414:	0800343d 	.word	0x0800343d
 8003418:	0800343d 	.word	0x0800343d
 800341c:	0800343d 	.word	0x0800343d
 8003420:	08003437 	.word	0x08003437
 8003424:	2300      	movs	r3, #0
 8003426:	76fb      	strb	r3, [r7, #27]
 8003428:	e0af      	b.n	800358a <UART_SetConfig+0x282>
 800342a:	2302      	movs	r3, #2
 800342c:	76fb      	strb	r3, [r7, #27]
 800342e:	e0ac      	b.n	800358a <UART_SetConfig+0x282>
 8003430:	2304      	movs	r3, #4
 8003432:	76fb      	strb	r3, [r7, #27]
 8003434:	e0a9      	b.n	800358a <UART_SetConfig+0x282>
 8003436:	2308      	movs	r3, #8
 8003438:	76fb      	strb	r3, [r7, #27]
 800343a:	e0a6      	b.n	800358a <UART_SetConfig+0x282>
 800343c:	2310      	movs	r3, #16
 800343e:	76fb      	strb	r3, [r7, #27]
 8003440:	e0a3      	b.n	800358a <UART_SetConfig+0x282>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a6d      	ldr	r2, [pc, #436]	; (80035fc <UART_SetConfig+0x2f4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d120      	bne.n	800348e <UART_SetConfig+0x186>
 800344c:	4b69      	ldr	r3, [pc, #420]	; (80035f4 <UART_SetConfig+0x2ec>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003456:	2b30      	cmp	r3, #48	; 0x30
 8003458:	d013      	beq.n	8003482 <UART_SetConfig+0x17a>
 800345a:	2b30      	cmp	r3, #48	; 0x30
 800345c:	d814      	bhi.n	8003488 <UART_SetConfig+0x180>
 800345e:	2b20      	cmp	r3, #32
 8003460:	d009      	beq.n	8003476 <UART_SetConfig+0x16e>
 8003462:	2b20      	cmp	r3, #32
 8003464:	d810      	bhi.n	8003488 <UART_SetConfig+0x180>
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <UART_SetConfig+0x168>
 800346a:	2b10      	cmp	r3, #16
 800346c:	d006      	beq.n	800347c <UART_SetConfig+0x174>
 800346e:	e00b      	b.n	8003488 <UART_SetConfig+0x180>
 8003470:	2300      	movs	r3, #0
 8003472:	76fb      	strb	r3, [r7, #27]
 8003474:	e089      	b.n	800358a <UART_SetConfig+0x282>
 8003476:	2302      	movs	r3, #2
 8003478:	76fb      	strb	r3, [r7, #27]
 800347a:	e086      	b.n	800358a <UART_SetConfig+0x282>
 800347c:	2304      	movs	r3, #4
 800347e:	76fb      	strb	r3, [r7, #27]
 8003480:	e083      	b.n	800358a <UART_SetConfig+0x282>
 8003482:	2308      	movs	r3, #8
 8003484:	76fb      	strb	r3, [r7, #27]
 8003486:	e080      	b.n	800358a <UART_SetConfig+0x282>
 8003488:	2310      	movs	r3, #16
 800348a:	76fb      	strb	r3, [r7, #27]
 800348c:	e07d      	b.n	800358a <UART_SetConfig+0x282>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a5b      	ldr	r2, [pc, #364]	; (8003600 <UART_SetConfig+0x2f8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d120      	bne.n	80034da <UART_SetConfig+0x1d2>
 8003498:	4b56      	ldr	r3, [pc, #344]	; (80035f4 <UART_SetConfig+0x2ec>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034a2:	2bc0      	cmp	r3, #192	; 0xc0
 80034a4:	d013      	beq.n	80034ce <UART_SetConfig+0x1c6>
 80034a6:	2bc0      	cmp	r3, #192	; 0xc0
 80034a8:	d814      	bhi.n	80034d4 <UART_SetConfig+0x1cc>
 80034aa:	2b80      	cmp	r3, #128	; 0x80
 80034ac:	d009      	beq.n	80034c2 <UART_SetConfig+0x1ba>
 80034ae:	2b80      	cmp	r3, #128	; 0x80
 80034b0:	d810      	bhi.n	80034d4 <UART_SetConfig+0x1cc>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <UART_SetConfig+0x1b4>
 80034b6:	2b40      	cmp	r3, #64	; 0x40
 80034b8:	d006      	beq.n	80034c8 <UART_SetConfig+0x1c0>
 80034ba:	e00b      	b.n	80034d4 <UART_SetConfig+0x1cc>
 80034bc:	2300      	movs	r3, #0
 80034be:	76fb      	strb	r3, [r7, #27]
 80034c0:	e063      	b.n	800358a <UART_SetConfig+0x282>
 80034c2:	2302      	movs	r3, #2
 80034c4:	76fb      	strb	r3, [r7, #27]
 80034c6:	e060      	b.n	800358a <UART_SetConfig+0x282>
 80034c8:	2304      	movs	r3, #4
 80034ca:	76fb      	strb	r3, [r7, #27]
 80034cc:	e05d      	b.n	800358a <UART_SetConfig+0x282>
 80034ce:	2308      	movs	r3, #8
 80034d0:	76fb      	strb	r3, [r7, #27]
 80034d2:	e05a      	b.n	800358a <UART_SetConfig+0x282>
 80034d4:	2310      	movs	r3, #16
 80034d6:	76fb      	strb	r3, [r7, #27]
 80034d8:	e057      	b.n	800358a <UART_SetConfig+0x282>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a49      	ldr	r2, [pc, #292]	; (8003604 <UART_SetConfig+0x2fc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d125      	bne.n	8003530 <UART_SetConfig+0x228>
 80034e4:	4b43      	ldr	r3, [pc, #268]	; (80035f4 <UART_SetConfig+0x2ec>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034f2:	d017      	beq.n	8003524 <UART_SetConfig+0x21c>
 80034f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034f8:	d817      	bhi.n	800352a <UART_SetConfig+0x222>
 80034fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fe:	d00b      	beq.n	8003518 <UART_SetConfig+0x210>
 8003500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003504:	d811      	bhi.n	800352a <UART_SetConfig+0x222>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <UART_SetConfig+0x20a>
 800350a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800350e:	d006      	beq.n	800351e <UART_SetConfig+0x216>
 8003510:	e00b      	b.n	800352a <UART_SetConfig+0x222>
 8003512:	2300      	movs	r3, #0
 8003514:	76fb      	strb	r3, [r7, #27]
 8003516:	e038      	b.n	800358a <UART_SetConfig+0x282>
 8003518:	2302      	movs	r3, #2
 800351a:	76fb      	strb	r3, [r7, #27]
 800351c:	e035      	b.n	800358a <UART_SetConfig+0x282>
 800351e:	2304      	movs	r3, #4
 8003520:	76fb      	strb	r3, [r7, #27]
 8003522:	e032      	b.n	800358a <UART_SetConfig+0x282>
 8003524:	2308      	movs	r3, #8
 8003526:	76fb      	strb	r3, [r7, #27]
 8003528:	e02f      	b.n	800358a <UART_SetConfig+0x282>
 800352a:	2310      	movs	r3, #16
 800352c:	76fb      	strb	r3, [r7, #27]
 800352e:	e02c      	b.n	800358a <UART_SetConfig+0x282>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a2d      	ldr	r2, [pc, #180]	; (80035ec <UART_SetConfig+0x2e4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d125      	bne.n	8003586 <UART_SetConfig+0x27e>
 800353a:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <UART_SetConfig+0x2ec>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003540:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003548:	d017      	beq.n	800357a <UART_SetConfig+0x272>
 800354a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800354e:	d817      	bhi.n	8003580 <UART_SetConfig+0x278>
 8003550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003554:	d00b      	beq.n	800356e <UART_SetConfig+0x266>
 8003556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800355a:	d811      	bhi.n	8003580 <UART_SetConfig+0x278>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <UART_SetConfig+0x260>
 8003560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003564:	d006      	beq.n	8003574 <UART_SetConfig+0x26c>
 8003566:	e00b      	b.n	8003580 <UART_SetConfig+0x278>
 8003568:	2300      	movs	r3, #0
 800356a:	76fb      	strb	r3, [r7, #27]
 800356c:	e00d      	b.n	800358a <UART_SetConfig+0x282>
 800356e:	2302      	movs	r3, #2
 8003570:	76fb      	strb	r3, [r7, #27]
 8003572:	e00a      	b.n	800358a <UART_SetConfig+0x282>
 8003574:	2304      	movs	r3, #4
 8003576:	76fb      	strb	r3, [r7, #27]
 8003578:	e007      	b.n	800358a <UART_SetConfig+0x282>
 800357a:	2308      	movs	r3, #8
 800357c:	76fb      	strb	r3, [r7, #27]
 800357e:	e004      	b.n	800358a <UART_SetConfig+0x282>
 8003580:	2310      	movs	r3, #16
 8003582:	76fb      	strb	r3, [r7, #27]
 8003584:	e001      	b.n	800358a <UART_SetConfig+0x282>
 8003586:	2310      	movs	r3, #16
 8003588:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a17      	ldr	r2, [pc, #92]	; (80035ec <UART_SetConfig+0x2e4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	f040 8087 	bne.w	80036a4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003596:	7efb      	ldrb	r3, [r7, #27]
 8003598:	2b08      	cmp	r3, #8
 800359a:	d837      	bhi.n	800360c <UART_SetConfig+0x304>
 800359c:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <UART_SetConfig+0x29c>)
 800359e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a2:	bf00      	nop
 80035a4:	080035c9 	.word	0x080035c9
 80035a8:	0800360d 	.word	0x0800360d
 80035ac:	080035d1 	.word	0x080035d1
 80035b0:	0800360d 	.word	0x0800360d
 80035b4:	080035d7 	.word	0x080035d7
 80035b8:	0800360d 	.word	0x0800360d
 80035bc:	0800360d 	.word	0x0800360d
 80035c0:	0800360d 	.word	0x0800360d
 80035c4:	080035df 	.word	0x080035df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035c8:	f7fe fe0e 	bl	80021e8 <HAL_RCC_GetPCLK1Freq>
 80035cc:	6178      	str	r0, [r7, #20]
        break;
 80035ce:	e022      	b.n	8003616 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035d0:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <UART_SetConfig+0x300>)
 80035d2:	617b      	str	r3, [r7, #20]
        break;
 80035d4:	e01f      	b.n	8003616 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035d6:	f7fe fd6f 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 80035da:	6178      	str	r0, [r7, #20]
        break;
 80035dc:	e01b      	b.n	8003616 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035e2:	617b      	str	r3, [r7, #20]
        break;
 80035e4:	e017      	b.n	8003616 <UART_SetConfig+0x30e>
 80035e6:	bf00      	nop
 80035e8:	efff69f3 	.word	0xefff69f3
 80035ec:	40008000 	.word	0x40008000
 80035f0:	40013800 	.word	0x40013800
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40004400 	.word	0x40004400
 80035fc:	40004800 	.word	0x40004800
 8003600:	40004c00 	.word	0x40004c00
 8003604:	40005000 	.word	0x40005000
 8003608:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	76bb      	strb	r3, [r7, #26]
        break;
 8003614:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80f1 	beq.w	8003800 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	429a      	cmp	r2, r3
 800362c:	d305      	bcc.n	800363a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	429a      	cmp	r2, r3
 8003638:	d902      	bls.n	8003640 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	76bb      	strb	r3, [r7, #26]
 800363e:	e0df      	b.n	8003800 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	4618      	mov	r0, r3
 8003644:	f04f 0100 	mov.w	r1, #0
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	020b      	lsls	r3, r1, #8
 8003652:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003656:	0202      	lsls	r2, r0, #8
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	6849      	ldr	r1, [r1, #4]
 800365c:	0849      	lsrs	r1, r1, #1
 800365e:	4608      	mov	r0, r1
 8003660:	f04f 0100 	mov.w	r1, #0
 8003664:	1814      	adds	r4, r2, r0
 8003666:	eb43 0501 	adc.w	r5, r3, r1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	461a      	mov	r2, r3
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	4620      	mov	r0, r4
 8003676:	4629      	mov	r1, r5
 8003678:	f7fc fe12 	bl	80002a0 <__aeabi_uldivmod>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4613      	mov	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800368a:	d308      	bcc.n	800369e <UART_SetConfig+0x396>
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003692:	d204      	bcs.n	800369e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	60da      	str	r2, [r3, #12]
 800369c:	e0b0      	b.n	8003800 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	76bb      	strb	r3, [r7, #26]
 80036a2:	e0ad      	b.n	8003800 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ac:	d15c      	bne.n	8003768 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80036ae:	7efb      	ldrb	r3, [r7, #27]
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d828      	bhi.n	8003706 <UART_SetConfig+0x3fe>
 80036b4:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <UART_SetConfig+0x3b4>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	080036e1 	.word	0x080036e1
 80036c0:	080036e9 	.word	0x080036e9
 80036c4:	080036f1 	.word	0x080036f1
 80036c8:	08003707 	.word	0x08003707
 80036cc:	080036f7 	.word	0x080036f7
 80036d0:	08003707 	.word	0x08003707
 80036d4:	08003707 	.word	0x08003707
 80036d8:	08003707 	.word	0x08003707
 80036dc:	080036ff 	.word	0x080036ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e0:	f7fe fd82 	bl	80021e8 <HAL_RCC_GetPCLK1Freq>
 80036e4:	6178      	str	r0, [r7, #20]
        break;
 80036e6:	e013      	b.n	8003710 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036e8:	f7fe fd94 	bl	8002214 <HAL_RCC_GetPCLK2Freq>
 80036ec:	6178      	str	r0, [r7, #20]
        break;
 80036ee:	e00f      	b.n	8003710 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f0:	4b49      	ldr	r3, [pc, #292]	; (8003818 <UART_SetConfig+0x510>)
 80036f2:	617b      	str	r3, [r7, #20]
        break;
 80036f4:	e00c      	b.n	8003710 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036f6:	f7fe fcdf 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 80036fa:	6178      	str	r0, [r7, #20]
        break;
 80036fc:	e008      	b.n	8003710 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003702:	617b      	str	r3, [r7, #20]
        break;
 8003704:	e004      	b.n	8003710 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	76bb      	strb	r3, [r7, #26]
        break;
 800370e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d074      	beq.n	8003800 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	005a      	lsls	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	441a      	add	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	fbb2 f3f3 	udiv	r3, r2, r3
 800372a:	b29b      	uxth	r3, r3
 800372c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	2b0f      	cmp	r3, #15
 8003732:	d916      	bls.n	8003762 <UART_SetConfig+0x45a>
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373a:	d212      	bcs.n	8003762 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	b29b      	uxth	r3, r3
 8003740:	f023 030f 	bic.w	r3, r3, #15
 8003744:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	b29b      	uxth	r3, r3
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	b29a      	uxth	r2, r3
 8003752:	89fb      	ldrh	r3, [r7, #14]
 8003754:	4313      	orrs	r3, r2
 8003756:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	89fa      	ldrh	r2, [r7, #14]
 800375e:	60da      	str	r2, [r3, #12]
 8003760:	e04e      	b.n	8003800 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	76bb      	strb	r3, [r7, #26]
 8003766:	e04b      	b.n	8003800 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003768:	7efb      	ldrb	r3, [r7, #27]
 800376a:	2b08      	cmp	r3, #8
 800376c:	d827      	bhi.n	80037be <UART_SetConfig+0x4b6>
 800376e:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <UART_SetConfig+0x46c>)
 8003770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003774:	08003799 	.word	0x08003799
 8003778:	080037a1 	.word	0x080037a1
 800377c:	080037a9 	.word	0x080037a9
 8003780:	080037bf 	.word	0x080037bf
 8003784:	080037af 	.word	0x080037af
 8003788:	080037bf 	.word	0x080037bf
 800378c:	080037bf 	.word	0x080037bf
 8003790:	080037bf 	.word	0x080037bf
 8003794:	080037b7 	.word	0x080037b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003798:	f7fe fd26 	bl	80021e8 <HAL_RCC_GetPCLK1Freq>
 800379c:	6178      	str	r0, [r7, #20]
        break;
 800379e:	e013      	b.n	80037c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037a0:	f7fe fd38 	bl	8002214 <HAL_RCC_GetPCLK2Freq>
 80037a4:	6178      	str	r0, [r7, #20]
        break;
 80037a6:	e00f      	b.n	80037c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a8:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <UART_SetConfig+0x510>)
 80037aa:	617b      	str	r3, [r7, #20]
        break;
 80037ac:	e00c      	b.n	80037c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ae:	f7fe fc83 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 80037b2:	6178      	str	r0, [r7, #20]
        break;
 80037b4:	e008      	b.n	80037c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ba:	617b      	str	r3, [r7, #20]
        break;
 80037bc:	e004      	b.n	80037c8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	76bb      	strb	r3, [r7, #26]
        break;
 80037c6:	bf00      	nop
    }

    if (pclk != 0U)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d018      	beq.n	8003800 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	085a      	lsrs	r2, r3, #1
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	441a      	add	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2b0f      	cmp	r3, #15
 80037e8:	d908      	bls.n	80037fc <UART_SetConfig+0x4f4>
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f0:	d204      	bcs.n	80037fc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	60da      	str	r2, [r3, #12]
 80037fa:	e001      	b.n	8003800 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800380c:	7ebb      	ldrb	r3, [r7, #26]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bdb0      	pop	{r4, r5, r7, pc}
 8003816:	bf00      	nop
 8003818:	00f42400 	.word	0x00f42400

0800381c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01a      	beq.n	8003932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800391a:	d10a      	bne.n	8003932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	605a      	str	r2, [r3, #4]
  }
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af02      	add	r7, sp, #8
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003970:	f7fd fb18 	bl	8000fa4 <HAL_GetTick>
 8003974:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b08      	cmp	r3, #8
 8003982:	d10e      	bne.n	80039a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f82d 	bl	80039f2 <UART_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e023      	b.n	80039ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d10e      	bne.n	80039ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f817 	bl	80039f2 <UART_WaitOnFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e00d      	b.n	80039ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	603b      	str	r3, [r7, #0]
 80039fe:	4613      	mov	r3, r2
 8003a00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a02:	e05e      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0a:	d05a      	beq.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0c:	f7fd faca 	bl	8000fa4 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d302      	bcc.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d11b      	bne.n	8003a5a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a30:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0201 	bic.w	r2, r2, #1
 8003a40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e043      	b.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d02c      	beq.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a76:	d124      	bne.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a80:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a90:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0201 	bic.w	r2, r2, #1
 8003aa0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e00f      	b.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4013      	ands	r3, r2
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	bf0c      	ite	eq
 8003ad2:	2301      	moveq	r3, #1
 8003ad4:	2300      	movne	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d091      	beq.n	8003a04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	4613      	mov	r3, r2
 8003af8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	88fa      	ldrh	r2, [r7, #6]
 8003b04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	88fa      	ldrh	r2, [r7, #6]
 8003b0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1e:	d10e      	bne.n	8003b3e <UART_Start_Receive_IT+0x52>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d105      	bne.n	8003b34 <UART_Start_Receive_IT+0x48>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b32:	e02d      	b.n	8003b90 <UART_Start_Receive_IT+0xa4>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	22ff      	movs	r2, #255	; 0xff
 8003b38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b3c:	e028      	b.n	8003b90 <UART_Start_Receive_IT+0xa4>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10d      	bne.n	8003b62 <UART_Start_Receive_IT+0x76>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d104      	bne.n	8003b58 <UART_Start_Receive_IT+0x6c>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	22ff      	movs	r2, #255	; 0xff
 8003b52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b56:	e01b      	b.n	8003b90 <UART_Start_Receive_IT+0xa4>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	227f      	movs	r2, #127	; 0x7f
 8003b5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b60:	e016      	b.n	8003b90 <UART_Start_Receive_IT+0xa4>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b6a:	d10d      	bne.n	8003b88 <UART_Start_Receive_IT+0x9c>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d104      	bne.n	8003b7e <UART_Start_Receive_IT+0x92>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	227f      	movs	r2, #127	; 0x7f
 8003b78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b7c:	e008      	b.n	8003b90 <UART_Start_Receive_IT+0xa4>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	223f      	movs	r2, #63	; 0x3f
 8003b82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b86:	e003      	b.n	8003b90 <UART_Start_Receive_IT+0xa4>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2222      	movs	r2, #34	; 0x22
 8003b9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
 8003bac:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb6:	d107      	bne.n	8003bc8 <UART_Start_Receive_IT+0xdc>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d103      	bne.n	8003bc8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a0c      	ldr	r2, [pc, #48]	; (8003bf4 <UART_Start_Receive_IT+0x108>)
 8003bc4:	665a      	str	r2, [r3, #100]	; 0x64
 8003bc6:	e002      	b.n	8003bce <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4a0b      	ldr	r2, [pc, #44]	; (8003bf8 <UART_Start_Receive_IT+0x10c>)
 8003bcc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003be4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	08003d91 	.word	0x08003d91
 8003bf8:	08003cb9 	.word	0x08003cb9

08003bfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c12:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d107      	bne.n	8003c3c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0210 	bic.w	r2, r2, #16
 8003c3a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7ff fb2f 	bl	80032dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff fb0c 	bl	80032c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003cc6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ccc:	2b22      	cmp	r3, #34	; 0x22
 8003cce:	d151      	bne.n	8003d74 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003cd6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003cd8:	89bb      	ldrh	r3, [r7, #12]
 8003cda:	b2d9      	uxtb	r1, r3
 8003cdc:	89fb      	ldrh	r3, [r7, #14]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d13a      	bne.n	8003d88 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d20:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0201 	bic.w	r2, r2, #1
 8003d30:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d10f      	bne.n	8003d66 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0210 	bic.w	r2, r2, #16
 8003d54:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff fac6 	bl	80032f0 <HAL_UARTEx_RxEventCallback>
 8003d64:	e002      	b.n	8003d6c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fc fe34 	bl	80009d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d72:	e009      	b.n	8003d88 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	8b1b      	ldrh	r3, [r3, #24]
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0208 	orr.w	r2, r2, #8
 8003d84:	b292      	uxth	r2, r2
 8003d86:	831a      	strh	r2, [r3, #24]
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d9e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003da4:	2b22      	cmp	r3, #34	; 0x22
 8003da6:	d151      	bne.n	8003e4c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003dae:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003db6:	89ba      	ldrh	r2, [r7, #12]
 8003db8:	89fb      	ldrh	r3, [r7, #14]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc6:	1c9a      	adds	r2, r3, #2
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d13a      	bne.n	8003e60 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003df8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0201 	bic.w	r2, r2, #1
 8003e08:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d10f      	bne.n	8003e3e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0210 	bic.w	r2, r2, #16
 8003e2c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e34:	4619      	mov	r1, r3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff fa5a 	bl	80032f0 <HAL_UARTEx_RxEventCallback>
 8003e3c:	e002      	b.n	8003e44 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fc fdc8 	bl	80009d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e4a:	e009      	b.n	8003e60 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	8b1b      	ldrh	r3, [r3, #24]
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0208 	orr.w	r2, r2, #8
 8003e5c:	b292      	uxth	r2, r2
 8003e5e:	831a      	strh	r2, [r3, #24]
}
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <__errno>:
 8003e7c:	4b01      	ldr	r3, [pc, #4]	; (8003e84 <__errno+0x8>)
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	2000000c 	.word	0x2000000c

08003e88 <__libc_init_array>:
 8003e88:	b570      	push	{r4, r5, r6, lr}
 8003e8a:	4d0d      	ldr	r5, [pc, #52]	; (8003ec0 <__libc_init_array+0x38>)
 8003e8c:	4c0d      	ldr	r4, [pc, #52]	; (8003ec4 <__libc_init_array+0x3c>)
 8003e8e:	1b64      	subs	r4, r4, r5
 8003e90:	10a4      	asrs	r4, r4, #2
 8003e92:	2600      	movs	r6, #0
 8003e94:	42a6      	cmp	r6, r4
 8003e96:	d109      	bne.n	8003eac <__libc_init_array+0x24>
 8003e98:	4d0b      	ldr	r5, [pc, #44]	; (8003ec8 <__libc_init_array+0x40>)
 8003e9a:	4c0c      	ldr	r4, [pc, #48]	; (8003ecc <__libc_init_array+0x44>)
 8003e9c:	f001 fa2c 	bl	80052f8 <_init>
 8003ea0:	1b64      	subs	r4, r4, r5
 8003ea2:	10a4      	asrs	r4, r4, #2
 8003ea4:	2600      	movs	r6, #0
 8003ea6:	42a6      	cmp	r6, r4
 8003ea8:	d105      	bne.n	8003eb6 <__libc_init_array+0x2e>
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
 8003eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb0:	4798      	blx	r3
 8003eb2:	3601      	adds	r6, #1
 8003eb4:	e7ee      	b.n	8003e94 <__libc_init_array+0xc>
 8003eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eba:	4798      	blx	r3
 8003ebc:	3601      	adds	r6, #1
 8003ebe:	e7f2      	b.n	8003ea6 <__libc_init_array+0x1e>
 8003ec0:	0800559c 	.word	0x0800559c
 8003ec4:	0800559c 	.word	0x0800559c
 8003ec8:	0800559c 	.word	0x0800559c
 8003ecc:	080055a0 	.word	0x080055a0

08003ed0 <memcpy>:
 8003ed0:	440a      	add	r2, r1
 8003ed2:	4291      	cmp	r1, r2
 8003ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ed8:	d100      	bne.n	8003edc <memcpy+0xc>
 8003eda:	4770      	bx	lr
 8003edc:	b510      	push	{r4, lr}
 8003ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ee6:	4291      	cmp	r1, r2
 8003ee8:	d1f9      	bne.n	8003ede <memcpy+0xe>
 8003eea:	bd10      	pop	{r4, pc}

08003eec <memset>:
 8003eec:	4402      	add	r2, r0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d100      	bne.n	8003ef6 <memset+0xa>
 8003ef4:	4770      	bx	lr
 8003ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8003efa:	e7f9      	b.n	8003ef0 <memset+0x4>

08003efc <sniprintf>:
 8003efc:	b40c      	push	{r2, r3}
 8003efe:	b530      	push	{r4, r5, lr}
 8003f00:	4b17      	ldr	r3, [pc, #92]	; (8003f60 <sniprintf+0x64>)
 8003f02:	1e0c      	subs	r4, r1, #0
 8003f04:	681d      	ldr	r5, [r3, #0]
 8003f06:	b09d      	sub	sp, #116	; 0x74
 8003f08:	da08      	bge.n	8003f1c <sniprintf+0x20>
 8003f0a:	238b      	movs	r3, #139	; 0x8b
 8003f0c:	602b      	str	r3, [r5, #0]
 8003f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f12:	b01d      	add	sp, #116	; 0x74
 8003f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f18:	b002      	add	sp, #8
 8003f1a:	4770      	bx	lr
 8003f1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003f20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003f24:	bf14      	ite	ne
 8003f26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003f2a:	4623      	moveq	r3, r4
 8003f2c:	9304      	str	r3, [sp, #16]
 8003f2e:	9307      	str	r3, [sp, #28]
 8003f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f34:	9002      	str	r0, [sp, #8]
 8003f36:	9006      	str	r0, [sp, #24]
 8003f38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f3e:	ab21      	add	r3, sp, #132	; 0x84
 8003f40:	a902      	add	r1, sp, #8
 8003f42:	4628      	mov	r0, r5
 8003f44:	9301      	str	r3, [sp, #4]
 8003f46:	f000 f9af 	bl	80042a8 <_svfiprintf_r>
 8003f4a:	1c43      	adds	r3, r0, #1
 8003f4c:	bfbc      	itt	lt
 8003f4e:	238b      	movlt	r3, #139	; 0x8b
 8003f50:	602b      	strlt	r3, [r5, #0]
 8003f52:	2c00      	cmp	r4, #0
 8003f54:	d0dd      	beq.n	8003f12 <sniprintf+0x16>
 8003f56:	9b02      	ldr	r3, [sp, #8]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
 8003f5c:	e7d9      	b.n	8003f12 <sniprintf+0x16>
 8003f5e:	bf00      	nop
 8003f60:	2000000c 	.word	0x2000000c

08003f64 <strcpy>:
 8003f64:	4603      	mov	r3, r0
 8003f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f6a:	f803 2b01 	strb.w	r2, [r3], #1
 8003f6e:	2a00      	cmp	r2, #0
 8003f70:	d1f9      	bne.n	8003f66 <strcpy+0x2>
 8003f72:	4770      	bx	lr

08003f74 <strtok>:
 8003f74:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <strtok+0x5c>)
 8003f76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f78:	681e      	ldr	r6, [r3, #0]
 8003f7a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003f7c:	4605      	mov	r5, r0
 8003f7e:	b9fc      	cbnz	r4, 8003fc0 <strtok+0x4c>
 8003f80:	2050      	movs	r0, #80	; 0x50
 8003f82:	9101      	str	r1, [sp, #4]
 8003f84:	f000 f882 	bl	800408c <malloc>
 8003f88:	9901      	ldr	r1, [sp, #4]
 8003f8a:	65b0      	str	r0, [r6, #88]	; 0x58
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	b920      	cbnz	r0, 8003f9a <strtok+0x26>
 8003f90:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <strtok+0x60>)
 8003f92:	4811      	ldr	r0, [pc, #68]	; (8003fd8 <strtok+0x64>)
 8003f94:	2157      	movs	r1, #87	; 0x57
 8003f96:	f000 f849 	bl	800402c <__assert_func>
 8003f9a:	e9c0 4400 	strd	r4, r4, [r0]
 8003f9e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003fa2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003fa6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003faa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003fae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003fb2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003fb6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003fba:	6184      	str	r4, [r0, #24]
 8003fbc:	7704      	strb	r4, [r0, #28]
 8003fbe:	6244      	str	r4, [r0, #36]	; 0x24
 8003fc0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	b002      	add	sp, #8
 8003fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003fcc:	f000 b806 	b.w	8003fdc <__strtok_r>
 8003fd0:	2000000c 	.word	0x2000000c
 8003fd4:	0800544c 	.word	0x0800544c
 8003fd8:	08005463 	.word	0x08005463

08003fdc <__strtok_r>:
 8003fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fde:	b908      	cbnz	r0, 8003fe4 <__strtok_r+0x8>
 8003fe0:	6810      	ldr	r0, [r2, #0]
 8003fe2:	b188      	cbz	r0, 8004008 <__strtok_r+0x2c>
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003fec:	460f      	mov	r7, r1
 8003fee:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003ff2:	b91e      	cbnz	r6, 8003ffc <__strtok_r+0x20>
 8003ff4:	b965      	cbnz	r5, 8004010 <__strtok_r+0x34>
 8003ff6:	6015      	str	r5, [r2, #0]
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	e005      	b.n	8004008 <__strtok_r+0x2c>
 8003ffc:	42b5      	cmp	r5, r6
 8003ffe:	d1f6      	bne.n	8003fee <__strtok_r+0x12>
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f0      	bne.n	8003fe6 <__strtok_r+0xa>
 8004004:	6014      	str	r4, [r2, #0]
 8004006:	7003      	strb	r3, [r0, #0]
 8004008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800400a:	461c      	mov	r4, r3
 800400c:	e00c      	b.n	8004028 <__strtok_r+0x4c>
 800400e:	b915      	cbnz	r5, 8004016 <__strtok_r+0x3a>
 8004010:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004014:	460e      	mov	r6, r1
 8004016:	f816 5b01 	ldrb.w	r5, [r6], #1
 800401a:	42ab      	cmp	r3, r5
 800401c:	d1f7      	bne.n	800400e <__strtok_r+0x32>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f3      	beq.n	800400a <__strtok_r+0x2e>
 8004022:	2300      	movs	r3, #0
 8004024:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004028:	6014      	str	r4, [r2, #0]
 800402a:	e7ed      	b.n	8004008 <__strtok_r+0x2c>

0800402c <__assert_func>:
 800402c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800402e:	4614      	mov	r4, r2
 8004030:	461a      	mov	r2, r3
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <__assert_func+0x2c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4605      	mov	r5, r0
 8004038:	68d8      	ldr	r0, [r3, #12]
 800403a:	b14c      	cbz	r4, 8004050 <__assert_func+0x24>
 800403c:	4b07      	ldr	r3, [pc, #28]	; (800405c <__assert_func+0x30>)
 800403e:	9100      	str	r1, [sp, #0]
 8004040:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004044:	4906      	ldr	r1, [pc, #24]	; (8004060 <__assert_func+0x34>)
 8004046:	462b      	mov	r3, r5
 8004048:	f000 f80e 	bl	8004068 <fiprintf>
 800404c:	f000 fdea 	bl	8004c24 <abort>
 8004050:	4b04      	ldr	r3, [pc, #16]	; (8004064 <__assert_func+0x38>)
 8004052:	461c      	mov	r4, r3
 8004054:	e7f3      	b.n	800403e <__assert_func+0x12>
 8004056:	bf00      	nop
 8004058:	2000000c 	.word	0x2000000c
 800405c:	080054c4 	.word	0x080054c4
 8004060:	080054d1 	.word	0x080054d1
 8004064:	080054ff 	.word	0x080054ff

08004068 <fiprintf>:
 8004068:	b40e      	push	{r1, r2, r3}
 800406a:	b503      	push	{r0, r1, lr}
 800406c:	4601      	mov	r1, r0
 800406e:	ab03      	add	r3, sp, #12
 8004070:	4805      	ldr	r0, [pc, #20]	; (8004088 <fiprintf+0x20>)
 8004072:	f853 2b04 	ldr.w	r2, [r3], #4
 8004076:	6800      	ldr	r0, [r0, #0]
 8004078:	9301      	str	r3, [sp, #4]
 800407a:	f000 fa3f 	bl	80044fc <_vfiprintf_r>
 800407e:	b002      	add	sp, #8
 8004080:	f85d eb04 	ldr.w	lr, [sp], #4
 8004084:	b003      	add	sp, #12
 8004086:	4770      	bx	lr
 8004088:	2000000c 	.word	0x2000000c

0800408c <malloc>:
 800408c:	4b02      	ldr	r3, [pc, #8]	; (8004098 <malloc+0xc>)
 800408e:	4601      	mov	r1, r0
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	f000 b853 	b.w	800413c <_malloc_r>
 8004096:	bf00      	nop
 8004098:	2000000c 	.word	0x2000000c

0800409c <_free_r>:
 800409c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800409e:	2900      	cmp	r1, #0
 80040a0:	d048      	beq.n	8004134 <_free_r+0x98>
 80040a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040a6:	9001      	str	r0, [sp, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f1a1 0404 	sub.w	r4, r1, #4
 80040ae:	bfb8      	it	lt
 80040b0:	18e4      	addlt	r4, r4, r3
 80040b2:	f000 fff7 	bl	80050a4 <__malloc_lock>
 80040b6:	4a20      	ldr	r2, [pc, #128]	; (8004138 <_free_r+0x9c>)
 80040b8:	9801      	ldr	r0, [sp, #4]
 80040ba:	6813      	ldr	r3, [r2, #0]
 80040bc:	4615      	mov	r5, r2
 80040be:	b933      	cbnz	r3, 80040ce <_free_r+0x32>
 80040c0:	6063      	str	r3, [r4, #4]
 80040c2:	6014      	str	r4, [r2, #0]
 80040c4:	b003      	add	sp, #12
 80040c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040ca:	f000 bff1 	b.w	80050b0 <__malloc_unlock>
 80040ce:	42a3      	cmp	r3, r4
 80040d0:	d90b      	bls.n	80040ea <_free_r+0x4e>
 80040d2:	6821      	ldr	r1, [r4, #0]
 80040d4:	1862      	adds	r2, r4, r1
 80040d6:	4293      	cmp	r3, r2
 80040d8:	bf04      	itt	eq
 80040da:	681a      	ldreq	r2, [r3, #0]
 80040dc:	685b      	ldreq	r3, [r3, #4]
 80040de:	6063      	str	r3, [r4, #4]
 80040e0:	bf04      	itt	eq
 80040e2:	1852      	addeq	r2, r2, r1
 80040e4:	6022      	streq	r2, [r4, #0]
 80040e6:	602c      	str	r4, [r5, #0]
 80040e8:	e7ec      	b.n	80040c4 <_free_r+0x28>
 80040ea:	461a      	mov	r2, r3
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	b10b      	cbz	r3, 80040f4 <_free_r+0x58>
 80040f0:	42a3      	cmp	r3, r4
 80040f2:	d9fa      	bls.n	80040ea <_free_r+0x4e>
 80040f4:	6811      	ldr	r1, [r2, #0]
 80040f6:	1855      	adds	r5, r2, r1
 80040f8:	42a5      	cmp	r5, r4
 80040fa:	d10b      	bne.n	8004114 <_free_r+0x78>
 80040fc:	6824      	ldr	r4, [r4, #0]
 80040fe:	4421      	add	r1, r4
 8004100:	1854      	adds	r4, r2, r1
 8004102:	42a3      	cmp	r3, r4
 8004104:	6011      	str	r1, [r2, #0]
 8004106:	d1dd      	bne.n	80040c4 <_free_r+0x28>
 8004108:	681c      	ldr	r4, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	6053      	str	r3, [r2, #4]
 800410e:	4421      	add	r1, r4
 8004110:	6011      	str	r1, [r2, #0]
 8004112:	e7d7      	b.n	80040c4 <_free_r+0x28>
 8004114:	d902      	bls.n	800411c <_free_r+0x80>
 8004116:	230c      	movs	r3, #12
 8004118:	6003      	str	r3, [r0, #0]
 800411a:	e7d3      	b.n	80040c4 <_free_r+0x28>
 800411c:	6825      	ldr	r5, [r4, #0]
 800411e:	1961      	adds	r1, r4, r5
 8004120:	428b      	cmp	r3, r1
 8004122:	bf04      	itt	eq
 8004124:	6819      	ldreq	r1, [r3, #0]
 8004126:	685b      	ldreq	r3, [r3, #4]
 8004128:	6063      	str	r3, [r4, #4]
 800412a:	bf04      	itt	eq
 800412c:	1949      	addeq	r1, r1, r5
 800412e:	6021      	streq	r1, [r4, #0]
 8004130:	6054      	str	r4, [r2, #4]
 8004132:	e7c7      	b.n	80040c4 <_free_r+0x28>
 8004134:	b003      	add	sp, #12
 8004136:	bd30      	pop	{r4, r5, pc}
 8004138:	200000f8 	.word	0x200000f8

0800413c <_malloc_r>:
 800413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413e:	1ccd      	adds	r5, r1, #3
 8004140:	f025 0503 	bic.w	r5, r5, #3
 8004144:	3508      	adds	r5, #8
 8004146:	2d0c      	cmp	r5, #12
 8004148:	bf38      	it	cc
 800414a:	250c      	movcc	r5, #12
 800414c:	2d00      	cmp	r5, #0
 800414e:	4606      	mov	r6, r0
 8004150:	db01      	blt.n	8004156 <_malloc_r+0x1a>
 8004152:	42a9      	cmp	r1, r5
 8004154:	d903      	bls.n	800415e <_malloc_r+0x22>
 8004156:	230c      	movs	r3, #12
 8004158:	6033      	str	r3, [r6, #0]
 800415a:	2000      	movs	r0, #0
 800415c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800415e:	f000 ffa1 	bl	80050a4 <__malloc_lock>
 8004162:	4921      	ldr	r1, [pc, #132]	; (80041e8 <_malloc_r+0xac>)
 8004164:	680a      	ldr	r2, [r1, #0]
 8004166:	4614      	mov	r4, r2
 8004168:	b99c      	cbnz	r4, 8004192 <_malloc_r+0x56>
 800416a:	4f20      	ldr	r7, [pc, #128]	; (80041ec <_malloc_r+0xb0>)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	b923      	cbnz	r3, 800417a <_malloc_r+0x3e>
 8004170:	4621      	mov	r1, r4
 8004172:	4630      	mov	r0, r6
 8004174:	f000 fc86 	bl	8004a84 <_sbrk_r>
 8004178:	6038      	str	r0, [r7, #0]
 800417a:	4629      	mov	r1, r5
 800417c:	4630      	mov	r0, r6
 800417e:	f000 fc81 	bl	8004a84 <_sbrk_r>
 8004182:	1c43      	adds	r3, r0, #1
 8004184:	d123      	bne.n	80041ce <_malloc_r+0x92>
 8004186:	230c      	movs	r3, #12
 8004188:	6033      	str	r3, [r6, #0]
 800418a:	4630      	mov	r0, r6
 800418c:	f000 ff90 	bl	80050b0 <__malloc_unlock>
 8004190:	e7e3      	b.n	800415a <_malloc_r+0x1e>
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	1b5b      	subs	r3, r3, r5
 8004196:	d417      	bmi.n	80041c8 <_malloc_r+0x8c>
 8004198:	2b0b      	cmp	r3, #11
 800419a:	d903      	bls.n	80041a4 <_malloc_r+0x68>
 800419c:	6023      	str	r3, [r4, #0]
 800419e:	441c      	add	r4, r3
 80041a0:	6025      	str	r5, [r4, #0]
 80041a2:	e004      	b.n	80041ae <_malloc_r+0x72>
 80041a4:	6863      	ldr	r3, [r4, #4]
 80041a6:	42a2      	cmp	r2, r4
 80041a8:	bf0c      	ite	eq
 80041aa:	600b      	streq	r3, [r1, #0]
 80041ac:	6053      	strne	r3, [r2, #4]
 80041ae:	4630      	mov	r0, r6
 80041b0:	f000 ff7e 	bl	80050b0 <__malloc_unlock>
 80041b4:	f104 000b 	add.w	r0, r4, #11
 80041b8:	1d23      	adds	r3, r4, #4
 80041ba:	f020 0007 	bic.w	r0, r0, #7
 80041be:	1ac2      	subs	r2, r0, r3
 80041c0:	d0cc      	beq.n	800415c <_malloc_r+0x20>
 80041c2:	1a1b      	subs	r3, r3, r0
 80041c4:	50a3      	str	r3, [r4, r2]
 80041c6:	e7c9      	b.n	800415c <_malloc_r+0x20>
 80041c8:	4622      	mov	r2, r4
 80041ca:	6864      	ldr	r4, [r4, #4]
 80041cc:	e7cc      	b.n	8004168 <_malloc_r+0x2c>
 80041ce:	1cc4      	adds	r4, r0, #3
 80041d0:	f024 0403 	bic.w	r4, r4, #3
 80041d4:	42a0      	cmp	r0, r4
 80041d6:	d0e3      	beq.n	80041a0 <_malloc_r+0x64>
 80041d8:	1a21      	subs	r1, r4, r0
 80041da:	4630      	mov	r0, r6
 80041dc:	f000 fc52 	bl	8004a84 <_sbrk_r>
 80041e0:	3001      	adds	r0, #1
 80041e2:	d1dd      	bne.n	80041a0 <_malloc_r+0x64>
 80041e4:	e7cf      	b.n	8004186 <_malloc_r+0x4a>
 80041e6:	bf00      	nop
 80041e8:	200000f8 	.word	0x200000f8
 80041ec:	200000fc 	.word	0x200000fc

080041f0 <__ssputs_r>:
 80041f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f4:	688e      	ldr	r6, [r1, #8]
 80041f6:	429e      	cmp	r6, r3
 80041f8:	4682      	mov	sl, r0
 80041fa:	460c      	mov	r4, r1
 80041fc:	4690      	mov	r8, r2
 80041fe:	461f      	mov	r7, r3
 8004200:	d838      	bhi.n	8004274 <__ssputs_r+0x84>
 8004202:	898a      	ldrh	r2, [r1, #12]
 8004204:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004208:	d032      	beq.n	8004270 <__ssputs_r+0x80>
 800420a:	6825      	ldr	r5, [r4, #0]
 800420c:	6909      	ldr	r1, [r1, #16]
 800420e:	eba5 0901 	sub.w	r9, r5, r1
 8004212:	6965      	ldr	r5, [r4, #20]
 8004214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004218:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800421c:	3301      	adds	r3, #1
 800421e:	444b      	add	r3, r9
 8004220:	106d      	asrs	r5, r5, #1
 8004222:	429d      	cmp	r5, r3
 8004224:	bf38      	it	cc
 8004226:	461d      	movcc	r5, r3
 8004228:	0553      	lsls	r3, r2, #21
 800422a:	d531      	bpl.n	8004290 <__ssputs_r+0xa0>
 800422c:	4629      	mov	r1, r5
 800422e:	f7ff ff85 	bl	800413c <_malloc_r>
 8004232:	4606      	mov	r6, r0
 8004234:	b950      	cbnz	r0, 800424c <__ssputs_r+0x5c>
 8004236:	230c      	movs	r3, #12
 8004238:	f8ca 3000 	str.w	r3, [sl]
 800423c:	89a3      	ldrh	r3, [r4, #12]
 800423e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004242:	81a3      	strh	r3, [r4, #12]
 8004244:	f04f 30ff 	mov.w	r0, #4294967295
 8004248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800424c:	6921      	ldr	r1, [r4, #16]
 800424e:	464a      	mov	r2, r9
 8004250:	f7ff fe3e 	bl	8003ed0 <memcpy>
 8004254:	89a3      	ldrh	r3, [r4, #12]
 8004256:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800425a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425e:	81a3      	strh	r3, [r4, #12]
 8004260:	6126      	str	r6, [r4, #16]
 8004262:	6165      	str	r5, [r4, #20]
 8004264:	444e      	add	r6, r9
 8004266:	eba5 0509 	sub.w	r5, r5, r9
 800426a:	6026      	str	r6, [r4, #0]
 800426c:	60a5      	str	r5, [r4, #8]
 800426e:	463e      	mov	r6, r7
 8004270:	42be      	cmp	r6, r7
 8004272:	d900      	bls.n	8004276 <__ssputs_r+0x86>
 8004274:	463e      	mov	r6, r7
 8004276:	4632      	mov	r2, r6
 8004278:	6820      	ldr	r0, [r4, #0]
 800427a:	4641      	mov	r1, r8
 800427c:	f000 fef8 	bl	8005070 <memmove>
 8004280:	68a3      	ldr	r3, [r4, #8]
 8004282:	6822      	ldr	r2, [r4, #0]
 8004284:	1b9b      	subs	r3, r3, r6
 8004286:	4432      	add	r2, r6
 8004288:	60a3      	str	r3, [r4, #8]
 800428a:	6022      	str	r2, [r4, #0]
 800428c:	2000      	movs	r0, #0
 800428e:	e7db      	b.n	8004248 <__ssputs_r+0x58>
 8004290:	462a      	mov	r2, r5
 8004292:	f000 ff13 	bl	80050bc <_realloc_r>
 8004296:	4606      	mov	r6, r0
 8004298:	2800      	cmp	r0, #0
 800429a:	d1e1      	bne.n	8004260 <__ssputs_r+0x70>
 800429c:	6921      	ldr	r1, [r4, #16]
 800429e:	4650      	mov	r0, sl
 80042a0:	f7ff fefc 	bl	800409c <_free_r>
 80042a4:	e7c7      	b.n	8004236 <__ssputs_r+0x46>
	...

080042a8 <_svfiprintf_r>:
 80042a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ac:	4698      	mov	r8, r3
 80042ae:	898b      	ldrh	r3, [r1, #12]
 80042b0:	061b      	lsls	r3, r3, #24
 80042b2:	b09d      	sub	sp, #116	; 0x74
 80042b4:	4607      	mov	r7, r0
 80042b6:	460d      	mov	r5, r1
 80042b8:	4614      	mov	r4, r2
 80042ba:	d50e      	bpl.n	80042da <_svfiprintf_r+0x32>
 80042bc:	690b      	ldr	r3, [r1, #16]
 80042be:	b963      	cbnz	r3, 80042da <_svfiprintf_r+0x32>
 80042c0:	2140      	movs	r1, #64	; 0x40
 80042c2:	f7ff ff3b 	bl	800413c <_malloc_r>
 80042c6:	6028      	str	r0, [r5, #0]
 80042c8:	6128      	str	r0, [r5, #16]
 80042ca:	b920      	cbnz	r0, 80042d6 <_svfiprintf_r+0x2e>
 80042cc:	230c      	movs	r3, #12
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	e0d1      	b.n	800447a <_svfiprintf_r+0x1d2>
 80042d6:	2340      	movs	r3, #64	; 0x40
 80042d8:	616b      	str	r3, [r5, #20]
 80042da:	2300      	movs	r3, #0
 80042dc:	9309      	str	r3, [sp, #36]	; 0x24
 80042de:	2320      	movs	r3, #32
 80042e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80042e8:	2330      	movs	r3, #48	; 0x30
 80042ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004494 <_svfiprintf_r+0x1ec>
 80042ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042f2:	f04f 0901 	mov.w	r9, #1
 80042f6:	4623      	mov	r3, r4
 80042f8:	469a      	mov	sl, r3
 80042fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042fe:	b10a      	cbz	r2, 8004304 <_svfiprintf_r+0x5c>
 8004300:	2a25      	cmp	r2, #37	; 0x25
 8004302:	d1f9      	bne.n	80042f8 <_svfiprintf_r+0x50>
 8004304:	ebba 0b04 	subs.w	fp, sl, r4
 8004308:	d00b      	beq.n	8004322 <_svfiprintf_r+0x7a>
 800430a:	465b      	mov	r3, fp
 800430c:	4622      	mov	r2, r4
 800430e:	4629      	mov	r1, r5
 8004310:	4638      	mov	r0, r7
 8004312:	f7ff ff6d 	bl	80041f0 <__ssputs_r>
 8004316:	3001      	adds	r0, #1
 8004318:	f000 80aa 	beq.w	8004470 <_svfiprintf_r+0x1c8>
 800431c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800431e:	445a      	add	r2, fp
 8004320:	9209      	str	r2, [sp, #36]	; 0x24
 8004322:	f89a 3000 	ldrb.w	r3, [sl]
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 80a2 	beq.w	8004470 <_svfiprintf_r+0x1c8>
 800432c:	2300      	movs	r3, #0
 800432e:	f04f 32ff 	mov.w	r2, #4294967295
 8004332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004336:	f10a 0a01 	add.w	sl, sl, #1
 800433a:	9304      	str	r3, [sp, #16]
 800433c:	9307      	str	r3, [sp, #28]
 800433e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004342:	931a      	str	r3, [sp, #104]	; 0x68
 8004344:	4654      	mov	r4, sl
 8004346:	2205      	movs	r2, #5
 8004348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800434c:	4851      	ldr	r0, [pc, #324]	; (8004494 <_svfiprintf_r+0x1ec>)
 800434e:	f7fb ff57 	bl	8000200 <memchr>
 8004352:	9a04      	ldr	r2, [sp, #16]
 8004354:	b9d8      	cbnz	r0, 800438e <_svfiprintf_r+0xe6>
 8004356:	06d0      	lsls	r0, r2, #27
 8004358:	bf44      	itt	mi
 800435a:	2320      	movmi	r3, #32
 800435c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004360:	0711      	lsls	r1, r2, #28
 8004362:	bf44      	itt	mi
 8004364:	232b      	movmi	r3, #43	; 0x2b
 8004366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800436a:	f89a 3000 	ldrb.w	r3, [sl]
 800436e:	2b2a      	cmp	r3, #42	; 0x2a
 8004370:	d015      	beq.n	800439e <_svfiprintf_r+0xf6>
 8004372:	9a07      	ldr	r2, [sp, #28]
 8004374:	4654      	mov	r4, sl
 8004376:	2000      	movs	r0, #0
 8004378:	f04f 0c0a 	mov.w	ip, #10
 800437c:	4621      	mov	r1, r4
 800437e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004382:	3b30      	subs	r3, #48	; 0x30
 8004384:	2b09      	cmp	r3, #9
 8004386:	d94e      	bls.n	8004426 <_svfiprintf_r+0x17e>
 8004388:	b1b0      	cbz	r0, 80043b8 <_svfiprintf_r+0x110>
 800438a:	9207      	str	r2, [sp, #28]
 800438c:	e014      	b.n	80043b8 <_svfiprintf_r+0x110>
 800438e:	eba0 0308 	sub.w	r3, r0, r8
 8004392:	fa09 f303 	lsl.w	r3, r9, r3
 8004396:	4313      	orrs	r3, r2
 8004398:	9304      	str	r3, [sp, #16]
 800439a:	46a2      	mov	sl, r4
 800439c:	e7d2      	b.n	8004344 <_svfiprintf_r+0x9c>
 800439e:	9b03      	ldr	r3, [sp, #12]
 80043a0:	1d19      	adds	r1, r3, #4
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	9103      	str	r1, [sp, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	bfbb      	ittet	lt
 80043aa:	425b      	neglt	r3, r3
 80043ac:	f042 0202 	orrlt.w	r2, r2, #2
 80043b0:	9307      	strge	r3, [sp, #28]
 80043b2:	9307      	strlt	r3, [sp, #28]
 80043b4:	bfb8      	it	lt
 80043b6:	9204      	strlt	r2, [sp, #16]
 80043b8:	7823      	ldrb	r3, [r4, #0]
 80043ba:	2b2e      	cmp	r3, #46	; 0x2e
 80043bc:	d10c      	bne.n	80043d8 <_svfiprintf_r+0x130>
 80043be:	7863      	ldrb	r3, [r4, #1]
 80043c0:	2b2a      	cmp	r3, #42	; 0x2a
 80043c2:	d135      	bne.n	8004430 <_svfiprintf_r+0x188>
 80043c4:	9b03      	ldr	r3, [sp, #12]
 80043c6:	1d1a      	adds	r2, r3, #4
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	9203      	str	r2, [sp, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bfb8      	it	lt
 80043d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80043d4:	3402      	adds	r4, #2
 80043d6:	9305      	str	r3, [sp, #20]
 80043d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044a4 <_svfiprintf_r+0x1fc>
 80043dc:	7821      	ldrb	r1, [r4, #0]
 80043de:	2203      	movs	r2, #3
 80043e0:	4650      	mov	r0, sl
 80043e2:	f7fb ff0d 	bl	8000200 <memchr>
 80043e6:	b140      	cbz	r0, 80043fa <_svfiprintf_r+0x152>
 80043e8:	2340      	movs	r3, #64	; 0x40
 80043ea:	eba0 000a 	sub.w	r0, r0, sl
 80043ee:	fa03 f000 	lsl.w	r0, r3, r0
 80043f2:	9b04      	ldr	r3, [sp, #16]
 80043f4:	4303      	orrs	r3, r0
 80043f6:	3401      	adds	r4, #1
 80043f8:	9304      	str	r3, [sp, #16]
 80043fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043fe:	4826      	ldr	r0, [pc, #152]	; (8004498 <_svfiprintf_r+0x1f0>)
 8004400:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004404:	2206      	movs	r2, #6
 8004406:	f7fb fefb 	bl	8000200 <memchr>
 800440a:	2800      	cmp	r0, #0
 800440c:	d038      	beq.n	8004480 <_svfiprintf_r+0x1d8>
 800440e:	4b23      	ldr	r3, [pc, #140]	; (800449c <_svfiprintf_r+0x1f4>)
 8004410:	bb1b      	cbnz	r3, 800445a <_svfiprintf_r+0x1b2>
 8004412:	9b03      	ldr	r3, [sp, #12]
 8004414:	3307      	adds	r3, #7
 8004416:	f023 0307 	bic.w	r3, r3, #7
 800441a:	3308      	adds	r3, #8
 800441c:	9303      	str	r3, [sp, #12]
 800441e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004420:	4433      	add	r3, r6
 8004422:	9309      	str	r3, [sp, #36]	; 0x24
 8004424:	e767      	b.n	80042f6 <_svfiprintf_r+0x4e>
 8004426:	fb0c 3202 	mla	r2, ip, r2, r3
 800442a:	460c      	mov	r4, r1
 800442c:	2001      	movs	r0, #1
 800442e:	e7a5      	b.n	800437c <_svfiprintf_r+0xd4>
 8004430:	2300      	movs	r3, #0
 8004432:	3401      	adds	r4, #1
 8004434:	9305      	str	r3, [sp, #20]
 8004436:	4619      	mov	r1, r3
 8004438:	f04f 0c0a 	mov.w	ip, #10
 800443c:	4620      	mov	r0, r4
 800443e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004442:	3a30      	subs	r2, #48	; 0x30
 8004444:	2a09      	cmp	r2, #9
 8004446:	d903      	bls.n	8004450 <_svfiprintf_r+0x1a8>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0c5      	beq.n	80043d8 <_svfiprintf_r+0x130>
 800444c:	9105      	str	r1, [sp, #20]
 800444e:	e7c3      	b.n	80043d8 <_svfiprintf_r+0x130>
 8004450:	fb0c 2101 	mla	r1, ip, r1, r2
 8004454:	4604      	mov	r4, r0
 8004456:	2301      	movs	r3, #1
 8004458:	e7f0      	b.n	800443c <_svfiprintf_r+0x194>
 800445a:	ab03      	add	r3, sp, #12
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	462a      	mov	r2, r5
 8004460:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <_svfiprintf_r+0x1f8>)
 8004462:	a904      	add	r1, sp, #16
 8004464:	4638      	mov	r0, r7
 8004466:	f3af 8000 	nop.w
 800446a:	1c42      	adds	r2, r0, #1
 800446c:	4606      	mov	r6, r0
 800446e:	d1d6      	bne.n	800441e <_svfiprintf_r+0x176>
 8004470:	89ab      	ldrh	r3, [r5, #12]
 8004472:	065b      	lsls	r3, r3, #25
 8004474:	f53f af2c 	bmi.w	80042d0 <_svfiprintf_r+0x28>
 8004478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800447a:	b01d      	add	sp, #116	; 0x74
 800447c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004480:	ab03      	add	r3, sp, #12
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	462a      	mov	r2, r5
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <_svfiprintf_r+0x1f8>)
 8004488:	a904      	add	r1, sp, #16
 800448a:	4638      	mov	r0, r7
 800448c:	f000 f9d4 	bl	8004838 <_printf_i>
 8004490:	e7eb      	b.n	800446a <_svfiprintf_r+0x1c2>
 8004492:	bf00      	nop
 8004494:	08005500 	.word	0x08005500
 8004498:	0800550a 	.word	0x0800550a
 800449c:	00000000 	.word	0x00000000
 80044a0:	080041f1 	.word	0x080041f1
 80044a4:	08005506 	.word	0x08005506

080044a8 <__sfputc_r>:
 80044a8:	6893      	ldr	r3, [r2, #8]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	b410      	push	{r4}
 80044b0:	6093      	str	r3, [r2, #8]
 80044b2:	da08      	bge.n	80044c6 <__sfputc_r+0x1e>
 80044b4:	6994      	ldr	r4, [r2, #24]
 80044b6:	42a3      	cmp	r3, r4
 80044b8:	db01      	blt.n	80044be <__sfputc_r+0x16>
 80044ba:	290a      	cmp	r1, #10
 80044bc:	d103      	bne.n	80044c6 <__sfputc_r+0x1e>
 80044be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044c2:	f000 baef 	b.w	8004aa4 <__swbuf_r>
 80044c6:	6813      	ldr	r3, [r2, #0]
 80044c8:	1c58      	adds	r0, r3, #1
 80044ca:	6010      	str	r0, [r2, #0]
 80044cc:	7019      	strb	r1, [r3, #0]
 80044ce:	4608      	mov	r0, r1
 80044d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <__sfputs_r>:
 80044d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d8:	4606      	mov	r6, r0
 80044da:	460f      	mov	r7, r1
 80044dc:	4614      	mov	r4, r2
 80044de:	18d5      	adds	r5, r2, r3
 80044e0:	42ac      	cmp	r4, r5
 80044e2:	d101      	bne.n	80044e8 <__sfputs_r+0x12>
 80044e4:	2000      	movs	r0, #0
 80044e6:	e007      	b.n	80044f8 <__sfputs_r+0x22>
 80044e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ec:	463a      	mov	r2, r7
 80044ee:	4630      	mov	r0, r6
 80044f0:	f7ff ffda 	bl	80044a8 <__sfputc_r>
 80044f4:	1c43      	adds	r3, r0, #1
 80044f6:	d1f3      	bne.n	80044e0 <__sfputs_r+0xa>
 80044f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044fc <_vfiprintf_r>:
 80044fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004500:	460d      	mov	r5, r1
 8004502:	b09d      	sub	sp, #116	; 0x74
 8004504:	4614      	mov	r4, r2
 8004506:	4698      	mov	r8, r3
 8004508:	4606      	mov	r6, r0
 800450a:	b118      	cbz	r0, 8004514 <_vfiprintf_r+0x18>
 800450c:	6983      	ldr	r3, [r0, #24]
 800450e:	b90b      	cbnz	r3, 8004514 <_vfiprintf_r+0x18>
 8004510:	f000 fcaa 	bl	8004e68 <__sinit>
 8004514:	4b89      	ldr	r3, [pc, #548]	; (800473c <_vfiprintf_r+0x240>)
 8004516:	429d      	cmp	r5, r3
 8004518:	d11b      	bne.n	8004552 <_vfiprintf_r+0x56>
 800451a:	6875      	ldr	r5, [r6, #4]
 800451c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800451e:	07d9      	lsls	r1, r3, #31
 8004520:	d405      	bmi.n	800452e <_vfiprintf_r+0x32>
 8004522:	89ab      	ldrh	r3, [r5, #12]
 8004524:	059a      	lsls	r2, r3, #22
 8004526:	d402      	bmi.n	800452e <_vfiprintf_r+0x32>
 8004528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800452a:	f000 fd3b 	bl	8004fa4 <__retarget_lock_acquire_recursive>
 800452e:	89ab      	ldrh	r3, [r5, #12]
 8004530:	071b      	lsls	r3, r3, #28
 8004532:	d501      	bpl.n	8004538 <_vfiprintf_r+0x3c>
 8004534:	692b      	ldr	r3, [r5, #16]
 8004536:	b9eb      	cbnz	r3, 8004574 <_vfiprintf_r+0x78>
 8004538:	4629      	mov	r1, r5
 800453a:	4630      	mov	r0, r6
 800453c:	f000 fb04 	bl	8004b48 <__swsetup_r>
 8004540:	b1c0      	cbz	r0, 8004574 <_vfiprintf_r+0x78>
 8004542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004544:	07dc      	lsls	r4, r3, #31
 8004546:	d50e      	bpl.n	8004566 <_vfiprintf_r+0x6a>
 8004548:	f04f 30ff 	mov.w	r0, #4294967295
 800454c:	b01d      	add	sp, #116	; 0x74
 800454e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004552:	4b7b      	ldr	r3, [pc, #492]	; (8004740 <_vfiprintf_r+0x244>)
 8004554:	429d      	cmp	r5, r3
 8004556:	d101      	bne.n	800455c <_vfiprintf_r+0x60>
 8004558:	68b5      	ldr	r5, [r6, #8]
 800455a:	e7df      	b.n	800451c <_vfiprintf_r+0x20>
 800455c:	4b79      	ldr	r3, [pc, #484]	; (8004744 <_vfiprintf_r+0x248>)
 800455e:	429d      	cmp	r5, r3
 8004560:	bf08      	it	eq
 8004562:	68f5      	ldreq	r5, [r6, #12]
 8004564:	e7da      	b.n	800451c <_vfiprintf_r+0x20>
 8004566:	89ab      	ldrh	r3, [r5, #12]
 8004568:	0598      	lsls	r0, r3, #22
 800456a:	d4ed      	bmi.n	8004548 <_vfiprintf_r+0x4c>
 800456c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800456e:	f000 fd1a 	bl	8004fa6 <__retarget_lock_release_recursive>
 8004572:	e7e9      	b.n	8004548 <_vfiprintf_r+0x4c>
 8004574:	2300      	movs	r3, #0
 8004576:	9309      	str	r3, [sp, #36]	; 0x24
 8004578:	2320      	movs	r3, #32
 800457a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800457e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004582:	2330      	movs	r3, #48	; 0x30
 8004584:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004748 <_vfiprintf_r+0x24c>
 8004588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800458c:	f04f 0901 	mov.w	r9, #1
 8004590:	4623      	mov	r3, r4
 8004592:	469a      	mov	sl, r3
 8004594:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004598:	b10a      	cbz	r2, 800459e <_vfiprintf_r+0xa2>
 800459a:	2a25      	cmp	r2, #37	; 0x25
 800459c:	d1f9      	bne.n	8004592 <_vfiprintf_r+0x96>
 800459e:	ebba 0b04 	subs.w	fp, sl, r4
 80045a2:	d00b      	beq.n	80045bc <_vfiprintf_r+0xc0>
 80045a4:	465b      	mov	r3, fp
 80045a6:	4622      	mov	r2, r4
 80045a8:	4629      	mov	r1, r5
 80045aa:	4630      	mov	r0, r6
 80045ac:	f7ff ff93 	bl	80044d6 <__sfputs_r>
 80045b0:	3001      	adds	r0, #1
 80045b2:	f000 80aa 	beq.w	800470a <_vfiprintf_r+0x20e>
 80045b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045b8:	445a      	add	r2, fp
 80045ba:	9209      	str	r2, [sp, #36]	; 0x24
 80045bc:	f89a 3000 	ldrb.w	r3, [sl]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80a2 	beq.w	800470a <_vfiprintf_r+0x20e>
 80045c6:	2300      	movs	r3, #0
 80045c8:	f04f 32ff 	mov.w	r2, #4294967295
 80045cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045d0:	f10a 0a01 	add.w	sl, sl, #1
 80045d4:	9304      	str	r3, [sp, #16]
 80045d6:	9307      	str	r3, [sp, #28]
 80045d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045dc:	931a      	str	r3, [sp, #104]	; 0x68
 80045de:	4654      	mov	r4, sl
 80045e0:	2205      	movs	r2, #5
 80045e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045e6:	4858      	ldr	r0, [pc, #352]	; (8004748 <_vfiprintf_r+0x24c>)
 80045e8:	f7fb fe0a 	bl	8000200 <memchr>
 80045ec:	9a04      	ldr	r2, [sp, #16]
 80045ee:	b9d8      	cbnz	r0, 8004628 <_vfiprintf_r+0x12c>
 80045f0:	06d1      	lsls	r1, r2, #27
 80045f2:	bf44      	itt	mi
 80045f4:	2320      	movmi	r3, #32
 80045f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045fa:	0713      	lsls	r3, r2, #28
 80045fc:	bf44      	itt	mi
 80045fe:	232b      	movmi	r3, #43	; 0x2b
 8004600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004604:	f89a 3000 	ldrb.w	r3, [sl]
 8004608:	2b2a      	cmp	r3, #42	; 0x2a
 800460a:	d015      	beq.n	8004638 <_vfiprintf_r+0x13c>
 800460c:	9a07      	ldr	r2, [sp, #28]
 800460e:	4654      	mov	r4, sl
 8004610:	2000      	movs	r0, #0
 8004612:	f04f 0c0a 	mov.w	ip, #10
 8004616:	4621      	mov	r1, r4
 8004618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800461c:	3b30      	subs	r3, #48	; 0x30
 800461e:	2b09      	cmp	r3, #9
 8004620:	d94e      	bls.n	80046c0 <_vfiprintf_r+0x1c4>
 8004622:	b1b0      	cbz	r0, 8004652 <_vfiprintf_r+0x156>
 8004624:	9207      	str	r2, [sp, #28]
 8004626:	e014      	b.n	8004652 <_vfiprintf_r+0x156>
 8004628:	eba0 0308 	sub.w	r3, r0, r8
 800462c:	fa09 f303 	lsl.w	r3, r9, r3
 8004630:	4313      	orrs	r3, r2
 8004632:	9304      	str	r3, [sp, #16]
 8004634:	46a2      	mov	sl, r4
 8004636:	e7d2      	b.n	80045de <_vfiprintf_r+0xe2>
 8004638:	9b03      	ldr	r3, [sp, #12]
 800463a:	1d19      	adds	r1, r3, #4
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	9103      	str	r1, [sp, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	bfbb      	ittet	lt
 8004644:	425b      	neglt	r3, r3
 8004646:	f042 0202 	orrlt.w	r2, r2, #2
 800464a:	9307      	strge	r3, [sp, #28]
 800464c:	9307      	strlt	r3, [sp, #28]
 800464e:	bfb8      	it	lt
 8004650:	9204      	strlt	r2, [sp, #16]
 8004652:	7823      	ldrb	r3, [r4, #0]
 8004654:	2b2e      	cmp	r3, #46	; 0x2e
 8004656:	d10c      	bne.n	8004672 <_vfiprintf_r+0x176>
 8004658:	7863      	ldrb	r3, [r4, #1]
 800465a:	2b2a      	cmp	r3, #42	; 0x2a
 800465c:	d135      	bne.n	80046ca <_vfiprintf_r+0x1ce>
 800465e:	9b03      	ldr	r3, [sp, #12]
 8004660:	1d1a      	adds	r2, r3, #4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	9203      	str	r2, [sp, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	bfb8      	it	lt
 800466a:	f04f 33ff 	movlt.w	r3, #4294967295
 800466e:	3402      	adds	r4, #2
 8004670:	9305      	str	r3, [sp, #20]
 8004672:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004758 <_vfiprintf_r+0x25c>
 8004676:	7821      	ldrb	r1, [r4, #0]
 8004678:	2203      	movs	r2, #3
 800467a:	4650      	mov	r0, sl
 800467c:	f7fb fdc0 	bl	8000200 <memchr>
 8004680:	b140      	cbz	r0, 8004694 <_vfiprintf_r+0x198>
 8004682:	2340      	movs	r3, #64	; 0x40
 8004684:	eba0 000a 	sub.w	r0, r0, sl
 8004688:	fa03 f000 	lsl.w	r0, r3, r0
 800468c:	9b04      	ldr	r3, [sp, #16]
 800468e:	4303      	orrs	r3, r0
 8004690:	3401      	adds	r4, #1
 8004692:	9304      	str	r3, [sp, #16]
 8004694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004698:	482c      	ldr	r0, [pc, #176]	; (800474c <_vfiprintf_r+0x250>)
 800469a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800469e:	2206      	movs	r2, #6
 80046a0:	f7fb fdae 	bl	8000200 <memchr>
 80046a4:	2800      	cmp	r0, #0
 80046a6:	d03f      	beq.n	8004728 <_vfiprintf_r+0x22c>
 80046a8:	4b29      	ldr	r3, [pc, #164]	; (8004750 <_vfiprintf_r+0x254>)
 80046aa:	bb1b      	cbnz	r3, 80046f4 <_vfiprintf_r+0x1f8>
 80046ac:	9b03      	ldr	r3, [sp, #12]
 80046ae:	3307      	adds	r3, #7
 80046b0:	f023 0307 	bic.w	r3, r3, #7
 80046b4:	3308      	adds	r3, #8
 80046b6:	9303      	str	r3, [sp, #12]
 80046b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ba:	443b      	add	r3, r7
 80046bc:	9309      	str	r3, [sp, #36]	; 0x24
 80046be:	e767      	b.n	8004590 <_vfiprintf_r+0x94>
 80046c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80046c4:	460c      	mov	r4, r1
 80046c6:	2001      	movs	r0, #1
 80046c8:	e7a5      	b.n	8004616 <_vfiprintf_r+0x11a>
 80046ca:	2300      	movs	r3, #0
 80046cc:	3401      	adds	r4, #1
 80046ce:	9305      	str	r3, [sp, #20]
 80046d0:	4619      	mov	r1, r3
 80046d2:	f04f 0c0a 	mov.w	ip, #10
 80046d6:	4620      	mov	r0, r4
 80046d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046dc:	3a30      	subs	r2, #48	; 0x30
 80046de:	2a09      	cmp	r2, #9
 80046e0:	d903      	bls.n	80046ea <_vfiprintf_r+0x1ee>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0c5      	beq.n	8004672 <_vfiprintf_r+0x176>
 80046e6:	9105      	str	r1, [sp, #20]
 80046e8:	e7c3      	b.n	8004672 <_vfiprintf_r+0x176>
 80046ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80046ee:	4604      	mov	r4, r0
 80046f0:	2301      	movs	r3, #1
 80046f2:	e7f0      	b.n	80046d6 <_vfiprintf_r+0x1da>
 80046f4:	ab03      	add	r3, sp, #12
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	462a      	mov	r2, r5
 80046fa:	4b16      	ldr	r3, [pc, #88]	; (8004754 <_vfiprintf_r+0x258>)
 80046fc:	a904      	add	r1, sp, #16
 80046fe:	4630      	mov	r0, r6
 8004700:	f3af 8000 	nop.w
 8004704:	4607      	mov	r7, r0
 8004706:	1c78      	adds	r0, r7, #1
 8004708:	d1d6      	bne.n	80046b8 <_vfiprintf_r+0x1bc>
 800470a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800470c:	07d9      	lsls	r1, r3, #31
 800470e:	d405      	bmi.n	800471c <_vfiprintf_r+0x220>
 8004710:	89ab      	ldrh	r3, [r5, #12]
 8004712:	059a      	lsls	r2, r3, #22
 8004714:	d402      	bmi.n	800471c <_vfiprintf_r+0x220>
 8004716:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004718:	f000 fc45 	bl	8004fa6 <__retarget_lock_release_recursive>
 800471c:	89ab      	ldrh	r3, [r5, #12]
 800471e:	065b      	lsls	r3, r3, #25
 8004720:	f53f af12 	bmi.w	8004548 <_vfiprintf_r+0x4c>
 8004724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004726:	e711      	b.n	800454c <_vfiprintf_r+0x50>
 8004728:	ab03      	add	r3, sp, #12
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	462a      	mov	r2, r5
 800472e:	4b09      	ldr	r3, [pc, #36]	; (8004754 <_vfiprintf_r+0x258>)
 8004730:	a904      	add	r1, sp, #16
 8004732:	4630      	mov	r0, r6
 8004734:	f000 f880 	bl	8004838 <_printf_i>
 8004738:	e7e4      	b.n	8004704 <_vfiprintf_r+0x208>
 800473a:	bf00      	nop
 800473c:	08005554 	.word	0x08005554
 8004740:	08005574 	.word	0x08005574
 8004744:	08005534 	.word	0x08005534
 8004748:	08005500 	.word	0x08005500
 800474c:	0800550a 	.word	0x0800550a
 8004750:	00000000 	.word	0x00000000
 8004754:	080044d7 	.word	0x080044d7
 8004758:	08005506 	.word	0x08005506

0800475c <_printf_common>:
 800475c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004760:	4616      	mov	r6, r2
 8004762:	4699      	mov	r9, r3
 8004764:	688a      	ldr	r2, [r1, #8]
 8004766:	690b      	ldr	r3, [r1, #16]
 8004768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800476c:	4293      	cmp	r3, r2
 800476e:	bfb8      	it	lt
 8004770:	4613      	movlt	r3, r2
 8004772:	6033      	str	r3, [r6, #0]
 8004774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004778:	4607      	mov	r7, r0
 800477a:	460c      	mov	r4, r1
 800477c:	b10a      	cbz	r2, 8004782 <_printf_common+0x26>
 800477e:	3301      	adds	r3, #1
 8004780:	6033      	str	r3, [r6, #0]
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	0699      	lsls	r1, r3, #26
 8004786:	bf42      	ittt	mi
 8004788:	6833      	ldrmi	r3, [r6, #0]
 800478a:	3302      	addmi	r3, #2
 800478c:	6033      	strmi	r3, [r6, #0]
 800478e:	6825      	ldr	r5, [r4, #0]
 8004790:	f015 0506 	ands.w	r5, r5, #6
 8004794:	d106      	bne.n	80047a4 <_printf_common+0x48>
 8004796:	f104 0a19 	add.w	sl, r4, #25
 800479a:	68e3      	ldr	r3, [r4, #12]
 800479c:	6832      	ldr	r2, [r6, #0]
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	42ab      	cmp	r3, r5
 80047a2:	dc26      	bgt.n	80047f2 <_printf_common+0x96>
 80047a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047a8:	1e13      	subs	r3, r2, #0
 80047aa:	6822      	ldr	r2, [r4, #0]
 80047ac:	bf18      	it	ne
 80047ae:	2301      	movne	r3, #1
 80047b0:	0692      	lsls	r2, r2, #26
 80047b2:	d42b      	bmi.n	800480c <_printf_common+0xb0>
 80047b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047b8:	4649      	mov	r1, r9
 80047ba:	4638      	mov	r0, r7
 80047bc:	47c0      	blx	r8
 80047be:	3001      	adds	r0, #1
 80047c0:	d01e      	beq.n	8004800 <_printf_common+0xa4>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	68e5      	ldr	r5, [r4, #12]
 80047c6:	6832      	ldr	r2, [r6, #0]
 80047c8:	f003 0306 	and.w	r3, r3, #6
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	bf08      	it	eq
 80047d0:	1aad      	subeq	r5, r5, r2
 80047d2:	68a3      	ldr	r3, [r4, #8]
 80047d4:	6922      	ldr	r2, [r4, #16]
 80047d6:	bf0c      	ite	eq
 80047d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047dc:	2500      	movne	r5, #0
 80047de:	4293      	cmp	r3, r2
 80047e0:	bfc4      	itt	gt
 80047e2:	1a9b      	subgt	r3, r3, r2
 80047e4:	18ed      	addgt	r5, r5, r3
 80047e6:	2600      	movs	r6, #0
 80047e8:	341a      	adds	r4, #26
 80047ea:	42b5      	cmp	r5, r6
 80047ec:	d11a      	bne.n	8004824 <_printf_common+0xc8>
 80047ee:	2000      	movs	r0, #0
 80047f0:	e008      	b.n	8004804 <_printf_common+0xa8>
 80047f2:	2301      	movs	r3, #1
 80047f4:	4652      	mov	r2, sl
 80047f6:	4649      	mov	r1, r9
 80047f8:	4638      	mov	r0, r7
 80047fa:	47c0      	blx	r8
 80047fc:	3001      	adds	r0, #1
 80047fe:	d103      	bne.n	8004808 <_printf_common+0xac>
 8004800:	f04f 30ff 	mov.w	r0, #4294967295
 8004804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004808:	3501      	adds	r5, #1
 800480a:	e7c6      	b.n	800479a <_printf_common+0x3e>
 800480c:	18e1      	adds	r1, r4, r3
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	2030      	movs	r0, #48	; 0x30
 8004812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004816:	4422      	add	r2, r4
 8004818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800481c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004820:	3302      	adds	r3, #2
 8004822:	e7c7      	b.n	80047b4 <_printf_common+0x58>
 8004824:	2301      	movs	r3, #1
 8004826:	4622      	mov	r2, r4
 8004828:	4649      	mov	r1, r9
 800482a:	4638      	mov	r0, r7
 800482c:	47c0      	blx	r8
 800482e:	3001      	adds	r0, #1
 8004830:	d0e6      	beq.n	8004800 <_printf_common+0xa4>
 8004832:	3601      	adds	r6, #1
 8004834:	e7d9      	b.n	80047ea <_printf_common+0x8e>
	...

08004838 <_printf_i>:
 8004838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800483c:	460c      	mov	r4, r1
 800483e:	4691      	mov	r9, r2
 8004840:	7e27      	ldrb	r7, [r4, #24]
 8004842:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004844:	2f78      	cmp	r7, #120	; 0x78
 8004846:	4680      	mov	r8, r0
 8004848:	469a      	mov	sl, r3
 800484a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800484e:	d807      	bhi.n	8004860 <_printf_i+0x28>
 8004850:	2f62      	cmp	r7, #98	; 0x62
 8004852:	d80a      	bhi.n	800486a <_printf_i+0x32>
 8004854:	2f00      	cmp	r7, #0
 8004856:	f000 80d8 	beq.w	8004a0a <_printf_i+0x1d2>
 800485a:	2f58      	cmp	r7, #88	; 0x58
 800485c:	f000 80a3 	beq.w	80049a6 <_printf_i+0x16e>
 8004860:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004868:	e03a      	b.n	80048e0 <_printf_i+0xa8>
 800486a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800486e:	2b15      	cmp	r3, #21
 8004870:	d8f6      	bhi.n	8004860 <_printf_i+0x28>
 8004872:	a001      	add	r0, pc, #4	; (adr r0, 8004878 <_printf_i+0x40>)
 8004874:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004878:	080048d1 	.word	0x080048d1
 800487c:	080048e5 	.word	0x080048e5
 8004880:	08004861 	.word	0x08004861
 8004884:	08004861 	.word	0x08004861
 8004888:	08004861 	.word	0x08004861
 800488c:	08004861 	.word	0x08004861
 8004890:	080048e5 	.word	0x080048e5
 8004894:	08004861 	.word	0x08004861
 8004898:	08004861 	.word	0x08004861
 800489c:	08004861 	.word	0x08004861
 80048a0:	08004861 	.word	0x08004861
 80048a4:	080049f1 	.word	0x080049f1
 80048a8:	08004915 	.word	0x08004915
 80048ac:	080049d3 	.word	0x080049d3
 80048b0:	08004861 	.word	0x08004861
 80048b4:	08004861 	.word	0x08004861
 80048b8:	08004a13 	.word	0x08004a13
 80048bc:	08004861 	.word	0x08004861
 80048c0:	08004915 	.word	0x08004915
 80048c4:	08004861 	.word	0x08004861
 80048c8:	08004861 	.word	0x08004861
 80048cc:	080049db 	.word	0x080049db
 80048d0:	680b      	ldr	r3, [r1, #0]
 80048d2:	1d1a      	adds	r2, r3, #4
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	600a      	str	r2, [r1, #0]
 80048d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0a3      	b.n	8004a2c <_printf_i+0x1f4>
 80048e4:	6825      	ldr	r5, [r4, #0]
 80048e6:	6808      	ldr	r0, [r1, #0]
 80048e8:	062e      	lsls	r6, r5, #24
 80048ea:	f100 0304 	add.w	r3, r0, #4
 80048ee:	d50a      	bpl.n	8004906 <_printf_i+0xce>
 80048f0:	6805      	ldr	r5, [r0, #0]
 80048f2:	600b      	str	r3, [r1, #0]
 80048f4:	2d00      	cmp	r5, #0
 80048f6:	da03      	bge.n	8004900 <_printf_i+0xc8>
 80048f8:	232d      	movs	r3, #45	; 0x2d
 80048fa:	426d      	negs	r5, r5
 80048fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004900:	485e      	ldr	r0, [pc, #376]	; (8004a7c <_printf_i+0x244>)
 8004902:	230a      	movs	r3, #10
 8004904:	e019      	b.n	800493a <_printf_i+0x102>
 8004906:	f015 0f40 	tst.w	r5, #64	; 0x40
 800490a:	6805      	ldr	r5, [r0, #0]
 800490c:	600b      	str	r3, [r1, #0]
 800490e:	bf18      	it	ne
 8004910:	b22d      	sxthne	r5, r5
 8004912:	e7ef      	b.n	80048f4 <_printf_i+0xbc>
 8004914:	680b      	ldr	r3, [r1, #0]
 8004916:	6825      	ldr	r5, [r4, #0]
 8004918:	1d18      	adds	r0, r3, #4
 800491a:	6008      	str	r0, [r1, #0]
 800491c:	0628      	lsls	r0, r5, #24
 800491e:	d501      	bpl.n	8004924 <_printf_i+0xec>
 8004920:	681d      	ldr	r5, [r3, #0]
 8004922:	e002      	b.n	800492a <_printf_i+0xf2>
 8004924:	0669      	lsls	r1, r5, #25
 8004926:	d5fb      	bpl.n	8004920 <_printf_i+0xe8>
 8004928:	881d      	ldrh	r5, [r3, #0]
 800492a:	4854      	ldr	r0, [pc, #336]	; (8004a7c <_printf_i+0x244>)
 800492c:	2f6f      	cmp	r7, #111	; 0x6f
 800492e:	bf0c      	ite	eq
 8004930:	2308      	moveq	r3, #8
 8004932:	230a      	movne	r3, #10
 8004934:	2100      	movs	r1, #0
 8004936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800493a:	6866      	ldr	r6, [r4, #4]
 800493c:	60a6      	str	r6, [r4, #8]
 800493e:	2e00      	cmp	r6, #0
 8004940:	bfa2      	ittt	ge
 8004942:	6821      	ldrge	r1, [r4, #0]
 8004944:	f021 0104 	bicge.w	r1, r1, #4
 8004948:	6021      	strge	r1, [r4, #0]
 800494a:	b90d      	cbnz	r5, 8004950 <_printf_i+0x118>
 800494c:	2e00      	cmp	r6, #0
 800494e:	d04d      	beq.n	80049ec <_printf_i+0x1b4>
 8004950:	4616      	mov	r6, r2
 8004952:	fbb5 f1f3 	udiv	r1, r5, r3
 8004956:	fb03 5711 	mls	r7, r3, r1, r5
 800495a:	5dc7      	ldrb	r7, [r0, r7]
 800495c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004960:	462f      	mov	r7, r5
 8004962:	42bb      	cmp	r3, r7
 8004964:	460d      	mov	r5, r1
 8004966:	d9f4      	bls.n	8004952 <_printf_i+0x11a>
 8004968:	2b08      	cmp	r3, #8
 800496a:	d10b      	bne.n	8004984 <_printf_i+0x14c>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	07df      	lsls	r7, r3, #31
 8004970:	d508      	bpl.n	8004984 <_printf_i+0x14c>
 8004972:	6923      	ldr	r3, [r4, #16]
 8004974:	6861      	ldr	r1, [r4, #4]
 8004976:	4299      	cmp	r1, r3
 8004978:	bfde      	ittt	le
 800497a:	2330      	movle	r3, #48	; 0x30
 800497c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004980:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004984:	1b92      	subs	r2, r2, r6
 8004986:	6122      	str	r2, [r4, #16]
 8004988:	f8cd a000 	str.w	sl, [sp]
 800498c:	464b      	mov	r3, r9
 800498e:	aa03      	add	r2, sp, #12
 8004990:	4621      	mov	r1, r4
 8004992:	4640      	mov	r0, r8
 8004994:	f7ff fee2 	bl	800475c <_printf_common>
 8004998:	3001      	adds	r0, #1
 800499a:	d14c      	bne.n	8004a36 <_printf_i+0x1fe>
 800499c:	f04f 30ff 	mov.w	r0, #4294967295
 80049a0:	b004      	add	sp, #16
 80049a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a6:	4835      	ldr	r0, [pc, #212]	; (8004a7c <_printf_i+0x244>)
 80049a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	680e      	ldr	r6, [r1, #0]
 80049b0:	061f      	lsls	r7, r3, #24
 80049b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80049b6:	600e      	str	r6, [r1, #0]
 80049b8:	d514      	bpl.n	80049e4 <_printf_i+0x1ac>
 80049ba:	07d9      	lsls	r1, r3, #31
 80049bc:	bf44      	itt	mi
 80049be:	f043 0320 	orrmi.w	r3, r3, #32
 80049c2:	6023      	strmi	r3, [r4, #0]
 80049c4:	b91d      	cbnz	r5, 80049ce <_printf_i+0x196>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	f023 0320 	bic.w	r3, r3, #32
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	2310      	movs	r3, #16
 80049d0:	e7b0      	b.n	8004934 <_printf_i+0xfc>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	f043 0320 	orr.w	r3, r3, #32
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	2378      	movs	r3, #120	; 0x78
 80049dc:	4828      	ldr	r0, [pc, #160]	; (8004a80 <_printf_i+0x248>)
 80049de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049e2:	e7e3      	b.n	80049ac <_printf_i+0x174>
 80049e4:	065e      	lsls	r6, r3, #25
 80049e6:	bf48      	it	mi
 80049e8:	b2ad      	uxthmi	r5, r5
 80049ea:	e7e6      	b.n	80049ba <_printf_i+0x182>
 80049ec:	4616      	mov	r6, r2
 80049ee:	e7bb      	b.n	8004968 <_printf_i+0x130>
 80049f0:	680b      	ldr	r3, [r1, #0]
 80049f2:	6826      	ldr	r6, [r4, #0]
 80049f4:	6960      	ldr	r0, [r4, #20]
 80049f6:	1d1d      	adds	r5, r3, #4
 80049f8:	600d      	str	r5, [r1, #0]
 80049fa:	0635      	lsls	r5, r6, #24
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	d501      	bpl.n	8004a04 <_printf_i+0x1cc>
 8004a00:	6018      	str	r0, [r3, #0]
 8004a02:	e002      	b.n	8004a0a <_printf_i+0x1d2>
 8004a04:	0671      	lsls	r1, r6, #25
 8004a06:	d5fb      	bpl.n	8004a00 <_printf_i+0x1c8>
 8004a08:	8018      	strh	r0, [r3, #0]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	6123      	str	r3, [r4, #16]
 8004a0e:	4616      	mov	r6, r2
 8004a10:	e7ba      	b.n	8004988 <_printf_i+0x150>
 8004a12:	680b      	ldr	r3, [r1, #0]
 8004a14:	1d1a      	adds	r2, r3, #4
 8004a16:	600a      	str	r2, [r1, #0]
 8004a18:	681e      	ldr	r6, [r3, #0]
 8004a1a:	6862      	ldr	r2, [r4, #4]
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4630      	mov	r0, r6
 8004a20:	f7fb fbee 	bl	8000200 <memchr>
 8004a24:	b108      	cbz	r0, 8004a2a <_printf_i+0x1f2>
 8004a26:	1b80      	subs	r0, r0, r6
 8004a28:	6060      	str	r0, [r4, #4]
 8004a2a:	6863      	ldr	r3, [r4, #4]
 8004a2c:	6123      	str	r3, [r4, #16]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a34:	e7a8      	b.n	8004988 <_printf_i+0x150>
 8004a36:	6923      	ldr	r3, [r4, #16]
 8004a38:	4632      	mov	r2, r6
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	4640      	mov	r0, r8
 8004a3e:	47d0      	blx	sl
 8004a40:	3001      	adds	r0, #1
 8004a42:	d0ab      	beq.n	800499c <_printf_i+0x164>
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	079b      	lsls	r3, r3, #30
 8004a48:	d413      	bmi.n	8004a72 <_printf_i+0x23a>
 8004a4a:	68e0      	ldr	r0, [r4, #12]
 8004a4c:	9b03      	ldr	r3, [sp, #12]
 8004a4e:	4298      	cmp	r0, r3
 8004a50:	bfb8      	it	lt
 8004a52:	4618      	movlt	r0, r3
 8004a54:	e7a4      	b.n	80049a0 <_printf_i+0x168>
 8004a56:	2301      	movs	r3, #1
 8004a58:	4632      	mov	r2, r6
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	4640      	mov	r0, r8
 8004a5e:	47d0      	blx	sl
 8004a60:	3001      	adds	r0, #1
 8004a62:	d09b      	beq.n	800499c <_printf_i+0x164>
 8004a64:	3501      	adds	r5, #1
 8004a66:	68e3      	ldr	r3, [r4, #12]
 8004a68:	9903      	ldr	r1, [sp, #12]
 8004a6a:	1a5b      	subs	r3, r3, r1
 8004a6c:	42ab      	cmp	r3, r5
 8004a6e:	dcf2      	bgt.n	8004a56 <_printf_i+0x21e>
 8004a70:	e7eb      	b.n	8004a4a <_printf_i+0x212>
 8004a72:	2500      	movs	r5, #0
 8004a74:	f104 0619 	add.w	r6, r4, #25
 8004a78:	e7f5      	b.n	8004a66 <_printf_i+0x22e>
 8004a7a:	bf00      	nop
 8004a7c:	08005511 	.word	0x08005511
 8004a80:	08005522 	.word	0x08005522

08004a84 <_sbrk_r>:
 8004a84:	b538      	push	{r3, r4, r5, lr}
 8004a86:	4d06      	ldr	r5, [pc, #24]	; (8004aa0 <_sbrk_r+0x1c>)
 8004a88:	2300      	movs	r3, #0
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	602b      	str	r3, [r5, #0]
 8004a90:	f7fc f986 	bl	8000da0 <_sbrk>
 8004a94:	1c43      	adds	r3, r0, #1
 8004a96:	d102      	bne.n	8004a9e <_sbrk_r+0x1a>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	b103      	cbz	r3, 8004a9e <_sbrk_r+0x1a>
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	bd38      	pop	{r3, r4, r5, pc}
 8004aa0:	20000200 	.word	0x20000200

08004aa4 <__swbuf_r>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	460e      	mov	r6, r1
 8004aa8:	4614      	mov	r4, r2
 8004aaa:	4605      	mov	r5, r0
 8004aac:	b118      	cbz	r0, 8004ab6 <__swbuf_r+0x12>
 8004aae:	6983      	ldr	r3, [r0, #24]
 8004ab0:	b90b      	cbnz	r3, 8004ab6 <__swbuf_r+0x12>
 8004ab2:	f000 f9d9 	bl	8004e68 <__sinit>
 8004ab6:	4b21      	ldr	r3, [pc, #132]	; (8004b3c <__swbuf_r+0x98>)
 8004ab8:	429c      	cmp	r4, r3
 8004aba:	d12b      	bne.n	8004b14 <__swbuf_r+0x70>
 8004abc:	686c      	ldr	r4, [r5, #4]
 8004abe:	69a3      	ldr	r3, [r4, #24]
 8004ac0:	60a3      	str	r3, [r4, #8]
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	071a      	lsls	r2, r3, #28
 8004ac6:	d52f      	bpl.n	8004b28 <__swbuf_r+0x84>
 8004ac8:	6923      	ldr	r3, [r4, #16]
 8004aca:	b36b      	cbz	r3, 8004b28 <__swbuf_r+0x84>
 8004acc:	6923      	ldr	r3, [r4, #16]
 8004ace:	6820      	ldr	r0, [r4, #0]
 8004ad0:	1ac0      	subs	r0, r0, r3
 8004ad2:	6963      	ldr	r3, [r4, #20]
 8004ad4:	b2f6      	uxtb	r6, r6
 8004ad6:	4283      	cmp	r3, r0
 8004ad8:	4637      	mov	r7, r6
 8004ada:	dc04      	bgt.n	8004ae6 <__swbuf_r+0x42>
 8004adc:	4621      	mov	r1, r4
 8004ade:	4628      	mov	r0, r5
 8004ae0:	f000 f92e 	bl	8004d40 <_fflush_r>
 8004ae4:	bb30      	cbnz	r0, 8004b34 <__swbuf_r+0x90>
 8004ae6:	68a3      	ldr	r3, [r4, #8]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	60a3      	str	r3, [r4, #8]
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	6022      	str	r2, [r4, #0]
 8004af2:	701e      	strb	r6, [r3, #0]
 8004af4:	6963      	ldr	r3, [r4, #20]
 8004af6:	3001      	adds	r0, #1
 8004af8:	4283      	cmp	r3, r0
 8004afa:	d004      	beq.n	8004b06 <__swbuf_r+0x62>
 8004afc:	89a3      	ldrh	r3, [r4, #12]
 8004afe:	07db      	lsls	r3, r3, #31
 8004b00:	d506      	bpl.n	8004b10 <__swbuf_r+0x6c>
 8004b02:	2e0a      	cmp	r6, #10
 8004b04:	d104      	bne.n	8004b10 <__swbuf_r+0x6c>
 8004b06:	4621      	mov	r1, r4
 8004b08:	4628      	mov	r0, r5
 8004b0a:	f000 f919 	bl	8004d40 <_fflush_r>
 8004b0e:	b988      	cbnz	r0, 8004b34 <__swbuf_r+0x90>
 8004b10:	4638      	mov	r0, r7
 8004b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b14:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <__swbuf_r+0x9c>)
 8004b16:	429c      	cmp	r4, r3
 8004b18:	d101      	bne.n	8004b1e <__swbuf_r+0x7a>
 8004b1a:	68ac      	ldr	r4, [r5, #8]
 8004b1c:	e7cf      	b.n	8004abe <__swbuf_r+0x1a>
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <__swbuf_r+0xa0>)
 8004b20:	429c      	cmp	r4, r3
 8004b22:	bf08      	it	eq
 8004b24:	68ec      	ldreq	r4, [r5, #12]
 8004b26:	e7ca      	b.n	8004abe <__swbuf_r+0x1a>
 8004b28:	4621      	mov	r1, r4
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	f000 f80c 	bl	8004b48 <__swsetup_r>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d0cb      	beq.n	8004acc <__swbuf_r+0x28>
 8004b34:	f04f 37ff 	mov.w	r7, #4294967295
 8004b38:	e7ea      	b.n	8004b10 <__swbuf_r+0x6c>
 8004b3a:	bf00      	nop
 8004b3c:	08005554 	.word	0x08005554
 8004b40:	08005574 	.word	0x08005574
 8004b44:	08005534 	.word	0x08005534

08004b48 <__swsetup_r>:
 8004b48:	4b32      	ldr	r3, [pc, #200]	; (8004c14 <__swsetup_r+0xcc>)
 8004b4a:	b570      	push	{r4, r5, r6, lr}
 8004b4c:	681d      	ldr	r5, [r3, #0]
 8004b4e:	4606      	mov	r6, r0
 8004b50:	460c      	mov	r4, r1
 8004b52:	b125      	cbz	r5, 8004b5e <__swsetup_r+0x16>
 8004b54:	69ab      	ldr	r3, [r5, #24]
 8004b56:	b913      	cbnz	r3, 8004b5e <__swsetup_r+0x16>
 8004b58:	4628      	mov	r0, r5
 8004b5a:	f000 f985 	bl	8004e68 <__sinit>
 8004b5e:	4b2e      	ldr	r3, [pc, #184]	; (8004c18 <__swsetup_r+0xd0>)
 8004b60:	429c      	cmp	r4, r3
 8004b62:	d10f      	bne.n	8004b84 <__swsetup_r+0x3c>
 8004b64:	686c      	ldr	r4, [r5, #4]
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b6c:	0719      	lsls	r1, r3, #28
 8004b6e:	d42c      	bmi.n	8004bca <__swsetup_r+0x82>
 8004b70:	06dd      	lsls	r5, r3, #27
 8004b72:	d411      	bmi.n	8004b98 <__swsetup_r+0x50>
 8004b74:	2309      	movs	r3, #9
 8004b76:	6033      	str	r3, [r6, #0]
 8004b78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b7c:	81a3      	strh	r3, [r4, #12]
 8004b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b82:	e03e      	b.n	8004c02 <__swsetup_r+0xba>
 8004b84:	4b25      	ldr	r3, [pc, #148]	; (8004c1c <__swsetup_r+0xd4>)
 8004b86:	429c      	cmp	r4, r3
 8004b88:	d101      	bne.n	8004b8e <__swsetup_r+0x46>
 8004b8a:	68ac      	ldr	r4, [r5, #8]
 8004b8c:	e7eb      	b.n	8004b66 <__swsetup_r+0x1e>
 8004b8e:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <__swsetup_r+0xd8>)
 8004b90:	429c      	cmp	r4, r3
 8004b92:	bf08      	it	eq
 8004b94:	68ec      	ldreq	r4, [r5, #12]
 8004b96:	e7e6      	b.n	8004b66 <__swsetup_r+0x1e>
 8004b98:	0758      	lsls	r0, r3, #29
 8004b9a:	d512      	bpl.n	8004bc2 <__swsetup_r+0x7a>
 8004b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b9e:	b141      	cbz	r1, 8004bb2 <__swsetup_r+0x6a>
 8004ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ba4:	4299      	cmp	r1, r3
 8004ba6:	d002      	beq.n	8004bae <__swsetup_r+0x66>
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f7ff fa77 	bl	800409c <_free_r>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	6363      	str	r3, [r4, #52]	; 0x34
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004bb8:	81a3      	strh	r3, [r4, #12]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	6063      	str	r3, [r4, #4]
 8004bbe:	6923      	ldr	r3, [r4, #16]
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	89a3      	ldrh	r3, [r4, #12]
 8004bc4:	f043 0308 	orr.w	r3, r3, #8
 8004bc8:	81a3      	strh	r3, [r4, #12]
 8004bca:	6923      	ldr	r3, [r4, #16]
 8004bcc:	b94b      	cbnz	r3, 8004be2 <__swsetup_r+0x9a>
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd8:	d003      	beq.n	8004be2 <__swsetup_r+0x9a>
 8004bda:	4621      	mov	r1, r4
 8004bdc:	4630      	mov	r0, r6
 8004bde:	f000 fa07 	bl	8004ff0 <__smakebuf_r>
 8004be2:	89a0      	ldrh	r0, [r4, #12]
 8004be4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004be8:	f010 0301 	ands.w	r3, r0, #1
 8004bec:	d00a      	beq.n	8004c04 <__swsetup_r+0xbc>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60a3      	str	r3, [r4, #8]
 8004bf2:	6963      	ldr	r3, [r4, #20]
 8004bf4:	425b      	negs	r3, r3
 8004bf6:	61a3      	str	r3, [r4, #24]
 8004bf8:	6923      	ldr	r3, [r4, #16]
 8004bfa:	b943      	cbnz	r3, 8004c0e <__swsetup_r+0xc6>
 8004bfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c00:	d1ba      	bne.n	8004b78 <__swsetup_r+0x30>
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	0781      	lsls	r1, r0, #30
 8004c06:	bf58      	it	pl
 8004c08:	6963      	ldrpl	r3, [r4, #20]
 8004c0a:	60a3      	str	r3, [r4, #8]
 8004c0c:	e7f4      	b.n	8004bf8 <__swsetup_r+0xb0>
 8004c0e:	2000      	movs	r0, #0
 8004c10:	e7f7      	b.n	8004c02 <__swsetup_r+0xba>
 8004c12:	bf00      	nop
 8004c14:	2000000c 	.word	0x2000000c
 8004c18:	08005554 	.word	0x08005554
 8004c1c:	08005574 	.word	0x08005574
 8004c20:	08005534 	.word	0x08005534

08004c24 <abort>:
 8004c24:	b508      	push	{r3, lr}
 8004c26:	2006      	movs	r0, #6
 8004c28:	f000 fa96 	bl	8005158 <raise>
 8004c2c:	2001      	movs	r0, #1
 8004c2e:	f7fc f83f 	bl	8000cb0 <_exit>
	...

08004c34 <__sflush_r>:
 8004c34:	898a      	ldrh	r2, [r1, #12]
 8004c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c3a:	4605      	mov	r5, r0
 8004c3c:	0710      	lsls	r0, r2, #28
 8004c3e:	460c      	mov	r4, r1
 8004c40:	d458      	bmi.n	8004cf4 <__sflush_r+0xc0>
 8004c42:	684b      	ldr	r3, [r1, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	dc05      	bgt.n	8004c54 <__sflush_r+0x20>
 8004c48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	dc02      	bgt.n	8004c54 <__sflush_r+0x20>
 8004c4e:	2000      	movs	r0, #0
 8004c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c56:	2e00      	cmp	r6, #0
 8004c58:	d0f9      	beq.n	8004c4e <__sflush_r+0x1a>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c60:	682f      	ldr	r7, [r5, #0]
 8004c62:	602b      	str	r3, [r5, #0]
 8004c64:	d032      	beq.n	8004ccc <__sflush_r+0x98>
 8004c66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c68:	89a3      	ldrh	r3, [r4, #12]
 8004c6a:	075a      	lsls	r2, r3, #29
 8004c6c:	d505      	bpl.n	8004c7a <__sflush_r+0x46>
 8004c6e:	6863      	ldr	r3, [r4, #4]
 8004c70:	1ac0      	subs	r0, r0, r3
 8004c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c74:	b10b      	cbz	r3, 8004c7a <__sflush_r+0x46>
 8004c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c78:	1ac0      	subs	r0, r0, r3
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c80:	6a21      	ldr	r1, [r4, #32]
 8004c82:	4628      	mov	r0, r5
 8004c84:	47b0      	blx	r6
 8004c86:	1c43      	adds	r3, r0, #1
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	d106      	bne.n	8004c9a <__sflush_r+0x66>
 8004c8c:	6829      	ldr	r1, [r5, #0]
 8004c8e:	291d      	cmp	r1, #29
 8004c90:	d82c      	bhi.n	8004cec <__sflush_r+0xb8>
 8004c92:	4a2a      	ldr	r2, [pc, #168]	; (8004d3c <__sflush_r+0x108>)
 8004c94:	40ca      	lsrs	r2, r1
 8004c96:	07d6      	lsls	r6, r2, #31
 8004c98:	d528      	bpl.n	8004cec <__sflush_r+0xb8>
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	6062      	str	r2, [r4, #4]
 8004c9e:	04d9      	lsls	r1, r3, #19
 8004ca0:	6922      	ldr	r2, [r4, #16]
 8004ca2:	6022      	str	r2, [r4, #0]
 8004ca4:	d504      	bpl.n	8004cb0 <__sflush_r+0x7c>
 8004ca6:	1c42      	adds	r2, r0, #1
 8004ca8:	d101      	bne.n	8004cae <__sflush_r+0x7a>
 8004caa:	682b      	ldr	r3, [r5, #0]
 8004cac:	b903      	cbnz	r3, 8004cb0 <__sflush_r+0x7c>
 8004cae:	6560      	str	r0, [r4, #84]	; 0x54
 8004cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cb2:	602f      	str	r7, [r5, #0]
 8004cb4:	2900      	cmp	r1, #0
 8004cb6:	d0ca      	beq.n	8004c4e <__sflush_r+0x1a>
 8004cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cbc:	4299      	cmp	r1, r3
 8004cbe:	d002      	beq.n	8004cc6 <__sflush_r+0x92>
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	f7ff f9eb 	bl	800409c <_free_r>
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8004cca:	e7c1      	b.n	8004c50 <__sflush_r+0x1c>
 8004ccc:	6a21      	ldr	r1, [r4, #32]
 8004cce:	2301      	movs	r3, #1
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	47b0      	blx	r6
 8004cd4:	1c41      	adds	r1, r0, #1
 8004cd6:	d1c7      	bne.n	8004c68 <__sflush_r+0x34>
 8004cd8:	682b      	ldr	r3, [r5, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0c4      	beq.n	8004c68 <__sflush_r+0x34>
 8004cde:	2b1d      	cmp	r3, #29
 8004ce0:	d001      	beq.n	8004ce6 <__sflush_r+0xb2>
 8004ce2:	2b16      	cmp	r3, #22
 8004ce4:	d101      	bne.n	8004cea <__sflush_r+0xb6>
 8004ce6:	602f      	str	r7, [r5, #0]
 8004ce8:	e7b1      	b.n	8004c4e <__sflush_r+0x1a>
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	e7ad      	b.n	8004c50 <__sflush_r+0x1c>
 8004cf4:	690f      	ldr	r7, [r1, #16]
 8004cf6:	2f00      	cmp	r7, #0
 8004cf8:	d0a9      	beq.n	8004c4e <__sflush_r+0x1a>
 8004cfa:	0793      	lsls	r3, r2, #30
 8004cfc:	680e      	ldr	r6, [r1, #0]
 8004cfe:	bf08      	it	eq
 8004d00:	694b      	ldreq	r3, [r1, #20]
 8004d02:	600f      	str	r7, [r1, #0]
 8004d04:	bf18      	it	ne
 8004d06:	2300      	movne	r3, #0
 8004d08:	eba6 0807 	sub.w	r8, r6, r7
 8004d0c:	608b      	str	r3, [r1, #8]
 8004d0e:	f1b8 0f00 	cmp.w	r8, #0
 8004d12:	dd9c      	ble.n	8004c4e <__sflush_r+0x1a>
 8004d14:	6a21      	ldr	r1, [r4, #32]
 8004d16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d18:	4643      	mov	r3, r8
 8004d1a:	463a      	mov	r2, r7
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	47b0      	blx	r6
 8004d20:	2800      	cmp	r0, #0
 8004d22:	dc06      	bgt.n	8004d32 <__sflush_r+0xfe>
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d30:	e78e      	b.n	8004c50 <__sflush_r+0x1c>
 8004d32:	4407      	add	r7, r0
 8004d34:	eba8 0800 	sub.w	r8, r8, r0
 8004d38:	e7e9      	b.n	8004d0e <__sflush_r+0xda>
 8004d3a:	bf00      	nop
 8004d3c:	20400001 	.word	0x20400001

08004d40 <_fflush_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	690b      	ldr	r3, [r1, #16]
 8004d44:	4605      	mov	r5, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	b913      	cbnz	r3, 8004d50 <_fflush_r+0x10>
 8004d4a:	2500      	movs	r5, #0
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	b118      	cbz	r0, 8004d5a <_fflush_r+0x1a>
 8004d52:	6983      	ldr	r3, [r0, #24]
 8004d54:	b90b      	cbnz	r3, 8004d5a <_fflush_r+0x1a>
 8004d56:	f000 f887 	bl	8004e68 <__sinit>
 8004d5a:	4b14      	ldr	r3, [pc, #80]	; (8004dac <_fflush_r+0x6c>)
 8004d5c:	429c      	cmp	r4, r3
 8004d5e:	d11b      	bne.n	8004d98 <_fflush_r+0x58>
 8004d60:	686c      	ldr	r4, [r5, #4]
 8004d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0ef      	beq.n	8004d4a <_fflush_r+0xa>
 8004d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d6c:	07d0      	lsls	r0, r2, #31
 8004d6e:	d404      	bmi.n	8004d7a <_fflush_r+0x3a>
 8004d70:	0599      	lsls	r1, r3, #22
 8004d72:	d402      	bmi.n	8004d7a <_fflush_r+0x3a>
 8004d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d76:	f000 f915 	bl	8004fa4 <__retarget_lock_acquire_recursive>
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	f7ff ff59 	bl	8004c34 <__sflush_r>
 8004d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d84:	07da      	lsls	r2, r3, #31
 8004d86:	4605      	mov	r5, r0
 8004d88:	d4e0      	bmi.n	8004d4c <_fflush_r+0xc>
 8004d8a:	89a3      	ldrh	r3, [r4, #12]
 8004d8c:	059b      	lsls	r3, r3, #22
 8004d8e:	d4dd      	bmi.n	8004d4c <_fflush_r+0xc>
 8004d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d92:	f000 f908 	bl	8004fa6 <__retarget_lock_release_recursive>
 8004d96:	e7d9      	b.n	8004d4c <_fflush_r+0xc>
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <_fflush_r+0x70>)
 8004d9a:	429c      	cmp	r4, r3
 8004d9c:	d101      	bne.n	8004da2 <_fflush_r+0x62>
 8004d9e:	68ac      	ldr	r4, [r5, #8]
 8004da0:	e7df      	b.n	8004d62 <_fflush_r+0x22>
 8004da2:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <_fflush_r+0x74>)
 8004da4:	429c      	cmp	r4, r3
 8004da6:	bf08      	it	eq
 8004da8:	68ec      	ldreq	r4, [r5, #12]
 8004daa:	e7da      	b.n	8004d62 <_fflush_r+0x22>
 8004dac:	08005554 	.word	0x08005554
 8004db0:	08005574 	.word	0x08005574
 8004db4:	08005534 	.word	0x08005534

08004db8 <std>:
 8004db8:	2300      	movs	r3, #0
 8004dba:	b510      	push	{r4, lr}
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8004dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dc6:	6083      	str	r3, [r0, #8]
 8004dc8:	8181      	strh	r1, [r0, #12]
 8004dca:	6643      	str	r3, [r0, #100]	; 0x64
 8004dcc:	81c2      	strh	r2, [r0, #14]
 8004dce:	6183      	str	r3, [r0, #24]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	2208      	movs	r2, #8
 8004dd4:	305c      	adds	r0, #92	; 0x5c
 8004dd6:	f7ff f889 	bl	8003eec <memset>
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <std+0x38>)
 8004ddc:	6263      	str	r3, [r4, #36]	; 0x24
 8004dde:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <std+0x3c>)
 8004de0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004de2:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <std+0x40>)
 8004de4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004de6:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <std+0x44>)
 8004de8:	6224      	str	r4, [r4, #32]
 8004dea:	6323      	str	r3, [r4, #48]	; 0x30
 8004dec:	bd10      	pop	{r4, pc}
 8004dee:	bf00      	nop
 8004df0:	08005191 	.word	0x08005191
 8004df4:	080051b3 	.word	0x080051b3
 8004df8:	080051eb 	.word	0x080051eb
 8004dfc:	0800520f 	.word	0x0800520f

08004e00 <_cleanup_r>:
 8004e00:	4901      	ldr	r1, [pc, #4]	; (8004e08 <_cleanup_r+0x8>)
 8004e02:	f000 b8af 	b.w	8004f64 <_fwalk_reent>
 8004e06:	bf00      	nop
 8004e08:	08004d41 	.word	0x08004d41

08004e0c <__sfmoreglue>:
 8004e0c:	b570      	push	{r4, r5, r6, lr}
 8004e0e:	1e4a      	subs	r2, r1, #1
 8004e10:	2568      	movs	r5, #104	; 0x68
 8004e12:	4355      	muls	r5, r2
 8004e14:	460e      	mov	r6, r1
 8004e16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e1a:	f7ff f98f 	bl	800413c <_malloc_r>
 8004e1e:	4604      	mov	r4, r0
 8004e20:	b140      	cbz	r0, 8004e34 <__sfmoreglue+0x28>
 8004e22:	2100      	movs	r1, #0
 8004e24:	e9c0 1600 	strd	r1, r6, [r0]
 8004e28:	300c      	adds	r0, #12
 8004e2a:	60a0      	str	r0, [r4, #8]
 8004e2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e30:	f7ff f85c 	bl	8003eec <memset>
 8004e34:	4620      	mov	r0, r4
 8004e36:	bd70      	pop	{r4, r5, r6, pc}

08004e38 <__sfp_lock_acquire>:
 8004e38:	4801      	ldr	r0, [pc, #4]	; (8004e40 <__sfp_lock_acquire+0x8>)
 8004e3a:	f000 b8b3 	b.w	8004fa4 <__retarget_lock_acquire_recursive>
 8004e3e:	bf00      	nop
 8004e40:	200001fc 	.word	0x200001fc

08004e44 <__sfp_lock_release>:
 8004e44:	4801      	ldr	r0, [pc, #4]	; (8004e4c <__sfp_lock_release+0x8>)
 8004e46:	f000 b8ae 	b.w	8004fa6 <__retarget_lock_release_recursive>
 8004e4a:	bf00      	nop
 8004e4c:	200001fc 	.word	0x200001fc

08004e50 <__sinit_lock_acquire>:
 8004e50:	4801      	ldr	r0, [pc, #4]	; (8004e58 <__sinit_lock_acquire+0x8>)
 8004e52:	f000 b8a7 	b.w	8004fa4 <__retarget_lock_acquire_recursive>
 8004e56:	bf00      	nop
 8004e58:	200001f7 	.word	0x200001f7

08004e5c <__sinit_lock_release>:
 8004e5c:	4801      	ldr	r0, [pc, #4]	; (8004e64 <__sinit_lock_release+0x8>)
 8004e5e:	f000 b8a2 	b.w	8004fa6 <__retarget_lock_release_recursive>
 8004e62:	bf00      	nop
 8004e64:	200001f7 	.word	0x200001f7

08004e68 <__sinit>:
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	f7ff fff0 	bl	8004e50 <__sinit_lock_acquire>
 8004e70:	69a3      	ldr	r3, [r4, #24]
 8004e72:	b11b      	cbz	r3, 8004e7c <__sinit+0x14>
 8004e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e78:	f7ff bff0 	b.w	8004e5c <__sinit_lock_release>
 8004e7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e80:	6523      	str	r3, [r4, #80]	; 0x50
 8004e82:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <__sinit+0x68>)
 8004e84:	4a13      	ldr	r2, [pc, #76]	; (8004ed4 <__sinit+0x6c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e8a:	42a3      	cmp	r3, r4
 8004e8c:	bf04      	itt	eq
 8004e8e:	2301      	moveq	r3, #1
 8004e90:	61a3      	streq	r3, [r4, #24]
 8004e92:	4620      	mov	r0, r4
 8004e94:	f000 f820 	bl	8004ed8 <__sfp>
 8004e98:	6060      	str	r0, [r4, #4]
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f000 f81c 	bl	8004ed8 <__sfp>
 8004ea0:	60a0      	str	r0, [r4, #8]
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f000 f818 	bl	8004ed8 <__sfp>
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	60e0      	str	r0, [r4, #12]
 8004eac:	2104      	movs	r1, #4
 8004eae:	6860      	ldr	r0, [r4, #4]
 8004eb0:	f7ff ff82 	bl	8004db8 <std>
 8004eb4:	68a0      	ldr	r0, [r4, #8]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	2109      	movs	r1, #9
 8004eba:	f7ff ff7d 	bl	8004db8 <std>
 8004ebe:	68e0      	ldr	r0, [r4, #12]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	2112      	movs	r1, #18
 8004ec4:	f7ff ff78 	bl	8004db8 <std>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	61a3      	str	r3, [r4, #24]
 8004ecc:	e7d2      	b.n	8004e74 <__sinit+0xc>
 8004ece:	bf00      	nop
 8004ed0:	08005448 	.word	0x08005448
 8004ed4:	08004e01 	.word	0x08004e01

08004ed8 <__sfp>:
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	4607      	mov	r7, r0
 8004edc:	f7ff ffac 	bl	8004e38 <__sfp_lock_acquire>
 8004ee0:	4b1e      	ldr	r3, [pc, #120]	; (8004f5c <__sfp+0x84>)
 8004ee2:	681e      	ldr	r6, [r3, #0]
 8004ee4:	69b3      	ldr	r3, [r6, #24]
 8004ee6:	b913      	cbnz	r3, 8004eee <__sfp+0x16>
 8004ee8:	4630      	mov	r0, r6
 8004eea:	f7ff ffbd 	bl	8004e68 <__sinit>
 8004eee:	3648      	adds	r6, #72	; 0x48
 8004ef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	d503      	bpl.n	8004f00 <__sfp+0x28>
 8004ef8:	6833      	ldr	r3, [r6, #0]
 8004efa:	b30b      	cbz	r3, 8004f40 <__sfp+0x68>
 8004efc:	6836      	ldr	r6, [r6, #0]
 8004efe:	e7f7      	b.n	8004ef0 <__sfp+0x18>
 8004f00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f04:	b9d5      	cbnz	r5, 8004f3c <__sfp+0x64>
 8004f06:	4b16      	ldr	r3, [pc, #88]	; (8004f60 <__sfp+0x88>)
 8004f08:	60e3      	str	r3, [r4, #12]
 8004f0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f0e:	6665      	str	r5, [r4, #100]	; 0x64
 8004f10:	f000 f847 	bl	8004fa2 <__retarget_lock_init_recursive>
 8004f14:	f7ff ff96 	bl	8004e44 <__sfp_lock_release>
 8004f18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f20:	6025      	str	r5, [r4, #0]
 8004f22:	61a5      	str	r5, [r4, #24]
 8004f24:	2208      	movs	r2, #8
 8004f26:	4629      	mov	r1, r5
 8004f28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f2c:	f7fe ffde 	bl	8003eec <memset>
 8004f30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f38:	4620      	mov	r0, r4
 8004f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f3c:	3468      	adds	r4, #104	; 0x68
 8004f3e:	e7d9      	b.n	8004ef4 <__sfp+0x1c>
 8004f40:	2104      	movs	r1, #4
 8004f42:	4638      	mov	r0, r7
 8004f44:	f7ff ff62 	bl	8004e0c <__sfmoreglue>
 8004f48:	4604      	mov	r4, r0
 8004f4a:	6030      	str	r0, [r6, #0]
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d1d5      	bne.n	8004efc <__sfp+0x24>
 8004f50:	f7ff ff78 	bl	8004e44 <__sfp_lock_release>
 8004f54:	230c      	movs	r3, #12
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	e7ee      	b.n	8004f38 <__sfp+0x60>
 8004f5a:	bf00      	nop
 8004f5c:	08005448 	.word	0x08005448
 8004f60:	ffff0001 	.word	0xffff0001

08004f64 <_fwalk_reent>:
 8004f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f68:	4606      	mov	r6, r0
 8004f6a:	4688      	mov	r8, r1
 8004f6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f70:	2700      	movs	r7, #0
 8004f72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f76:	f1b9 0901 	subs.w	r9, r9, #1
 8004f7a:	d505      	bpl.n	8004f88 <_fwalk_reent+0x24>
 8004f7c:	6824      	ldr	r4, [r4, #0]
 8004f7e:	2c00      	cmp	r4, #0
 8004f80:	d1f7      	bne.n	8004f72 <_fwalk_reent+0xe>
 8004f82:	4638      	mov	r0, r7
 8004f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f88:	89ab      	ldrh	r3, [r5, #12]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d907      	bls.n	8004f9e <_fwalk_reent+0x3a>
 8004f8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f92:	3301      	adds	r3, #1
 8004f94:	d003      	beq.n	8004f9e <_fwalk_reent+0x3a>
 8004f96:	4629      	mov	r1, r5
 8004f98:	4630      	mov	r0, r6
 8004f9a:	47c0      	blx	r8
 8004f9c:	4307      	orrs	r7, r0
 8004f9e:	3568      	adds	r5, #104	; 0x68
 8004fa0:	e7e9      	b.n	8004f76 <_fwalk_reent+0x12>

08004fa2 <__retarget_lock_init_recursive>:
 8004fa2:	4770      	bx	lr

08004fa4 <__retarget_lock_acquire_recursive>:
 8004fa4:	4770      	bx	lr

08004fa6 <__retarget_lock_release_recursive>:
 8004fa6:	4770      	bx	lr

08004fa8 <__swhatbuf_r>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	460e      	mov	r6, r1
 8004fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fb0:	2900      	cmp	r1, #0
 8004fb2:	b096      	sub	sp, #88	; 0x58
 8004fb4:	4614      	mov	r4, r2
 8004fb6:	461d      	mov	r5, r3
 8004fb8:	da07      	bge.n	8004fca <__swhatbuf_r+0x22>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	602b      	str	r3, [r5, #0]
 8004fbe:	89b3      	ldrh	r3, [r6, #12]
 8004fc0:	061a      	lsls	r2, r3, #24
 8004fc2:	d410      	bmi.n	8004fe6 <__swhatbuf_r+0x3e>
 8004fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fc8:	e00e      	b.n	8004fe8 <__swhatbuf_r+0x40>
 8004fca:	466a      	mov	r2, sp
 8004fcc:	f000 f946 	bl	800525c <_fstat_r>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	dbf2      	blt.n	8004fba <__swhatbuf_r+0x12>
 8004fd4:	9a01      	ldr	r2, [sp, #4]
 8004fd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fde:	425a      	negs	r2, r3
 8004fe0:	415a      	adcs	r2, r3
 8004fe2:	602a      	str	r2, [r5, #0]
 8004fe4:	e7ee      	b.n	8004fc4 <__swhatbuf_r+0x1c>
 8004fe6:	2340      	movs	r3, #64	; 0x40
 8004fe8:	2000      	movs	r0, #0
 8004fea:	6023      	str	r3, [r4, #0]
 8004fec:	b016      	add	sp, #88	; 0x58
 8004fee:	bd70      	pop	{r4, r5, r6, pc}

08004ff0 <__smakebuf_r>:
 8004ff0:	898b      	ldrh	r3, [r1, #12]
 8004ff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ff4:	079d      	lsls	r5, r3, #30
 8004ff6:	4606      	mov	r6, r0
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	d507      	bpl.n	800500c <__smakebuf_r+0x1c>
 8004ffc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	6123      	str	r3, [r4, #16]
 8005004:	2301      	movs	r3, #1
 8005006:	6163      	str	r3, [r4, #20]
 8005008:	b002      	add	sp, #8
 800500a:	bd70      	pop	{r4, r5, r6, pc}
 800500c:	ab01      	add	r3, sp, #4
 800500e:	466a      	mov	r2, sp
 8005010:	f7ff ffca 	bl	8004fa8 <__swhatbuf_r>
 8005014:	9900      	ldr	r1, [sp, #0]
 8005016:	4605      	mov	r5, r0
 8005018:	4630      	mov	r0, r6
 800501a:	f7ff f88f 	bl	800413c <_malloc_r>
 800501e:	b948      	cbnz	r0, 8005034 <__smakebuf_r+0x44>
 8005020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005024:	059a      	lsls	r2, r3, #22
 8005026:	d4ef      	bmi.n	8005008 <__smakebuf_r+0x18>
 8005028:	f023 0303 	bic.w	r3, r3, #3
 800502c:	f043 0302 	orr.w	r3, r3, #2
 8005030:	81a3      	strh	r3, [r4, #12]
 8005032:	e7e3      	b.n	8004ffc <__smakebuf_r+0xc>
 8005034:	4b0d      	ldr	r3, [pc, #52]	; (800506c <__smakebuf_r+0x7c>)
 8005036:	62b3      	str	r3, [r6, #40]	; 0x28
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	6020      	str	r0, [r4, #0]
 800503c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005040:	81a3      	strh	r3, [r4, #12]
 8005042:	9b00      	ldr	r3, [sp, #0]
 8005044:	6163      	str	r3, [r4, #20]
 8005046:	9b01      	ldr	r3, [sp, #4]
 8005048:	6120      	str	r0, [r4, #16]
 800504a:	b15b      	cbz	r3, 8005064 <__smakebuf_r+0x74>
 800504c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005050:	4630      	mov	r0, r6
 8005052:	f000 f915 	bl	8005280 <_isatty_r>
 8005056:	b128      	cbz	r0, 8005064 <__smakebuf_r+0x74>
 8005058:	89a3      	ldrh	r3, [r4, #12]
 800505a:	f023 0303 	bic.w	r3, r3, #3
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	81a3      	strh	r3, [r4, #12]
 8005064:	89a0      	ldrh	r0, [r4, #12]
 8005066:	4305      	orrs	r5, r0
 8005068:	81a5      	strh	r5, [r4, #12]
 800506a:	e7cd      	b.n	8005008 <__smakebuf_r+0x18>
 800506c:	08004e01 	.word	0x08004e01

08005070 <memmove>:
 8005070:	4288      	cmp	r0, r1
 8005072:	b510      	push	{r4, lr}
 8005074:	eb01 0402 	add.w	r4, r1, r2
 8005078:	d902      	bls.n	8005080 <memmove+0x10>
 800507a:	4284      	cmp	r4, r0
 800507c:	4623      	mov	r3, r4
 800507e:	d807      	bhi.n	8005090 <memmove+0x20>
 8005080:	1e43      	subs	r3, r0, #1
 8005082:	42a1      	cmp	r1, r4
 8005084:	d008      	beq.n	8005098 <memmove+0x28>
 8005086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800508a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800508e:	e7f8      	b.n	8005082 <memmove+0x12>
 8005090:	4402      	add	r2, r0
 8005092:	4601      	mov	r1, r0
 8005094:	428a      	cmp	r2, r1
 8005096:	d100      	bne.n	800509a <memmove+0x2a>
 8005098:	bd10      	pop	{r4, pc}
 800509a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800509e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050a2:	e7f7      	b.n	8005094 <memmove+0x24>

080050a4 <__malloc_lock>:
 80050a4:	4801      	ldr	r0, [pc, #4]	; (80050ac <__malloc_lock+0x8>)
 80050a6:	f7ff bf7d 	b.w	8004fa4 <__retarget_lock_acquire_recursive>
 80050aa:	bf00      	nop
 80050ac:	200001f8 	.word	0x200001f8

080050b0 <__malloc_unlock>:
 80050b0:	4801      	ldr	r0, [pc, #4]	; (80050b8 <__malloc_unlock+0x8>)
 80050b2:	f7ff bf78 	b.w	8004fa6 <__retarget_lock_release_recursive>
 80050b6:	bf00      	nop
 80050b8:	200001f8 	.word	0x200001f8

080050bc <_realloc_r>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	4607      	mov	r7, r0
 80050c0:	4614      	mov	r4, r2
 80050c2:	460e      	mov	r6, r1
 80050c4:	b921      	cbnz	r1, 80050d0 <_realloc_r+0x14>
 80050c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050ca:	4611      	mov	r1, r2
 80050cc:	f7ff b836 	b.w	800413c <_malloc_r>
 80050d0:	b922      	cbnz	r2, 80050dc <_realloc_r+0x20>
 80050d2:	f7fe ffe3 	bl	800409c <_free_r>
 80050d6:	4625      	mov	r5, r4
 80050d8:	4628      	mov	r0, r5
 80050da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050dc:	f000 f8f2 	bl	80052c4 <_malloc_usable_size_r>
 80050e0:	42a0      	cmp	r0, r4
 80050e2:	d20f      	bcs.n	8005104 <_realloc_r+0x48>
 80050e4:	4621      	mov	r1, r4
 80050e6:	4638      	mov	r0, r7
 80050e8:	f7ff f828 	bl	800413c <_malloc_r>
 80050ec:	4605      	mov	r5, r0
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d0f2      	beq.n	80050d8 <_realloc_r+0x1c>
 80050f2:	4631      	mov	r1, r6
 80050f4:	4622      	mov	r2, r4
 80050f6:	f7fe feeb 	bl	8003ed0 <memcpy>
 80050fa:	4631      	mov	r1, r6
 80050fc:	4638      	mov	r0, r7
 80050fe:	f7fe ffcd 	bl	800409c <_free_r>
 8005102:	e7e9      	b.n	80050d8 <_realloc_r+0x1c>
 8005104:	4635      	mov	r5, r6
 8005106:	e7e7      	b.n	80050d8 <_realloc_r+0x1c>

08005108 <_raise_r>:
 8005108:	291f      	cmp	r1, #31
 800510a:	b538      	push	{r3, r4, r5, lr}
 800510c:	4604      	mov	r4, r0
 800510e:	460d      	mov	r5, r1
 8005110:	d904      	bls.n	800511c <_raise_r+0x14>
 8005112:	2316      	movs	r3, #22
 8005114:	6003      	str	r3, [r0, #0]
 8005116:	f04f 30ff 	mov.w	r0, #4294967295
 800511a:	bd38      	pop	{r3, r4, r5, pc}
 800511c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800511e:	b112      	cbz	r2, 8005126 <_raise_r+0x1e>
 8005120:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005124:	b94b      	cbnz	r3, 800513a <_raise_r+0x32>
 8005126:	4620      	mov	r0, r4
 8005128:	f000 f830 	bl	800518c <_getpid_r>
 800512c:	462a      	mov	r2, r5
 800512e:	4601      	mov	r1, r0
 8005130:	4620      	mov	r0, r4
 8005132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005136:	f000 b817 	b.w	8005168 <_kill_r>
 800513a:	2b01      	cmp	r3, #1
 800513c:	d00a      	beq.n	8005154 <_raise_r+0x4c>
 800513e:	1c59      	adds	r1, r3, #1
 8005140:	d103      	bne.n	800514a <_raise_r+0x42>
 8005142:	2316      	movs	r3, #22
 8005144:	6003      	str	r3, [r0, #0]
 8005146:	2001      	movs	r0, #1
 8005148:	e7e7      	b.n	800511a <_raise_r+0x12>
 800514a:	2400      	movs	r4, #0
 800514c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005150:	4628      	mov	r0, r5
 8005152:	4798      	blx	r3
 8005154:	2000      	movs	r0, #0
 8005156:	e7e0      	b.n	800511a <_raise_r+0x12>

08005158 <raise>:
 8005158:	4b02      	ldr	r3, [pc, #8]	; (8005164 <raise+0xc>)
 800515a:	4601      	mov	r1, r0
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	f7ff bfd3 	b.w	8005108 <_raise_r>
 8005162:	bf00      	nop
 8005164:	2000000c 	.word	0x2000000c

08005168 <_kill_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4d07      	ldr	r5, [pc, #28]	; (8005188 <_kill_r+0x20>)
 800516c:	2300      	movs	r3, #0
 800516e:	4604      	mov	r4, r0
 8005170:	4608      	mov	r0, r1
 8005172:	4611      	mov	r1, r2
 8005174:	602b      	str	r3, [r5, #0]
 8005176:	f7fb fd8b 	bl	8000c90 <_kill>
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	d102      	bne.n	8005184 <_kill_r+0x1c>
 800517e:	682b      	ldr	r3, [r5, #0]
 8005180:	b103      	cbz	r3, 8005184 <_kill_r+0x1c>
 8005182:	6023      	str	r3, [r4, #0]
 8005184:	bd38      	pop	{r3, r4, r5, pc}
 8005186:	bf00      	nop
 8005188:	20000200 	.word	0x20000200

0800518c <_getpid_r>:
 800518c:	f7fb bd78 	b.w	8000c80 <_getpid>

08005190 <__sread>:
 8005190:	b510      	push	{r4, lr}
 8005192:	460c      	mov	r4, r1
 8005194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005198:	f000 f89c 	bl	80052d4 <_read_r>
 800519c:	2800      	cmp	r0, #0
 800519e:	bfab      	itete	ge
 80051a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051a2:	89a3      	ldrhlt	r3, [r4, #12]
 80051a4:	181b      	addge	r3, r3, r0
 80051a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051aa:	bfac      	ite	ge
 80051ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80051ae:	81a3      	strhlt	r3, [r4, #12]
 80051b0:	bd10      	pop	{r4, pc}

080051b2 <__swrite>:
 80051b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051b6:	461f      	mov	r7, r3
 80051b8:	898b      	ldrh	r3, [r1, #12]
 80051ba:	05db      	lsls	r3, r3, #23
 80051bc:	4605      	mov	r5, r0
 80051be:	460c      	mov	r4, r1
 80051c0:	4616      	mov	r6, r2
 80051c2:	d505      	bpl.n	80051d0 <__swrite+0x1e>
 80051c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c8:	2302      	movs	r3, #2
 80051ca:	2200      	movs	r2, #0
 80051cc:	f000 f868 	bl	80052a0 <_lseek_r>
 80051d0:	89a3      	ldrh	r3, [r4, #12]
 80051d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051da:	81a3      	strh	r3, [r4, #12]
 80051dc:	4632      	mov	r2, r6
 80051de:	463b      	mov	r3, r7
 80051e0:	4628      	mov	r0, r5
 80051e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051e6:	f000 b817 	b.w	8005218 <_write_r>

080051ea <__sseek>:
 80051ea:	b510      	push	{r4, lr}
 80051ec:	460c      	mov	r4, r1
 80051ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f2:	f000 f855 	bl	80052a0 <_lseek_r>
 80051f6:	1c43      	adds	r3, r0, #1
 80051f8:	89a3      	ldrh	r3, [r4, #12]
 80051fa:	bf15      	itete	ne
 80051fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80051fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005206:	81a3      	strheq	r3, [r4, #12]
 8005208:	bf18      	it	ne
 800520a:	81a3      	strhne	r3, [r4, #12]
 800520c:	bd10      	pop	{r4, pc}

0800520e <__sclose>:
 800520e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005212:	f000 b813 	b.w	800523c <_close_r>
	...

08005218 <_write_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4d07      	ldr	r5, [pc, #28]	; (8005238 <_write_r+0x20>)
 800521c:	4604      	mov	r4, r0
 800521e:	4608      	mov	r0, r1
 8005220:	4611      	mov	r1, r2
 8005222:	2200      	movs	r2, #0
 8005224:	602a      	str	r2, [r5, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	f7fb fd69 	bl	8000cfe <_write>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d102      	bne.n	8005236 <_write_r+0x1e>
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	b103      	cbz	r3, 8005236 <_write_r+0x1e>
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	20000200 	.word	0x20000200

0800523c <_close_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4d06      	ldr	r5, [pc, #24]	; (8005258 <_close_r+0x1c>)
 8005240:	2300      	movs	r3, #0
 8005242:	4604      	mov	r4, r0
 8005244:	4608      	mov	r0, r1
 8005246:	602b      	str	r3, [r5, #0]
 8005248:	f7fb fd75 	bl	8000d36 <_close>
 800524c:	1c43      	adds	r3, r0, #1
 800524e:	d102      	bne.n	8005256 <_close_r+0x1a>
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	b103      	cbz	r3, 8005256 <_close_r+0x1a>
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	bd38      	pop	{r3, r4, r5, pc}
 8005258:	20000200 	.word	0x20000200

0800525c <_fstat_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	4d07      	ldr	r5, [pc, #28]	; (800527c <_fstat_r+0x20>)
 8005260:	2300      	movs	r3, #0
 8005262:	4604      	mov	r4, r0
 8005264:	4608      	mov	r0, r1
 8005266:	4611      	mov	r1, r2
 8005268:	602b      	str	r3, [r5, #0]
 800526a:	f7fb fd70 	bl	8000d4e <_fstat>
 800526e:	1c43      	adds	r3, r0, #1
 8005270:	d102      	bne.n	8005278 <_fstat_r+0x1c>
 8005272:	682b      	ldr	r3, [r5, #0]
 8005274:	b103      	cbz	r3, 8005278 <_fstat_r+0x1c>
 8005276:	6023      	str	r3, [r4, #0]
 8005278:	bd38      	pop	{r3, r4, r5, pc}
 800527a:	bf00      	nop
 800527c:	20000200 	.word	0x20000200

08005280 <_isatty_r>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	4d06      	ldr	r5, [pc, #24]	; (800529c <_isatty_r+0x1c>)
 8005284:	2300      	movs	r3, #0
 8005286:	4604      	mov	r4, r0
 8005288:	4608      	mov	r0, r1
 800528a:	602b      	str	r3, [r5, #0]
 800528c:	f7fb fd6f 	bl	8000d6e <_isatty>
 8005290:	1c43      	adds	r3, r0, #1
 8005292:	d102      	bne.n	800529a <_isatty_r+0x1a>
 8005294:	682b      	ldr	r3, [r5, #0]
 8005296:	b103      	cbz	r3, 800529a <_isatty_r+0x1a>
 8005298:	6023      	str	r3, [r4, #0]
 800529a:	bd38      	pop	{r3, r4, r5, pc}
 800529c:	20000200 	.word	0x20000200

080052a0 <_lseek_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	4d07      	ldr	r5, [pc, #28]	; (80052c0 <_lseek_r+0x20>)
 80052a4:	4604      	mov	r4, r0
 80052a6:	4608      	mov	r0, r1
 80052a8:	4611      	mov	r1, r2
 80052aa:	2200      	movs	r2, #0
 80052ac:	602a      	str	r2, [r5, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	f7fb fd68 	bl	8000d84 <_lseek>
 80052b4:	1c43      	adds	r3, r0, #1
 80052b6:	d102      	bne.n	80052be <_lseek_r+0x1e>
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	b103      	cbz	r3, 80052be <_lseek_r+0x1e>
 80052bc:	6023      	str	r3, [r4, #0]
 80052be:	bd38      	pop	{r3, r4, r5, pc}
 80052c0:	20000200 	.word	0x20000200

080052c4 <_malloc_usable_size_r>:
 80052c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052c8:	1f18      	subs	r0, r3, #4
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	bfbc      	itt	lt
 80052ce:	580b      	ldrlt	r3, [r1, r0]
 80052d0:	18c0      	addlt	r0, r0, r3
 80052d2:	4770      	bx	lr

080052d4 <_read_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4d07      	ldr	r5, [pc, #28]	; (80052f4 <_read_r+0x20>)
 80052d8:	4604      	mov	r4, r0
 80052da:	4608      	mov	r0, r1
 80052dc:	4611      	mov	r1, r2
 80052de:	2200      	movs	r2, #0
 80052e0:	602a      	str	r2, [r5, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	f7fb fcee 	bl	8000cc4 <_read>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_read_r+0x1e>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_read_r+0x1e>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	20000200 	.word	0x20000200

080052f8 <_init>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	bf00      	nop
 80052fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fe:	bc08      	pop	{r3}
 8005300:	469e      	mov	lr, r3
 8005302:	4770      	bx	lr

08005304 <_fini>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	bf00      	nop
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr
