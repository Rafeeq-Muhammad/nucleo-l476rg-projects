
nucleo-l476rg-SIM33EAU_GPS_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08005ddc  08005ddc  00015ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fa4  08005fa4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fac  08005fac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fac  08005fac  00015fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000070  08006024  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08006024  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010264  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213c  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  00032440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  00032ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027109  00000000  00000000  00033888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd28  00000000  00000000  0005a991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb6d3  00000000  00000000  000676b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00152d8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003638  00000000  00000000  00152de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005dc4 	.word	0x08005dc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005dc4 	.word	0x08005dc4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN PTD */

uint8_t flag = 0;

// this interrupts changes flag to 1 as soon as the uint8_t buff[300] is full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

	flag = 1;
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <HAL_UART_RxCpltCallback+0x1c>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]

}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000008c 	.word	0x2000008c

08000598 <nmea0183_checksum>:

// function to calculate checksum of the NMEA sentence
// -4, but not -3 because the NMEA sentences are delimited with \r\n, and there also is the invisible \r in the end
int nmea0183_checksum(char *msg) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

	int checksum = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
	int j = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]

	// the first $ sign and the last two bytes of original CRC + the * sign
	for (j = 1; j < strlen(msg) - 4; j++) {
 80005a8:	2301      	movs	r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	e00a      	b.n	80005c4 <nmea0183_checksum+0x2c>
		checksum = checksum ^ (unsigned) msg[j];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4053      	eors	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
	for (j = 1; j < strlen(msg) - 4; j++) {
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff fe03 	bl	80001d0 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	1f1a      	subs	r2, r3, #4
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d8ec      	bhi.n	80005ae <nmea0183_checksum+0x16>
	}

	return checksum;
 80005d4:	68fb      	ldr	r3, [r7, #12]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 80005e6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005e8:	f000 fd92 	bl	8001110 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005ec:	f000 fa18 	bl	8000a20 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005f0:	f000 fae6 	bl	8000bc0 <MX_GPIO_Init>
	MX_DMA_Init();
 80005f4:	f000 fac6 	bl	8000b84 <MX_DMA_Init>
	MX_USART1_UART_Init();
 80005f8:	f000 fa64 	bl	8000ac4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80005fc:	f000 fa92 	bl	8000b24 <MX_USART2_UART_Init>

	char hH[2]; // hours
	char mM[2]; // minutes
	char sS[2]; // seconds

	uint8_t cnt = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3

	HAL_UART_Receive_DMA(&huart1, buff, 255);
 8000606:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800060a:	22ff      	movs	r2, #255	; 0xff
 800060c:	4619      	mov	r1, r3
 800060e:	4861      	ldr	r0, [pc, #388]	; (8000794 <main+0x1b4>)
 8000610:	f002 ff56 	bl	80034c0 <HAL_UART_Receive_DMA>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (flag == 1) { // interrupt signals that the buffer buff[300] is full
 8000614:	4b60      	ldr	r3, [pc, #384]	; (8000798 <main+0x1b8>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	f040 81e8 	bne.w	80009ee <main+0x40e>
			  or \r Carriage return
			  or \n Line feed, end delimiter

			 */

			memset(buffStr, 0, 255);
 800061e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000622:	22ff      	movs	r2, #255	; 0xff
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 f976 	bl	8004918 <memset>

			sprintf(buffStr, "%s", buff);
 800062c:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8000630:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000634:	4959      	ldr	r1, [pc, #356]	; (800079c <main+0x1bc>)
 8000636:	4618      	mov	r0, r3
 8000638:	f004 f976 	bl	8004928 <siprintf>

			// if we want to display the incoming raw data
			HAL_UART_Transmit(&huart2, buff, 255, 70);
 800063c:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8000640:	2346      	movs	r3, #70	; 0x46
 8000642:	22ff      	movs	r2, #255	; 0xff
 8000644:	4856      	ldr	r0, [pc, #344]	; (80007a0 <main+0x1c0>)
 8000646:	f002 fea7 	bl	8003398 <HAL_UART_Transmit>

			// splitting the buffStr by the "\n" delimiter with the strsep() C function
			// see http://www.manpagez.com/man/3/strsep/
			char *token, *string;

			string = strdup(buffStr);
 800064a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800064e:	4618      	mov	r0, r3
 8000650:	f004 f9ae 	bl	80049b0 <strdup>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	601a      	str	r2, [r3, #0]

			// actually splitting the string by "\n" delimiter
			while ((token = strsep(&string, "\n")) != NULL) {
 800065e:	e1b6      	b.n	80009ce <main+0x3ee>

				memset(nmeaSnt, 0, 80);
 8000660:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000664:	2250      	movs	r2, #80	; 0x50
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f004 f955 	bl	8004918 <memset>

				sprintf(nmeaSnt, "%s", token);
 800066e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000672:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8000676:	4949      	ldr	r1, [pc, #292]	; (800079c <main+0x1bc>)
 8000678:	4618      	mov	r0, r3
 800067a:	f004 f955 	bl	8004928 <siprintf>

				// selecting only $GNGLL sentences, combined GPS and GLONASS
				// on my GPS sensor this good NMEA sentence is always 50 characters
				if ((strstr(nmeaSnt, "$GNGLL") != 0) && strlen(nmeaSnt) > 49 && strstr(nmeaSnt, "*") != 0) {
 800067e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000682:	4948      	ldr	r1, [pc, #288]	; (80007a4 <main+0x1c4>)
 8000684:	4618      	mov	r0, r3
 8000686:	f004 f9b5 	bl	80049f4 <strstr>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	f000 819e 	beq.w	80009ce <main+0x3ee>
 8000692:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fd9a 	bl	80001d0 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	2b31      	cmp	r3, #49	; 0x31
 80006a0:	f240 8195 	bls.w	80009ce <main+0x3ee>
 80006a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006a8:	212a      	movs	r1, #42	; 0x2a
 80006aa:	4618      	mov	r0, r3
 80006ac:	f004 f96b 	bl	8004986 <strchr>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	f000 818b 	beq.w	80009ce <main+0x3ee>

					rawSum = strstr(nmeaSnt, "*");
 80006b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006bc:	212a      	movs	r1, #42	; 0x2a
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 f961 	bl	8004986 <strchr>
 80006c4:	f8c7 0294 	str.w	r0, [r7, #660]	; 0x294

					memcpy(smNmbr, &rawSum[1], 2);
 80006c8:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80006cc:	3301      	adds	r3, #1
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006d6:	801a      	strh	r2, [r3, #0]

					smNmbr[2] = '\0';
 80006d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006dc:	2200      	movs	r2, #0
 80006de:	709a      	strb	r2, [r3, #2]

					uint8_t intSum = nmea0183_checksum(nmeaSnt);
 80006e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff57 	bl	8000598 <nmea0183_checksum>
 80006ea:	4603      	mov	r3, r0
 80006ec:	f887 3293 	strb.w	r3, [r7, #659]	; 0x293

					char hex[2];

					// "%X" unsigned hexadecimal integer (capital letters)
					sprintf(hex, "%X", intSum);
 80006f0:	f897 2293 	ldrb.w	r2, [r7, #659]	; 0x293
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	492b      	ldr	r1, [pc, #172]	; (80007a8 <main+0x1c8>)
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 f914 	bl	8004928 <siprintf>

					// checksum data verification, if OK, then we can really trust
					// the data in the the NMEA sentence
					if (strstr(smNmbr, hex) != NULL) {
 8000700:	f107 020c 	add.w	r2, r7, #12
 8000704:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000708:	4611      	mov	r1, r2
 800070a:	4618      	mov	r0, r3
 800070c:	f004 f972 	bl	80049f4 <strstr>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	f000 815b 	beq.w	80009ce <main+0x3ee>

						//if we want display good $GNGLL NMEA sentences
						//HAL_UART_Transmit(&huart2, nmeaSnt, 50, 70);
						//HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 200);

						cnt = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3

						// splitting the good NMEA sentence into the tokens by the comma delimiter
						for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 800071e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000722:	4922      	ldr	r1, [pc, #136]	; (80007ac <main+0x1cc>)
 8000724:	4618      	mov	r0, r3
 8000726:	f004 f97d 	bl	8004a24 <strtok>
 800072a:	f8c7 029c 	str.w	r0, [r7, #668]	; 0x29c
 800072e:	e052      	b.n	80007d6 <main+0x1f6>

							switch (cnt) {
 8000730:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 8000734:	3b01      	subs	r3, #1
 8000736:	2b04      	cmp	r3, #4
 8000738:	d842      	bhi.n	80007c0 <main+0x1e0>
 800073a:	a201      	add	r2, pc, #4	; (adr r2, 8000740 <main+0x160>)
 800073c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000740:	08000755 	.word	0x08000755
 8000744:	08000765 	.word	0x08000765
 8000748:	08000775 	.word	0x08000775
 800074c:	08000785 	.word	0x08000785
 8000750:	080007b1 	.word	0x080007b1
							case 1:
								latRaw = strdup(pV);
 8000754:	f8d7 029c 	ldr.w	r0, [r7, #668]	; 0x29c
 8000758:	f004 f92a 	bl	80049b0 <strdup>
 800075c:	4603      	mov	r3, r0
 800075e:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
								break;
 8000762:	e02d      	b.n	80007c0 <main+0x1e0>
							case 2:
								hemNS = strdup(pV);
 8000764:	f8d7 029c 	ldr.w	r0, [r7, #668]	; 0x29c
 8000768:	f004 f922 	bl	80049b0 <strdup>
 800076c:	4603      	mov	r3, r0
 800076e:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
								break;
 8000772:	e025      	b.n	80007c0 <main+0x1e0>
							case 3:
								lonRaw = strdup(pV);
 8000774:	f8d7 029c 	ldr.w	r0, [r7, #668]	; 0x29c
 8000778:	f004 f91a 	bl	80049b0 <strdup>
 800077c:	4603      	mov	r3, r0
 800077e:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
								break;
 8000782:	e01d      	b.n	80007c0 <main+0x1e0>
							case 4:
								hemEW = strdup(pV);
 8000784:	f8d7 029c 	ldr.w	r0, [r7, #668]	; 0x29c
 8000788:	f004 f912 	bl	80049b0 <strdup>
 800078c:	4603      	mov	r3, r0
 800078e:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
								break;
 8000792:	e015      	b.n	80007c0 <main+0x1e0>
 8000794:	200000e4 	.word	0x200000e4
 8000798:	2000008c 	.word	0x2000008c
 800079c:	08005ddc 	.word	0x08005ddc
 80007a0:	20000168 	.word	0x20000168
 80007a4:	08005de0 	.word	0x08005de0
 80007a8:	08005de8 	.word	0x08005de8
 80007ac:	08005dec 	.word	0x08005dec
							case 5:
								utcRaw = strdup(pV);
 80007b0:	f8d7 029c 	ldr.w	r0, [r7, #668]	; 0x29c
 80007b4:	f004 f8fc 	bl	80049b0 <strdup>
 80007b8:	4603      	mov	r3, r0
 80007ba:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
								break;
 80007be:	bf00      	nop
							}

							cnt++;
 80007c0:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 80007c4:	3301      	adds	r3, #1
 80007c6:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
						for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 80007ca:	498b      	ldr	r1, [pc, #556]	; (80009f8 <main+0x418>)
 80007cc:	2000      	movs	r0, #0
 80007ce:	f004 f929 	bl	8004a24 <strtok>
 80007d2:	f8c7 029c 	str.w	r0, [r7, #668]	; 0x29c
 80007d6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1a8      	bne.n	8000730 <main+0x150>
 80007de:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	b29a      	uxth	r2, r3

						}  // end for()

						memcpy(latDg, &latRaw[0], 2);
 80007e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007ea:	801a      	strh	r2, [r3, #0]
						latDg[2] = '\0';
 80007ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007f0:	2200      	movs	r2, #0
 80007f2:	709a      	strb	r2, [r3, #2]

						memcpy(latMS, &latRaw[2], 7);
 80007f4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80007f8:	1c9a      	adds	r2, r3, #2
 80007fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007fe:	6810      	ldr	r0, [r2, #0]
 8000800:	6018      	str	r0, [r3, #0]
 8000802:	8891      	ldrh	r1, [r2, #4]
 8000804:	7992      	ldrb	r2, [r2, #6]
 8000806:	8099      	strh	r1, [r3, #4]
 8000808:	719a      	strb	r2, [r3, #6]
						latMS[7] = '\0';
 800080a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800080e:	2200      	movs	r2, #0
 8000810:	71da      	strb	r2, [r3, #7]

						memcpy(lonDg, &lonRaw[0], 3);
 8000812:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000816:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 800081a:	8811      	ldrh	r1, [r2, #0]
 800081c:	7892      	ldrb	r2, [r2, #2]
 800081e:	8019      	strh	r1, [r3, #0]
 8000820:	709a      	strb	r2, [r3, #2]
						lonDg[3] = '\0';
 8000822:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000826:	2200      	movs	r2, #0
 8000828:	70da      	strb	r2, [r3, #3]

						memcpy(lonMS, &lonRaw[3], 7);
 800082a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800082e:	1cda      	adds	r2, r3, #3
 8000830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000834:	6810      	ldr	r0, [r2, #0]
 8000836:	6018      	str	r0, [r3, #0]
 8000838:	8891      	ldrh	r1, [r2, #4]
 800083a:	7992      	ldrb	r2, [r2, #6]
 800083c:	8099      	strh	r1, [r3, #4]
 800083e:	719a      	strb	r2, [r3, #6]
						lonMS[7] = '\0';
 8000840:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000844:	2200      	movs	r2, #0
 8000846:	71da      	strb	r2, [r3, #7]
						char strLonMS[7];
						sprintf(strLonMS, "%s", lonMS);
 8000848:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	496b      	ldr	r1, [pc, #428]	; (80009fc <main+0x41c>)
 8000850:	4618      	mov	r0, r3
 8000852:	f004 f869 	bl	8004928 <siprintf>
 8000856:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	b29a      	uxth	r2, r3

						//converting the UTC time in the hh:mm:ss format
						memcpy(hH, &utcRaw[0], 2);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	801a      	strh	r2, [r3, #0]
						hH[2] = '\0';
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	2200      	movs	r2, #0
 800086a:	709a      	strb	r2, [r3, #2]

						memcpy(mM, &utcRaw[2], 2);
 800086c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8000870:	3302      	adds	r3, #2
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	b29a      	uxth	r2, r3
 8000876:	f107 0318 	add.w	r3, r7, #24
 800087a:	801a      	strh	r2, [r3, #0]
						mM[2] = '\0';
 800087c:	f107 0318 	add.w	r3, r7, #24
 8000880:	2200      	movs	r2, #0
 8000882:	709a      	strb	r2, [r3, #2]

						memcpy(sS, &utcRaw[4], 2);
 8000884:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8000888:	3304      	adds	r3, #4
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	b29a      	uxth	r2, r3
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	801a      	strh	r2, [r3, #0]
						sS[2] = '\0';
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	709a      	strb	r2, [r3, #2]

						strcpy(strUTC, hH);
 800089c:	f107 021c 	add.w	r2, r7, #28
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	4611      	mov	r1, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f004 f87a 	bl	80049a0 <strcpy>
						strcat(strUTC, ":");
 80008ac:	f107 0320 	add.w	r3, r7, #32
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fc8d 	bl	80001d0 <strlen>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	f107 0320 	add.w	r3, r7, #32
 80008be:	4413      	add	r3, r2
 80008c0:	494f      	ldr	r1, [pc, #316]	; (8000a00 <main+0x420>)
 80008c2:	461a      	mov	r2, r3
 80008c4:	460b      	mov	r3, r1
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	8013      	strh	r3, [r2, #0]
						strcat(strUTC, mM);
 80008ca:	f107 0218 	add.w	r2, r7, #24
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f004 f847 	bl	8004968 <strcat>
						strcat(strUTC, ":");
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fc76 	bl	80001d0 <strlen>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	4413      	add	r3, r2
 80008ee:	4944      	ldr	r1, [pc, #272]	; (8000a00 <main+0x420>)
 80008f0:	461a      	mov	r2, r3
 80008f2:	460b      	mov	r3, r1
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	8013      	strh	r3, [r2, #0]
						strcat(strUTC, sS);
 80008f8:	f107 0214 	add.w	r2, r7, #20
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f004 f830 	bl	8004968 <strcat>
						strUTC[8] = '\0';
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	2200      	movs	r2, #0
 800090e:	721a      	strb	r2, [r3, #8]

						HAL_UART_Transmit(&huart2, (uint8_t*) hemNS, 1, 200);
 8000910:	23c8      	movs	r3, #200	; 0xc8
 8000912:	2201      	movs	r2, #1
 8000914:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8000918:	483a      	ldr	r0, [pc, #232]	; (8000a04 <main+0x424>)
 800091a:	f002 fd3d 	bl	8003398 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) " ", 1, 200);
 800091e:	23c8      	movs	r3, #200	; 0xc8
 8000920:	2201      	movs	r2, #1
 8000922:	4939      	ldr	r1, [pc, #228]	; (8000a08 <main+0x428>)
 8000924:	4837      	ldr	r0, [pc, #220]	; (8000a04 <main+0x424>)
 8000926:	f002 fd37 	bl	8003398 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) latDg, 2, 200);
 800092a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800092e:	23c8      	movs	r3, #200	; 0xc8
 8000930:	2202      	movs	r2, #2
 8000932:	4834      	ldr	r0, [pc, #208]	; (8000a04 <main+0x424>)
 8000934:	f002 fd30 	bl	8003398 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\241", 1, 200);
 8000938:	23c8      	movs	r3, #200	; 0xc8
 800093a:	2201      	movs	r2, #1
 800093c:	4933      	ldr	r1, [pc, #204]	; (8000a0c <main+0x42c>)
 800093e:	4831      	ldr	r0, [pc, #196]	; (8000a04 <main+0x424>)
 8000940:	f002 fd2a 	bl	8003398 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) latMS, 7, 200);
 8000944:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000948:	23c8      	movs	r3, #200	; 0xc8
 800094a:	2207      	movs	r2, #7
 800094c:	482d      	ldr	r0, [pc, #180]	; (8000a04 <main+0x424>)
 800094e:	f002 fd23 	bl	8003398 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\', ", 3, 200);
 8000952:	23c8      	movs	r3, #200	; 0xc8
 8000954:	2203      	movs	r2, #3
 8000956:	492e      	ldr	r1, [pc, #184]	; (8000a10 <main+0x430>)
 8000958:	482a      	ldr	r0, [pc, #168]	; (8000a04 <main+0x424>)
 800095a:	f002 fd1d 	bl	8003398 <HAL_UART_Transmit>

						HAL_UART_Transmit(&huart2, (uint8_t*) hemEW, 1, 200);
 800095e:	23c8      	movs	r3, #200	; 0xc8
 8000960:	2201      	movs	r2, #1
 8000962:	f8d7 12a8 	ldr.w	r1, [r7, #680]	; 0x2a8
 8000966:	4827      	ldr	r0, [pc, #156]	; (8000a04 <main+0x424>)
 8000968:	f002 fd16 	bl	8003398 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) " ", 1, 200);
 800096c:	23c8      	movs	r3, #200	; 0xc8
 800096e:	2201      	movs	r2, #1
 8000970:	4925      	ldr	r1, [pc, #148]	; (8000a08 <main+0x428>)
 8000972:	4824      	ldr	r0, [pc, #144]	; (8000a04 <main+0x424>)
 8000974:	f002 fd10 	bl	8003398 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) lonDg, 3, 200);
 8000978:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800097c:	23c8      	movs	r3, #200	; 0xc8
 800097e:	2203      	movs	r2, #3
 8000980:	4820      	ldr	r0, [pc, #128]	; (8000a04 <main+0x424>)
 8000982:	f002 fd09 	bl	8003398 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\241", 1, 200);
 8000986:	23c8      	movs	r3, #200	; 0xc8
 8000988:	2201      	movs	r2, #1
 800098a:	4920      	ldr	r1, [pc, #128]	; (8000a0c <main+0x42c>)
 800098c:	481d      	ldr	r0, [pc, #116]	; (8000a04 <main+0x424>)
 800098e:	f002 fd03 	bl	8003398 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) strLonMS, strlen(strLonMS), 200);
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fc1b 	bl	80001d0 <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	b29a      	uxth	r2, r3
 800099e:	1d39      	adds	r1, r7, #4
 80009a0:	23c8      	movs	r3, #200	; 0xc8
 80009a2:	4818      	ldr	r0, [pc, #96]	; (8000a04 <main+0x424>)
 80009a4:	f002 fcf8 	bl	8003398 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\', UTC: ", 8, 200);
 80009a8:	23c8      	movs	r3, #200	; 0xc8
 80009aa:	2208      	movs	r2, #8
 80009ac:	4919      	ldr	r1, [pc, #100]	; (8000a14 <main+0x434>)
 80009ae:	4815      	ldr	r0, [pc, #84]	; (8000a04 <main+0x424>)
 80009b0:	f002 fcf2 	bl	8003398 <HAL_UART_Transmit>

						HAL_UART_Transmit(&huart2, (uint8_t*) strUTC, 8, 200);
 80009b4:	f107 0120 	add.w	r1, r7, #32
 80009b8:	23c8      	movs	r3, #200	; 0xc8
 80009ba:	2208      	movs	r2, #8
 80009bc:	4811      	ldr	r0, [pc, #68]	; (8000a04 <main+0x424>)
 80009be:	f002 fceb 	bl	8003398 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 200);
 80009c2:	23c8      	movs	r3, #200	; 0xc8
 80009c4:	2201      	movs	r2, #1
 80009c6:	4914      	ldr	r1, [pc, #80]	; (8000a18 <main+0x438>)
 80009c8:	480e      	ldr	r0, [pc, #56]	; (8000a04 <main+0x424>)
 80009ca:	f002 fce5 	bl	8003398 <HAL_UART_Transmit>
			while ((token = strsep(&string, "\n")) != NULL) {
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4911      	ldr	r1, [pc, #68]	; (8000a18 <main+0x438>)
 80009d4:	4618      	mov	r0, r3
 80009d6:	f004 f808 	bl	80049ea <strsep>
 80009da:	f8c7 0298 	str.w	r0, [r7, #664]	; 0x298
 80009de:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	f47f ae3c 	bne.w	8000660 <main+0x80>

				} // end of $GNGLL sentences selection

			} // end of splitting the buffStr by the "\n" delimiter with the strsep() C function

			flag = 0; // we are ready to get new data from the sensor
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <main+0x43c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]

		} // end of one interrupt/full-buffer cycle

		HAL_Delay(200);
 80009ee:	20c8      	movs	r0, #200	; 0xc8
 80009f0:	f000 fc0a 	bl	8001208 <HAL_Delay>
		if (flag == 1) { // interrupt signals that the buffer buff[300] is full
 80009f4:	e60e      	b.n	8000614 <main+0x34>
 80009f6:	bf00      	nop
 80009f8:	08005dec 	.word	0x08005dec
 80009fc:	08005ddc 	.word	0x08005ddc
 8000a00:	08005df0 	.word	0x08005df0
 8000a04:	20000168 	.word	0x20000168
 8000a08:	08005df4 	.word	0x08005df4
 8000a0c:	08005df8 	.word	0x08005df8
 8000a10:	08005dfc 	.word	0x08005dfc
 8000a14:	08005e00 	.word	0x08005e00
 8000a18:	08005e0c 	.word	0x08005e0c
 8000a1c:	2000008c 	.word	0x2000008c

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b096      	sub	sp, #88	; 0x58
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	2244      	movs	r2, #68	; 0x44
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f003 ff72 	bl	8004918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	463b      	mov	r3, r7
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a46:	f001 f95b 	bl	8001d00 <HAL_PWREx_ControlVoltageScaling>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a50:	f000 f91c 	bl	8000c8c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a54:	2302      	movs	r3, #2
 8000a56:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a5e:	2310      	movs	r3, #16
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a62:	2302      	movs	r3, #2
 8000a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a66:	2302      	movs	r3, #2
 8000a68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a6e:	230a      	movs	r3, #10
 8000a70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a72:	2307      	movs	r3, #7
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 f992 	bl	8001dac <HAL_RCC_OscConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a8e:	f000 f8fd 	bl	8000c8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a92:	230f      	movs	r3, #15
 8000a94:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a96:	2303      	movs	r3, #3
 8000a98:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 fd64 	bl	8002578 <HAL_RCC_ClockConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ab6:	f000 f8e9 	bl	8000c8c <Error_Handler>
  }
}
 8000aba:	bf00      	nop
 8000abc:	3758      	adds	r7, #88	; 0x58
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_USART1_UART_Init+0x58>)
 8000aca:	4a15      	ldr	r2, [pc, #84]	; (8000b20 <MX_USART1_UART_Init+0x5c>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <MX_USART1_UART_Init+0x58>)
 8000ad0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ad4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_USART1_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_USART1_UART_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_USART1_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_USART1_UART_Init+0x58>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_USART1_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_USART1_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_USART1_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_USART1_UART_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_USART1_UART_Init+0x58>)
 8000b08:	f002 fbf8 	bl	80032fc <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b12:	f000 f8bb 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000e4 	.word	0x200000e4
 8000b20:	40013800 	.word	0x40013800

08000b24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b2a:	4a15      	ldr	r2, [pc, #84]	; (8000b80 <MX_USART2_UART_Init+0x5c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b68:	f002 fbc8 	bl	80032fc <HAL_UART_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b72:	f000 f88b 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000168 	.word	0x20000168
 8000b80:	40004400 	.word	0x40004400

08000b84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_DMA_Init+0x38>)
 8000b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <MX_DMA_Init+0x38>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6493      	str	r3, [r2, #72]	; 0x48
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_DMA_Init+0x38>)
 8000b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	200f      	movs	r0, #15
 8000ba8:	f000 fc2d 	bl	8001406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000bac:	200f      	movs	r0, #15
 8000bae:	f000 fc46 	bl	800143e <HAL_NVIC_EnableIRQ>

}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <MX_GPIO_Init+0xc4>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a2a      	ldr	r2, [pc, #168]	; (8000c84 <MX_GPIO_Init+0xc4>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <MX_GPIO_Init+0xc4>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bee:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <MX_GPIO_Init+0xc4>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4a24      	ldr	r2, [pc, #144]	; (8000c84 <MX_GPIO_Init+0xc4>)
 8000bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <MX_GPIO_Init+0xc4>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_GPIO_Init+0xc4>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4a1e      	ldr	r2, [pc, #120]	; (8000c84 <MX_GPIO_Init+0xc4>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_GPIO_Init+0xc4>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_GPIO_Init+0xc4>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a18      	ldr	r2, [pc, #96]	; (8000c84 <MX_GPIO_Init+0xc4>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_GPIO_Init+0xc4>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2120      	movs	r1, #32
 8000c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3e:	f001 f839 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c48:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	480b      	ldr	r0, [pc, #44]	; (8000c88 <MX_GPIO_Init+0xc8>)
 8000c5a:	f000 fe81 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c5e:	2320      	movs	r3, #32
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c78:	f000 fe72 	bl	8001960 <HAL_GPIO_Init>

}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	; 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40021000 	.word	0x40021000
 8000c88:	48000800 	.word	0x48000800

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <Error_Handler+0x8>
	...

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_MspInit+0x44>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <HAL_MspInit+0x44>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6613      	str	r3, [r2, #96]	; 0x60
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_MspInit+0x44>)
 8000cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_MspInit+0x44>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_MspInit+0x44>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_MspInit+0x44>)
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b0ae      	sub	sp, #184	; 0xb8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	2288      	movs	r2, #136	; 0x88
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f003 fe09 	bl	8004918 <memset>
  if(huart->Instance==USART1)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a5c      	ldr	r2, [pc, #368]	; (8000e7c <HAL_UART_MspInit+0x19c>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d16f      	bne.n	8000df0 <HAL_UART_MspInit+0x110>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d14:	2300      	movs	r3, #0
 8000d16:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f001 fe31 	bl	8002984 <HAL_RCCEx_PeriphCLKConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d28:	f7ff ffb0 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d2c:	4b54      	ldr	r3, [pc, #336]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d30:	4a53      	ldr	r2, [pc, #332]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d36:	6613      	str	r3, [r2, #96]	; 0x60
 8000d38:	4b51      	ldr	r3, [pc, #324]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d40:	61bb      	str	r3, [r7, #24]
 8000d42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	4b4e      	ldr	r3, [pc, #312]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d48:	4a4d      	ldr	r2, [pc, #308]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d50:	4b4b      	ldr	r3, [pc, #300]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d5c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d76:	2307      	movs	r3, #7
 8000d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d80:	4619      	mov	r1, r3
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d86:	f000 fdeb 	bl	8001960 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000d8a:	4b3e      	ldr	r3, [pc, #248]	; (8000e84 <HAL_UART_MspInit+0x1a4>)
 8000d8c:	4a3e      	ldr	r2, [pc, #248]	; (8000e88 <HAL_UART_MspInit+0x1a8>)
 8000d8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000d90:	4b3c      	ldr	r3, [pc, #240]	; (8000e84 <HAL_UART_MspInit+0x1a4>)
 8000d92:	2202      	movs	r2, #2
 8000d94:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d96:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <HAL_UART_MspInit+0x1a4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d9c:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <HAL_UART_MspInit+0x1a4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000da2:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <HAL_UART_MspInit+0x1a4>)
 8000da4:	2280      	movs	r2, #128	; 0x80
 8000da6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000da8:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <HAL_UART_MspInit+0x1a4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dae:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <HAL_UART_MspInit+0x1a4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000db4:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <HAL_UART_MspInit+0x1a4>)
 8000db6:	2220      	movs	r2, #32
 8000db8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <HAL_UART_MspInit+0x1a4>)
 8000dbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000dc2:	4830      	ldr	r0, [pc, #192]	; (8000e84 <HAL_UART_MspInit+0x1a4>)
 8000dc4:	f000 fb56 	bl	8001474 <HAL_DMA_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8000dce:	f7ff ff5d 	bl	8000c8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a2b      	ldr	r2, [pc, #172]	; (8000e84 <HAL_UART_MspInit+0x1a4>)
 8000dd6:	671a      	str	r2, [r3, #112]	; 0x70
 8000dd8:	4a2a      	ldr	r2, [pc, #168]	; (8000e84 <HAL_UART_MspInit+0x1a4>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	2025      	movs	r0, #37	; 0x25
 8000de4:	f000 fb0f 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000de8:	2025      	movs	r0, #37	; 0x25
 8000dea:	f000 fb28 	bl	800143e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dee:	e040      	b.n	8000e72 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a25      	ldr	r2, [pc, #148]	; (8000e8c <HAL_UART_MspInit+0x1ac>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d13b      	bne.n	8000e72 <HAL_UART_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fdbc 	bl	8002984 <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_UART_MspInit+0x136>
      Error_Handler();
 8000e12:	f7ff ff3b 	bl	8000c8c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	6593      	str	r3, [r2, #88]	; 0x58
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e46:	230c      	movs	r3, #12
 8000e48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5e:	2307      	movs	r3, #7
 8000e60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6e:	f000 fd77 	bl	8001960 <HAL_GPIO_Init>
}
 8000e72:	bf00      	nop
 8000e74:	37b8      	adds	r7, #184	; 0xb8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40013800 	.word	0x40013800
 8000e80:	40021000 	.word	0x40021000
 8000e84:	2000009c 	.word	0x2000009c
 8000e88:	40020058 	.word	0x40020058
 8000e8c:	40004400 	.word	0x40004400

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000edc:	f000 f974 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <DMA1_Channel5_IRQHandler+0x10>)
 8000eea:	f000 fc5a 	bl	80017a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000009c 	.word	0x2000009c

08000ef8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <USART1_IRQHandler+0x10>)
 8000efe:	f002 fb35 	bl	800356c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200000e4 	.word	0x200000e4

08000f0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
	return 1;
 8000f10:	2301      	movs	r3, #1
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_kill>:

int _kill(int pid, int sig)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f26:	f003 fccd 	bl	80048c4 <__errno>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2216      	movs	r2, #22
 8000f2e:	601a      	str	r2, [r3, #0]
	return -1;
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <_exit>:

void _exit (int status)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ffe7 	bl	8000f1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f4e:	e7fe      	b.n	8000f4e <_exit+0x12>

08000f50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	e00a      	b.n	8000f78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f62:	f3af 8000 	nop.w
 8000f66:	4601      	mov	r1, r0
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	60ba      	str	r2, [r7, #8]
 8000f6e:	b2ca      	uxtb	r2, r1
 8000f70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dbf0      	blt.n	8000f62 <_read+0x12>
	}

return len;
 8000f80:	687b      	ldr	r3, [r7, #4]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	e009      	b.n	8000fb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	60ba      	str	r2, [r7, #8]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3301      	adds	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dbf1      	blt.n	8000f9c <_write+0x12>
	}
	return len;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_close>:

int _close(int file)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
	return -1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fea:	605a      	str	r2, [r3, #4]
	return 0;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <_isatty>:

int _isatty(int file)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
	return 1;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
	return 0;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <_sbrk+0x5c>)
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <_sbrk+0x60>)
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <_sbrk+0x64>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <_sbrk+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	429a      	cmp	r2, r3
 800105a:	d207      	bcs.n	800106c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800105c:	f003 fc32 	bl	80048c4 <__errno>
 8001060:	4603      	mov	r3, r0
 8001062:	220c      	movs	r2, #12
 8001064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e009      	b.n	8001080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <_sbrk+0x64>)
 800107c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20018000 	.word	0x20018000
 800108c:	00000400 	.word	0x00000400
 8001090:	20000090 	.word	0x20000090
 8001094:	20000200 	.word	0x20000200

08001098 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <SystemInit+0x20>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <SystemInit+0x20>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c0:	f7ff ffea 	bl	8001098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010c6:	490d      	ldr	r1, [pc, #52]	; (80010fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <LoopForever+0xe>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010dc:	4c0a      	ldr	r4, [pc, #40]	; (8001108 <LoopForever+0x16>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ea:	f003 fbf1 	bl	80048d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ee:	f7ff fa77 	bl	80005e0 <main>

080010f2 <LoopForever>:

LoopForever:
    b LoopForever
 80010f2:	e7fe      	b.n	80010f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001100:	08005fb4 	.word	0x08005fb4
  ldr r2, =_sbss
 8001104:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001108:	20000200 	.word	0x20000200

0800110c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC1_2_IRQHandler>
	...

08001110 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HAL_Init+0x3c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <HAL_Init+0x3c>)
 8001120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001124:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001126:	2003      	movs	r0, #3
 8001128:	f000 f962 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800112c:	2000      	movs	r0, #0
 800112e:	f000 f80f 	bl	8001150 <HAL_InitTick>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d002      	beq.n	800113e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	e001      	b.n	8001142 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800113e:	f7ff fdab 	bl	8000c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001142:	79fb      	ldrb	r3, [r7, #7]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40022000 	.word	0x40022000

08001150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_InitTick+0x6c>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d023      	beq.n	80011ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_InitTick+0x70>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_InitTick+0x6c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001172:	fbb3 f3f1 	udiv	r3, r3, r1
 8001176:	fbb2 f3f3 	udiv	r3, r2, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f96d 	bl	800145a <HAL_SYSTICK_Config>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10f      	bne.n	80011a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b0f      	cmp	r3, #15
 800118a:	d809      	bhi.n	80011a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118c:	2200      	movs	r2, #0
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f000 f937 	bl	8001406 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001198:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_InitTick+0x74>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e007      	b.n	80011b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e004      	b.n	80011b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	73fb      	strb	r3, [r7, #15]
 80011aa:	e001      	b.n	80011b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000000 	.word	0x20000000
 80011c4:	20000004 	.word	0x20000004

080011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <HAL_IncTick+0x24>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008
 80011ec:	200001ec 	.word	0x200001ec

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <HAL_GetTick+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200001ec 	.word	0x200001ec

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff ffee 	bl	80011f0 <HAL_GetTick>
 8001214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001220:	d005      	beq.n	800122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_Delay+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800122e:	bf00      	nop
 8001230:	f7ff ffde 	bl	80011f0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <HAL_Delay+0x28>
  {
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <__NVIC_EnableIRQ+0x38>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff29 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff3e 	bl	8001298 <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff8e 	bl	8001344 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff31 	bl	80012b4 <__NVIC_EnableIRQ>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffa2 	bl	80013ac <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e098      	b.n	80015b8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	4b4d      	ldr	r3, [pc, #308]	; (80015c4 <HAL_DMA_Init+0x150>)
 800148e:	429a      	cmp	r2, r3
 8001490:	d80f      	bhi.n	80014b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	4b4b      	ldr	r3, [pc, #300]	; (80015c8 <HAL_DMA_Init+0x154>)
 800149a:	4413      	add	r3, r2
 800149c:	4a4b      	ldr	r2, [pc, #300]	; (80015cc <HAL_DMA_Init+0x158>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	009a      	lsls	r2, r3, #2
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a48      	ldr	r2, [pc, #288]	; (80015d0 <HAL_DMA_Init+0x15c>)
 80014ae:	641a      	str	r2, [r3, #64]	; 0x40
 80014b0:	e00e      	b.n	80014d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b46      	ldr	r3, [pc, #280]	; (80015d4 <HAL_DMA_Init+0x160>)
 80014ba:	4413      	add	r3, r2
 80014bc:	4a43      	ldr	r2, [pc, #268]	; (80015cc <HAL_DMA_Init+0x158>)
 80014be:	fba2 2303 	umull	r2, r3, r2, r3
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	009a      	lsls	r2, r3, #2
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a42      	ldr	r2, [pc, #264]	; (80015d8 <HAL_DMA_Init+0x164>)
 80014ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2202      	movs	r2, #2
 80014d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80014e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001500:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800150c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800152a:	d039      	beq.n	80015a0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	4a27      	ldr	r2, [pc, #156]	; (80015d0 <HAL_DMA_Init+0x15c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d11a      	bne.n	800156c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001536:	4b29      	ldr	r3, [pc, #164]	; (80015dc <HAL_DMA_Init+0x168>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f003 031c 	and.w	r3, r3, #28
 8001542:	210f      	movs	r1, #15
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	4924      	ldr	r1, [pc, #144]	; (80015dc <HAL_DMA_Init+0x168>)
 800154c:	4013      	ands	r3, r2
 800154e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <HAL_DMA_Init+0x168>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6859      	ldr	r1, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155c:	f003 031c 	and.w	r3, r3, #28
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	491d      	ldr	r1, [pc, #116]	; (80015dc <HAL_DMA_Init+0x168>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
 800156a:	e019      	b.n	80015a0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800156c:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <HAL_DMA_Init+0x16c>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001574:	f003 031c 	and.w	r3, r3, #28
 8001578:	210f      	movs	r1, #15
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	4917      	ldr	r1, [pc, #92]	; (80015e0 <HAL_DMA_Init+0x16c>)
 8001582:	4013      	ands	r3, r2
 8001584:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <HAL_DMA_Init+0x16c>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6859      	ldr	r1, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f003 031c 	and.w	r3, r3, #28
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	4911      	ldr	r1, [pc, #68]	; (80015e0 <HAL_DMA_Init+0x16c>)
 800159c:	4313      	orrs	r3, r2
 800159e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	40020407 	.word	0x40020407
 80015c8:	bffdfff8 	.word	0xbffdfff8
 80015cc:	cccccccd 	.word	0xcccccccd
 80015d0:	40020000 	.word	0x40020000
 80015d4:	bffdfbf8 	.word	0xbffdfbf8
 80015d8:	40020400 	.word	0x40020400
 80015dc:	400200a8 	.word	0x400200a8
 80015e0:	400204a8 	.word	0x400204a8

080015e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_DMA_Start_IT+0x20>
 8001600:	2302      	movs	r3, #2
 8001602:	e04b      	b.n	800169c <HAL_DMA_Start_IT+0xb8>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b01      	cmp	r3, #1
 8001616:	d13a      	bne.n	800168e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2202      	movs	r2, #2
 800161c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0201 	bic.w	r2, r2, #1
 8001634:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f000 f95f 	bl	8001900 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	2b00      	cmp	r3, #0
 8001648:	d008      	beq.n	800165c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 020e 	orr.w	r2, r2, #14
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e00f      	b.n	800167c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0204 	bic.w	r2, r2, #4
 800166a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 020a 	orr.w	r2, r2, #10
 800167a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0201 	orr.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e005      	b.n	800169a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001696:	2302      	movs	r3, #2
 8001698:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800169a:	7dfb      	ldrb	r3, [r7, #23]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d008      	beq.n	80016ce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2204      	movs	r2, #4
 80016c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e022      	b.n	8001714 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 020e 	bic.w	r2, r2, #14
 80016dc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0201 	bic.w	r2, r2, #1
 80016ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f003 021c 	and.w	r2, r3, #28
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	2101      	movs	r1, #1
 80016fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001700:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001714:	4618      	mov	r0, r3
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d005      	beq.n	8001744 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2204      	movs	r2, #4
 800173c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
 8001742:	e029      	b.n	8001798 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 020e 	bic.w	r2, r2, #14
 8001752:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001768:	f003 021c 	and.w	r2, r3, #28
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	2101      	movs	r1, #1
 8001772:	fa01 f202 	lsl.w	r2, r1, r2
 8001776:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	4798      	blx	r3
    }
  }
  return status;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f003 031c 	and.w	r3, r3, #28
 80017c2:	2204      	movs	r2, #4
 80017c4:	409a      	lsls	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d026      	beq.n	800181c <HAL_DMA_IRQHandler+0x7a>
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d021      	beq.n	800181c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0320 	and.w	r3, r3, #32
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d107      	bne.n	80017f6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0204 	bic.w	r2, r2, #4
 80017f4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f003 021c 	and.w	r2, r3, #28
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	2104      	movs	r1, #4
 8001804:	fa01 f202 	lsl.w	r2, r1, r2
 8001808:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	2b00      	cmp	r3, #0
 8001810:	d071      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800181a:	e06c      	b.n	80018f6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001820:	f003 031c 	and.w	r3, r3, #28
 8001824:	2202      	movs	r2, #2
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d02e      	beq.n	800188e <HAL_DMA_IRQHandler+0xec>
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d029      	beq.n	800188e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0320 	and.w	r3, r3, #32
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10b      	bne.n	8001860 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 020a 	bic.w	r2, r2, #10
 8001856:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001864:	f003 021c 	and.w	r2, r3, #28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	2102      	movs	r1, #2
 800186e:	fa01 f202 	lsl.w	r2, r1, r2
 8001872:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	2b00      	cmp	r3, #0
 8001882:	d038      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800188c:	e033      	b.n	80018f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f003 031c 	and.w	r3, r3, #28
 8001896:	2208      	movs	r2, #8
 8001898:	409a      	lsls	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4013      	ands	r3, r2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d02a      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x156>
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d025      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 020e 	bic.w	r2, r2, #14
 80018ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	f003 021c 	and.w	r2, r3, #28
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	2101      	movs	r1, #1
 80018ca:	fa01 f202 	lsl.w	r2, r1, r2
 80018ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d004      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018f6:	bf00      	nop
 80018f8:	bf00      	nop
}
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f003 021c 	and.w	r2, r3, #28
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	2101      	movs	r1, #1
 800191c:	fa01 f202 	lsl.w	r2, r1, r2
 8001920:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b10      	cmp	r3, #16
 8001930:	d108      	bne.n	8001944 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001942:	e007      	b.n	8001954 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	60da      	str	r2, [r3, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196e:	e17f      	b.n	8001c70 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2101      	movs	r1, #1
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8171 	beq.w	8001c6a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b01      	cmp	r3, #1
 8001992:	d005      	beq.n	80019a0 <HAL_GPIO_Init+0x40>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d130      	bne.n	8001a02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019d6:	2201      	movs	r2, #1
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	f003 0201 	and.w	r2, r3, #1
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d118      	bne.n	8001a40 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a14:	2201      	movs	r2, #1
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	f003 0201 	and.w	r2, r3, #1
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d017      	beq.n	8001a7c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d123      	bne.n	8001ad0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	08da      	lsrs	r2, r3, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3208      	adds	r2, #8
 8001a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	08da      	lsrs	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3208      	adds	r2, #8
 8001aca:	6939      	ldr	r1, [r7, #16]
 8001acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0203 	and.w	r2, r3, #3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 80ac 	beq.w	8001c6a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <HAL_GPIO_Init+0x330>)
 8001b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b16:	4a5e      	ldr	r2, [pc, #376]	; (8001c90 <HAL_GPIO_Init+0x330>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b1e:	4b5c      	ldr	r3, [pc, #368]	; (8001c90 <HAL_GPIO_Init+0x330>)
 8001b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b2a:	4a5a      	ldr	r2, [pc, #360]	; (8001c94 <HAL_GPIO_Init+0x334>)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3302      	adds	r3, #2
 8001b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b54:	d025      	beq.n	8001ba2 <HAL_GPIO_Init+0x242>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4f      	ldr	r2, [pc, #316]	; (8001c98 <HAL_GPIO_Init+0x338>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d01f      	beq.n	8001b9e <HAL_GPIO_Init+0x23e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4e      	ldr	r2, [pc, #312]	; (8001c9c <HAL_GPIO_Init+0x33c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d019      	beq.n	8001b9a <HAL_GPIO_Init+0x23a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4d      	ldr	r2, [pc, #308]	; (8001ca0 <HAL_GPIO_Init+0x340>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <HAL_GPIO_Init+0x236>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4c      	ldr	r2, [pc, #304]	; (8001ca4 <HAL_GPIO_Init+0x344>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00d      	beq.n	8001b92 <HAL_GPIO_Init+0x232>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4b      	ldr	r2, [pc, #300]	; (8001ca8 <HAL_GPIO_Init+0x348>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <HAL_GPIO_Init+0x22e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4a      	ldr	r2, [pc, #296]	; (8001cac <HAL_GPIO_Init+0x34c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_GPIO_Init+0x22a>
 8001b86:	2306      	movs	r3, #6
 8001b88:	e00c      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	e00a      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b8e:	2305      	movs	r3, #5
 8001b90:	e008      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b92:	2304      	movs	r3, #4
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b96:	2303      	movs	r3, #3
 8001b98:	e004      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e002      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	f002 0203 	and.w	r2, r2, #3
 8001baa:	0092      	lsls	r2, r2, #2
 8001bac:	4093      	lsls	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bb4:	4937      	ldr	r1, [pc, #220]	; (8001c94 <HAL_GPIO_Init+0x334>)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001be6:	4a32      	ldr	r2, [pc, #200]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bec:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c10:	4a27      	ldr	r2, [pc, #156]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c3a:	4a1d      	ldr	r2, [pc, #116]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c64:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f47f ae78 	bne.w	8001970 <HAL_GPIO_Init+0x10>
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	371c      	adds	r7, #28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40010000 	.word	0x40010000
 8001c98:	48000400 	.word	0x48000400
 8001c9c:	48000800 	.word	0x48000800
 8001ca0:	48000c00 	.word	0x48000c00
 8001ca4:	48001000 	.word	0x48001000
 8001ca8:	48001400 	.word	0x48001400
 8001cac:	48001800 	.word	0x48001800
 8001cb0:	40010400 	.word	0x40010400

08001cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc4:	787b      	ldrb	r3, [r7, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <HAL_PWREx_GetVoltageRange+0x18>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40007000 	.word	0x40007000

08001d00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d0e:	d130      	bne.n	8001d72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d10:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d1c:	d038      	beq.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d1e:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d26:	4a1e      	ldr	r2, [pc, #120]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2232      	movs	r2, #50	; 0x32
 8001d34:	fb02 f303 	mul.w	r3, r2, r3
 8001d38:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0c9b      	lsrs	r3, r3, #18
 8001d40:	3301      	adds	r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d44:	e002      	b.n	8001d4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d58:	d102      	bne.n	8001d60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f2      	bne.n	8001d46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6c:	d110      	bne.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e00f      	b.n	8001d92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7e:	d007      	beq.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d88:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40007000 	.word	0x40007000
 8001da4:	20000000 	.word	0x20000000
 8001da8:	431bde83 	.word	0x431bde83

08001dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e3d4      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dbe:	4ba1      	ldr	r3, [pc, #644]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc8:	4b9e      	ldr	r3, [pc, #632]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80e4 	beq.w	8001fa8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <HAL_RCC_OscConfig+0x4a>
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2b0c      	cmp	r3, #12
 8001dea:	f040 808b 	bne.w	8001f04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	f040 8087 	bne.w	8001f04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001df6:	4b93      	ldr	r3, [pc, #588]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <HAL_RCC_OscConfig+0x62>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e3ac      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1a      	ldr	r2, [r3, #32]
 8001e12:	4b8c      	ldr	r3, [pc, #560]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d004      	beq.n	8001e28 <HAL_RCC_OscConfig+0x7c>
 8001e1e:	4b89      	ldr	r3, [pc, #548]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e26:	e005      	b.n	8001e34 <HAL_RCC_OscConfig+0x88>
 8001e28:	4b86      	ldr	r3, [pc, #536]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d223      	bcs.n	8001e80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fd41 	bl	80028c4 <RCC_SetFlashLatencyFromMSIRange>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e38d      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e4c:	4b7d      	ldr	r3, [pc, #500]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a7c      	ldr	r2, [pc, #496]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e52:	f043 0308 	orr.w	r3, r3, #8
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b7a      	ldr	r3, [pc, #488]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4977      	ldr	r1, [pc, #476]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e6a:	4b76      	ldr	r3, [pc, #472]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	4972      	ldr	r1, [pc, #456]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
 8001e7e:	e025      	b.n	8001ecc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e80:	4b70      	ldr	r3, [pc, #448]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a6f      	ldr	r2, [pc, #444]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e86:	f043 0308 	orr.w	r3, r3, #8
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	4b6d      	ldr	r3, [pc, #436]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	496a      	ldr	r1, [pc, #424]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e9e:	4b69      	ldr	r3, [pc, #420]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	4965      	ldr	r1, [pc, #404]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d109      	bne.n	8001ecc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fd01 	bl	80028c4 <RCC_SetFlashLatencyFromMSIRange>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e34d      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ecc:	f000 fc36 	bl	800273c <HAL_RCC_GetSysClockFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b5c      	ldr	r3, [pc, #368]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	091b      	lsrs	r3, r3, #4
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	495a      	ldr	r1, [pc, #360]	; (8002048 <HAL_RCC_OscConfig+0x29c>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee8:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_RCC_OscConfig+0x2a0>)
 8001eea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001eec:	4b58      	ldr	r3, [pc, #352]	; (8002050 <HAL_RCC_OscConfig+0x2a4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff f92d 	bl	8001150 <HAL_InitTick>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d052      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	e331      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d032      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f0c:	4b4d      	ldr	r3, [pc, #308]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a4c      	ldr	r2, [pc, #304]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f18:	f7ff f96a 	bl	80011f0 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f20:	f7ff f966 	bl	80011f0 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e31a      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f32:	4b44      	ldr	r3, [pc, #272]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f3e:	4b41      	ldr	r3, [pc, #260]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a40      	ldr	r2, [pc, #256]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f44:	f043 0308 	orr.w	r3, r3, #8
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	4b3e      	ldr	r3, [pc, #248]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	493b      	ldr	r1, [pc, #236]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f5c:	4b39      	ldr	r3, [pc, #228]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	4936      	ldr	r1, [pc, #216]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
 8001f70:	e01a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f72:	4b34      	ldr	r3, [pc, #208]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a33      	ldr	r2, [pc, #204]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f7e:	f7ff f937 	bl	80011f0 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f86:	f7ff f933 	bl	80011f0 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e2e7      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f98:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f0      	bne.n	8001f86 <HAL_RCC_OscConfig+0x1da>
 8001fa4:	e000      	b.n	8001fa8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fa6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d074      	beq.n	800209e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d005      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x21a>
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	2b0c      	cmp	r3, #12
 8001fbe:	d10e      	bne.n	8001fde <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d10b      	bne.n	8001fde <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d064      	beq.n	800209c <HAL_RCC_OscConfig+0x2f0>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d160      	bne.n	800209c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e2c4      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe6:	d106      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x24a>
 8001fe8:	4b16      	ldr	r3, [pc, #88]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a15      	ldr	r2, [pc, #84]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8001fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	e01d      	b.n	8002032 <HAL_RCC_OscConfig+0x286>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ffe:	d10c      	bne.n	800201a <HAL_RCC_OscConfig+0x26e>
 8002000:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0f      	ldr	r2, [pc, #60]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8002006:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8002012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	e00b      	b.n	8002032 <HAL_RCC_OscConfig+0x286>
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a09      	ldr	r2, [pc, #36]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8002020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b07      	ldr	r3, [pc, #28]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a06      	ldr	r2, [pc, #24]	; (8002044 <HAL_RCC_OscConfig+0x298>)
 800202c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002030:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01c      	beq.n	8002074 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7ff f8d9 	bl	80011f0 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002040:	e011      	b.n	8002066 <HAL_RCC_OscConfig+0x2ba>
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	08005e10 	.word	0x08005e10
 800204c:	20000000 	.word	0x20000000
 8002050:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002054:	f7ff f8cc 	bl	80011f0 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	; 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e280      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002066:	4baf      	ldr	r3, [pc, #700]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x2a8>
 8002072:	e014      	b.n	800209e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7ff f8bc 	bl	80011f0 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff f8b8 	bl	80011f0 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e26c      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800208e:	4ba5      	ldr	r3, [pc, #660]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x2d0>
 800209a:	e000      	b.n	800209e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d060      	beq.n	800216c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_OscConfig+0x310>
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2b0c      	cmp	r3, #12
 80020b4:	d119      	bne.n	80020ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d116      	bne.n	80020ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020bc:	4b99      	ldr	r3, [pc, #612]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_OscConfig+0x328>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e249      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d4:	4b93      	ldr	r3, [pc, #588]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	061b      	lsls	r3, r3, #24
 80020e2:	4990      	ldr	r1, [pc, #576]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e8:	e040      	b.n	800216c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d023      	beq.n	800213a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f2:	4b8c      	ldr	r3, [pc, #560]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a8b      	ldr	r2, [pc, #556]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80020f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7ff f877 	bl	80011f0 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002106:	f7ff f873 	bl	80011f0 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e227      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002118:	4b82      	ldr	r3, [pc, #520]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002124:	4b7f      	ldr	r3, [pc, #508]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	061b      	lsls	r3, r3, #24
 8002132:	497c      	ldr	r1, [pc, #496]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
 8002138:	e018      	b.n	800216c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213a:	4b7a      	ldr	r3, [pc, #488]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a79      	ldr	r2, [pc, #484]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002146:	f7ff f853 	bl	80011f0 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214e:	f7ff f84f 	bl	80011f0 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e203      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002160:	4b70      	ldr	r3, [pc, #448]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f0      	bne.n	800214e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d03c      	beq.n	80021f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d01c      	beq.n	80021ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002180:	4b68      	ldr	r3, [pc, #416]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002186:	4a67      	ldr	r2, [pc, #412]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7ff f82e 	bl	80011f0 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002198:	f7ff f82a 	bl	80011f0 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1de      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021aa:	4b5e      	ldr	r3, [pc, #376]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80021ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0ef      	beq.n	8002198 <HAL_RCC_OscConfig+0x3ec>
 80021b8:	e01b      	b.n	80021f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ba:	4b5a      	ldr	r3, [pc, #360]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80021bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c0:	4a58      	ldr	r2, [pc, #352]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80021c2:	f023 0301 	bic.w	r3, r3, #1
 80021c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ca:	f7ff f811 	bl	80011f0 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d2:	f7ff f80d 	bl	80011f0 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e1c1      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021e4:	4b4f      	ldr	r3, [pc, #316]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80021e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ef      	bne.n	80021d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80a6 	beq.w	800234c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002200:	2300      	movs	r3, #0
 8002202:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002204:	4b47      	ldr	r3, [pc, #284]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10d      	bne.n	800222c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002210:	4b44      	ldr	r3, [pc, #272]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	4a43      	ldr	r2, [pc, #268]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221a:	6593      	str	r3, [r2, #88]	; 0x58
 800221c:	4b41      	ldr	r3, [pc, #260]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002228:	2301      	movs	r3, #1
 800222a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800222c:	4b3e      	ldr	r3, [pc, #248]	; (8002328 <HAL_RCC_OscConfig+0x57c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d118      	bne.n	800226a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002238:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <HAL_RCC_OscConfig+0x57c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a3a      	ldr	r2, [pc, #232]	; (8002328 <HAL_RCC_OscConfig+0x57c>)
 800223e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002242:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002244:	f7fe ffd4 	bl	80011f0 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224c:	f7fe ffd0 	bl	80011f0 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e184      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800225e:	4b32      	ldr	r3, [pc, #200]	; (8002328 <HAL_RCC_OscConfig+0x57c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d108      	bne.n	8002284 <HAL_RCC_OscConfig+0x4d8>
 8002272:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002278:	4a2a      	ldr	r2, [pc, #168]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002282:	e024      	b.n	80022ce <HAL_RCC_OscConfig+0x522>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d110      	bne.n	80022ae <HAL_RCC_OscConfig+0x502>
 800228c:	4b25      	ldr	r3, [pc, #148]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002292:	4a24      	ldr	r2, [pc, #144]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800229c:	4b21      	ldr	r3, [pc, #132]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a2:	4a20      	ldr	r2, [pc, #128]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ac:	e00f      	b.n	80022ce <HAL_RCC_OscConfig+0x522>
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022be:	4b19      	ldr	r3, [pc, #100]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	4a17      	ldr	r2, [pc, #92]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80022c6:	f023 0304 	bic.w	r3, r3, #4
 80022ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d016      	beq.n	8002304 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d6:	f7fe ff8b 	bl	80011f0 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7fe ff87 	bl	80011f0 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e139      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_RCC_OscConfig+0x578>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0ed      	beq.n	80022de <HAL_RCC_OscConfig+0x532>
 8002302:	e01a      	b.n	800233a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002304:	f7fe ff74 	bl	80011f0 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800230a:	e00f      	b.n	800232c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230c:	f7fe ff70 	bl	80011f0 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	; 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d906      	bls.n	800232c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e122      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800232c:	4b90      	ldr	r3, [pc, #576]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1e8      	bne.n	800230c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800233a:	7ffb      	ldrb	r3, [r7, #31]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d105      	bne.n	800234c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002340:	4b8b      	ldr	r3, [pc, #556]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	4a8a      	ldr	r2, [pc, #552]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 8002346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8108 	beq.w	8002566 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	2b02      	cmp	r3, #2
 800235c:	f040 80d0 	bne.w	8002500 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002360:	4b83      	ldr	r3, [pc, #524]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 0203 	and.w	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	429a      	cmp	r2, r3
 8002372:	d130      	bne.n	80023d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	3b01      	subs	r3, #1
 8002380:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d127      	bne.n	80023d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002390:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002392:	429a      	cmp	r2, r3
 8002394:	d11f      	bne.n	80023d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023a0:	2a07      	cmp	r2, #7
 80023a2:	bf14      	ite	ne
 80023a4:	2201      	movne	r2, #1
 80023a6:	2200      	moveq	r2, #0
 80023a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d113      	bne.n	80023d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b8:	085b      	lsrs	r3, r3, #1
 80023ba:	3b01      	subs	r3, #1
 80023bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d109      	bne.n	80023d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	085b      	lsrs	r3, r3, #1
 80023ce:	3b01      	subs	r3, #1
 80023d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d06e      	beq.n	80024b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	2b0c      	cmp	r3, #12
 80023da:	d069      	beq.n	80024b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023dc:	4b64      	ldr	r3, [pc, #400]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d105      	bne.n	80023f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023e8:	4b61      	ldr	r3, [pc, #388]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0b7      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023f8:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a5c      	ldr	r2, [pc, #368]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 80023fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002402:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002404:	f7fe fef4 	bl	80011f0 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fef0 	bl	80011f0 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e0a4      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800241e:	4b54      	ldr	r3, [pc, #336]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800242a:	4b51      	ldr	r3, [pc, #324]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	4b51      	ldr	r3, [pc, #324]	; (8002574 <HAL_RCC_OscConfig+0x7c8>)
 8002430:	4013      	ands	r3, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800243a:	3a01      	subs	r2, #1
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	4311      	orrs	r1, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002444:	0212      	lsls	r2, r2, #8
 8002446:	4311      	orrs	r1, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800244c:	0852      	lsrs	r2, r2, #1
 800244e:	3a01      	subs	r2, #1
 8002450:	0552      	lsls	r2, r2, #21
 8002452:	4311      	orrs	r1, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002458:	0852      	lsrs	r2, r2, #1
 800245a:	3a01      	subs	r2, #1
 800245c:	0652      	lsls	r2, r2, #25
 800245e:	4311      	orrs	r1, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002464:	0912      	lsrs	r2, r2, #4
 8002466:	0452      	lsls	r2, r2, #17
 8002468:	430a      	orrs	r2, r1
 800246a:	4941      	ldr	r1, [pc, #260]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 800246c:	4313      	orrs	r3, r2
 800246e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002470:	4b3f      	ldr	r3, [pc, #252]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a3e      	ldr	r2, [pc, #248]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 8002476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800247a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800247c:	4b3c      	ldr	r3, [pc, #240]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	4a3b      	ldr	r2, [pc, #236]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 8002482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002486:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002488:	f7fe feb2 	bl	80011f0 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002490:	f7fe feae 	bl	80011f0 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e062      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a2:	4b33      	ldr	r3, [pc, #204]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024ae:	e05a      	b.n	8002566 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e059      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b4:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d152      	bne.n	8002566 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024c0:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a2a      	ldr	r2, [pc, #168]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 80024c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024cc:	4b28      	ldr	r3, [pc, #160]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4a27      	ldr	r2, [pc, #156]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 80024d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024d8:	f7fe fe8a 	bl	80011f0 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e0:	f7fe fe86 	bl	80011f0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e03a      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f2:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x734>
 80024fe:	e032      	b.n	8002566 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2b0c      	cmp	r3, #12
 8002504:	d02d      	beq.n	8002562 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a19      	ldr	r2, [pc, #100]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 800250c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002510:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002512:	4b17      	ldr	r3, [pc, #92]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d105      	bne.n	800252a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800251e:	4b14      	ldr	r3, [pc, #80]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	4a13      	ldr	r2, [pc, #76]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 8002524:	f023 0303 	bic.w	r3, r3, #3
 8002528:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	4a10      	ldr	r2, [pc, #64]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 8002530:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002538:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253a:	f7fe fe59 	bl	80011f0 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002542:	f7fe fe55 	bl	80011f0 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e009      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_RCC_OscConfig+0x7c4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f0      	bne.n	8002542 <HAL_RCC_OscConfig+0x796>
 8002560:	e001      	b.n	8002566 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3720      	adds	r7, #32
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000
 8002574:	f99d808c 	.word	0xf99d808c

08002578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0c8      	b.n	800271e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800258c:	4b66      	ldr	r3, [pc, #408]	; (8002728 <HAL_RCC_ClockConfig+0x1b0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d910      	bls.n	80025bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b63      	ldr	r3, [pc, #396]	; (8002728 <HAL_RCC_ClockConfig+0x1b0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 0207 	bic.w	r2, r3, #7
 80025a2:	4961      	ldr	r1, [pc, #388]	; (8002728 <HAL_RCC_ClockConfig+0x1b0>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b5f      	ldr	r3, [pc, #380]	; (8002728 <HAL_RCC_ClockConfig+0x1b0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0b0      	b.n	800271e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d04c      	beq.n	8002662 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d107      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d0:	4b56      	ldr	r3, [pc, #344]	; (800272c <HAL_RCC_ClockConfig+0x1b4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d121      	bne.n	8002620 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e09e      	b.n	800271e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025e8:	4b50      	ldr	r3, [pc, #320]	; (800272c <HAL_RCC_ClockConfig+0x1b4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d115      	bne.n	8002620 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e092      	b.n	800271e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d107      	bne.n	8002610 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002600:	4b4a      	ldr	r3, [pc, #296]	; (800272c <HAL_RCC_ClockConfig+0x1b4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e086      	b.n	800271e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002610:	4b46      	ldr	r3, [pc, #280]	; (800272c <HAL_RCC_ClockConfig+0x1b4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e07e      	b.n	800271e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002620:	4b42      	ldr	r3, [pc, #264]	; (800272c <HAL_RCC_ClockConfig+0x1b4>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 0203 	bic.w	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	493f      	ldr	r1, [pc, #252]	; (800272c <HAL_RCC_ClockConfig+0x1b4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002632:	f7fe fddd 	bl	80011f0 <HAL_GetTick>
 8002636:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002638:	e00a      	b.n	8002650 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263a:	f7fe fdd9 	bl	80011f0 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	f241 3288 	movw	r2, #5000	; 0x1388
 8002648:	4293      	cmp	r3, r2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e066      	b.n	800271e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002650:	4b36      	ldr	r3, [pc, #216]	; (800272c <HAL_RCC_ClockConfig+0x1b4>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 020c 	and.w	r2, r3, #12
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	429a      	cmp	r2, r3
 8002660:	d1eb      	bne.n	800263a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800266e:	4b2f      	ldr	r3, [pc, #188]	; (800272c <HAL_RCC_ClockConfig+0x1b4>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	492c      	ldr	r1, [pc, #176]	; (800272c <HAL_RCC_ClockConfig+0x1b4>)
 800267c:	4313      	orrs	r3, r2
 800267e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002680:	4b29      	ldr	r3, [pc, #164]	; (8002728 <HAL_RCC_ClockConfig+0x1b0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d210      	bcs.n	80026b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b26      	ldr	r3, [pc, #152]	; (8002728 <HAL_RCC_ClockConfig+0x1b0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 0207 	bic.w	r2, r3, #7
 8002696:	4924      	ldr	r1, [pc, #144]	; (8002728 <HAL_RCC_ClockConfig+0x1b0>)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b22      	ldr	r3, [pc, #136]	; (8002728 <HAL_RCC_ClockConfig+0x1b0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e036      	b.n	800271e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <HAL_RCC_ClockConfig+0x1b4>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4918      	ldr	r1, [pc, #96]	; (800272c <HAL_RCC_ClockConfig+0x1b4>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026da:	4b14      	ldr	r3, [pc, #80]	; (800272c <HAL_RCC_ClockConfig+0x1b4>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4910      	ldr	r1, [pc, #64]	; (800272c <HAL_RCC_ClockConfig+0x1b4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026ee:	f000 f825 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80026f2:	4602      	mov	r2, r0
 80026f4:	4b0d      	ldr	r3, [pc, #52]	; (800272c <HAL_RCC_ClockConfig+0x1b4>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	490c      	ldr	r1, [pc, #48]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 8002700:	5ccb      	ldrb	r3, [r1, r3]
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	fa22 f303 	lsr.w	r3, r2, r3
 800270a:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fd1c 	bl	8001150 <HAL_InitTick>
 8002718:	4603      	mov	r3, r0
 800271a:	72fb      	strb	r3, [r7, #11]

  return status;
 800271c:	7afb      	ldrb	r3, [r7, #11]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40022000 	.word	0x40022000
 800272c:	40021000 	.word	0x40021000
 8002730:	08005e10 	.word	0x08005e10
 8002734:	20000000 	.word	0x20000000
 8002738:	20000004 	.word	0x20000004

0800273c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	; 0x24
 8002740:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800274a:	4b3e      	ldr	r3, [pc, #248]	; (8002844 <HAL_RCC_GetSysClockFreq+0x108>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002754:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <HAL_RCC_GetSysClockFreq+0x108>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x34>
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	2b0c      	cmp	r3, #12
 8002768:	d121      	bne.n	80027ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d11e      	bne.n	80027ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002770:	4b34      	ldr	r3, [pc, #208]	; (8002844 <HAL_RCC_GetSysClockFreq+0x108>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d107      	bne.n	800278c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800277c:	4b31      	ldr	r3, [pc, #196]	; (8002844 <HAL_RCC_GetSysClockFreq+0x108>)
 800277e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	e005      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800278c:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <HAL_RCC_GetSysClockFreq+0x108>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002798:	4a2b      	ldr	r2, [pc, #172]	; (8002848 <HAL_RCC_GetSysClockFreq+0x10c>)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10d      	bne.n	80027c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d102      	bne.n	80027ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027b4:	4b25      	ldr	r3, [pc, #148]	; (800284c <HAL_RCC_GetSysClockFreq+0x110>)
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	e004      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <HAL_RCC_GetSysClockFreq+0x114>)
 80027c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	2b0c      	cmp	r3, #12
 80027c8:	d134      	bne.n	8002834 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027ca:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <HAL_RCC_GetSysClockFreq+0x108>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d003      	beq.n	80027e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d003      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0xac>
 80027e0:	e005      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027e2:	4b1a      	ldr	r3, [pc, #104]	; (800284c <HAL_RCC_GetSysClockFreq+0x110>)
 80027e4:	617b      	str	r3, [r7, #20]
      break;
 80027e6:	e005      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027e8:	4b19      	ldr	r3, [pc, #100]	; (8002850 <HAL_RCC_GetSysClockFreq+0x114>)
 80027ea:	617b      	str	r3, [r7, #20]
      break;
 80027ec:	e002      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	617b      	str	r3, [r7, #20]
      break;
 80027f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <HAL_RCC_GetSysClockFreq+0x108>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	3301      	adds	r3, #1
 8002800:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <HAL_RCC_GetSysClockFreq+0x108>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	fb02 f203 	mul.w	r2, r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	fbb2 f3f3 	udiv	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <HAL_RCC_GetSysClockFreq+0x108>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	0e5b      	lsrs	r3, r3, #25
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	3301      	adds	r3, #1
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002832:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002834:	69bb      	ldr	r3, [r7, #24]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3724      	adds	r7, #36	; 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000
 8002848:	08005e28 	.word	0x08005e28
 800284c:	00f42400 	.word	0x00f42400
 8002850:	007a1200 	.word	0x007a1200

08002854 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <HAL_RCC_GetHCLKFreq+0x14>)
 800285a:	681b      	ldr	r3, [r3, #0]
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20000000 	.word	0x20000000

0800286c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002870:	f7ff fff0 	bl	8002854 <HAL_RCC_GetHCLKFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4904      	ldr	r1, [pc, #16]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	08005e20 	.word	0x08005e20

08002898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800289c:	f7ff ffda 	bl	8002854 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	0adb      	lsrs	r3, r3, #11
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4904      	ldr	r1, [pc, #16]	; (80028c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	08005e20 	.word	0x08005e20

080028c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028cc:	2300      	movs	r3, #0
 80028ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028d0:	4b2a      	ldr	r3, [pc, #168]	; (800297c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028dc:	f7ff fa02 	bl	8001ce4 <HAL_PWREx_GetVoltageRange>
 80028e0:	6178      	str	r0, [r7, #20]
 80028e2:	e014      	b.n	800290e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028e4:	4b25      	ldr	r3, [pc, #148]	; (800297c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e8:	4a24      	ldr	r2, [pc, #144]	; (800297c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ee:	6593      	str	r3, [r2, #88]	; 0x58
 80028f0:	4b22      	ldr	r3, [pc, #136]	; (800297c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028fc:	f7ff f9f2 	bl	8001ce4 <HAL_PWREx_GetVoltageRange>
 8002900:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002902:	4b1e      	ldr	r3, [pc, #120]	; (800297c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	4a1d      	ldr	r2, [pc, #116]	; (800297c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800290c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002914:	d10b      	bne.n	800292e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b80      	cmp	r3, #128	; 0x80
 800291a:	d919      	bls.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2ba0      	cmp	r3, #160	; 0xa0
 8002920:	d902      	bls.n	8002928 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002922:	2302      	movs	r3, #2
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	e013      	b.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002928:	2301      	movs	r3, #1
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	e010      	b.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b80      	cmp	r3, #128	; 0x80
 8002932:	d902      	bls.n	800293a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002934:	2303      	movs	r3, #3
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	e00a      	b.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b80      	cmp	r3, #128	; 0x80
 800293e:	d102      	bne.n	8002946 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002940:	2302      	movs	r3, #2
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	e004      	b.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b70      	cmp	r3, #112	; 0x70
 800294a:	d101      	bne.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800294c:	2301      	movs	r3, #1
 800294e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 0207 	bic.w	r2, r3, #7
 8002958:	4909      	ldr	r1, [pc, #36]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	429a      	cmp	r2, r3
 800296c:	d001      	beq.n	8002972 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000
 8002980:	40022000 	.word	0x40022000

08002984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800298c:	2300      	movs	r3, #0
 800298e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002990:	2300      	movs	r3, #0
 8002992:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299c:	2b00      	cmp	r3, #0
 800299e:	d041      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029a8:	d02a      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029ae:	d824      	bhi.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029b4:	d008      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029ba:	d81e      	bhi.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029c4:	d010      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029c6:	e018      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029c8:	4b86      	ldr	r3, [pc, #536]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a85      	ldr	r2, [pc, #532]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029d4:	e015      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3304      	adds	r3, #4
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fabb 	bl	8002f58 <RCCEx_PLLSAI1_Config>
 80029e2:	4603      	mov	r3, r0
 80029e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029e6:	e00c      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3320      	adds	r3, #32
 80029ec:	2100      	movs	r1, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fba6 	bl	8003140 <RCCEx_PLLSAI2_Config>
 80029f4:	4603      	mov	r3, r0
 80029f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029f8:	e003      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	74fb      	strb	r3, [r7, #19]
      break;
 80029fe:	e000      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a02:	7cfb      	ldrb	r3, [r7, #19]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10b      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a08:	4b76      	ldr	r3, [pc, #472]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a16:	4973      	ldr	r1, [pc, #460]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a1e:	e001      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d041      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a38:	d02a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a3e:	d824      	bhi.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a44:	d008      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a4a:	d81e      	bhi.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a54:	d010      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a56:	e018      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a58:	4b62      	ldr	r3, [pc, #392]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a61      	ldr	r2, [pc, #388]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a64:	e015      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 fa73 	bl	8002f58 <RCCEx_PLLSAI1_Config>
 8002a72:	4603      	mov	r3, r0
 8002a74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a76:	e00c      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3320      	adds	r3, #32
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fb5e 	bl	8003140 <RCCEx_PLLSAI2_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a88:	e003      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	74fb      	strb	r3, [r7, #19]
      break;
 8002a8e:	e000      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a92:	7cfb      	ldrb	r3, [r7, #19]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10b      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a98:	4b52      	ldr	r3, [pc, #328]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aa6:	494f      	ldr	r1, [pc, #316]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002aae:	e001      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab0:	7cfb      	ldrb	r3, [r7, #19]
 8002ab2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80a0 	beq.w	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ac6:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00d      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002adc:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae0:	4a40      	ldr	r2, [pc, #256]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ae8:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af4:	2301      	movs	r3, #1
 8002af6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002af8:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a3a      	ldr	r2, [pc, #232]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b04:	f7fe fb74 	bl	80011f0 <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b0a:	e009      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0c:	f7fe fb70 	bl	80011f0 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d902      	bls.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	74fb      	strb	r3, [r7, #19]
        break;
 8002b1e:	e005      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b20:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ef      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b2c:	7cfb      	ldrb	r3, [r7, #19]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d15c      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b32:	4b2c      	ldr	r3, [pc, #176]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01f      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d019      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b50:	4b24      	ldr	r3, [pc, #144]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b5c:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	4a20      	ldr	r2, [pc, #128]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b6c:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b7c:	4a19      	ldr	r2, [pc, #100]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d016      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7fe fb2f 	bl	80011f0 <HAL_GetTick>
 8002b92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b94:	e00b      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7fe fb2b 	bl	80011f0 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d902      	bls.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	74fb      	strb	r3, [r7, #19]
            break;
 8002bac:	e006      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0ec      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10c      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd2:	4904      	ldr	r1, [pc, #16]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bda:	e009      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	74bb      	strb	r3, [r7, #18]
 8002be0:	e006      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bec:	7cfb      	ldrb	r3, [r7, #19]
 8002bee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bf0:	7c7b      	ldrb	r3, [r7, #17]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d105      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf6:	4b9e      	ldr	r3, [pc, #632]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfa:	4a9d      	ldr	r2, [pc, #628]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c0e:	4b98      	ldr	r3, [pc, #608]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c14:	f023 0203 	bic.w	r2, r3, #3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	4994      	ldr	r1, [pc, #592]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c30:	4b8f      	ldr	r3, [pc, #572]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c36:	f023 020c 	bic.w	r2, r3, #12
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	498c      	ldr	r1, [pc, #560]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c52:	4b87      	ldr	r3, [pc, #540]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	4983      	ldr	r1, [pc, #524]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c74:	4b7e      	ldr	r3, [pc, #504]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	497b      	ldr	r1, [pc, #492]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c96:	4b76      	ldr	r3, [pc, #472]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca4:	4972      	ldr	r1, [pc, #456]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cb8:	4b6d      	ldr	r3, [pc, #436]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	496a      	ldr	r1, [pc, #424]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cda:	4b65      	ldr	r3, [pc, #404]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce8:	4961      	ldr	r1, [pc, #388]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cfc:	4b5c      	ldr	r3, [pc, #368]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0a:	4959      	ldr	r1, [pc, #356]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d1e:	4b54      	ldr	r3, [pc, #336]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d2c:	4950      	ldr	r1, [pc, #320]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d40:	4b4b      	ldr	r3, [pc, #300]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4e:	4948      	ldr	r1, [pc, #288]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d62:	4b43      	ldr	r3, [pc, #268]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d70:	493f      	ldr	r1, [pc, #252]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d028      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d84:	4b3a      	ldr	r3, [pc, #232]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d92:	4937      	ldr	r1, [pc, #220]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da2:	d106      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da4:	4b32      	ldr	r3, [pc, #200]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	4a31      	ldr	r2, [pc, #196]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dae:	60d3      	str	r3, [r2, #12]
 8002db0:	e011      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dba:	d10c      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f8c8 	bl	8002f58 <RCCEx_PLLSAI1_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002dd2:	7cfb      	ldrb	r3, [r7, #19]
 8002dd4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d028      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002de2:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	491f      	ldr	r1, [pc, #124]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e00:	d106      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e02:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	4a1a      	ldr	r2, [pc, #104]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e0c:	60d3      	str	r3, [r2, #12]
 8002e0e:	e011      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2101      	movs	r1, #1
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f899 	bl	8002f58 <RCCEx_PLLSAI1_Config>
 8002e26:	4603      	mov	r3, r0
 8002e28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e2a:	7cfb      	ldrb	r3, [r7, #19]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e30:	7cfb      	ldrb	r3, [r7, #19]
 8002e32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d02b      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4e:	4908      	ldr	r1, [pc, #32]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e5e:	d109      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4a02      	ldr	r2, [pc, #8]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e6a:	60d3      	str	r3, [r2, #12]
 8002e6c:	e014      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3304      	adds	r3, #4
 8002e82:	2101      	movs	r1, #1
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 f867 	bl	8002f58 <RCCEx_PLLSAI1_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e8e:	7cfb      	ldrb	r3, [r7, #19]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d02f      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ea4:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eb2:	4928      	ldr	r1, [pc, #160]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ec2:	d10d      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	2102      	movs	r1, #2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 f844 	bl	8002f58 <RCCEx_PLLSAI1_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ed4:	7cfb      	ldrb	r3, [r7, #19]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d014      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002eda:	7cfb      	ldrb	r3, [r7, #19]
 8002edc:	74bb      	strb	r3, [r7, #18]
 8002ede:	e011      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3320      	adds	r3, #32
 8002eee:	2102      	movs	r1, #2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 f925 	bl	8003140 <RCCEx_PLLSAI2_Config>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002efa:	7cfb      	ldrb	r3, [r7, #19]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f10:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f1e:	490d      	ldr	r1, [pc, #52]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f32:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f42:	4904      	ldr	r1, [pc, #16]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40021000 	.word	0x40021000

08002f58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f66:	4b75      	ldr	r3, [pc, #468]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d018      	beq.n	8002fa4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f72:	4b72      	ldr	r3, [pc, #456]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f003 0203 	and.w	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d10d      	bne.n	8002f9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
       ||
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f8a:	4b6c      	ldr	r3, [pc, #432]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
       ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d047      	beq.n	800302e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	e044      	b.n	800302e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d018      	beq.n	8002fde <RCCEx_PLLSAI1_Config+0x86>
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d825      	bhi.n	8002ffc <RCCEx_PLLSAI1_Config+0xa4>
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d002      	beq.n	8002fba <RCCEx_PLLSAI1_Config+0x62>
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d009      	beq.n	8002fcc <RCCEx_PLLSAI1_Config+0x74>
 8002fb8:	e020      	b.n	8002ffc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fba:	4b60      	ldr	r3, [pc, #384]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d11d      	bne.n	8003002 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fca:	e01a      	b.n	8003002 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fcc:	4b5b      	ldr	r3, [pc, #364]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d116      	bne.n	8003006 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fdc:	e013      	b.n	8003006 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fde:	4b57      	ldr	r3, [pc, #348]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10f      	bne.n	800300a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fea:	4b54      	ldr	r3, [pc, #336]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ffa:	e006      	b.n	800300a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8003000:	e004      	b.n	800300c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003002:	bf00      	nop
 8003004:	e002      	b.n	800300c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003006:	bf00      	nop
 8003008:	e000      	b.n	800300c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800300a:	bf00      	nop
    }

    if(status == HAL_OK)
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10d      	bne.n	800302e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003012:	4b4a      	ldr	r3, [pc, #296]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6819      	ldr	r1, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	3b01      	subs	r3, #1
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	430b      	orrs	r3, r1
 8003028:	4944      	ldr	r1, [pc, #272]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 800302a:	4313      	orrs	r3, r2
 800302c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d17d      	bne.n	8003130 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003034:	4b41      	ldr	r3, [pc, #260]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a40      	ldr	r2, [pc, #256]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 800303a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800303e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003040:	f7fe f8d6 	bl	80011f0 <HAL_GetTick>
 8003044:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003046:	e009      	b.n	800305c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003048:	f7fe f8d2 	bl	80011f0 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d902      	bls.n	800305c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	73fb      	strb	r3, [r7, #15]
        break;
 800305a:	e005      	b.n	8003068 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800305c:	4b37      	ldr	r3, [pc, #220]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1ef      	bne.n	8003048 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d160      	bne.n	8003130 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d111      	bne.n	8003098 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003074:	4b31      	ldr	r3, [pc, #196]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800307c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6892      	ldr	r2, [r2, #8]
 8003084:	0211      	lsls	r1, r2, #8
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68d2      	ldr	r2, [r2, #12]
 800308a:	0912      	lsrs	r2, r2, #4
 800308c:	0452      	lsls	r2, r2, #17
 800308e:	430a      	orrs	r2, r1
 8003090:	492a      	ldr	r1, [pc, #168]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003092:	4313      	orrs	r3, r2
 8003094:	610b      	str	r3, [r1, #16]
 8003096:	e027      	b.n	80030e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d112      	bne.n	80030c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800309e:	4b27      	ldr	r3, [pc, #156]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6892      	ldr	r2, [r2, #8]
 80030ae:	0211      	lsls	r1, r2, #8
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6912      	ldr	r2, [r2, #16]
 80030b4:	0852      	lsrs	r2, r2, #1
 80030b6:	3a01      	subs	r2, #1
 80030b8:	0552      	lsls	r2, r2, #21
 80030ba:	430a      	orrs	r2, r1
 80030bc:	491f      	ldr	r1, [pc, #124]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	610b      	str	r3, [r1, #16]
 80030c2:	e011      	b.n	80030e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030c4:	4b1d      	ldr	r3, [pc, #116]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6892      	ldr	r2, [r2, #8]
 80030d4:	0211      	lsls	r1, r2, #8
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6952      	ldr	r2, [r2, #20]
 80030da:	0852      	lsrs	r2, r2, #1
 80030dc:	3a01      	subs	r2, #1
 80030de:	0652      	lsls	r2, r2, #25
 80030e0:	430a      	orrs	r2, r1
 80030e2:	4916      	ldr	r1, [pc, #88]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030e8:	4b14      	ldr	r3, [pc, #80]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a13      	ldr	r2, [pc, #76]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fe f87c 	bl	80011f0 <HAL_GetTick>
 80030f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030fa:	e009      	b.n	8003110 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030fc:	f7fe f878 	bl	80011f0 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d902      	bls.n	8003110 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	73fb      	strb	r3, [r7, #15]
          break;
 800310e:	e005      	b.n	800311c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0ef      	beq.n	80030fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	4904      	ldr	r1, [pc, #16]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000

08003140 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800314e:	4b6a      	ldr	r3, [pc, #424]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d018      	beq.n	800318c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800315a:	4b67      	ldr	r3, [pc, #412]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f003 0203 	and.w	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d10d      	bne.n	8003186 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
       ||
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003172:	4b61      	ldr	r3, [pc, #388]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
       ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d047      	beq.n	8003216 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
 800318a:	e044      	b.n	8003216 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b03      	cmp	r3, #3
 8003192:	d018      	beq.n	80031c6 <RCCEx_PLLSAI2_Config+0x86>
 8003194:	2b03      	cmp	r3, #3
 8003196:	d825      	bhi.n	80031e4 <RCCEx_PLLSAI2_Config+0xa4>
 8003198:	2b01      	cmp	r3, #1
 800319a:	d002      	beq.n	80031a2 <RCCEx_PLLSAI2_Config+0x62>
 800319c:	2b02      	cmp	r3, #2
 800319e:	d009      	beq.n	80031b4 <RCCEx_PLLSAI2_Config+0x74>
 80031a0:	e020      	b.n	80031e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031a2:	4b55      	ldr	r3, [pc, #340]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d11d      	bne.n	80031ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b2:	e01a      	b.n	80031ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031b4:	4b50      	ldr	r3, [pc, #320]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d116      	bne.n	80031ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c4:	e013      	b.n	80031ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031c6:	4b4c      	ldr	r3, [pc, #304]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10f      	bne.n	80031f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031d2:	4b49      	ldr	r3, [pc, #292]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031e2:	e006      	b.n	80031f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
      break;
 80031e8:	e004      	b.n	80031f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031ea:	bf00      	nop
 80031ec:	e002      	b.n	80031f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031ee:	bf00      	nop
 80031f0:	e000      	b.n	80031f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10d      	bne.n	8003216 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031fa:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6819      	ldr	r1, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	3b01      	subs	r3, #1
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	430b      	orrs	r3, r1
 8003210:	4939      	ldr	r1, [pc, #228]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003212:	4313      	orrs	r3, r2
 8003214:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d167      	bne.n	80032ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800321c:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a35      	ldr	r2, [pc, #212]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003228:	f7fd ffe2 	bl	80011f0 <HAL_GetTick>
 800322c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800322e:	e009      	b.n	8003244 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003230:	f7fd ffde 	bl	80011f0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d902      	bls.n	8003244 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	73fb      	strb	r3, [r7, #15]
        break;
 8003242:	e005      	b.n	8003250 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003244:	4b2c      	ldr	r3, [pc, #176]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1ef      	bne.n	8003230 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d14a      	bne.n	80032ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d111      	bne.n	8003280 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800325c:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6892      	ldr	r2, [r2, #8]
 800326c:	0211      	lsls	r1, r2, #8
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68d2      	ldr	r2, [r2, #12]
 8003272:	0912      	lsrs	r2, r2, #4
 8003274:	0452      	lsls	r2, r2, #17
 8003276:	430a      	orrs	r2, r1
 8003278:	491f      	ldr	r1, [pc, #124]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800327a:	4313      	orrs	r3, r2
 800327c:	614b      	str	r3, [r1, #20]
 800327e:	e011      	b.n	80032a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003280:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003288:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6892      	ldr	r2, [r2, #8]
 8003290:	0211      	lsls	r1, r2, #8
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6912      	ldr	r2, [r2, #16]
 8003296:	0852      	lsrs	r2, r2, #1
 8003298:	3a01      	subs	r2, #1
 800329a:	0652      	lsls	r2, r2, #25
 800329c:	430a      	orrs	r2, r1
 800329e:	4916      	ldr	r1, [pc, #88]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032a4:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b0:	f7fd ff9e 	bl	80011f0 <HAL_GetTick>
 80032b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032b6:	e009      	b.n	80032cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032b8:	f7fd ff9a 	bl	80011f0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d902      	bls.n	80032cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	73fb      	strb	r3, [r7, #15]
          break;
 80032ca:	e005      	b.n	80032d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032cc:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ef      	beq.n	80032b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	4904      	ldr	r1, [pc, #16]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40021000 	.word	0x40021000

080032fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e040      	b.n	8003390 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fd fcde 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2224      	movs	r2, #36	; 0x24
 8003328:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0201 	bic.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fc22 	bl	8003b84 <UART_SetConfig>
 8003340:	4603      	mov	r3, r0
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e022      	b.n	8003390 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fea0 	bl	8004098 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003366:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003376:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 ff27 	bl	80041dc <UART_CheckIdleState>
 800338e:	4603      	mov	r3, r0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	4613      	mov	r3, r2
 80033a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	f040 8082 	bne.w	80034b6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_UART_Transmit+0x26>
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e07a      	b.n	80034b8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_UART_Transmit+0x38>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e073      	b.n	80034b8 <HAL_UART_Transmit+0x120>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2221      	movs	r2, #33	; 0x21
 80033e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033e6:	f7fd ff03 	bl	80011f0 <HAL_GetTick>
 80033ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	88fa      	ldrh	r2, [r7, #6]
 80033f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	88fa      	ldrh	r2, [r7, #6]
 80033f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003404:	d108      	bne.n	8003418 <HAL_UART_Transmit+0x80>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d104      	bne.n	8003418 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	e003      	b.n	8003420 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800341c:	2300      	movs	r3, #0
 800341e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003428:	e02d      	b.n	8003486 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2200      	movs	r2, #0
 8003432:	2180      	movs	r1, #128	; 0x80
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 ff1a 	bl	800426e <UART_WaitOnFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e039      	b.n	80034b8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10b      	bne.n	8003462 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	881a      	ldrh	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003456:	b292      	uxth	r2, r2
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	3302      	adds	r3, #2
 800345e:	61bb      	str	r3, [r7, #24]
 8003460:	e008      	b.n	8003474 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	781a      	ldrb	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	b292      	uxth	r2, r2
 800346c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3301      	adds	r3, #1
 8003472:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1cb      	bne.n	800342a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2200      	movs	r2, #0
 800349a:	2140      	movs	r1, #64	; 0x40
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fee6 	bl	800426e <UART_WaitOnFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e005      	b.n	80034b8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e000      	b.n	80034b8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
  }
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3720      	adds	r7, #32
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08a      	sub	sp, #40	; 0x28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	4613      	mov	r3, r2
 80034cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d142      	bne.n	800355c <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_UART_Receive_DMA+0x22>
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e03b      	b.n	800355e <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_UART_Receive_DMA+0x34>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e034      	b.n	800355e <HAL_UART_Receive_DMA+0x9e>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a18      	ldr	r2, [pc, #96]	; (8003568 <HAL_UART_Receive_DMA+0xa8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d01f      	beq.n	800354c <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d018      	beq.n	800354c <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	e853 3f00 	ldrex	r3, [r3]
 8003526:	613b      	str	r3, [r7, #16]
   return(result);
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	461a      	mov	r2, r3
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	623b      	str	r3, [r7, #32]
 800353a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353c:	69f9      	ldr	r1, [r7, #28]
 800353e:	6a3a      	ldr	r2, [r7, #32]
 8003540:	e841 2300 	strex	r3, r2, [r1]
 8003544:	61bb      	str	r3, [r7, #24]
   return(result);
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1e6      	bne.n	800351a <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	461a      	mov	r2, r3
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 ff50 	bl	80043f8 <UART_Start_Receive_DMA>
 8003558:	4603      	mov	r3, r0
 800355a:	e000      	b.n	800355e <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800355c:	2302      	movs	r3, #2
  }
}
 800355e:	4618      	mov	r0, r3
 8003560:	3728      	adds	r7, #40	; 0x28
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40008000 	.word	0x40008000

0800356c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b0ba      	sub	sp, #232	; 0xe8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003592:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003596:	f640 030f 	movw	r3, #2063	; 0x80f
 800359a:	4013      	ands	r3, r2
 800359c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80035a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d115      	bne.n	80035d4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00f      	beq.n	80035d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 82a6 	beq.w	8003b16 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
      }
      return;
 80035d2:	e2a0      	b.n	8003b16 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80035d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 8117 	beq.w	800380c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80035ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80035ee:	4b85      	ldr	r3, [pc, #532]	; (8003804 <HAL_UART_IRQHandler+0x298>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 810a 	beq.w	800380c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d011      	beq.n	8003628 <HAL_UART_IRQHandler+0xbc>
 8003604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00b      	beq.n	8003628 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2201      	movs	r2, #1
 8003616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800361e:	f043 0201 	orr.w	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d011      	beq.n	8003658 <HAL_UART_IRQHandler+0xec>
 8003634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00b      	beq.n	8003658 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2202      	movs	r2, #2
 8003646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800364e:	f043 0204 	orr.w	r2, r3, #4
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d011      	beq.n	8003688 <HAL_UART_IRQHandler+0x11c>
 8003664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00b      	beq.n	8003688 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2204      	movs	r2, #4
 8003676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800367e:	f043 0202 	orr.w	r2, r3, #2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d017      	beq.n	80036c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d105      	bne.n	80036ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00b      	beq.n	80036c4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2208      	movs	r2, #8
 80036b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ba:	f043 0208 	orr.w	r2, r3, #8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d012      	beq.n	80036f6 <HAL_UART_IRQHandler+0x18a>
 80036d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00c      	beq.n	80036f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ec:	f043 0220 	orr.w	r2, r3, #32
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 820c 	beq.w	8003b1a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00d      	beq.n	800372a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800370e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003730:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d005      	beq.n	800374e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003746:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800374a:	2b00      	cmp	r3, #0
 800374c:	d04f      	beq.n	80037ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 ff1e 	bl	8004590 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d141      	bne.n	80037e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3308      	adds	r3, #8
 8003768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800377c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3308      	adds	r3, #8
 800378a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800378e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003792:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800379a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1d9      	bne.n	8003762 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d013      	beq.n	80037de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ba:	4a13      	ldr	r2, [pc, #76]	; (8003808 <HAL_UART_IRQHandler+0x29c>)
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fd ffac 	bl	8001720 <HAL_DMA_Abort_IT>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d017      	beq.n	80037fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80037d8:	4610      	mov	r0, r2
 80037da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037dc:	e00f      	b.n	80037fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f9ba 	bl	8003b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e4:	e00b      	b.n	80037fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f9b6 	bl	8003b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ec:	e007      	b.n	80037fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f9b2 	bl	8003b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80037fc:	e18d      	b.n	8003b1a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fe:	bf00      	nop
    return;
 8003800:	e18b      	b.n	8003b1a <HAL_UART_IRQHandler+0x5ae>
 8003802:	bf00      	nop
 8003804:	04000120 	.word	0x04000120
 8003808:	0800482f 	.word	0x0800482f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003810:	2b01      	cmp	r3, #1
 8003812:	f040 8146 	bne.w	8003aa2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 813f 	beq.w	8003aa2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 8138 	beq.w	8003aa2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2210      	movs	r2, #16
 8003838:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	f040 80b4 	bne.w	80039b2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003856:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 815f 	beq.w	8003b1e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800386a:	429a      	cmp	r2, r3
 800386c:	f080 8157 	bcs.w	8003b1e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003876:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	f040 8085 	bne.w	8003996 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003894:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1da      	bne.n	800388c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3308      	adds	r3, #8
 80038dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038e8:	f023 0301 	bic.w	r3, r3, #1
 80038ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3308      	adds	r3, #8
 80038f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003902:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800390c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1e1      	bne.n	80038d6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3308      	adds	r3, #8
 8003918:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800391c:	e853 3f00 	ldrex	r3, [r3]
 8003920:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3308      	adds	r3, #8
 8003932:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003936:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003938:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800393c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e3      	bne.n	8003912 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395e:	e853 3f00 	ldrex	r3, [r3]
 8003962:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003966:	f023 0310 	bic.w	r3, r3, #16
 800396a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003978:	65bb      	str	r3, [r7, #88]	; 0x58
 800397a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800397e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e4      	bne.n	8003956 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	4618      	mov	r0, r3
 8003992:	f7fd fe87 	bl	80016a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	4619      	mov	r1, r3
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8de 	bl	8003b6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039b0:	e0b5      	b.n	8003b1e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 80a7 	beq.w	8003b22 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80039d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 80a2 	beq.w	8003b22 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a00:	647b      	str	r3, [r7, #68]	; 0x44
 8003a02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e4      	bne.n	80039de <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3308      	adds	r3, #8
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	623b      	str	r3, [r7, #32]
   return(result);
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3308      	adds	r3, #8
 8003a34:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a38:	633a      	str	r2, [r7, #48]	; 0x30
 8003a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e3      	bne.n	8003a14 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0310 	bic.w	r3, r3, #16
 8003a72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a80:	61fb      	str	r3, [r7, #28]
 8003a82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	69b9      	ldr	r1, [r7, #24]
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e4      	bne.n	8003a5e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a98:	4619      	mov	r1, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f866 	bl	8003b6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003aa0:	e03f      	b.n	8003b22 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00e      	beq.n	8003acc <HAL_UART_IRQHandler+0x560>
 8003aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ac2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fef2 	bl	80048ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003aca:	e02d      	b.n	8003b28 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00e      	beq.n	8003af6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01c      	beq.n	8003b26 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	4798      	blx	r3
    }
    return;
 8003af4:	e017      	b.n	8003b26 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d012      	beq.n	8003b28 <HAL_UART_IRQHandler+0x5bc>
 8003b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00c      	beq.n	8003b28 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fea3 	bl	800485a <UART_EndTransmit_IT>
    return;
 8003b14:	e008      	b.n	8003b28 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003b16:	bf00      	nop
 8003b18:	e006      	b.n	8003b28 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003b1a:	bf00      	nop
 8003b1c:	e004      	b.n	8003b28 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003b1e:	bf00      	nop
 8003b20:	e002      	b.n	8003b28 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003b22:	bf00      	nop
 8003b24:	e000      	b.n	8003b28 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003b26:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003b28:	37e8      	adds	r7, #232	; 0xe8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop

08003b30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b84:	b5b0      	push	{r4, r5, r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4bad      	ldr	r3, [pc, #692]	; (8003e64 <UART_SetConfig+0x2e0>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	69f9      	ldr	r1, [r7, #28]
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4aa2      	ldr	r2, [pc, #648]	; (8003e68 <UART_SetConfig+0x2e4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d004      	beq.n	8003bec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a99      	ldr	r2, [pc, #612]	; (8003e6c <UART_SetConfig+0x2e8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d121      	bne.n	8003c4e <UART_SetConfig+0xca>
 8003c0a:	4b99      	ldr	r3, [pc, #612]	; (8003e70 <UART_SetConfig+0x2ec>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d817      	bhi.n	8003c48 <UART_SetConfig+0xc4>
 8003c18:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <UART_SetConfig+0x9c>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003c31 	.word	0x08003c31
 8003c24:	08003c3d 	.word	0x08003c3d
 8003c28:	08003c37 	.word	0x08003c37
 8003c2c:	08003c43 	.word	0x08003c43
 8003c30:	2301      	movs	r3, #1
 8003c32:	76fb      	strb	r3, [r7, #27]
 8003c34:	e0e7      	b.n	8003e06 <UART_SetConfig+0x282>
 8003c36:	2302      	movs	r3, #2
 8003c38:	76fb      	strb	r3, [r7, #27]
 8003c3a:	e0e4      	b.n	8003e06 <UART_SetConfig+0x282>
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	76fb      	strb	r3, [r7, #27]
 8003c40:	e0e1      	b.n	8003e06 <UART_SetConfig+0x282>
 8003c42:	2308      	movs	r3, #8
 8003c44:	76fb      	strb	r3, [r7, #27]
 8003c46:	e0de      	b.n	8003e06 <UART_SetConfig+0x282>
 8003c48:	2310      	movs	r3, #16
 8003c4a:	76fb      	strb	r3, [r7, #27]
 8003c4c:	e0db      	b.n	8003e06 <UART_SetConfig+0x282>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a88      	ldr	r2, [pc, #544]	; (8003e74 <UART_SetConfig+0x2f0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d132      	bne.n	8003cbe <UART_SetConfig+0x13a>
 8003c58:	4b85      	ldr	r3, [pc, #532]	; (8003e70 <UART_SetConfig+0x2ec>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	2b0c      	cmp	r3, #12
 8003c64:	d828      	bhi.n	8003cb8 <UART_SetConfig+0x134>
 8003c66:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <UART_SetConfig+0xe8>)
 8003c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6c:	08003ca1 	.word	0x08003ca1
 8003c70:	08003cb9 	.word	0x08003cb9
 8003c74:	08003cb9 	.word	0x08003cb9
 8003c78:	08003cb9 	.word	0x08003cb9
 8003c7c:	08003cad 	.word	0x08003cad
 8003c80:	08003cb9 	.word	0x08003cb9
 8003c84:	08003cb9 	.word	0x08003cb9
 8003c88:	08003cb9 	.word	0x08003cb9
 8003c8c:	08003ca7 	.word	0x08003ca7
 8003c90:	08003cb9 	.word	0x08003cb9
 8003c94:	08003cb9 	.word	0x08003cb9
 8003c98:	08003cb9 	.word	0x08003cb9
 8003c9c:	08003cb3 	.word	0x08003cb3
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	76fb      	strb	r3, [r7, #27]
 8003ca4:	e0af      	b.n	8003e06 <UART_SetConfig+0x282>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	76fb      	strb	r3, [r7, #27]
 8003caa:	e0ac      	b.n	8003e06 <UART_SetConfig+0x282>
 8003cac:	2304      	movs	r3, #4
 8003cae:	76fb      	strb	r3, [r7, #27]
 8003cb0:	e0a9      	b.n	8003e06 <UART_SetConfig+0x282>
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	76fb      	strb	r3, [r7, #27]
 8003cb6:	e0a6      	b.n	8003e06 <UART_SetConfig+0x282>
 8003cb8:	2310      	movs	r3, #16
 8003cba:	76fb      	strb	r3, [r7, #27]
 8003cbc:	e0a3      	b.n	8003e06 <UART_SetConfig+0x282>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6d      	ldr	r2, [pc, #436]	; (8003e78 <UART_SetConfig+0x2f4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d120      	bne.n	8003d0a <UART_SetConfig+0x186>
 8003cc8:	4b69      	ldr	r3, [pc, #420]	; (8003e70 <UART_SetConfig+0x2ec>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cd2:	2b30      	cmp	r3, #48	; 0x30
 8003cd4:	d013      	beq.n	8003cfe <UART_SetConfig+0x17a>
 8003cd6:	2b30      	cmp	r3, #48	; 0x30
 8003cd8:	d814      	bhi.n	8003d04 <UART_SetConfig+0x180>
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d009      	beq.n	8003cf2 <UART_SetConfig+0x16e>
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d810      	bhi.n	8003d04 <UART_SetConfig+0x180>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <UART_SetConfig+0x168>
 8003ce6:	2b10      	cmp	r3, #16
 8003ce8:	d006      	beq.n	8003cf8 <UART_SetConfig+0x174>
 8003cea:	e00b      	b.n	8003d04 <UART_SetConfig+0x180>
 8003cec:	2300      	movs	r3, #0
 8003cee:	76fb      	strb	r3, [r7, #27]
 8003cf0:	e089      	b.n	8003e06 <UART_SetConfig+0x282>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	76fb      	strb	r3, [r7, #27]
 8003cf6:	e086      	b.n	8003e06 <UART_SetConfig+0x282>
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	76fb      	strb	r3, [r7, #27]
 8003cfc:	e083      	b.n	8003e06 <UART_SetConfig+0x282>
 8003cfe:	2308      	movs	r3, #8
 8003d00:	76fb      	strb	r3, [r7, #27]
 8003d02:	e080      	b.n	8003e06 <UART_SetConfig+0x282>
 8003d04:	2310      	movs	r3, #16
 8003d06:	76fb      	strb	r3, [r7, #27]
 8003d08:	e07d      	b.n	8003e06 <UART_SetConfig+0x282>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a5b      	ldr	r2, [pc, #364]	; (8003e7c <UART_SetConfig+0x2f8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d120      	bne.n	8003d56 <UART_SetConfig+0x1d2>
 8003d14:	4b56      	ldr	r3, [pc, #344]	; (8003e70 <UART_SetConfig+0x2ec>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d20:	d013      	beq.n	8003d4a <UART_SetConfig+0x1c6>
 8003d22:	2bc0      	cmp	r3, #192	; 0xc0
 8003d24:	d814      	bhi.n	8003d50 <UART_SetConfig+0x1cc>
 8003d26:	2b80      	cmp	r3, #128	; 0x80
 8003d28:	d009      	beq.n	8003d3e <UART_SetConfig+0x1ba>
 8003d2a:	2b80      	cmp	r3, #128	; 0x80
 8003d2c:	d810      	bhi.n	8003d50 <UART_SetConfig+0x1cc>
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <UART_SetConfig+0x1b4>
 8003d32:	2b40      	cmp	r3, #64	; 0x40
 8003d34:	d006      	beq.n	8003d44 <UART_SetConfig+0x1c0>
 8003d36:	e00b      	b.n	8003d50 <UART_SetConfig+0x1cc>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	76fb      	strb	r3, [r7, #27]
 8003d3c:	e063      	b.n	8003e06 <UART_SetConfig+0x282>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	76fb      	strb	r3, [r7, #27]
 8003d42:	e060      	b.n	8003e06 <UART_SetConfig+0x282>
 8003d44:	2304      	movs	r3, #4
 8003d46:	76fb      	strb	r3, [r7, #27]
 8003d48:	e05d      	b.n	8003e06 <UART_SetConfig+0x282>
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	76fb      	strb	r3, [r7, #27]
 8003d4e:	e05a      	b.n	8003e06 <UART_SetConfig+0x282>
 8003d50:	2310      	movs	r3, #16
 8003d52:	76fb      	strb	r3, [r7, #27]
 8003d54:	e057      	b.n	8003e06 <UART_SetConfig+0x282>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a49      	ldr	r2, [pc, #292]	; (8003e80 <UART_SetConfig+0x2fc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d125      	bne.n	8003dac <UART_SetConfig+0x228>
 8003d60:	4b43      	ldr	r3, [pc, #268]	; (8003e70 <UART_SetConfig+0x2ec>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d6e:	d017      	beq.n	8003da0 <UART_SetConfig+0x21c>
 8003d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d74:	d817      	bhi.n	8003da6 <UART_SetConfig+0x222>
 8003d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d7a:	d00b      	beq.n	8003d94 <UART_SetConfig+0x210>
 8003d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d80:	d811      	bhi.n	8003da6 <UART_SetConfig+0x222>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <UART_SetConfig+0x20a>
 8003d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8a:	d006      	beq.n	8003d9a <UART_SetConfig+0x216>
 8003d8c:	e00b      	b.n	8003da6 <UART_SetConfig+0x222>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	76fb      	strb	r3, [r7, #27]
 8003d92:	e038      	b.n	8003e06 <UART_SetConfig+0x282>
 8003d94:	2302      	movs	r3, #2
 8003d96:	76fb      	strb	r3, [r7, #27]
 8003d98:	e035      	b.n	8003e06 <UART_SetConfig+0x282>
 8003d9a:	2304      	movs	r3, #4
 8003d9c:	76fb      	strb	r3, [r7, #27]
 8003d9e:	e032      	b.n	8003e06 <UART_SetConfig+0x282>
 8003da0:	2308      	movs	r3, #8
 8003da2:	76fb      	strb	r3, [r7, #27]
 8003da4:	e02f      	b.n	8003e06 <UART_SetConfig+0x282>
 8003da6:	2310      	movs	r3, #16
 8003da8:	76fb      	strb	r3, [r7, #27]
 8003daa:	e02c      	b.n	8003e06 <UART_SetConfig+0x282>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a2d      	ldr	r2, [pc, #180]	; (8003e68 <UART_SetConfig+0x2e4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d125      	bne.n	8003e02 <UART_SetConfig+0x27e>
 8003db6:	4b2e      	ldr	r3, [pc, #184]	; (8003e70 <UART_SetConfig+0x2ec>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dc4:	d017      	beq.n	8003df6 <UART_SetConfig+0x272>
 8003dc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dca:	d817      	bhi.n	8003dfc <UART_SetConfig+0x278>
 8003dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd0:	d00b      	beq.n	8003dea <UART_SetConfig+0x266>
 8003dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd6:	d811      	bhi.n	8003dfc <UART_SetConfig+0x278>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <UART_SetConfig+0x260>
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de0:	d006      	beq.n	8003df0 <UART_SetConfig+0x26c>
 8003de2:	e00b      	b.n	8003dfc <UART_SetConfig+0x278>
 8003de4:	2300      	movs	r3, #0
 8003de6:	76fb      	strb	r3, [r7, #27]
 8003de8:	e00d      	b.n	8003e06 <UART_SetConfig+0x282>
 8003dea:	2302      	movs	r3, #2
 8003dec:	76fb      	strb	r3, [r7, #27]
 8003dee:	e00a      	b.n	8003e06 <UART_SetConfig+0x282>
 8003df0:	2304      	movs	r3, #4
 8003df2:	76fb      	strb	r3, [r7, #27]
 8003df4:	e007      	b.n	8003e06 <UART_SetConfig+0x282>
 8003df6:	2308      	movs	r3, #8
 8003df8:	76fb      	strb	r3, [r7, #27]
 8003dfa:	e004      	b.n	8003e06 <UART_SetConfig+0x282>
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	76fb      	strb	r3, [r7, #27]
 8003e00:	e001      	b.n	8003e06 <UART_SetConfig+0x282>
 8003e02:	2310      	movs	r3, #16
 8003e04:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a17      	ldr	r2, [pc, #92]	; (8003e68 <UART_SetConfig+0x2e4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	f040 8087 	bne.w	8003f20 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e12:	7efb      	ldrb	r3, [r7, #27]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d837      	bhi.n	8003e88 <UART_SetConfig+0x304>
 8003e18:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <UART_SetConfig+0x29c>)
 8003e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1e:	bf00      	nop
 8003e20:	08003e45 	.word	0x08003e45
 8003e24:	08003e89 	.word	0x08003e89
 8003e28:	08003e4d 	.word	0x08003e4d
 8003e2c:	08003e89 	.word	0x08003e89
 8003e30:	08003e53 	.word	0x08003e53
 8003e34:	08003e89 	.word	0x08003e89
 8003e38:	08003e89 	.word	0x08003e89
 8003e3c:	08003e89 	.word	0x08003e89
 8003e40:	08003e5b 	.word	0x08003e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e44:	f7fe fd12 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8003e48:	6178      	str	r0, [r7, #20]
        break;
 8003e4a:	e022      	b.n	8003e92 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e4c:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <UART_SetConfig+0x300>)
 8003e4e:	617b      	str	r3, [r7, #20]
        break;
 8003e50:	e01f      	b.n	8003e92 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e52:	f7fe fc73 	bl	800273c <HAL_RCC_GetSysClockFreq>
 8003e56:	6178      	str	r0, [r7, #20]
        break;
 8003e58:	e01b      	b.n	8003e92 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e5e:	617b      	str	r3, [r7, #20]
        break;
 8003e60:	e017      	b.n	8003e92 <UART_SetConfig+0x30e>
 8003e62:	bf00      	nop
 8003e64:	efff69f3 	.word	0xefff69f3
 8003e68:	40008000 	.word	0x40008000
 8003e6c:	40013800 	.word	0x40013800
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40004400 	.word	0x40004400
 8003e78:	40004800 	.word	0x40004800
 8003e7c:	40004c00 	.word	0x40004c00
 8003e80:	40005000 	.word	0x40005000
 8003e84:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	76bb      	strb	r3, [r7, #26]
        break;
 8003e90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80f1 	beq.w	800407c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	4413      	add	r3, r2
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d305      	bcc.n	8003eb6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d902      	bls.n	8003ebc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	76bb      	strb	r3, [r7, #26]
 8003eba:	e0df      	b.n	800407c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f04f 0100 	mov.w	r1, #0
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	020b      	lsls	r3, r1, #8
 8003ece:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ed2:	0202      	lsls	r2, r0, #8
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	6849      	ldr	r1, [r1, #4]
 8003ed8:	0849      	lsrs	r1, r1, #1
 8003eda:	4608      	mov	r0, r1
 8003edc:	f04f 0100 	mov.w	r1, #0
 8003ee0:	1814      	adds	r4, r2, r0
 8003ee2:	eb43 0501 	adc.w	r5, r3, r1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	f7fc f9c4 	bl	8000280 <__aeabi_uldivmod>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4613      	mov	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f06:	d308      	bcc.n	8003f1a <UART_SetConfig+0x396>
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0e:	d204      	bcs.n	8003f1a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	60da      	str	r2, [r3, #12]
 8003f18:	e0b0      	b.n	800407c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	76bb      	strb	r3, [r7, #26]
 8003f1e:	e0ad      	b.n	800407c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f28:	d15b      	bne.n	8003fe2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003f2a:	7efb      	ldrb	r3, [r7, #27]
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d828      	bhi.n	8003f82 <UART_SetConfig+0x3fe>
 8003f30:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <UART_SetConfig+0x3b4>)
 8003f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f36:	bf00      	nop
 8003f38:	08003f5d 	.word	0x08003f5d
 8003f3c:	08003f65 	.word	0x08003f65
 8003f40:	08003f6d 	.word	0x08003f6d
 8003f44:	08003f83 	.word	0x08003f83
 8003f48:	08003f73 	.word	0x08003f73
 8003f4c:	08003f83 	.word	0x08003f83
 8003f50:	08003f83 	.word	0x08003f83
 8003f54:	08003f83 	.word	0x08003f83
 8003f58:	08003f7b 	.word	0x08003f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f5c:	f7fe fc86 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8003f60:	6178      	str	r0, [r7, #20]
        break;
 8003f62:	e013      	b.n	8003f8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f64:	f7fe fc98 	bl	8002898 <HAL_RCC_GetPCLK2Freq>
 8003f68:	6178      	str	r0, [r7, #20]
        break;
 8003f6a:	e00f      	b.n	8003f8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f6c:	4b49      	ldr	r3, [pc, #292]	; (8004094 <UART_SetConfig+0x510>)
 8003f6e:	617b      	str	r3, [r7, #20]
        break;
 8003f70:	e00c      	b.n	8003f8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f72:	f7fe fbe3 	bl	800273c <HAL_RCC_GetSysClockFreq>
 8003f76:	6178      	str	r0, [r7, #20]
        break;
 8003f78:	e008      	b.n	8003f8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7e:	617b      	str	r3, [r7, #20]
        break;
 8003f80:	e004      	b.n	8003f8c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	76bb      	strb	r3, [r7, #26]
        break;
 8003f8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d074      	beq.n	800407c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	005a      	lsls	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	085b      	lsrs	r3, r3, #1
 8003f9c:	441a      	add	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b0f      	cmp	r3, #15
 8003fac:	d916      	bls.n	8003fdc <UART_SetConfig+0x458>
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb4:	d212      	bcs.n	8003fdc <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	f023 030f 	bic.w	r3, r3, #15
 8003fbe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	89fb      	ldrh	r3, [r7, #14]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	89fa      	ldrh	r2, [r7, #14]
 8003fd8:	60da      	str	r2, [r3, #12]
 8003fda:	e04f      	b.n	800407c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	76bb      	strb	r3, [r7, #26]
 8003fe0:	e04c      	b.n	800407c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fe2:	7efb      	ldrb	r3, [r7, #27]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d828      	bhi.n	800403a <UART_SetConfig+0x4b6>
 8003fe8:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <UART_SetConfig+0x46c>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	08004015 	.word	0x08004015
 8003ff4:	0800401d 	.word	0x0800401d
 8003ff8:	08004025 	.word	0x08004025
 8003ffc:	0800403b 	.word	0x0800403b
 8004000:	0800402b 	.word	0x0800402b
 8004004:	0800403b 	.word	0x0800403b
 8004008:	0800403b 	.word	0x0800403b
 800400c:	0800403b 	.word	0x0800403b
 8004010:	08004033 	.word	0x08004033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004014:	f7fe fc2a 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8004018:	6178      	str	r0, [r7, #20]
        break;
 800401a:	e013      	b.n	8004044 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800401c:	f7fe fc3c 	bl	8002898 <HAL_RCC_GetPCLK2Freq>
 8004020:	6178      	str	r0, [r7, #20]
        break;
 8004022:	e00f      	b.n	8004044 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004024:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <UART_SetConfig+0x510>)
 8004026:	617b      	str	r3, [r7, #20]
        break;
 8004028:	e00c      	b.n	8004044 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402a:	f7fe fb87 	bl	800273c <HAL_RCC_GetSysClockFreq>
 800402e:	6178      	str	r0, [r7, #20]
        break;
 8004030:	e008      	b.n	8004044 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004036:	617b      	str	r3, [r7, #20]
        break;
 8004038:	e004      	b.n	8004044 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	76bb      	strb	r3, [r7, #26]
        break;
 8004042:	bf00      	nop
    }

    if (pclk != 0U)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d018      	beq.n	800407c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	085a      	lsrs	r2, r3, #1
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	441a      	add	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	2b0f      	cmp	r3, #15
 8004062:	d909      	bls.n	8004078 <UART_SetConfig+0x4f4>
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406a:	d205      	bcs.n	8004078 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	b29a      	uxth	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60da      	str	r2, [r3, #12]
 8004076:	e001      	b.n	800407c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004088:	7ebb      	ldrb	r3, [r7, #26]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3720      	adds	r7, #32
 800408e:	46bd      	mov	sp, r7
 8004090:	bdb0      	pop	{r4, r5, r7, pc}
 8004092:	bf00      	nop
 8004094:	00f42400 	.word	0x00f42400

08004098 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	d01a      	beq.n	80041ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004196:	d10a      	bne.n	80041ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	605a      	str	r2, [r3, #4]
  }
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041ec:	f7fd f800 	bl	80011f0 <HAL_GetTick>
 80041f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d10e      	bne.n	800421e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f82d 	bl	800426e <UART_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e023      	b.n	8004266 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b04      	cmp	r3, #4
 800422a:	d10e      	bne.n	800424a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800422c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f817 	bl	800426e <UART_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e00d      	b.n	8004266 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b09c      	sub	sp, #112	; 0x70
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	4613      	mov	r3, r2
 800427c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427e:	e0a5      	b.n	80043cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	f000 80a1 	beq.w	80043cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428a:	f7fc ffb1 	bl	80011f0 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004296:	429a      	cmp	r2, r3
 8004298:	d302      	bcc.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800429a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800429c:	2b00      	cmp	r3, #0
 800429e:	d13e      	bne.n	800431e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042b4:	667b      	str	r3, [r7, #100]	; 0x64
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e6      	bne.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3308      	adds	r3, #8
 80042d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	663b      	str	r3, [r7, #96]	; 0x60
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3308      	adds	r3, #8
 80042f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80042f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e5      	bne.n	80042d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e067      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d04f      	beq.n	80043cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800433a:	d147      	bne.n	80043cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004344:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800435a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004364:	637b      	str	r3, [r7, #52]	; 0x34
 8004366:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800436a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e6      	bne.n	8004346 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3308      	adds	r3, #8
 800437e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	e853 3f00 	ldrex	r3, [r3]
 8004386:	613b      	str	r3, [r7, #16]
   return(result);
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3308      	adds	r3, #8
 8004396:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004398:	623a      	str	r2, [r7, #32]
 800439a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	69f9      	ldr	r1, [r7, #28]
 800439e:	6a3a      	ldr	r2, [r7, #32]
 80043a0:	e841 2300 	strex	r3, r2, [r1]
 80043a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e5      	bne.n	8004378 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e010      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69da      	ldr	r2, [r3, #28]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4013      	ands	r3, r2
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	429a      	cmp	r2, r3
 80043da:	bf0c      	ite	eq
 80043dc:	2301      	moveq	r3, #1
 80043de:	2300      	movne	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	f43f af4a 	beq.w	8004280 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3770      	adds	r7, #112	; 0x70
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b096      	sub	sp, #88	; 0x58
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2222      	movs	r2, #34	; 0x22
 8004420:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	2b00      	cmp	r3, #0
 8004428:	d02b      	beq.n	8004482 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442e:	4a42      	ldr	r2, [pc, #264]	; (8004538 <UART_Start_Receive_DMA+0x140>)
 8004430:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004436:	4a41      	ldr	r2, [pc, #260]	; (800453c <UART_Start_Receive_DMA+0x144>)
 8004438:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	4a40      	ldr	r2, [pc, #256]	; (8004540 <UART_Start_Receive_DMA+0x148>)
 8004440:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004446:	2200      	movs	r2, #0
 8004448:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3324      	adds	r3, #36	; 0x24
 8004454:	4619      	mov	r1, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	461a      	mov	r2, r3
 800445c:	88fb      	ldrh	r3, [r7, #6]
 800445e:	f7fd f8c1 	bl	80015e4 <HAL_DMA_Start_IT>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00c      	beq.n	8004482 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2210      	movs	r2, #16
 800446c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e055      	b.n	800452e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d018      	beq.n	80044c4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a6:	657b      	str	r3, [r7, #84]	; 0x54
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80044b2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e6      	bne.n	8004492 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3308      	adds	r3, #8
 80044ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ce:	e853 3f00 	ldrex	r3, [r3]
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	653b      	str	r3, [r7, #80]	; 0x50
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3308      	adds	r3, #8
 80044e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044e4:	637a      	str	r2, [r7, #52]	; 0x34
 80044e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044ec:	e841 2300 	strex	r3, r2, [r1]
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e5      	bne.n	80044c4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3308      	adds	r3, #8
 80044fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	613b      	str	r3, [r7, #16]
   return(result);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800450e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3308      	adds	r3, #8
 8004516:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004518:	623a      	str	r2, [r7, #32]
 800451a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	69f9      	ldr	r1, [r7, #28]
 800451e:	6a3a      	ldr	r2, [r7, #32]
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	61bb      	str	r3, [r7, #24]
   return(result);
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e5      	bne.n	80044f8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3758      	adds	r7, #88	; 0x58
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	08004657 	.word	0x08004657
 800453c:	0800477b 	.word	0x0800477b
 8004540:	080047b3 	.word	0x080047b3

08004544 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004544:	b480      	push	{r7}
 8004546:	b089      	sub	sp, #36	; 0x24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	60bb      	str	r3, [r7, #8]
   return(result);
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	6979      	ldr	r1, [r7, #20]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	613b      	str	r3, [r7, #16]
   return(result);
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e6      	bne.n	800454c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004584:	bf00      	nop
 8004586:	3724      	adds	r7, #36	; 0x24
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004590:	b480      	push	{r7}
 8004592:	b095      	sub	sp, #84	; 0x54
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b6:	643b      	str	r3, [r7, #64]	; 0x40
 80045b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e6      	bne.n	8004598 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3308      	adds	r3, #8
 80045d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3308      	adds	r3, #8
 80045e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e5      	bne.n	80045ca <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004602:	2b01      	cmp	r3, #1
 8004604:	d118      	bne.n	8004638 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	60bb      	str	r3, [r7, #8]
   return(result);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f023 0310 	bic.w	r3, r3, #16
 800461a:	647b      	str	r3, [r7, #68]	; 0x44
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	6979      	ldr	r1, [r7, #20]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	e841 2300 	strex	r3, r2, [r1]
 8004630:	613b      	str	r3, [r7, #16]
   return(result);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e6      	bne.n	8004606 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	665a      	str	r2, [r3, #100]	; 0x64
}
 800464a:	bf00      	nop
 800464c:	3754      	adds	r7, #84	; 0x54
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b09c      	sub	sp, #112	; 0x70
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d170      	bne.n	8004754 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8004672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004674:	2200      	movs	r2, #0
 8004676:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800467a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800468a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800468e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004698:	65bb      	str	r3, [r7, #88]	; 0x58
 800469a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800469e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e6      	bne.n	800467a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3308      	adds	r3, #8
 80046b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b6:	e853 3f00 	ldrex	r3, [r3]
 80046ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	667b      	str	r3, [r7, #100]	; 0x64
 80046c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3308      	adds	r3, #8
 80046ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80046cc:	647a      	str	r2, [r7, #68]	; 0x44
 80046ce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e5      	bne.n	80046ac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3308      	adds	r3, #8
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	623b      	str	r3, [r7, #32]
   return(result);
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f6:	663b      	str	r3, [r7, #96]	; 0x60
 80046f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3308      	adds	r3, #8
 80046fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004700:	633a      	str	r2, [r7, #48]	; 0x30
 8004702:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004708:	e841 2300 	strex	r3, r2, [r1]
 800470c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800470e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1e5      	bne.n	80046e0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004716:	2220      	movs	r2, #32
 8004718:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800471a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471e:	2b01      	cmp	r3, #1
 8004720:	d118      	bne.n	8004754 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	e853 3f00 	ldrex	r3, [r3]
 800472e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0310 	bic.w	r3, r3, #16
 8004736:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004740:	61fb      	str	r3, [r7, #28]
 8004742:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	69b9      	ldr	r1, [r7, #24]
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	e841 2300 	strex	r3, r2, [r1]
 800474c:	617b      	str	r3, [r7, #20]
   return(result);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e6      	bne.n	8004722 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004758:	2b01      	cmp	r3, #1
 800475a:	d107      	bne.n	800476c <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800475c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800475e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004762:	4619      	mov	r1, r3
 8004764:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004766:	f7ff fa01 	bl	8003b6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800476a:	e002      	b.n	8004772 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800476c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800476e:	f7fb ff03 	bl	8000578 <HAL_UART_RxCpltCallback>
}
 8004772:	bf00      	nop
 8004774:	3770      	adds	r7, #112	; 0x70
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800478c:	2b01      	cmp	r3, #1
 800478e:	d109      	bne.n	80047a4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004796:	085b      	lsrs	r3, r3, #1
 8004798:	b29b      	uxth	r3, r3
 800479a:	4619      	mov	r1, r3
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7ff f9e5 	bl	8003b6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047a2:	e002      	b.n	80047aa <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f7ff f9cd 	bl	8003b44 <HAL_UART_RxHalfCpltCallback>
}
 80047aa:	bf00      	nop
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b086      	sub	sp, #24
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d6:	2b80      	cmp	r3, #128	; 0x80
 80047d8:	d109      	bne.n	80047ee <UART_DMAError+0x3c>
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2b21      	cmp	r3, #33	; 0x21
 80047de:	d106      	bne.n	80047ee <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80047e8:	6978      	ldr	r0, [r7, #20]
 80047ea:	f7ff feab 	bl	8004544 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d109      	bne.n	8004810 <UART_DMAError+0x5e>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b22      	cmp	r3, #34	; 0x22
 8004800:	d106      	bne.n	8004810 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2200      	movs	r2, #0
 8004806:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800480a:	6978      	ldr	r0, [r7, #20]
 800480c:	f7ff fec0 	bl	8004590 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004816:	f043 0210 	orr.w	r2, r3, #16
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004820:	6978      	ldr	r0, [r7, #20]
 8004822:	f7ff f999 	bl	8003b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004826:	bf00      	nop
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f7ff f983 	bl	8003b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004852:	bf00      	nop
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b088      	sub	sp, #32
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004876:	61fb      	str	r3, [r7, #28]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	61bb      	str	r3, [r7, #24]
 8004882:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	6979      	ldr	r1, [r7, #20]
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	e841 2300 	strex	r3, r2, [r1]
 800488c:	613b      	str	r3, [r7, #16]
   return(result);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e6      	bne.n	8004862 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff f945 	bl	8003b30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048a6:	bf00      	nop
 80048a8:	3720      	adds	r7, #32
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <__errno>:
 80048c4:	4b01      	ldr	r3, [pc, #4]	; (80048cc <__errno+0x8>)
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	2000000c 	.word	0x2000000c

080048d0 <__libc_init_array>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	4d0d      	ldr	r5, [pc, #52]	; (8004908 <__libc_init_array+0x38>)
 80048d4:	4c0d      	ldr	r4, [pc, #52]	; (800490c <__libc_init_array+0x3c>)
 80048d6:	1b64      	subs	r4, r4, r5
 80048d8:	10a4      	asrs	r4, r4, #2
 80048da:	2600      	movs	r6, #0
 80048dc:	42a6      	cmp	r6, r4
 80048de:	d109      	bne.n	80048f4 <__libc_init_array+0x24>
 80048e0:	4d0b      	ldr	r5, [pc, #44]	; (8004910 <__libc_init_array+0x40>)
 80048e2:	4c0c      	ldr	r4, [pc, #48]	; (8004914 <__libc_init_array+0x44>)
 80048e4:	f001 fa6e 	bl	8005dc4 <_init>
 80048e8:	1b64      	subs	r4, r4, r5
 80048ea:	10a4      	asrs	r4, r4, #2
 80048ec:	2600      	movs	r6, #0
 80048ee:	42a6      	cmp	r6, r4
 80048f0:	d105      	bne.n	80048fe <__libc_init_array+0x2e>
 80048f2:	bd70      	pop	{r4, r5, r6, pc}
 80048f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f8:	4798      	blx	r3
 80048fa:	3601      	adds	r6, #1
 80048fc:	e7ee      	b.n	80048dc <__libc_init_array+0xc>
 80048fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004902:	4798      	blx	r3
 8004904:	3601      	adds	r6, #1
 8004906:	e7f2      	b.n	80048ee <__libc_init_array+0x1e>
 8004908:	08005fac 	.word	0x08005fac
 800490c:	08005fac 	.word	0x08005fac
 8004910:	08005fac 	.word	0x08005fac
 8004914:	08005fb0 	.word	0x08005fb0

08004918 <memset>:
 8004918:	4402      	add	r2, r0
 800491a:	4603      	mov	r3, r0
 800491c:	4293      	cmp	r3, r2
 800491e:	d100      	bne.n	8004922 <memset+0xa>
 8004920:	4770      	bx	lr
 8004922:	f803 1b01 	strb.w	r1, [r3], #1
 8004926:	e7f9      	b.n	800491c <memset+0x4>

08004928 <siprintf>:
 8004928:	b40e      	push	{r1, r2, r3}
 800492a:	b500      	push	{lr}
 800492c:	b09c      	sub	sp, #112	; 0x70
 800492e:	ab1d      	add	r3, sp, #116	; 0x74
 8004930:	9002      	str	r0, [sp, #8]
 8004932:	9006      	str	r0, [sp, #24]
 8004934:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004938:	4809      	ldr	r0, [pc, #36]	; (8004960 <siprintf+0x38>)
 800493a:	9107      	str	r1, [sp, #28]
 800493c:	9104      	str	r1, [sp, #16]
 800493e:	4909      	ldr	r1, [pc, #36]	; (8004964 <siprintf+0x3c>)
 8004940:	f853 2b04 	ldr.w	r2, [r3], #4
 8004944:	9105      	str	r1, [sp, #20]
 8004946:	6800      	ldr	r0, [r0, #0]
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	a902      	add	r1, sp, #8
 800494c:	f000 fa12 	bl	8004d74 <_svfiprintf_r>
 8004950:	9b02      	ldr	r3, [sp, #8]
 8004952:	2200      	movs	r2, #0
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	b01c      	add	sp, #112	; 0x70
 8004958:	f85d eb04 	ldr.w	lr, [sp], #4
 800495c:	b003      	add	sp, #12
 800495e:	4770      	bx	lr
 8004960:	2000000c 	.word	0x2000000c
 8004964:	ffff0208 	.word	0xffff0208

08004968 <strcat>:
 8004968:	b510      	push	{r4, lr}
 800496a:	4602      	mov	r2, r0
 800496c:	7814      	ldrb	r4, [r2, #0]
 800496e:	4613      	mov	r3, r2
 8004970:	3201      	adds	r2, #1
 8004972:	2c00      	cmp	r4, #0
 8004974:	d1fa      	bne.n	800496c <strcat+0x4>
 8004976:	3b01      	subs	r3, #1
 8004978:	f811 2b01 	ldrb.w	r2, [r1], #1
 800497c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004980:	2a00      	cmp	r2, #0
 8004982:	d1f9      	bne.n	8004978 <strcat+0x10>
 8004984:	bd10      	pop	{r4, pc}

08004986 <strchr>:
 8004986:	b2c9      	uxtb	r1, r1
 8004988:	4603      	mov	r3, r0
 800498a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800498e:	b11a      	cbz	r2, 8004998 <strchr+0x12>
 8004990:	428a      	cmp	r2, r1
 8004992:	d1f9      	bne.n	8004988 <strchr+0x2>
 8004994:	4618      	mov	r0, r3
 8004996:	4770      	bx	lr
 8004998:	2900      	cmp	r1, #0
 800499a:	bf18      	it	ne
 800499c:	2300      	movne	r3, #0
 800499e:	e7f9      	b.n	8004994 <strchr+0xe>

080049a0 <strcpy>:
 80049a0:	4603      	mov	r3, r0
 80049a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049a6:	f803 2b01 	strb.w	r2, [r3], #1
 80049aa:	2a00      	cmp	r2, #0
 80049ac:	d1f9      	bne.n	80049a2 <strcpy+0x2>
 80049ae:	4770      	bx	lr

080049b0 <strdup>:
 80049b0:	4b02      	ldr	r3, [pc, #8]	; (80049bc <strdup+0xc>)
 80049b2:	4601      	mov	r1, r0
 80049b4:	6818      	ldr	r0, [r3, #0]
 80049b6:	f000 b803 	b.w	80049c0 <_strdup_r>
 80049ba:	bf00      	nop
 80049bc:	2000000c 	.word	0x2000000c

080049c0 <_strdup_r>:
 80049c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049c2:	4604      	mov	r4, r0
 80049c4:	4608      	mov	r0, r1
 80049c6:	460d      	mov	r5, r1
 80049c8:	f7fb fc02 	bl	80001d0 <strlen>
 80049cc:	1c42      	adds	r2, r0, #1
 80049ce:	4611      	mov	r1, r2
 80049d0:	4620      	mov	r0, r4
 80049d2:	9201      	str	r2, [sp, #4]
 80049d4:	f000 f918 	bl	8004c08 <_malloc_r>
 80049d8:	4604      	mov	r4, r0
 80049da:	b118      	cbz	r0, 80049e4 <_strdup_r+0x24>
 80049dc:	9a01      	ldr	r2, [sp, #4]
 80049de:	4629      	mov	r1, r5
 80049e0:	f000 f8b4 	bl	8004b4c <memcpy>
 80049e4:	4620      	mov	r0, r4
 80049e6:	b003      	add	sp, #12
 80049e8:	bd30      	pop	{r4, r5, pc}

080049ea <strsep>:
 80049ea:	4602      	mov	r2, r0
 80049ec:	2300      	movs	r3, #0
 80049ee:	6800      	ldr	r0, [r0, #0]
 80049f0:	f000 b84c 	b.w	8004a8c <__strtok_r>

080049f4 <strstr>:
 80049f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f6:	780c      	ldrb	r4, [r1, #0]
 80049f8:	b164      	cbz	r4, 8004a14 <strstr+0x20>
 80049fa:	4603      	mov	r3, r0
 80049fc:	781a      	ldrb	r2, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	1c5e      	adds	r6, r3, #1
 8004a02:	b90a      	cbnz	r2, 8004a08 <strstr+0x14>
 8004a04:	4610      	mov	r0, r2
 8004a06:	e005      	b.n	8004a14 <strstr+0x20>
 8004a08:	4294      	cmp	r4, r2
 8004a0a:	d108      	bne.n	8004a1e <strstr+0x2a>
 8004a0c:	460d      	mov	r5, r1
 8004a0e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004a12:	b902      	cbnz	r2, 8004a16 <strstr+0x22>
 8004a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a16:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004a1a:	4297      	cmp	r7, r2
 8004a1c:	d0f7      	beq.n	8004a0e <strstr+0x1a>
 8004a1e:	4633      	mov	r3, r6
 8004a20:	e7ec      	b.n	80049fc <strstr+0x8>
	...

08004a24 <strtok>:
 8004a24:	4b16      	ldr	r3, [pc, #88]	; (8004a80 <strtok+0x5c>)
 8004a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a28:	681e      	ldr	r6, [r3, #0]
 8004a2a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004a2c:	4605      	mov	r5, r0
 8004a2e:	b9fc      	cbnz	r4, 8004a70 <strtok+0x4c>
 8004a30:	2050      	movs	r0, #80	; 0x50
 8004a32:	9101      	str	r1, [sp, #4]
 8004a34:	f000 f882 	bl	8004b3c <malloc>
 8004a38:	9901      	ldr	r1, [sp, #4]
 8004a3a:	65b0      	str	r0, [r6, #88]	; 0x58
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	b920      	cbnz	r0, 8004a4a <strtok+0x26>
 8004a40:	4b10      	ldr	r3, [pc, #64]	; (8004a84 <strtok+0x60>)
 8004a42:	4811      	ldr	r0, [pc, #68]	; (8004a88 <strtok+0x64>)
 8004a44:	2157      	movs	r1, #87	; 0x57
 8004a46:	f000 f849 	bl	8004adc <__assert_func>
 8004a4a:	e9c0 4400 	strd	r4, r4, [r0]
 8004a4e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004a52:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004a56:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004a5a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004a5e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004a62:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004a66:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004a6a:	6184      	str	r4, [r0, #24]
 8004a6c:	7704      	strb	r4, [r0, #28]
 8004a6e:	6244      	str	r4, [r0, #36]	; 0x24
 8004a70:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004a72:	2301      	movs	r3, #1
 8004a74:	4628      	mov	r0, r5
 8004a76:	b002      	add	sp, #8
 8004a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004a7c:	f000 b806 	b.w	8004a8c <__strtok_r>
 8004a80:	2000000c 	.word	0x2000000c
 8004a84:	08005e5c 	.word	0x08005e5c
 8004a88:	08005e73 	.word	0x08005e73

08004a8c <__strtok_r>:
 8004a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a8e:	b908      	cbnz	r0, 8004a94 <__strtok_r+0x8>
 8004a90:	6810      	ldr	r0, [r2, #0]
 8004a92:	b188      	cbz	r0, 8004ab8 <__strtok_r+0x2c>
 8004a94:	4604      	mov	r4, r0
 8004a96:	4620      	mov	r0, r4
 8004a98:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004a9c:	460f      	mov	r7, r1
 8004a9e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004aa2:	b91e      	cbnz	r6, 8004aac <__strtok_r+0x20>
 8004aa4:	b965      	cbnz	r5, 8004ac0 <__strtok_r+0x34>
 8004aa6:	6015      	str	r5, [r2, #0]
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	e005      	b.n	8004ab8 <__strtok_r+0x2c>
 8004aac:	42b5      	cmp	r5, r6
 8004aae:	d1f6      	bne.n	8004a9e <__strtok_r+0x12>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <__strtok_r+0xa>
 8004ab4:	6014      	str	r4, [r2, #0]
 8004ab6:	7003      	strb	r3, [r0, #0]
 8004ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aba:	461c      	mov	r4, r3
 8004abc:	e00c      	b.n	8004ad8 <__strtok_r+0x4c>
 8004abe:	b915      	cbnz	r5, 8004ac6 <__strtok_r+0x3a>
 8004ac0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004ac4:	460e      	mov	r6, r1
 8004ac6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004aca:	42ab      	cmp	r3, r5
 8004acc:	d1f7      	bne.n	8004abe <__strtok_r+0x32>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f3      	beq.n	8004aba <__strtok_r+0x2e>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004ad8:	6014      	str	r4, [r2, #0]
 8004ada:	e7ed      	b.n	8004ab8 <__strtok_r+0x2c>

08004adc <__assert_func>:
 8004adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ade:	4614      	mov	r4, r2
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <__assert_func+0x2c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4605      	mov	r5, r0
 8004ae8:	68d8      	ldr	r0, [r3, #12]
 8004aea:	b14c      	cbz	r4, 8004b00 <__assert_func+0x24>
 8004aec:	4b07      	ldr	r3, [pc, #28]	; (8004b0c <__assert_func+0x30>)
 8004aee:	9100      	str	r1, [sp, #0]
 8004af0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004af4:	4906      	ldr	r1, [pc, #24]	; (8004b10 <__assert_func+0x34>)
 8004af6:	462b      	mov	r3, r5
 8004af8:	f000 f80e 	bl	8004b18 <fiprintf>
 8004afc:	f000 fdf8 	bl	80056f0 <abort>
 8004b00:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <__assert_func+0x38>)
 8004b02:	461c      	mov	r4, r3
 8004b04:	e7f3      	b.n	8004aee <__assert_func+0x12>
 8004b06:	bf00      	nop
 8004b08:	2000000c 	.word	0x2000000c
 8004b0c:	08005ed4 	.word	0x08005ed4
 8004b10:	08005ee1 	.word	0x08005ee1
 8004b14:	08005f0f 	.word	0x08005f0f

08004b18 <fiprintf>:
 8004b18:	b40e      	push	{r1, r2, r3}
 8004b1a:	b503      	push	{r0, r1, lr}
 8004b1c:	4601      	mov	r1, r0
 8004b1e:	ab03      	add	r3, sp, #12
 8004b20:	4805      	ldr	r0, [pc, #20]	; (8004b38 <fiprintf+0x20>)
 8004b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b26:	6800      	ldr	r0, [r0, #0]
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	f000 fa4d 	bl	8004fc8 <_vfiprintf_r>
 8004b2e:	b002      	add	sp, #8
 8004b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b34:	b003      	add	sp, #12
 8004b36:	4770      	bx	lr
 8004b38:	2000000c 	.word	0x2000000c

08004b3c <malloc>:
 8004b3c:	4b02      	ldr	r3, [pc, #8]	; (8004b48 <malloc+0xc>)
 8004b3e:	4601      	mov	r1, r0
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	f000 b861 	b.w	8004c08 <_malloc_r>
 8004b46:	bf00      	nop
 8004b48:	2000000c 	.word	0x2000000c

08004b4c <memcpy>:
 8004b4c:	440a      	add	r2, r1
 8004b4e:	4291      	cmp	r1, r2
 8004b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b54:	d100      	bne.n	8004b58 <memcpy+0xc>
 8004b56:	4770      	bx	lr
 8004b58:	b510      	push	{r4, lr}
 8004b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b62:	4291      	cmp	r1, r2
 8004b64:	d1f9      	bne.n	8004b5a <memcpy+0xe>
 8004b66:	bd10      	pop	{r4, pc}

08004b68 <_free_r>:
 8004b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b6a:	2900      	cmp	r1, #0
 8004b6c:	d048      	beq.n	8004c00 <_free_r+0x98>
 8004b6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b72:	9001      	str	r0, [sp, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f1a1 0404 	sub.w	r4, r1, #4
 8004b7a:	bfb8      	it	lt
 8004b7c:	18e4      	addlt	r4, r4, r3
 8004b7e:	f000 fff7 	bl	8005b70 <__malloc_lock>
 8004b82:	4a20      	ldr	r2, [pc, #128]	; (8004c04 <_free_r+0x9c>)
 8004b84:	9801      	ldr	r0, [sp, #4]
 8004b86:	6813      	ldr	r3, [r2, #0]
 8004b88:	4615      	mov	r5, r2
 8004b8a:	b933      	cbnz	r3, 8004b9a <_free_r+0x32>
 8004b8c:	6063      	str	r3, [r4, #4]
 8004b8e:	6014      	str	r4, [r2, #0]
 8004b90:	b003      	add	sp, #12
 8004b92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b96:	f000 bff1 	b.w	8005b7c <__malloc_unlock>
 8004b9a:	42a3      	cmp	r3, r4
 8004b9c:	d90b      	bls.n	8004bb6 <_free_r+0x4e>
 8004b9e:	6821      	ldr	r1, [r4, #0]
 8004ba0:	1862      	adds	r2, r4, r1
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	bf04      	itt	eq
 8004ba6:	681a      	ldreq	r2, [r3, #0]
 8004ba8:	685b      	ldreq	r3, [r3, #4]
 8004baa:	6063      	str	r3, [r4, #4]
 8004bac:	bf04      	itt	eq
 8004bae:	1852      	addeq	r2, r2, r1
 8004bb0:	6022      	streq	r2, [r4, #0]
 8004bb2:	602c      	str	r4, [r5, #0]
 8004bb4:	e7ec      	b.n	8004b90 <_free_r+0x28>
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	b10b      	cbz	r3, 8004bc0 <_free_r+0x58>
 8004bbc:	42a3      	cmp	r3, r4
 8004bbe:	d9fa      	bls.n	8004bb6 <_free_r+0x4e>
 8004bc0:	6811      	ldr	r1, [r2, #0]
 8004bc2:	1855      	adds	r5, r2, r1
 8004bc4:	42a5      	cmp	r5, r4
 8004bc6:	d10b      	bne.n	8004be0 <_free_r+0x78>
 8004bc8:	6824      	ldr	r4, [r4, #0]
 8004bca:	4421      	add	r1, r4
 8004bcc:	1854      	adds	r4, r2, r1
 8004bce:	42a3      	cmp	r3, r4
 8004bd0:	6011      	str	r1, [r2, #0]
 8004bd2:	d1dd      	bne.n	8004b90 <_free_r+0x28>
 8004bd4:	681c      	ldr	r4, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	6053      	str	r3, [r2, #4]
 8004bda:	4421      	add	r1, r4
 8004bdc:	6011      	str	r1, [r2, #0]
 8004bde:	e7d7      	b.n	8004b90 <_free_r+0x28>
 8004be0:	d902      	bls.n	8004be8 <_free_r+0x80>
 8004be2:	230c      	movs	r3, #12
 8004be4:	6003      	str	r3, [r0, #0]
 8004be6:	e7d3      	b.n	8004b90 <_free_r+0x28>
 8004be8:	6825      	ldr	r5, [r4, #0]
 8004bea:	1961      	adds	r1, r4, r5
 8004bec:	428b      	cmp	r3, r1
 8004bee:	bf04      	itt	eq
 8004bf0:	6819      	ldreq	r1, [r3, #0]
 8004bf2:	685b      	ldreq	r3, [r3, #4]
 8004bf4:	6063      	str	r3, [r4, #4]
 8004bf6:	bf04      	itt	eq
 8004bf8:	1949      	addeq	r1, r1, r5
 8004bfa:	6021      	streq	r1, [r4, #0]
 8004bfc:	6054      	str	r4, [r2, #4]
 8004bfe:	e7c7      	b.n	8004b90 <_free_r+0x28>
 8004c00:	b003      	add	sp, #12
 8004c02:	bd30      	pop	{r4, r5, pc}
 8004c04:	20000094 	.word	0x20000094

08004c08 <_malloc_r>:
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	1ccd      	adds	r5, r1, #3
 8004c0c:	f025 0503 	bic.w	r5, r5, #3
 8004c10:	3508      	adds	r5, #8
 8004c12:	2d0c      	cmp	r5, #12
 8004c14:	bf38      	it	cc
 8004c16:	250c      	movcc	r5, #12
 8004c18:	2d00      	cmp	r5, #0
 8004c1a:	4606      	mov	r6, r0
 8004c1c:	db01      	blt.n	8004c22 <_malloc_r+0x1a>
 8004c1e:	42a9      	cmp	r1, r5
 8004c20:	d903      	bls.n	8004c2a <_malloc_r+0x22>
 8004c22:	230c      	movs	r3, #12
 8004c24:	6033      	str	r3, [r6, #0]
 8004c26:	2000      	movs	r0, #0
 8004c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c2a:	f000 ffa1 	bl	8005b70 <__malloc_lock>
 8004c2e:	4921      	ldr	r1, [pc, #132]	; (8004cb4 <_malloc_r+0xac>)
 8004c30:	680a      	ldr	r2, [r1, #0]
 8004c32:	4614      	mov	r4, r2
 8004c34:	b99c      	cbnz	r4, 8004c5e <_malloc_r+0x56>
 8004c36:	4f20      	ldr	r7, [pc, #128]	; (8004cb8 <_malloc_r+0xb0>)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	b923      	cbnz	r3, 8004c46 <_malloc_r+0x3e>
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	4630      	mov	r0, r6
 8004c40:	f000 fc86 	bl	8005550 <_sbrk_r>
 8004c44:	6038      	str	r0, [r7, #0]
 8004c46:	4629      	mov	r1, r5
 8004c48:	4630      	mov	r0, r6
 8004c4a:	f000 fc81 	bl	8005550 <_sbrk_r>
 8004c4e:	1c43      	adds	r3, r0, #1
 8004c50:	d123      	bne.n	8004c9a <_malloc_r+0x92>
 8004c52:	230c      	movs	r3, #12
 8004c54:	6033      	str	r3, [r6, #0]
 8004c56:	4630      	mov	r0, r6
 8004c58:	f000 ff90 	bl	8005b7c <__malloc_unlock>
 8004c5c:	e7e3      	b.n	8004c26 <_malloc_r+0x1e>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	1b5b      	subs	r3, r3, r5
 8004c62:	d417      	bmi.n	8004c94 <_malloc_r+0x8c>
 8004c64:	2b0b      	cmp	r3, #11
 8004c66:	d903      	bls.n	8004c70 <_malloc_r+0x68>
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	441c      	add	r4, r3
 8004c6c:	6025      	str	r5, [r4, #0]
 8004c6e:	e004      	b.n	8004c7a <_malloc_r+0x72>
 8004c70:	6863      	ldr	r3, [r4, #4]
 8004c72:	42a2      	cmp	r2, r4
 8004c74:	bf0c      	ite	eq
 8004c76:	600b      	streq	r3, [r1, #0]
 8004c78:	6053      	strne	r3, [r2, #4]
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	f000 ff7e 	bl	8005b7c <__malloc_unlock>
 8004c80:	f104 000b 	add.w	r0, r4, #11
 8004c84:	1d23      	adds	r3, r4, #4
 8004c86:	f020 0007 	bic.w	r0, r0, #7
 8004c8a:	1ac2      	subs	r2, r0, r3
 8004c8c:	d0cc      	beq.n	8004c28 <_malloc_r+0x20>
 8004c8e:	1a1b      	subs	r3, r3, r0
 8004c90:	50a3      	str	r3, [r4, r2]
 8004c92:	e7c9      	b.n	8004c28 <_malloc_r+0x20>
 8004c94:	4622      	mov	r2, r4
 8004c96:	6864      	ldr	r4, [r4, #4]
 8004c98:	e7cc      	b.n	8004c34 <_malloc_r+0x2c>
 8004c9a:	1cc4      	adds	r4, r0, #3
 8004c9c:	f024 0403 	bic.w	r4, r4, #3
 8004ca0:	42a0      	cmp	r0, r4
 8004ca2:	d0e3      	beq.n	8004c6c <_malloc_r+0x64>
 8004ca4:	1a21      	subs	r1, r4, r0
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	f000 fc52 	bl	8005550 <_sbrk_r>
 8004cac:	3001      	adds	r0, #1
 8004cae:	d1dd      	bne.n	8004c6c <_malloc_r+0x64>
 8004cb0:	e7cf      	b.n	8004c52 <_malloc_r+0x4a>
 8004cb2:	bf00      	nop
 8004cb4:	20000094 	.word	0x20000094
 8004cb8:	20000098 	.word	0x20000098

08004cbc <__ssputs_r>:
 8004cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc0:	688e      	ldr	r6, [r1, #8]
 8004cc2:	429e      	cmp	r6, r3
 8004cc4:	4682      	mov	sl, r0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	4690      	mov	r8, r2
 8004cca:	461f      	mov	r7, r3
 8004ccc:	d838      	bhi.n	8004d40 <__ssputs_r+0x84>
 8004cce:	898a      	ldrh	r2, [r1, #12]
 8004cd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cd4:	d032      	beq.n	8004d3c <__ssputs_r+0x80>
 8004cd6:	6825      	ldr	r5, [r4, #0]
 8004cd8:	6909      	ldr	r1, [r1, #16]
 8004cda:	eba5 0901 	sub.w	r9, r5, r1
 8004cde:	6965      	ldr	r5, [r4, #20]
 8004ce0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ce4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ce8:	3301      	adds	r3, #1
 8004cea:	444b      	add	r3, r9
 8004cec:	106d      	asrs	r5, r5, #1
 8004cee:	429d      	cmp	r5, r3
 8004cf0:	bf38      	it	cc
 8004cf2:	461d      	movcc	r5, r3
 8004cf4:	0553      	lsls	r3, r2, #21
 8004cf6:	d531      	bpl.n	8004d5c <__ssputs_r+0xa0>
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	f7ff ff85 	bl	8004c08 <_malloc_r>
 8004cfe:	4606      	mov	r6, r0
 8004d00:	b950      	cbnz	r0, 8004d18 <__ssputs_r+0x5c>
 8004d02:	230c      	movs	r3, #12
 8004d04:	f8ca 3000 	str.w	r3, [sl]
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d0e:	81a3      	strh	r3, [r4, #12]
 8004d10:	f04f 30ff 	mov.w	r0, #4294967295
 8004d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d18:	6921      	ldr	r1, [r4, #16]
 8004d1a:	464a      	mov	r2, r9
 8004d1c:	f7ff ff16 	bl	8004b4c <memcpy>
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	6126      	str	r6, [r4, #16]
 8004d2e:	6165      	str	r5, [r4, #20]
 8004d30:	444e      	add	r6, r9
 8004d32:	eba5 0509 	sub.w	r5, r5, r9
 8004d36:	6026      	str	r6, [r4, #0]
 8004d38:	60a5      	str	r5, [r4, #8]
 8004d3a:	463e      	mov	r6, r7
 8004d3c:	42be      	cmp	r6, r7
 8004d3e:	d900      	bls.n	8004d42 <__ssputs_r+0x86>
 8004d40:	463e      	mov	r6, r7
 8004d42:	4632      	mov	r2, r6
 8004d44:	6820      	ldr	r0, [r4, #0]
 8004d46:	4641      	mov	r1, r8
 8004d48:	f000 fef8 	bl	8005b3c <memmove>
 8004d4c:	68a3      	ldr	r3, [r4, #8]
 8004d4e:	6822      	ldr	r2, [r4, #0]
 8004d50:	1b9b      	subs	r3, r3, r6
 8004d52:	4432      	add	r2, r6
 8004d54:	60a3      	str	r3, [r4, #8]
 8004d56:	6022      	str	r2, [r4, #0]
 8004d58:	2000      	movs	r0, #0
 8004d5a:	e7db      	b.n	8004d14 <__ssputs_r+0x58>
 8004d5c:	462a      	mov	r2, r5
 8004d5e:	f000 ff13 	bl	8005b88 <_realloc_r>
 8004d62:	4606      	mov	r6, r0
 8004d64:	2800      	cmp	r0, #0
 8004d66:	d1e1      	bne.n	8004d2c <__ssputs_r+0x70>
 8004d68:	6921      	ldr	r1, [r4, #16]
 8004d6a:	4650      	mov	r0, sl
 8004d6c:	f7ff fefc 	bl	8004b68 <_free_r>
 8004d70:	e7c7      	b.n	8004d02 <__ssputs_r+0x46>
	...

08004d74 <_svfiprintf_r>:
 8004d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d78:	4698      	mov	r8, r3
 8004d7a:	898b      	ldrh	r3, [r1, #12]
 8004d7c:	061b      	lsls	r3, r3, #24
 8004d7e:	b09d      	sub	sp, #116	; 0x74
 8004d80:	4607      	mov	r7, r0
 8004d82:	460d      	mov	r5, r1
 8004d84:	4614      	mov	r4, r2
 8004d86:	d50e      	bpl.n	8004da6 <_svfiprintf_r+0x32>
 8004d88:	690b      	ldr	r3, [r1, #16]
 8004d8a:	b963      	cbnz	r3, 8004da6 <_svfiprintf_r+0x32>
 8004d8c:	2140      	movs	r1, #64	; 0x40
 8004d8e:	f7ff ff3b 	bl	8004c08 <_malloc_r>
 8004d92:	6028      	str	r0, [r5, #0]
 8004d94:	6128      	str	r0, [r5, #16]
 8004d96:	b920      	cbnz	r0, 8004da2 <_svfiprintf_r+0x2e>
 8004d98:	230c      	movs	r3, #12
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004da0:	e0d1      	b.n	8004f46 <_svfiprintf_r+0x1d2>
 8004da2:	2340      	movs	r3, #64	; 0x40
 8004da4:	616b      	str	r3, [r5, #20]
 8004da6:	2300      	movs	r3, #0
 8004da8:	9309      	str	r3, [sp, #36]	; 0x24
 8004daa:	2320      	movs	r3, #32
 8004dac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004db0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004db4:	2330      	movs	r3, #48	; 0x30
 8004db6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f60 <_svfiprintf_r+0x1ec>
 8004dba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dbe:	f04f 0901 	mov.w	r9, #1
 8004dc2:	4623      	mov	r3, r4
 8004dc4:	469a      	mov	sl, r3
 8004dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dca:	b10a      	cbz	r2, 8004dd0 <_svfiprintf_r+0x5c>
 8004dcc:	2a25      	cmp	r2, #37	; 0x25
 8004dce:	d1f9      	bne.n	8004dc4 <_svfiprintf_r+0x50>
 8004dd0:	ebba 0b04 	subs.w	fp, sl, r4
 8004dd4:	d00b      	beq.n	8004dee <_svfiprintf_r+0x7a>
 8004dd6:	465b      	mov	r3, fp
 8004dd8:	4622      	mov	r2, r4
 8004dda:	4629      	mov	r1, r5
 8004ddc:	4638      	mov	r0, r7
 8004dde:	f7ff ff6d 	bl	8004cbc <__ssputs_r>
 8004de2:	3001      	adds	r0, #1
 8004de4:	f000 80aa 	beq.w	8004f3c <_svfiprintf_r+0x1c8>
 8004de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dea:	445a      	add	r2, fp
 8004dec:	9209      	str	r2, [sp, #36]	; 0x24
 8004dee:	f89a 3000 	ldrb.w	r3, [sl]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 80a2 	beq.w	8004f3c <_svfiprintf_r+0x1c8>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004dfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e02:	f10a 0a01 	add.w	sl, sl, #1
 8004e06:	9304      	str	r3, [sp, #16]
 8004e08:	9307      	str	r3, [sp, #28]
 8004e0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e0e:	931a      	str	r3, [sp, #104]	; 0x68
 8004e10:	4654      	mov	r4, sl
 8004e12:	2205      	movs	r2, #5
 8004e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e18:	4851      	ldr	r0, [pc, #324]	; (8004f60 <_svfiprintf_r+0x1ec>)
 8004e1a:	f7fb f9e1 	bl	80001e0 <memchr>
 8004e1e:	9a04      	ldr	r2, [sp, #16]
 8004e20:	b9d8      	cbnz	r0, 8004e5a <_svfiprintf_r+0xe6>
 8004e22:	06d0      	lsls	r0, r2, #27
 8004e24:	bf44      	itt	mi
 8004e26:	2320      	movmi	r3, #32
 8004e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e2c:	0711      	lsls	r1, r2, #28
 8004e2e:	bf44      	itt	mi
 8004e30:	232b      	movmi	r3, #43	; 0x2b
 8004e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e36:	f89a 3000 	ldrb.w	r3, [sl]
 8004e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e3c:	d015      	beq.n	8004e6a <_svfiprintf_r+0xf6>
 8004e3e:	9a07      	ldr	r2, [sp, #28]
 8004e40:	4654      	mov	r4, sl
 8004e42:	2000      	movs	r0, #0
 8004e44:	f04f 0c0a 	mov.w	ip, #10
 8004e48:	4621      	mov	r1, r4
 8004e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e4e:	3b30      	subs	r3, #48	; 0x30
 8004e50:	2b09      	cmp	r3, #9
 8004e52:	d94e      	bls.n	8004ef2 <_svfiprintf_r+0x17e>
 8004e54:	b1b0      	cbz	r0, 8004e84 <_svfiprintf_r+0x110>
 8004e56:	9207      	str	r2, [sp, #28]
 8004e58:	e014      	b.n	8004e84 <_svfiprintf_r+0x110>
 8004e5a:	eba0 0308 	sub.w	r3, r0, r8
 8004e5e:	fa09 f303 	lsl.w	r3, r9, r3
 8004e62:	4313      	orrs	r3, r2
 8004e64:	9304      	str	r3, [sp, #16]
 8004e66:	46a2      	mov	sl, r4
 8004e68:	e7d2      	b.n	8004e10 <_svfiprintf_r+0x9c>
 8004e6a:	9b03      	ldr	r3, [sp, #12]
 8004e6c:	1d19      	adds	r1, r3, #4
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	9103      	str	r1, [sp, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	bfbb      	ittet	lt
 8004e76:	425b      	neglt	r3, r3
 8004e78:	f042 0202 	orrlt.w	r2, r2, #2
 8004e7c:	9307      	strge	r3, [sp, #28]
 8004e7e:	9307      	strlt	r3, [sp, #28]
 8004e80:	bfb8      	it	lt
 8004e82:	9204      	strlt	r2, [sp, #16]
 8004e84:	7823      	ldrb	r3, [r4, #0]
 8004e86:	2b2e      	cmp	r3, #46	; 0x2e
 8004e88:	d10c      	bne.n	8004ea4 <_svfiprintf_r+0x130>
 8004e8a:	7863      	ldrb	r3, [r4, #1]
 8004e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e8e:	d135      	bne.n	8004efc <_svfiprintf_r+0x188>
 8004e90:	9b03      	ldr	r3, [sp, #12]
 8004e92:	1d1a      	adds	r2, r3, #4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	9203      	str	r2, [sp, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	bfb8      	it	lt
 8004e9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ea0:	3402      	adds	r4, #2
 8004ea2:	9305      	str	r3, [sp, #20]
 8004ea4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f70 <_svfiprintf_r+0x1fc>
 8004ea8:	7821      	ldrb	r1, [r4, #0]
 8004eaa:	2203      	movs	r2, #3
 8004eac:	4650      	mov	r0, sl
 8004eae:	f7fb f997 	bl	80001e0 <memchr>
 8004eb2:	b140      	cbz	r0, 8004ec6 <_svfiprintf_r+0x152>
 8004eb4:	2340      	movs	r3, #64	; 0x40
 8004eb6:	eba0 000a 	sub.w	r0, r0, sl
 8004eba:	fa03 f000 	lsl.w	r0, r3, r0
 8004ebe:	9b04      	ldr	r3, [sp, #16]
 8004ec0:	4303      	orrs	r3, r0
 8004ec2:	3401      	adds	r4, #1
 8004ec4:	9304      	str	r3, [sp, #16]
 8004ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eca:	4826      	ldr	r0, [pc, #152]	; (8004f64 <_svfiprintf_r+0x1f0>)
 8004ecc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ed0:	2206      	movs	r2, #6
 8004ed2:	f7fb f985 	bl	80001e0 <memchr>
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	d038      	beq.n	8004f4c <_svfiprintf_r+0x1d8>
 8004eda:	4b23      	ldr	r3, [pc, #140]	; (8004f68 <_svfiprintf_r+0x1f4>)
 8004edc:	bb1b      	cbnz	r3, 8004f26 <_svfiprintf_r+0x1b2>
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	3307      	adds	r3, #7
 8004ee2:	f023 0307 	bic.w	r3, r3, #7
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	9303      	str	r3, [sp, #12]
 8004eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eec:	4433      	add	r3, r6
 8004eee:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef0:	e767      	b.n	8004dc2 <_svfiprintf_r+0x4e>
 8004ef2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	2001      	movs	r0, #1
 8004efa:	e7a5      	b.n	8004e48 <_svfiprintf_r+0xd4>
 8004efc:	2300      	movs	r3, #0
 8004efe:	3401      	adds	r4, #1
 8004f00:	9305      	str	r3, [sp, #20]
 8004f02:	4619      	mov	r1, r3
 8004f04:	f04f 0c0a 	mov.w	ip, #10
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f0e:	3a30      	subs	r2, #48	; 0x30
 8004f10:	2a09      	cmp	r2, #9
 8004f12:	d903      	bls.n	8004f1c <_svfiprintf_r+0x1a8>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0c5      	beq.n	8004ea4 <_svfiprintf_r+0x130>
 8004f18:	9105      	str	r1, [sp, #20]
 8004f1a:	e7c3      	b.n	8004ea4 <_svfiprintf_r+0x130>
 8004f1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f20:	4604      	mov	r4, r0
 8004f22:	2301      	movs	r3, #1
 8004f24:	e7f0      	b.n	8004f08 <_svfiprintf_r+0x194>
 8004f26:	ab03      	add	r3, sp, #12
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	462a      	mov	r2, r5
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <_svfiprintf_r+0x1f8>)
 8004f2e:	a904      	add	r1, sp, #16
 8004f30:	4638      	mov	r0, r7
 8004f32:	f3af 8000 	nop.w
 8004f36:	1c42      	adds	r2, r0, #1
 8004f38:	4606      	mov	r6, r0
 8004f3a:	d1d6      	bne.n	8004eea <_svfiprintf_r+0x176>
 8004f3c:	89ab      	ldrh	r3, [r5, #12]
 8004f3e:	065b      	lsls	r3, r3, #25
 8004f40:	f53f af2c 	bmi.w	8004d9c <_svfiprintf_r+0x28>
 8004f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f46:	b01d      	add	sp, #116	; 0x74
 8004f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f4c:	ab03      	add	r3, sp, #12
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	462a      	mov	r2, r5
 8004f52:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <_svfiprintf_r+0x1f8>)
 8004f54:	a904      	add	r1, sp, #16
 8004f56:	4638      	mov	r0, r7
 8004f58:	f000 f9d4 	bl	8005304 <_printf_i>
 8004f5c:	e7eb      	b.n	8004f36 <_svfiprintf_r+0x1c2>
 8004f5e:	bf00      	nop
 8004f60:	08005f10 	.word	0x08005f10
 8004f64:	08005f1a 	.word	0x08005f1a
 8004f68:	00000000 	.word	0x00000000
 8004f6c:	08004cbd 	.word	0x08004cbd
 8004f70:	08005f16 	.word	0x08005f16

08004f74 <__sfputc_r>:
 8004f74:	6893      	ldr	r3, [r2, #8]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	b410      	push	{r4}
 8004f7c:	6093      	str	r3, [r2, #8]
 8004f7e:	da08      	bge.n	8004f92 <__sfputc_r+0x1e>
 8004f80:	6994      	ldr	r4, [r2, #24]
 8004f82:	42a3      	cmp	r3, r4
 8004f84:	db01      	blt.n	8004f8a <__sfputc_r+0x16>
 8004f86:	290a      	cmp	r1, #10
 8004f88:	d103      	bne.n	8004f92 <__sfputc_r+0x1e>
 8004f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f8e:	f000 baef 	b.w	8005570 <__swbuf_r>
 8004f92:	6813      	ldr	r3, [r2, #0]
 8004f94:	1c58      	adds	r0, r3, #1
 8004f96:	6010      	str	r0, [r2, #0]
 8004f98:	7019      	strb	r1, [r3, #0]
 8004f9a:	4608      	mov	r0, r1
 8004f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <__sfputs_r>:
 8004fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa4:	4606      	mov	r6, r0
 8004fa6:	460f      	mov	r7, r1
 8004fa8:	4614      	mov	r4, r2
 8004faa:	18d5      	adds	r5, r2, r3
 8004fac:	42ac      	cmp	r4, r5
 8004fae:	d101      	bne.n	8004fb4 <__sfputs_r+0x12>
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	e007      	b.n	8004fc4 <__sfputs_r+0x22>
 8004fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb8:	463a      	mov	r2, r7
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f7ff ffda 	bl	8004f74 <__sfputc_r>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d1f3      	bne.n	8004fac <__sfputs_r+0xa>
 8004fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fc8 <_vfiprintf_r>:
 8004fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fcc:	460d      	mov	r5, r1
 8004fce:	b09d      	sub	sp, #116	; 0x74
 8004fd0:	4614      	mov	r4, r2
 8004fd2:	4698      	mov	r8, r3
 8004fd4:	4606      	mov	r6, r0
 8004fd6:	b118      	cbz	r0, 8004fe0 <_vfiprintf_r+0x18>
 8004fd8:	6983      	ldr	r3, [r0, #24]
 8004fda:	b90b      	cbnz	r3, 8004fe0 <_vfiprintf_r+0x18>
 8004fdc:	f000 fcaa 	bl	8005934 <__sinit>
 8004fe0:	4b89      	ldr	r3, [pc, #548]	; (8005208 <_vfiprintf_r+0x240>)
 8004fe2:	429d      	cmp	r5, r3
 8004fe4:	d11b      	bne.n	800501e <_vfiprintf_r+0x56>
 8004fe6:	6875      	ldr	r5, [r6, #4]
 8004fe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fea:	07d9      	lsls	r1, r3, #31
 8004fec:	d405      	bmi.n	8004ffa <_vfiprintf_r+0x32>
 8004fee:	89ab      	ldrh	r3, [r5, #12]
 8004ff0:	059a      	lsls	r2, r3, #22
 8004ff2:	d402      	bmi.n	8004ffa <_vfiprintf_r+0x32>
 8004ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ff6:	f000 fd3b 	bl	8005a70 <__retarget_lock_acquire_recursive>
 8004ffa:	89ab      	ldrh	r3, [r5, #12]
 8004ffc:	071b      	lsls	r3, r3, #28
 8004ffe:	d501      	bpl.n	8005004 <_vfiprintf_r+0x3c>
 8005000:	692b      	ldr	r3, [r5, #16]
 8005002:	b9eb      	cbnz	r3, 8005040 <_vfiprintf_r+0x78>
 8005004:	4629      	mov	r1, r5
 8005006:	4630      	mov	r0, r6
 8005008:	f000 fb04 	bl	8005614 <__swsetup_r>
 800500c:	b1c0      	cbz	r0, 8005040 <_vfiprintf_r+0x78>
 800500e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005010:	07dc      	lsls	r4, r3, #31
 8005012:	d50e      	bpl.n	8005032 <_vfiprintf_r+0x6a>
 8005014:	f04f 30ff 	mov.w	r0, #4294967295
 8005018:	b01d      	add	sp, #116	; 0x74
 800501a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800501e:	4b7b      	ldr	r3, [pc, #492]	; (800520c <_vfiprintf_r+0x244>)
 8005020:	429d      	cmp	r5, r3
 8005022:	d101      	bne.n	8005028 <_vfiprintf_r+0x60>
 8005024:	68b5      	ldr	r5, [r6, #8]
 8005026:	e7df      	b.n	8004fe8 <_vfiprintf_r+0x20>
 8005028:	4b79      	ldr	r3, [pc, #484]	; (8005210 <_vfiprintf_r+0x248>)
 800502a:	429d      	cmp	r5, r3
 800502c:	bf08      	it	eq
 800502e:	68f5      	ldreq	r5, [r6, #12]
 8005030:	e7da      	b.n	8004fe8 <_vfiprintf_r+0x20>
 8005032:	89ab      	ldrh	r3, [r5, #12]
 8005034:	0598      	lsls	r0, r3, #22
 8005036:	d4ed      	bmi.n	8005014 <_vfiprintf_r+0x4c>
 8005038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800503a:	f000 fd1a 	bl	8005a72 <__retarget_lock_release_recursive>
 800503e:	e7e9      	b.n	8005014 <_vfiprintf_r+0x4c>
 8005040:	2300      	movs	r3, #0
 8005042:	9309      	str	r3, [sp, #36]	; 0x24
 8005044:	2320      	movs	r3, #32
 8005046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800504a:	f8cd 800c 	str.w	r8, [sp, #12]
 800504e:	2330      	movs	r3, #48	; 0x30
 8005050:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005214 <_vfiprintf_r+0x24c>
 8005054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005058:	f04f 0901 	mov.w	r9, #1
 800505c:	4623      	mov	r3, r4
 800505e:	469a      	mov	sl, r3
 8005060:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005064:	b10a      	cbz	r2, 800506a <_vfiprintf_r+0xa2>
 8005066:	2a25      	cmp	r2, #37	; 0x25
 8005068:	d1f9      	bne.n	800505e <_vfiprintf_r+0x96>
 800506a:	ebba 0b04 	subs.w	fp, sl, r4
 800506e:	d00b      	beq.n	8005088 <_vfiprintf_r+0xc0>
 8005070:	465b      	mov	r3, fp
 8005072:	4622      	mov	r2, r4
 8005074:	4629      	mov	r1, r5
 8005076:	4630      	mov	r0, r6
 8005078:	f7ff ff93 	bl	8004fa2 <__sfputs_r>
 800507c:	3001      	adds	r0, #1
 800507e:	f000 80aa 	beq.w	80051d6 <_vfiprintf_r+0x20e>
 8005082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005084:	445a      	add	r2, fp
 8005086:	9209      	str	r2, [sp, #36]	; 0x24
 8005088:	f89a 3000 	ldrb.w	r3, [sl]
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80a2 	beq.w	80051d6 <_vfiprintf_r+0x20e>
 8005092:	2300      	movs	r3, #0
 8005094:	f04f 32ff 	mov.w	r2, #4294967295
 8005098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800509c:	f10a 0a01 	add.w	sl, sl, #1
 80050a0:	9304      	str	r3, [sp, #16]
 80050a2:	9307      	str	r3, [sp, #28]
 80050a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050a8:	931a      	str	r3, [sp, #104]	; 0x68
 80050aa:	4654      	mov	r4, sl
 80050ac:	2205      	movs	r2, #5
 80050ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050b2:	4858      	ldr	r0, [pc, #352]	; (8005214 <_vfiprintf_r+0x24c>)
 80050b4:	f7fb f894 	bl	80001e0 <memchr>
 80050b8:	9a04      	ldr	r2, [sp, #16]
 80050ba:	b9d8      	cbnz	r0, 80050f4 <_vfiprintf_r+0x12c>
 80050bc:	06d1      	lsls	r1, r2, #27
 80050be:	bf44      	itt	mi
 80050c0:	2320      	movmi	r3, #32
 80050c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050c6:	0713      	lsls	r3, r2, #28
 80050c8:	bf44      	itt	mi
 80050ca:	232b      	movmi	r3, #43	; 0x2b
 80050cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050d0:	f89a 3000 	ldrb.w	r3, [sl]
 80050d4:	2b2a      	cmp	r3, #42	; 0x2a
 80050d6:	d015      	beq.n	8005104 <_vfiprintf_r+0x13c>
 80050d8:	9a07      	ldr	r2, [sp, #28]
 80050da:	4654      	mov	r4, sl
 80050dc:	2000      	movs	r0, #0
 80050de:	f04f 0c0a 	mov.w	ip, #10
 80050e2:	4621      	mov	r1, r4
 80050e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050e8:	3b30      	subs	r3, #48	; 0x30
 80050ea:	2b09      	cmp	r3, #9
 80050ec:	d94e      	bls.n	800518c <_vfiprintf_r+0x1c4>
 80050ee:	b1b0      	cbz	r0, 800511e <_vfiprintf_r+0x156>
 80050f0:	9207      	str	r2, [sp, #28]
 80050f2:	e014      	b.n	800511e <_vfiprintf_r+0x156>
 80050f4:	eba0 0308 	sub.w	r3, r0, r8
 80050f8:	fa09 f303 	lsl.w	r3, r9, r3
 80050fc:	4313      	orrs	r3, r2
 80050fe:	9304      	str	r3, [sp, #16]
 8005100:	46a2      	mov	sl, r4
 8005102:	e7d2      	b.n	80050aa <_vfiprintf_r+0xe2>
 8005104:	9b03      	ldr	r3, [sp, #12]
 8005106:	1d19      	adds	r1, r3, #4
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	9103      	str	r1, [sp, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	bfbb      	ittet	lt
 8005110:	425b      	neglt	r3, r3
 8005112:	f042 0202 	orrlt.w	r2, r2, #2
 8005116:	9307      	strge	r3, [sp, #28]
 8005118:	9307      	strlt	r3, [sp, #28]
 800511a:	bfb8      	it	lt
 800511c:	9204      	strlt	r2, [sp, #16]
 800511e:	7823      	ldrb	r3, [r4, #0]
 8005120:	2b2e      	cmp	r3, #46	; 0x2e
 8005122:	d10c      	bne.n	800513e <_vfiprintf_r+0x176>
 8005124:	7863      	ldrb	r3, [r4, #1]
 8005126:	2b2a      	cmp	r3, #42	; 0x2a
 8005128:	d135      	bne.n	8005196 <_vfiprintf_r+0x1ce>
 800512a:	9b03      	ldr	r3, [sp, #12]
 800512c:	1d1a      	adds	r2, r3, #4
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	9203      	str	r2, [sp, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	bfb8      	it	lt
 8005136:	f04f 33ff 	movlt.w	r3, #4294967295
 800513a:	3402      	adds	r4, #2
 800513c:	9305      	str	r3, [sp, #20]
 800513e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005224 <_vfiprintf_r+0x25c>
 8005142:	7821      	ldrb	r1, [r4, #0]
 8005144:	2203      	movs	r2, #3
 8005146:	4650      	mov	r0, sl
 8005148:	f7fb f84a 	bl	80001e0 <memchr>
 800514c:	b140      	cbz	r0, 8005160 <_vfiprintf_r+0x198>
 800514e:	2340      	movs	r3, #64	; 0x40
 8005150:	eba0 000a 	sub.w	r0, r0, sl
 8005154:	fa03 f000 	lsl.w	r0, r3, r0
 8005158:	9b04      	ldr	r3, [sp, #16]
 800515a:	4303      	orrs	r3, r0
 800515c:	3401      	adds	r4, #1
 800515e:	9304      	str	r3, [sp, #16]
 8005160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005164:	482c      	ldr	r0, [pc, #176]	; (8005218 <_vfiprintf_r+0x250>)
 8005166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800516a:	2206      	movs	r2, #6
 800516c:	f7fb f838 	bl	80001e0 <memchr>
 8005170:	2800      	cmp	r0, #0
 8005172:	d03f      	beq.n	80051f4 <_vfiprintf_r+0x22c>
 8005174:	4b29      	ldr	r3, [pc, #164]	; (800521c <_vfiprintf_r+0x254>)
 8005176:	bb1b      	cbnz	r3, 80051c0 <_vfiprintf_r+0x1f8>
 8005178:	9b03      	ldr	r3, [sp, #12]
 800517a:	3307      	adds	r3, #7
 800517c:	f023 0307 	bic.w	r3, r3, #7
 8005180:	3308      	adds	r3, #8
 8005182:	9303      	str	r3, [sp, #12]
 8005184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005186:	443b      	add	r3, r7
 8005188:	9309      	str	r3, [sp, #36]	; 0x24
 800518a:	e767      	b.n	800505c <_vfiprintf_r+0x94>
 800518c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005190:	460c      	mov	r4, r1
 8005192:	2001      	movs	r0, #1
 8005194:	e7a5      	b.n	80050e2 <_vfiprintf_r+0x11a>
 8005196:	2300      	movs	r3, #0
 8005198:	3401      	adds	r4, #1
 800519a:	9305      	str	r3, [sp, #20]
 800519c:	4619      	mov	r1, r3
 800519e:	f04f 0c0a 	mov.w	ip, #10
 80051a2:	4620      	mov	r0, r4
 80051a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051a8:	3a30      	subs	r2, #48	; 0x30
 80051aa:	2a09      	cmp	r2, #9
 80051ac:	d903      	bls.n	80051b6 <_vfiprintf_r+0x1ee>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0c5      	beq.n	800513e <_vfiprintf_r+0x176>
 80051b2:	9105      	str	r1, [sp, #20]
 80051b4:	e7c3      	b.n	800513e <_vfiprintf_r+0x176>
 80051b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80051ba:	4604      	mov	r4, r0
 80051bc:	2301      	movs	r3, #1
 80051be:	e7f0      	b.n	80051a2 <_vfiprintf_r+0x1da>
 80051c0:	ab03      	add	r3, sp, #12
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	462a      	mov	r2, r5
 80051c6:	4b16      	ldr	r3, [pc, #88]	; (8005220 <_vfiprintf_r+0x258>)
 80051c8:	a904      	add	r1, sp, #16
 80051ca:	4630      	mov	r0, r6
 80051cc:	f3af 8000 	nop.w
 80051d0:	4607      	mov	r7, r0
 80051d2:	1c78      	adds	r0, r7, #1
 80051d4:	d1d6      	bne.n	8005184 <_vfiprintf_r+0x1bc>
 80051d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051d8:	07d9      	lsls	r1, r3, #31
 80051da:	d405      	bmi.n	80051e8 <_vfiprintf_r+0x220>
 80051dc:	89ab      	ldrh	r3, [r5, #12]
 80051de:	059a      	lsls	r2, r3, #22
 80051e0:	d402      	bmi.n	80051e8 <_vfiprintf_r+0x220>
 80051e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051e4:	f000 fc45 	bl	8005a72 <__retarget_lock_release_recursive>
 80051e8:	89ab      	ldrh	r3, [r5, #12]
 80051ea:	065b      	lsls	r3, r3, #25
 80051ec:	f53f af12 	bmi.w	8005014 <_vfiprintf_r+0x4c>
 80051f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051f2:	e711      	b.n	8005018 <_vfiprintf_r+0x50>
 80051f4:	ab03      	add	r3, sp, #12
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	462a      	mov	r2, r5
 80051fa:	4b09      	ldr	r3, [pc, #36]	; (8005220 <_vfiprintf_r+0x258>)
 80051fc:	a904      	add	r1, sp, #16
 80051fe:	4630      	mov	r0, r6
 8005200:	f000 f880 	bl	8005304 <_printf_i>
 8005204:	e7e4      	b.n	80051d0 <_vfiprintf_r+0x208>
 8005206:	bf00      	nop
 8005208:	08005f64 	.word	0x08005f64
 800520c:	08005f84 	.word	0x08005f84
 8005210:	08005f44 	.word	0x08005f44
 8005214:	08005f10 	.word	0x08005f10
 8005218:	08005f1a 	.word	0x08005f1a
 800521c:	00000000 	.word	0x00000000
 8005220:	08004fa3 	.word	0x08004fa3
 8005224:	08005f16 	.word	0x08005f16

08005228 <_printf_common>:
 8005228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800522c:	4616      	mov	r6, r2
 800522e:	4699      	mov	r9, r3
 8005230:	688a      	ldr	r2, [r1, #8]
 8005232:	690b      	ldr	r3, [r1, #16]
 8005234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005238:	4293      	cmp	r3, r2
 800523a:	bfb8      	it	lt
 800523c:	4613      	movlt	r3, r2
 800523e:	6033      	str	r3, [r6, #0]
 8005240:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005244:	4607      	mov	r7, r0
 8005246:	460c      	mov	r4, r1
 8005248:	b10a      	cbz	r2, 800524e <_printf_common+0x26>
 800524a:	3301      	adds	r3, #1
 800524c:	6033      	str	r3, [r6, #0]
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	0699      	lsls	r1, r3, #26
 8005252:	bf42      	ittt	mi
 8005254:	6833      	ldrmi	r3, [r6, #0]
 8005256:	3302      	addmi	r3, #2
 8005258:	6033      	strmi	r3, [r6, #0]
 800525a:	6825      	ldr	r5, [r4, #0]
 800525c:	f015 0506 	ands.w	r5, r5, #6
 8005260:	d106      	bne.n	8005270 <_printf_common+0x48>
 8005262:	f104 0a19 	add.w	sl, r4, #25
 8005266:	68e3      	ldr	r3, [r4, #12]
 8005268:	6832      	ldr	r2, [r6, #0]
 800526a:	1a9b      	subs	r3, r3, r2
 800526c:	42ab      	cmp	r3, r5
 800526e:	dc26      	bgt.n	80052be <_printf_common+0x96>
 8005270:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005274:	1e13      	subs	r3, r2, #0
 8005276:	6822      	ldr	r2, [r4, #0]
 8005278:	bf18      	it	ne
 800527a:	2301      	movne	r3, #1
 800527c:	0692      	lsls	r2, r2, #26
 800527e:	d42b      	bmi.n	80052d8 <_printf_common+0xb0>
 8005280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005284:	4649      	mov	r1, r9
 8005286:	4638      	mov	r0, r7
 8005288:	47c0      	blx	r8
 800528a:	3001      	adds	r0, #1
 800528c:	d01e      	beq.n	80052cc <_printf_common+0xa4>
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	68e5      	ldr	r5, [r4, #12]
 8005292:	6832      	ldr	r2, [r6, #0]
 8005294:	f003 0306 	and.w	r3, r3, #6
 8005298:	2b04      	cmp	r3, #4
 800529a:	bf08      	it	eq
 800529c:	1aad      	subeq	r5, r5, r2
 800529e:	68a3      	ldr	r3, [r4, #8]
 80052a0:	6922      	ldr	r2, [r4, #16]
 80052a2:	bf0c      	ite	eq
 80052a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052a8:	2500      	movne	r5, #0
 80052aa:	4293      	cmp	r3, r2
 80052ac:	bfc4      	itt	gt
 80052ae:	1a9b      	subgt	r3, r3, r2
 80052b0:	18ed      	addgt	r5, r5, r3
 80052b2:	2600      	movs	r6, #0
 80052b4:	341a      	adds	r4, #26
 80052b6:	42b5      	cmp	r5, r6
 80052b8:	d11a      	bne.n	80052f0 <_printf_common+0xc8>
 80052ba:	2000      	movs	r0, #0
 80052bc:	e008      	b.n	80052d0 <_printf_common+0xa8>
 80052be:	2301      	movs	r3, #1
 80052c0:	4652      	mov	r2, sl
 80052c2:	4649      	mov	r1, r9
 80052c4:	4638      	mov	r0, r7
 80052c6:	47c0      	blx	r8
 80052c8:	3001      	adds	r0, #1
 80052ca:	d103      	bne.n	80052d4 <_printf_common+0xac>
 80052cc:	f04f 30ff 	mov.w	r0, #4294967295
 80052d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d4:	3501      	adds	r5, #1
 80052d6:	e7c6      	b.n	8005266 <_printf_common+0x3e>
 80052d8:	18e1      	adds	r1, r4, r3
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	2030      	movs	r0, #48	; 0x30
 80052de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052e2:	4422      	add	r2, r4
 80052e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052ec:	3302      	adds	r3, #2
 80052ee:	e7c7      	b.n	8005280 <_printf_common+0x58>
 80052f0:	2301      	movs	r3, #1
 80052f2:	4622      	mov	r2, r4
 80052f4:	4649      	mov	r1, r9
 80052f6:	4638      	mov	r0, r7
 80052f8:	47c0      	blx	r8
 80052fa:	3001      	adds	r0, #1
 80052fc:	d0e6      	beq.n	80052cc <_printf_common+0xa4>
 80052fe:	3601      	adds	r6, #1
 8005300:	e7d9      	b.n	80052b6 <_printf_common+0x8e>
	...

08005304 <_printf_i>:
 8005304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	460c      	mov	r4, r1
 800530a:	4691      	mov	r9, r2
 800530c:	7e27      	ldrb	r7, [r4, #24]
 800530e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005310:	2f78      	cmp	r7, #120	; 0x78
 8005312:	4680      	mov	r8, r0
 8005314:	469a      	mov	sl, r3
 8005316:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800531a:	d807      	bhi.n	800532c <_printf_i+0x28>
 800531c:	2f62      	cmp	r7, #98	; 0x62
 800531e:	d80a      	bhi.n	8005336 <_printf_i+0x32>
 8005320:	2f00      	cmp	r7, #0
 8005322:	f000 80d8 	beq.w	80054d6 <_printf_i+0x1d2>
 8005326:	2f58      	cmp	r7, #88	; 0x58
 8005328:	f000 80a3 	beq.w	8005472 <_printf_i+0x16e>
 800532c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005334:	e03a      	b.n	80053ac <_printf_i+0xa8>
 8005336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800533a:	2b15      	cmp	r3, #21
 800533c:	d8f6      	bhi.n	800532c <_printf_i+0x28>
 800533e:	a001      	add	r0, pc, #4	; (adr r0, 8005344 <_printf_i+0x40>)
 8005340:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005344:	0800539d 	.word	0x0800539d
 8005348:	080053b1 	.word	0x080053b1
 800534c:	0800532d 	.word	0x0800532d
 8005350:	0800532d 	.word	0x0800532d
 8005354:	0800532d 	.word	0x0800532d
 8005358:	0800532d 	.word	0x0800532d
 800535c:	080053b1 	.word	0x080053b1
 8005360:	0800532d 	.word	0x0800532d
 8005364:	0800532d 	.word	0x0800532d
 8005368:	0800532d 	.word	0x0800532d
 800536c:	0800532d 	.word	0x0800532d
 8005370:	080054bd 	.word	0x080054bd
 8005374:	080053e1 	.word	0x080053e1
 8005378:	0800549f 	.word	0x0800549f
 800537c:	0800532d 	.word	0x0800532d
 8005380:	0800532d 	.word	0x0800532d
 8005384:	080054df 	.word	0x080054df
 8005388:	0800532d 	.word	0x0800532d
 800538c:	080053e1 	.word	0x080053e1
 8005390:	0800532d 	.word	0x0800532d
 8005394:	0800532d 	.word	0x0800532d
 8005398:	080054a7 	.word	0x080054a7
 800539c:	680b      	ldr	r3, [r1, #0]
 800539e:	1d1a      	adds	r2, r3, #4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	600a      	str	r2, [r1, #0]
 80053a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053ac:	2301      	movs	r3, #1
 80053ae:	e0a3      	b.n	80054f8 <_printf_i+0x1f4>
 80053b0:	6825      	ldr	r5, [r4, #0]
 80053b2:	6808      	ldr	r0, [r1, #0]
 80053b4:	062e      	lsls	r6, r5, #24
 80053b6:	f100 0304 	add.w	r3, r0, #4
 80053ba:	d50a      	bpl.n	80053d2 <_printf_i+0xce>
 80053bc:	6805      	ldr	r5, [r0, #0]
 80053be:	600b      	str	r3, [r1, #0]
 80053c0:	2d00      	cmp	r5, #0
 80053c2:	da03      	bge.n	80053cc <_printf_i+0xc8>
 80053c4:	232d      	movs	r3, #45	; 0x2d
 80053c6:	426d      	negs	r5, r5
 80053c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053cc:	485e      	ldr	r0, [pc, #376]	; (8005548 <_printf_i+0x244>)
 80053ce:	230a      	movs	r3, #10
 80053d0:	e019      	b.n	8005406 <_printf_i+0x102>
 80053d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053d6:	6805      	ldr	r5, [r0, #0]
 80053d8:	600b      	str	r3, [r1, #0]
 80053da:	bf18      	it	ne
 80053dc:	b22d      	sxthne	r5, r5
 80053de:	e7ef      	b.n	80053c0 <_printf_i+0xbc>
 80053e0:	680b      	ldr	r3, [r1, #0]
 80053e2:	6825      	ldr	r5, [r4, #0]
 80053e4:	1d18      	adds	r0, r3, #4
 80053e6:	6008      	str	r0, [r1, #0]
 80053e8:	0628      	lsls	r0, r5, #24
 80053ea:	d501      	bpl.n	80053f0 <_printf_i+0xec>
 80053ec:	681d      	ldr	r5, [r3, #0]
 80053ee:	e002      	b.n	80053f6 <_printf_i+0xf2>
 80053f0:	0669      	lsls	r1, r5, #25
 80053f2:	d5fb      	bpl.n	80053ec <_printf_i+0xe8>
 80053f4:	881d      	ldrh	r5, [r3, #0]
 80053f6:	4854      	ldr	r0, [pc, #336]	; (8005548 <_printf_i+0x244>)
 80053f8:	2f6f      	cmp	r7, #111	; 0x6f
 80053fa:	bf0c      	ite	eq
 80053fc:	2308      	moveq	r3, #8
 80053fe:	230a      	movne	r3, #10
 8005400:	2100      	movs	r1, #0
 8005402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005406:	6866      	ldr	r6, [r4, #4]
 8005408:	60a6      	str	r6, [r4, #8]
 800540a:	2e00      	cmp	r6, #0
 800540c:	bfa2      	ittt	ge
 800540e:	6821      	ldrge	r1, [r4, #0]
 8005410:	f021 0104 	bicge.w	r1, r1, #4
 8005414:	6021      	strge	r1, [r4, #0]
 8005416:	b90d      	cbnz	r5, 800541c <_printf_i+0x118>
 8005418:	2e00      	cmp	r6, #0
 800541a:	d04d      	beq.n	80054b8 <_printf_i+0x1b4>
 800541c:	4616      	mov	r6, r2
 800541e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005422:	fb03 5711 	mls	r7, r3, r1, r5
 8005426:	5dc7      	ldrb	r7, [r0, r7]
 8005428:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800542c:	462f      	mov	r7, r5
 800542e:	42bb      	cmp	r3, r7
 8005430:	460d      	mov	r5, r1
 8005432:	d9f4      	bls.n	800541e <_printf_i+0x11a>
 8005434:	2b08      	cmp	r3, #8
 8005436:	d10b      	bne.n	8005450 <_printf_i+0x14c>
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	07df      	lsls	r7, r3, #31
 800543c:	d508      	bpl.n	8005450 <_printf_i+0x14c>
 800543e:	6923      	ldr	r3, [r4, #16]
 8005440:	6861      	ldr	r1, [r4, #4]
 8005442:	4299      	cmp	r1, r3
 8005444:	bfde      	ittt	le
 8005446:	2330      	movle	r3, #48	; 0x30
 8005448:	f806 3c01 	strble.w	r3, [r6, #-1]
 800544c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005450:	1b92      	subs	r2, r2, r6
 8005452:	6122      	str	r2, [r4, #16]
 8005454:	f8cd a000 	str.w	sl, [sp]
 8005458:	464b      	mov	r3, r9
 800545a:	aa03      	add	r2, sp, #12
 800545c:	4621      	mov	r1, r4
 800545e:	4640      	mov	r0, r8
 8005460:	f7ff fee2 	bl	8005228 <_printf_common>
 8005464:	3001      	adds	r0, #1
 8005466:	d14c      	bne.n	8005502 <_printf_i+0x1fe>
 8005468:	f04f 30ff 	mov.w	r0, #4294967295
 800546c:	b004      	add	sp, #16
 800546e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005472:	4835      	ldr	r0, [pc, #212]	; (8005548 <_printf_i+0x244>)
 8005474:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	680e      	ldr	r6, [r1, #0]
 800547c:	061f      	lsls	r7, r3, #24
 800547e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005482:	600e      	str	r6, [r1, #0]
 8005484:	d514      	bpl.n	80054b0 <_printf_i+0x1ac>
 8005486:	07d9      	lsls	r1, r3, #31
 8005488:	bf44      	itt	mi
 800548a:	f043 0320 	orrmi.w	r3, r3, #32
 800548e:	6023      	strmi	r3, [r4, #0]
 8005490:	b91d      	cbnz	r5, 800549a <_printf_i+0x196>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	f023 0320 	bic.w	r3, r3, #32
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	2310      	movs	r3, #16
 800549c:	e7b0      	b.n	8005400 <_printf_i+0xfc>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	f043 0320 	orr.w	r3, r3, #32
 80054a4:	6023      	str	r3, [r4, #0]
 80054a6:	2378      	movs	r3, #120	; 0x78
 80054a8:	4828      	ldr	r0, [pc, #160]	; (800554c <_printf_i+0x248>)
 80054aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054ae:	e7e3      	b.n	8005478 <_printf_i+0x174>
 80054b0:	065e      	lsls	r6, r3, #25
 80054b2:	bf48      	it	mi
 80054b4:	b2ad      	uxthmi	r5, r5
 80054b6:	e7e6      	b.n	8005486 <_printf_i+0x182>
 80054b8:	4616      	mov	r6, r2
 80054ba:	e7bb      	b.n	8005434 <_printf_i+0x130>
 80054bc:	680b      	ldr	r3, [r1, #0]
 80054be:	6826      	ldr	r6, [r4, #0]
 80054c0:	6960      	ldr	r0, [r4, #20]
 80054c2:	1d1d      	adds	r5, r3, #4
 80054c4:	600d      	str	r5, [r1, #0]
 80054c6:	0635      	lsls	r5, r6, #24
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	d501      	bpl.n	80054d0 <_printf_i+0x1cc>
 80054cc:	6018      	str	r0, [r3, #0]
 80054ce:	e002      	b.n	80054d6 <_printf_i+0x1d2>
 80054d0:	0671      	lsls	r1, r6, #25
 80054d2:	d5fb      	bpl.n	80054cc <_printf_i+0x1c8>
 80054d4:	8018      	strh	r0, [r3, #0]
 80054d6:	2300      	movs	r3, #0
 80054d8:	6123      	str	r3, [r4, #16]
 80054da:	4616      	mov	r6, r2
 80054dc:	e7ba      	b.n	8005454 <_printf_i+0x150>
 80054de:	680b      	ldr	r3, [r1, #0]
 80054e0:	1d1a      	adds	r2, r3, #4
 80054e2:	600a      	str	r2, [r1, #0]
 80054e4:	681e      	ldr	r6, [r3, #0]
 80054e6:	6862      	ldr	r2, [r4, #4]
 80054e8:	2100      	movs	r1, #0
 80054ea:	4630      	mov	r0, r6
 80054ec:	f7fa fe78 	bl	80001e0 <memchr>
 80054f0:	b108      	cbz	r0, 80054f6 <_printf_i+0x1f2>
 80054f2:	1b80      	subs	r0, r0, r6
 80054f4:	6060      	str	r0, [r4, #4]
 80054f6:	6863      	ldr	r3, [r4, #4]
 80054f8:	6123      	str	r3, [r4, #16]
 80054fa:	2300      	movs	r3, #0
 80054fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005500:	e7a8      	b.n	8005454 <_printf_i+0x150>
 8005502:	6923      	ldr	r3, [r4, #16]
 8005504:	4632      	mov	r2, r6
 8005506:	4649      	mov	r1, r9
 8005508:	4640      	mov	r0, r8
 800550a:	47d0      	blx	sl
 800550c:	3001      	adds	r0, #1
 800550e:	d0ab      	beq.n	8005468 <_printf_i+0x164>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	079b      	lsls	r3, r3, #30
 8005514:	d413      	bmi.n	800553e <_printf_i+0x23a>
 8005516:	68e0      	ldr	r0, [r4, #12]
 8005518:	9b03      	ldr	r3, [sp, #12]
 800551a:	4298      	cmp	r0, r3
 800551c:	bfb8      	it	lt
 800551e:	4618      	movlt	r0, r3
 8005520:	e7a4      	b.n	800546c <_printf_i+0x168>
 8005522:	2301      	movs	r3, #1
 8005524:	4632      	mov	r2, r6
 8005526:	4649      	mov	r1, r9
 8005528:	4640      	mov	r0, r8
 800552a:	47d0      	blx	sl
 800552c:	3001      	adds	r0, #1
 800552e:	d09b      	beq.n	8005468 <_printf_i+0x164>
 8005530:	3501      	adds	r5, #1
 8005532:	68e3      	ldr	r3, [r4, #12]
 8005534:	9903      	ldr	r1, [sp, #12]
 8005536:	1a5b      	subs	r3, r3, r1
 8005538:	42ab      	cmp	r3, r5
 800553a:	dcf2      	bgt.n	8005522 <_printf_i+0x21e>
 800553c:	e7eb      	b.n	8005516 <_printf_i+0x212>
 800553e:	2500      	movs	r5, #0
 8005540:	f104 0619 	add.w	r6, r4, #25
 8005544:	e7f5      	b.n	8005532 <_printf_i+0x22e>
 8005546:	bf00      	nop
 8005548:	08005f21 	.word	0x08005f21
 800554c:	08005f32 	.word	0x08005f32

08005550 <_sbrk_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	4d06      	ldr	r5, [pc, #24]	; (800556c <_sbrk_r+0x1c>)
 8005554:	2300      	movs	r3, #0
 8005556:	4604      	mov	r4, r0
 8005558:	4608      	mov	r0, r1
 800555a:	602b      	str	r3, [r5, #0]
 800555c:	f7fb fd66 	bl	800102c <_sbrk>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_sbrk_r+0x1a>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	b103      	cbz	r3, 800556a <_sbrk_r+0x1a>
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	200001fc 	.word	0x200001fc

08005570 <__swbuf_r>:
 8005570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005572:	460e      	mov	r6, r1
 8005574:	4614      	mov	r4, r2
 8005576:	4605      	mov	r5, r0
 8005578:	b118      	cbz	r0, 8005582 <__swbuf_r+0x12>
 800557a:	6983      	ldr	r3, [r0, #24]
 800557c:	b90b      	cbnz	r3, 8005582 <__swbuf_r+0x12>
 800557e:	f000 f9d9 	bl	8005934 <__sinit>
 8005582:	4b21      	ldr	r3, [pc, #132]	; (8005608 <__swbuf_r+0x98>)
 8005584:	429c      	cmp	r4, r3
 8005586:	d12b      	bne.n	80055e0 <__swbuf_r+0x70>
 8005588:	686c      	ldr	r4, [r5, #4]
 800558a:	69a3      	ldr	r3, [r4, #24]
 800558c:	60a3      	str	r3, [r4, #8]
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	071a      	lsls	r2, r3, #28
 8005592:	d52f      	bpl.n	80055f4 <__swbuf_r+0x84>
 8005594:	6923      	ldr	r3, [r4, #16]
 8005596:	b36b      	cbz	r3, 80055f4 <__swbuf_r+0x84>
 8005598:	6923      	ldr	r3, [r4, #16]
 800559a:	6820      	ldr	r0, [r4, #0]
 800559c:	1ac0      	subs	r0, r0, r3
 800559e:	6963      	ldr	r3, [r4, #20]
 80055a0:	b2f6      	uxtb	r6, r6
 80055a2:	4283      	cmp	r3, r0
 80055a4:	4637      	mov	r7, r6
 80055a6:	dc04      	bgt.n	80055b2 <__swbuf_r+0x42>
 80055a8:	4621      	mov	r1, r4
 80055aa:	4628      	mov	r0, r5
 80055ac:	f000 f92e 	bl	800580c <_fflush_r>
 80055b0:	bb30      	cbnz	r0, 8005600 <__swbuf_r+0x90>
 80055b2:	68a3      	ldr	r3, [r4, #8]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	60a3      	str	r3, [r4, #8]
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	6022      	str	r2, [r4, #0]
 80055be:	701e      	strb	r6, [r3, #0]
 80055c0:	6963      	ldr	r3, [r4, #20]
 80055c2:	3001      	adds	r0, #1
 80055c4:	4283      	cmp	r3, r0
 80055c6:	d004      	beq.n	80055d2 <__swbuf_r+0x62>
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	07db      	lsls	r3, r3, #31
 80055cc:	d506      	bpl.n	80055dc <__swbuf_r+0x6c>
 80055ce:	2e0a      	cmp	r6, #10
 80055d0:	d104      	bne.n	80055dc <__swbuf_r+0x6c>
 80055d2:	4621      	mov	r1, r4
 80055d4:	4628      	mov	r0, r5
 80055d6:	f000 f919 	bl	800580c <_fflush_r>
 80055da:	b988      	cbnz	r0, 8005600 <__swbuf_r+0x90>
 80055dc:	4638      	mov	r0, r7
 80055de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055e0:	4b0a      	ldr	r3, [pc, #40]	; (800560c <__swbuf_r+0x9c>)
 80055e2:	429c      	cmp	r4, r3
 80055e4:	d101      	bne.n	80055ea <__swbuf_r+0x7a>
 80055e6:	68ac      	ldr	r4, [r5, #8]
 80055e8:	e7cf      	b.n	800558a <__swbuf_r+0x1a>
 80055ea:	4b09      	ldr	r3, [pc, #36]	; (8005610 <__swbuf_r+0xa0>)
 80055ec:	429c      	cmp	r4, r3
 80055ee:	bf08      	it	eq
 80055f0:	68ec      	ldreq	r4, [r5, #12]
 80055f2:	e7ca      	b.n	800558a <__swbuf_r+0x1a>
 80055f4:	4621      	mov	r1, r4
 80055f6:	4628      	mov	r0, r5
 80055f8:	f000 f80c 	bl	8005614 <__swsetup_r>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d0cb      	beq.n	8005598 <__swbuf_r+0x28>
 8005600:	f04f 37ff 	mov.w	r7, #4294967295
 8005604:	e7ea      	b.n	80055dc <__swbuf_r+0x6c>
 8005606:	bf00      	nop
 8005608:	08005f64 	.word	0x08005f64
 800560c:	08005f84 	.word	0x08005f84
 8005610:	08005f44 	.word	0x08005f44

08005614 <__swsetup_r>:
 8005614:	4b32      	ldr	r3, [pc, #200]	; (80056e0 <__swsetup_r+0xcc>)
 8005616:	b570      	push	{r4, r5, r6, lr}
 8005618:	681d      	ldr	r5, [r3, #0]
 800561a:	4606      	mov	r6, r0
 800561c:	460c      	mov	r4, r1
 800561e:	b125      	cbz	r5, 800562a <__swsetup_r+0x16>
 8005620:	69ab      	ldr	r3, [r5, #24]
 8005622:	b913      	cbnz	r3, 800562a <__swsetup_r+0x16>
 8005624:	4628      	mov	r0, r5
 8005626:	f000 f985 	bl	8005934 <__sinit>
 800562a:	4b2e      	ldr	r3, [pc, #184]	; (80056e4 <__swsetup_r+0xd0>)
 800562c:	429c      	cmp	r4, r3
 800562e:	d10f      	bne.n	8005650 <__swsetup_r+0x3c>
 8005630:	686c      	ldr	r4, [r5, #4]
 8005632:	89a3      	ldrh	r3, [r4, #12]
 8005634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005638:	0719      	lsls	r1, r3, #28
 800563a:	d42c      	bmi.n	8005696 <__swsetup_r+0x82>
 800563c:	06dd      	lsls	r5, r3, #27
 800563e:	d411      	bmi.n	8005664 <__swsetup_r+0x50>
 8005640:	2309      	movs	r3, #9
 8005642:	6033      	str	r3, [r6, #0]
 8005644:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005648:	81a3      	strh	r3, [r4, #12]
 800564a:	f04f 30ff 	mov.w	r0, #4294967295
 800564e:	e03e      	b.n	80056ce <__swsetup_r+0xba>
 8005650:	4b25      	ldr	r3, [pc, #148]	; (80056e8 <__swsetup_r+0xd4>)
 8005652:	429c      	cmp	r4, r3
 8005654:	d101      	bne.n	800565a <__swsetup_r+0x46>
 8005656:	68ac      	ldr	r4, [r5, #8]
 8005658:	e7eb      	b.n	8005632 <__swsetup_r+0x1e>
 800565a:	4b24      	ldr	r3, [pc, #144]	; (80056ec <__swsetup_r+0xd8>)
 800565c:	429c      	cmp	r4, r3
 800565e:	bf08      	it	eq
 8005660:	68ec      	ldreq	r4, [r5, #12]
 8005662:	e7e6      	b.n	8005632 <__swsetup_r+0x1e>
 8005664:	0758      	lsls	r0, r3, #29
 8005666:	d512      	bpl.n	800568e <__swsetup_r+0x7a>
 8005668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800566a:	b141      	cbz	r1, 800567e <__swsetup_r+0x6a>
 800566c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005670:	4299      	cmp	r1, r3
 8005672:	d002      	beq.n	800567a <__swsetup_r+0x66>
 8005674:	4630      	mov	r0, r6
 8005676:	f7ff fa77 	bl	8004b68 <_free_r>
 800567a:	2300      	movs	r3, #0
 800567c:	6363      	str	r3, [r4, #52]	; 0x34
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005684:	81a3      	strh	r3, [r4, #12]
 8005686:	2300      	movs	r3, #0
 8005688:	6063      	str	r3, [r4, #4]
 800568a:	6923      	ldr	r3, [r4, #16]
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	89a3      	ldrh	r3, [r4, #12]
 8005690:	f043 0308 	orr.w	r3, r3, #8
 8005694:	81a3      	strh	r3, [r4, #12]
 8005696:	6923      	ldr	r3, [r4, #16]
 8005698:	b94b      	cbnz	r3, 80056ae <__swsetup_r+0x9a>
 800569a:	89a3      	ldrh	r3, [r4, #12]
 800569c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a4:	d003      	beq.n	80056ae <__swsetup_r+0x9a>
 80056a6:	4621      	mov	r1, r4
 80056a8:	4630      	mov	r0, r6
 80056aa:	f000 fa07 	bl	8005abc <__smakebuf_r>
 80056ae:	89a0      	ldrh	r0, [r4, #12]
 80056b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056b4:	f010 0301 	ands.w	r3, r0, #1
 80056b8:	d00a      	beq.n	80056d0 <__swsetup_r+0xbc>
 80056ba:	2300      	movs	r3, #0
 80056bc:	60a3      	str	r3, [r4, #8]
 80056be:	6963      	ldr	r3, [r4, #20]
 80056c0:	425b      	negs	r3, r3
 80056c2:	61a3      	str	r3, [r4, #24]
 80056c4:	6923      	ldr	r3, [r4, #16]
 80056c6:	b943      	cbnz	r3, 80056da <__swsetup_r+0xc6>
 80056c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056cc:	d1ba      	bne.n	8005644 <__swsetup_r+0x30>
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
 80056d0:	0781      	lsls	r1, r0, #30
 80056d2:	bf58      	it	pl
 80056d4:	6963      	ldrpl	r3, [r4, #20]
 80056d6:	60a3      	str	r3, [r4, #8]
 80056d8:	e7f4      	b.n	80056c4 <__swsetup_r+0xb0>
 80056da:	2000      	movs	r0, #0
 80056dc:	e7f7      	b.n	80056ce <__swsetup_r+0xba>
 80056de:	bf00      	nop
 80056e0:	2000000c 	.word	0x2000000c
 80056e4:	08005f64 	.word	0x08005f64
 80056e8:	08005f84 	.word	0x08005f84
 80056ec:	08005f44 	.word	0x08005f44

080056f0 <abort>:
 80056f0:	b508      	push	{r3, lr}
 80056f2:	2006      	movs	r0, #6
 80056f4:	f000 fa96 	bl	8005c24 <raise>
 80056f8:	2001      	movs	r0, #1
 80056fa:	f7fb fc1f 	bl	8000f3c <_exit>
	...

08005700 <__sflush_r>:
 8005700:	898a      	ldrh	r2, [r1, #12]
 8005702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005706:	4605      	mov	r5, r0
 8005708:	0710      	lsls	r0, r2, #28
 800570a:	460c      	mov	r4, r1
 800570c:	d458      	bmi.n	80057c0 <__sflush_r+0xc0>
 800570e:	684b      	ldr	r3, [r1, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	dc05      	bgt.n	8005720 <__sflush_r+0x20>
 8005714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	dc02      	bgt.n	8005720 <__sflush_r+0x20>
 800571a:	2000      	movs	r0, #0
 800571c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005722:	2e00      	cmp	r6, #0
 8005724:	d0f9      	beq.n	800571a <__sflush_r+0x1a>
 8005726:	2300      	movs	r3, #0
 8005728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800572c:	682f      	ldr	r7, [r5, #0]
 800572e:	602b      	str	r3, [r5, #0]
 8005730:	d032      	beq.n	8005798 <__sflush_r+0x98>
 8005732:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005734:	89a3      	ldrh	r3, [r4, #12]
 8005736:	075a      	lsls	r2, r3, #29
 8005738:	d505      	bpl.n	8005746 <__sflush_r+0x46>
 800573a:	6863      	ldr	r3, [r4, #4]
 800573c:	1ac0      	subs	r0, r0, r3
 800573e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005740:	b10b      	cbz	r3, 8005746 <__sflush_r+0x46>
 8005742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005744:	1ac0      	subs	r0, r0, r3
 8005746:	2300      	movs	r3, #0
 8005748:	4602      	mov	r2, r0
 800574a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800574c:	6a21      	ldr	r1, [r4, #32]
 800574e:	4628      	mov	r0, r5
 8005750:	47b0      	blx	r6
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	d106      	bne.n	8005766 <__sflush_r+0x66>
 8005758:	6829      	ldr	r1, [r5, #0]
 800575a:	291d      	cmp	r1, #29
 800575c:	d82c      	bhi.n	80057b8 <__sflush_r+0xb8>
 800575e:	4a2a      	ldr	r2, [pc, #168]	; (8005808 <__sflush_r+0x108>)
 8005760:	40ca      	lsrs	r2, r1
 8005762:	07d6      	lsls	r6, r2, #31
 8005764:	d528      	bpl.n	80057b8 <__sflush_r+0xb8>
 8005766:	2200      	movs	r2, #0
 8005768:	6062      	str	r2, [r4, #4]
 800576a:	04d9      	lsls	r1, r3, #19
 800576c:	6922      	ldr	r2, [r4, #16]
 800576e:	6022      	str	r2, [r4, #0]
 8005770:	d504      	bpl.n	800577c <__sflush_r+0x7c>
 8005772:	1c42      	adds	r2, r0, #1
 8005774:	d101      	bne.n	800577a <__sflush_r+0x7a>
 8005776:	682b      	ldr	r3, [r5, #0]
 8005778:	b903      	cbnz	r3, 800577c <__sflush_r+0x7c>
 800577a:	6560      	str	r0, [r4, #84]	; 0x54
 800577c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800577e:	602f      	str	r7, [r5, #0]
 8005780:	2900      	cmp	r1, #0
 8005782:	d0ca      	beq.n	800571a <__sflush_r+0x1a>
 8005784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005788:	4299      	cmp	r1, r3
 800578a:	d002      	beq.n	8005792 <__sflush_r+0x92>
 800578c:	4628      	mov	r0, r5
 800578e:	f7ff f9eb 	bl	8004b68 <_free_r>
 8005792:	2000      	movs	r0, #0
 8005794:	6360      	str	r0, [r4, #52]	; 0x34
 8005796:	e7c1      	b.n	800571c <__sflush_r+0x1c>
 8005798:	6a21      	ldr	r1, [r4, #32]
 800579a:	2301      	movs	r3, #1
 800579c:	4628      	mov	r0, r5
 800579e:	47b0      	blx	r6
 80057a0:	1c41      	adds	r1, r0, #1
 80057a2:	d1c7      	bne.n	8005734 <__sflush_r+0x34>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0c4      	beq.n	8005734 <__sflush_r+0x34>
 80057aa:	2b1d      	cmp	r3, #29
 80057ac:	d001      	beq.n	80057b2 <__sflush_r+0xb2>
 80057ae:	2b16      	cmp	r3, #22
 80057b0:	d101      	bne.n	80057b6 <__sflush_r+0xb6>
 80057b2:	602f      	str	r7, [r5, #0]
 80057b4:	e7b1      	b.n	800571a <__sflush_r+0x1a>
 80057b6:	89a3      	ldrh	r3, [r4, #12]
 80057b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057bc:	81a3      	strh	r3, [r4, #12]
 80057be:	e7ad      	b.n	800571c <__sflush_r+0x1c>
 80057c0:	690f      	ldr	r7, [r1, #16]
 80057c2:	2f00      	cmp	r7, #0
 80057c4:	d0a9      	beq.n	800571a <__sflush_r+0x1a>
 80057c6:	0793      	lsls	r3, r2, #30
 80057c8:	680e      	ldr	r6, [r1, #0]
 80057ca:	bf08      	it	eq
 80057cc:	694b      	ldreq	r3, [r1, #20]
 80057ce:	600f      	str	r7, [r1, #0]
 80057d0:	bf18      	it	ne
 80057d2:	2300      	movne	r3, #0
 80057d4:	eba6 0807 	sub.w	r8, r6, r7
 80057d8:	608b      	str	r3, [r1, #8]
 80057da:	f1b8 0f00 	cmp.w	r8, #0
 80057de:	dd9c      	ble.n	800571a <__sflush_r+0x1a>
 80057e0:	6a21      	ldr	r1, [r4, #32]
 80057e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057e4:	4643      	mov	r3, r8
 80057e6:	463a      	mov	r2, r7
 80057e8:	4628      	mov	r0, r5
 80057ea:	47b0      	blx	r6
 80057ec:	2800      	cmp	r0, #0
 80057ee:	dc06      	bgt.n	80057fe <__sflush_r+0xfe>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f6:	81a3      	strh	r3, [r4, #12]
 80057f8:	f04f 30ff 	mov.w	r0, #4294967295
 80057fc:	e78e      	b.n	800571c <__sflush_r+0x1c>
 80057fe:	4407      	add	r7, r0
 8005800:	eba8 0800 	sub.w	r8, r8, r0
 8005804:	e7e9      	b.n	80057da <__sflush_r+0xda>
 8005806:	bf00      	nop
 8005808:	20400001 	.word	0x20400001

0800580c <_fflush_r>:
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	690b      	ldr	r3, [r1, #16]
 8005810:	4605      	mov	r5, r0
 8005812:	460c      	mov	r4, r1
 8005814:	b913      	cbnz	r3, 800581c <_fflush_r+0x10>
 8005816:	2500      	movs	r5, #0
 8005818:	4628      	mov	r0, r5
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	b118      	cbz	r0, 8005826 <_fflush_r+0x1a>
 800581e:	6983      	ldr	r3, [r0, #24]
 8005820:	b90b      	cbnz	r3, 8005826 <_fflush_r+0x1a>
 8005822:	f000 f887 	bl	8005934 <__sinit>
 8005826:	4b14      	ldr	r3, [pc, #80]	; (8005878 <_fflush_r+0x6c>)
 8005828:	429c      	cmp	r4, r3
 800582a:	d11b      	bne.n	8005864 <_fflush_r+0x58>
 800582c:	686c      	ldr	r4, [r5, #4]
 800582e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0ef      	beq.n	8005816 <_fflush_r+0xa>
 8005836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005838:	07d0      	lsls	r0, r2, #31
 800583a:	d404      	bmi.n	8005846 <_fflush_r+0x3a>
 800583c:	0599      	lsls	r1, r3, #22
 800583e:	d402      	bmi.n	8005846 <_fflush_r+0x3a>
 8005840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005842:	f000 f915 	bl	8005a70 <__retarget_lock_acquire_recursive>
 8005846:	4628      	mov	r0, r5
 8005848:	4621      	mov	r1, r4
 800584a:	f7ff ff59 	bl	8005700 <__sflush_r>
 800584e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005850:	07da      	lsls	r2, r3, #31
 8005852:	4605      	mov	r5, r0
 8005854:	d4e0      	bmi.n	8005818 <_fflush_r+0xc>
 8005856:	89a3      	ldrh	r3, [r4, #12]
 8005858:	059b      	lsls	r3, r3, #22
 800585a:	d4dd      	bmi.n	8005818 <_fflush_r+0xc>
 800585c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800585e:	f000 f908 	bl	8005a72 <__retarget_lock_release_recursive>
 8005862:	e7d9      	b.n	8005818 <_fflush_r+0xc>
 8005864:	4b05      	ldr	r3, [pc, #20]	; (800587c <_fflush_r+0x70>)
 8005866:	429c      	cmp	r4, r3
 8005868:	d101      	bne.n	800586e <_fflush_r+0x62>
 800586a:	68ac      	ldr	r4, [r5, #8]
 800586c:	e7df      	b.n	800582e <_fflush_r+0x22>
 800586e:	4b04      	ldr	r3, [pc, #16]	; (8005880 <_fflush_r+0x74>)
 8005870:	429c      	cmp	r4, r3
 8005872:	bf08      	it	eq
 8005874:	68ec      	ldreq	r4, [r5, #12]
 8005876:	e7da      	b.n	800582e <_fflush_r+0x22>
 8005878:	08005f64 	.word	0x08005f64
 800587c:	08005f84 	.word	0x08005f84
 8005880:	08005f44 	.word	0x08005f44

08005884 <std>:
 8005884:	2300      	movs	r3, #0
 8005886:	b510      	push	{r4, lr}
 8005888:	4604      	mov	r4, r0
 800588a:	e9c0 3300 	strd	r3, r3, [r0]
 800588e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005892:	6083      	str	r3, [r0, #8]
 8005894:	8181      	strh	r1, [r0, #12]
 8005896:	6643      	str	r3, [r0, #100]	; 0x64
 8005898:	81c2      	strh	r2, [r0, #14]
 800589a:	6183      	str	r3, [r0, #24]
 800589c:	4619      	mov	r1, r3
 800589e:	2208      	movs	r2, #8
 80058a0:	305c      	adds	r0, #92	; 0x5c
 80058a2:	f7ff f839 	bl	8004918 <memset>
 80058a6:	4b05      	ldr	r3, [pc, #20]	; (80058bc <std+0x38>)
 80058a8:	6263      	str	r3, [r4, #36]	; 0x24
 80058aa:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <std+0x3c>)
 80058ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80058ae:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <std+0x40>)
 80058b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058b2:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <std+0x44>)
 80058b4:	6224      	str	r4, [r4, #32]
 80058b6:	6323      	str	r3, [r4, #48]	; 0x30
 80058b8:	bd10      	pop	{r4, pc}
 80058ba:	bf00      	nop
 80058bc:	08005c5d 	.word	0x08005c5d
 80058c0:	08005c7f 	.word	0x08005c7f
 80058c4:	08005cb7 	.word	0x08005cb7
 80058c8:	08005cdb 	.word	0x08005cdb

080058cc <_cleanup_r>:
 80058cc:	4901      	ldr	r1, [pc, #4]	; (80058d4 <_cleanup_r+0x8>)
 80058ce:	f000 b8af 	b.w	8005a30 <_fwalk_reent>
 80058d2:	bf00      	nop
 80058d4:	0800580d 	.word	0x0800580d

080058d8 <__sfmoreglue>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	1e4a      	subs	r2, r1, #1
 80058dc:	2568      	movs	r5, #104	; 0x68
 80058de:	4355      	muls	r5, r2
 80058e0:	460e      	mov	r6, r1
 80058e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058e6:	f7ff f98f 	bl	8004c08 <_malloc_r>
 80058ea:	4604      	mov	r4, r0
 80058ec:	b140      	cbz	r0, 8005900 <__sfmoreglue+0x28>
 80058ee:	2100      	movs	r1, #0
 80058f0:	e9c0 1600 	strd	r1, r6, [r0]
 80058f4:	300c      	adds	r0, #12
 80058f6:	60a0      	str	r0, [r4, #8]
 80058f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058fc:	f7ff f80c 	bl	8004918 <memset>
 8005900:	4620      	mov	r0, r4
 8005902:	bd70      	pop	{r4, r5, r6, pc}

08005904 <__sfp_lock_acquire>:
 8005904:	4801      	ldr	r0, [pc, #4]	; (800590c <__sfp_lock_acquire+0x8>)
 8005906:	f000 b8b3 	b.w	8005a70 <__retarget_lock_acquire_recursive>
 800590a:	bf00      	nop
 800590c:	200001f8 	.word	0x200001f8

08005910 <__sfp_lock_release>:
 8005910:	4801      	ldr	r0, [pc, #4]	; (8005918 <__sfp_lock_release+0x8>)
 8005912:	f000 b8ae 	b.w	8005a72 <__retarget_lock_release_recursive>
 8005916:	bf00      	nop
 8005918:	200001f8 	.word	0x200001f8

0800591c <__sinit_lock_acquire>:
 800591c:	4801      	ldr	r0, [pc, #4]	; (8005924 <__sinit_lock_acquire+0x8>)
 800591e:	f000 b8a7 	b.w	8005a70 <__retarget_lock_acquire_recursive>
 8005922:	bf00      	nop
 8005924:	200001f3 	.word	0x200001f3

08005928 <__sinit_lock_release>:
 8005928:	4801      	ldr	r0, [pc, #4]	; (8005930 <__sinit_lock_release+0x8>)
 800592a:	f000 b8a2 	b.w	8005a72 <__retarget_lock_release_recursive>
 800592e:	bf00      	nop
 8005930:	200001f3 	.word	0x200001f3

08005934 <__sinit>:
 8005934:	b510      	push	{r4, lr}
 8005936:	4604      	mov	r4, r0
 8005938:	f7ff fff0 	bl	800591c <__sinit_lock_acquire>
 800593c:	69a3      	ldr	r3, [r4, #24]
 800593e:	b11b      	cbz	r3, 8005948 <__sinit+0x14>
 8005940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005944:	f7ff bff0 	b.w	8005928 <__sinit_lock_release>
 8005948:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800594c:	6523      	str	r3, [r4, #80]	; 0x50
 800594e:	4b13      	ldr	r3, [pc, #76]	; (800599c <__sinit+0x68>)
 8005950:	4a13      	ldr	r2, [pc, #76]	; (80059a0 <__sinit+0x6c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	62a2      	str	r2, [r4, #40]	; 0x28
 8005956:	42a3      	cmp	r3, r4
 8005958:	bf04      	itt	eq
 800595a:	2301      	moveq	r3, #1
 800595c:	61a3      	streq	r3, [r4, #24]
 800595e:	4620      	mov	r0, r4
 8005960:	f000 f820 	bl	80059a4 <__sfp>
 8005964:	6060      	str	r0, [r4, #4]
 8005966:	4620      	mov	r0, r4
 8005968:	f000 f81c 	bl	80059a4 <__sfp>
 800596c:	60a0      	str	r0, [r4, #8]
 800596e:	4620      	mov	r0, r4
 8005970:	f000 f818 	bl	80059a4 <__sfp>
 8005974:	2200      	movs	r2, #0
 8005976:	60e0      	str	r0, [r4, #12]
 8005978:	2104      	movs	r1, #4
 800597a:	6860      	ldr	r0, [r4, #4]
 800597c:	f7ff ff82 	bl	8005884 <std>
 8005980:	68a0      	ldr	r0, [r4, #8]
 8005982:	2201      	movs	r2, #1
 8005984:	2109      	movs	r1, #9
 8005986:	f7ff ff7d 	bl	8005884 <std>
 800598a:	68e0      	ldr	r0, [r4, #12]
 800598c:	2202      	movs	r2, #2
 800598e:	2112      	movs	r1, #18
 8005990:	f7ff ff78 	bl	8005884 <std>
 8005994:	2301      	movs	r3, #1
 8005996:	61a3      	str	r3, [r4, #24]
 8005998:	e7d2      	b.n	8005940 <__sinit+0xc>
 800599a:	bf00      	nop
 800599c:	08005e58 	.word	0x08005e58
 80059a0:	080058cd 	.word	0x080058cd

080059a4 <__sfp>:
 80059a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a6:	4607      	mov	r7, r0
 80059a8:	f7ff ffac 	bl	8005904 <__sfp_lock_acquire>
 80059ac:	4b1e      	ldr	r3, [pc, #120]	; (8005a28 <__sfp+0x84>)
 80059ae:	681e      	ldr	r6, [r3, #0]
 80059b0:	69b3      	ldr	r3, [r6, #24]
 80059b2:	b913      	cbnz	r3, 80059ba <__sfp+0x16>
 80059b4:	4630      	mov	r0, r6
 80059b6:	f7ff ffbd 	bl	8005934 <__sinit>
 80059ba:	3648      	adds	r6, #72	; 0x48
 80059bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	d503      	bpl.n	80059cc <__sfp+0x28>
 80059c4:	6833      	ldr	r3, [r6, #0]
 80059c6:	b30b      	cbz	r3, 8005a0c <__sfp+0x68>
 80059c8:	6836      	ldr	r6, [r6, #0]
 80059ca:	e7f7      	b.n	80059bc <__sfp+0x18>
 80059cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059d0:	b9d5      	cbnz	r5, 8005a08 <__sfp+0x64>
 80059d2:	4b16      	ldr	r3, [pc, #88]	; (8005a2c <__sfp+0x88>)
 80059d4:	60e3      	str	r3, [r4, #12]
 80059d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059da:	6665      	str	r5, [r4, #100]	; 0x64
 80059dc:	f000 f847 	bl	8005a6e <__retarget_lock_init_recursive>
 80059e0:	f7ff ff96 	bl	8005910 <__sfp_lock_release>
 80059e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80059e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80059ec:	6025      	str	r5, [r4, #0]
 80059ee:	61a5      	str	r5, [r4, #24]
 80059f0:	2208      	movs	r2, #8
 80059f2:	4629      	mov	r1, r5
 80059f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059f8:	f7fe ff8e 	bl	8004918 <memset>
 80059fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a04:	4620      	mov	r0, r4
 8005a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a08:	3468      	adds	r4, #104	; 0x68
 8005a0a:	e7d9      	b.n	80059c0 <__sfp+0x1c>
 8005a0c:	2104      	movs	r1, #4
 8005a0e:	4638      	mov	r0, r7
 8005a10:	f7ff ff62 	bl	80058d8 <__sfmoreglue>
 8005a14:	4604      	mov	r4, r0
 8005a16:	6030      	str	r0, [r6, #0]
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d1d5      	bne.n	80059c8 <__sfp+0x24>
 8005a1c:	f7ff ff78 	bl	8005910 <__sfp_lock_release>
 8005a20:	230c      	movs	r3, #12
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	e7ee      	b.n	8005a04 <__sfp+0x60>
 8005a26:	bf00      	nop
 8005a28:	08005e58 	.word	0x08005e58
 8005a2c:	ffff0001 	.word	0xffff0001

08005a30 <_fwalk_reent>:
 8005a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a34:	4606      	mov	r6, r0
 8005a36:	4688      	mov	r8, r1
 8005a38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a3c:	2700      	movs	r7, #0
 8005a3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a42:	f1b9 0901 	subs.w	r9, r9, #1
 8005a46:	d505      	bpl.n	8005a54 <_fwalk_reent+0x24>
 8005a48:	6824      	ldr	r4, [r4, #0]
 8005a4a:	2c00      	cmp	r4, #0
 8005a4c:	d1f7      	bne.n	8005a3e <_fwalk_reent+0xe>
 8005a4e:	4638      	mov	r0, r7
 8005a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a54:	89ab      	ldrh	r3, [r5, #12]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d907      	bls.n	8005a6a <_fwalk_reent+0x3a>
 8005a5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	d003      	beq.n	8005a6a <_fwalk_reent+0x3a>
 8005a62:	4629      	mov	r1, r5
 8005a64:	4630      	mov	r0, r6
 8005a66:	47c0      	blx	r8
 8005a68:	4307      	orrs	r7, r0
 8005a6a:	3568      	adds	r5, #104	; 0x68
 8005a6c:	e7e9      	b.n	8005a42 <_fwalk_reent+0x12>

08005a6e <__retarget_lock_init_recursive>:
 8005a6e:	4770      	bx	lr

08005a70 <__retarget_lock_acquire_recursive>:
 8005a70:	4770      	bx	lr

08005a72 <__retarget_lock_release_recursive>:
 8005a72:	4770      	bx	lr

08005a74 <__swhatbuf_r>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	460e      	mov	r6, r1
 8005a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7c:	2900      	cmp	r1, #0
 8005a7e:	b096      	sub	sp, #88	; 0x58
 8005a80:	4614      	mov	r4, r2
 8005a82:	461d      	mov	r5, r3
 8005a84:	da07      	bge.n	8005a96 <__swhatbuf_r+0x22>
 8005a86:	2300      	movs	r3, #0
 8005a88:	602b      	str	r3, [r5, #0]
 8005a8a:	89b3      	ldrh	r3, [r6, #12]
 8005a8c:	061a      	lsls	r2, r3, #24
 8005a8e:	d410      	bmi.n	8005ab2 <__swhatbuf_r+0x3e>
 8005a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a94:	e00e      	b.n	8005ab4 <__swhatbuf_r+0x40>
 8005a96:	466a      	mov	r2, sp
 8005a98:	f000 f946 	bl	8005d28 <_fstat_r>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	dbf2      	blt.n	8005a86 <__swhatbuf_r+0x12>
 8005aa0:	9a01      	ldr	r2, [sp, #4]
 8005aa2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005aa6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005aaa:	425a      	negs	r2, r3
 8005aac:	415a      	adcs	r2, r3
 8005aae:	602a      	str	r2, [r5, #0]
 8005ab0:	e7ee      	b.n	8005a90 <__swhatbuf_r+0x1c>
 8005ab2:	2340      	movs	r3, #64	; 0x40
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	6023      	str	r3, [r4, #0]
 8005ab8:	b016      	add	sp, #88	; 0x58
 8005aba:	bd70      	pop	{r4, r5, r6, pc}

08005abc <__smakebuf_r>:
 8005abc:	898b      	ldrh	r3, [r1, #12]
 8005abe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ac0:	079d      	lsls	r5, r3, #30
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	d507      	bpl.n	8005ad8 <__smakebuf_r+0x1c>
 8005ac8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	6123      	str	r3, [r4, #16]
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	6163      	str	r3, [r4, #20]
 8005ad4:	b002      	add	sp, #8
 8005ad6:	bd70      	pop	{r4, r5, r6, pc}
 8005ad8:	ab01      	add	r3, sp, #4
 8005ada:	466a      	mov	r2, sp
 8005adc:	f7ff ffca 	bl	8005a74 <__swhatbuf_r>
 8005ae0:	9900      	ldr	r1, [sp, #0]
 8005ae2:	4605      	mov	r5, r0
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	f7ff f88f 	bl	8004c08 <_malloc_r>
 8005aea:	b948      	cbnz	r0, 8005b00 <__smakebuf_r+0x44>
 8005aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af0:	059a      	lsls	r2, r3, #22
 8005af2:	d4ef      	bmi.n	8005ad4 <__smakebuf_r+0x18>
 8005af4:	f023 0303 	bic.w	r3, r3, #3
 8005af8:	f043 0302 	orr.w	r3, r3, #2
 8005afc:	81a3      	strh	r3, [r4, #12]
 8005afe:	e7e3      	b.n	8005ac8 <__smakebuf_r+0xc>
 8005b00:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <__smakebuf_r+0x7c>)
 8005b02:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	6020      	str	r0, [r4, #0]
 8005b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0c:	81a3      	strh	r3, [r4, #12]
 8005b0e:	9b00      	ldr	r3, [sp, #0]
 8005b10:	6163      	str	r3, [r4, #20]
 8005b12:	9b01      	ldr	r3, [sp, #4]
 8005b14:	6120      	str	r0, [r4, #16]
 8005b16:	b15b      	cbz	r3, 8005b30 <__smakebuf_r+0x74>
 8005b18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f000 f915 	bl	8005d4c <_isatty_r>
 8005b22:	b128      	cbz	r0, 8005b30 <__smakebuf_r+0x74>
 8005b24:	89a3      	ldrh	r3, [r4, #12]
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	f043 0301 	orr.w	r3, r3, #1
 8005b2e:	81a3      	strh	r3, [r4, #12]
 8005b30:	89a0      	ldrh	r0, [r4, #12]
 8005b32:	4305      	orrs	r5, r0
 8005b34:	81a5      	strh	r5, [r4, #12]
 8005b36:	e7cd      	b.n	8005ad4 <__smakebuf_r+0x18>
 8005b38:	080058cd 	.word	0x080058cd

08005b3c <memmove>:
 8005b3c:	4288      	cmp	r0, r1
 8005b3e:	b510      	push	{r4, lr}
 8005b40:	eb01 0402 	add.w	r4, r1, r2
 8005b44:	d902      	bls.n	8005b4c <memmove+0x10>
 8005b46:	4284      	cmp	r4, r0
 8005b48:	4623      	mov	r3, r4
 8005b4a:	d807      	bhi.n	8005b5c <memmove+0x20>
 8005b4c:	1e43      	subs	r3, r0, #1
 8005b4e:	42a1      	cmp	r1, r4
 8005b50:	d008      	beq.n	8005b64 <memmove+0x28>
 8005b52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b5a:	e7f8      	b.n	8005b4e <memmove+0x12>
 8005b5c:	4402      	add	r2, r0
 8005b5e:	4601      	mov	r1, r0
 8005b60:	428a      	cmp	r2, r1
 8005b62:	d100      	bne.n	8005b66 <memmove+0x2a>
 8005b64:	bd10      	pop	{r4, pc}
 8005b66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b6e:	e7f7      	b.n	8005b60 <memmove+0x24>

08005b70 <__malloc_lock>:
 8005b70:	4801      	ldr	r0, [pc, #4]	; (8005b78 <__malloc_lock+0x8>)
 8005b72:	f7ff bf7d 	b.w	8005a70 <__retarget_lock_acquire_recursive>
 8005b76:	bf00      	nop
 8005b78:	200001f4 	.word	0x200001f4

08005b7c <__malloc_unlock>:
 8005b7c:	4801      	ldr	r0, [pc, #4]	; (8005b84 <__malloc_unlock+0x8>)
 8005b7e:	f7ff bf78 	b.w	8005a72 <__retarget_lock_release_recursive>
 8005b82:	bf00      	nop
 8005b84:	200001f4 	.word	0x200001f4

08005b88 <_realloc_r>:
 8005b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8a:	4607      	mov	r7, r0
 8005b8c:	4614      	mov	r4, r2
 8005b8e:	460e      	mov	r6, r1
 8005b90:	b921      	cbnz	r1, 8005b9c <_realloc_r+0x14>
 8005b92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005b96:	4611      	mov	r1, r2
 8005b98:	f7ff b836 	b.w	8004c08 <_malloc_r>
 8005b9c:	b922      	cbnz	r2, 8005ba8 <_realloc_r+0x20>
 8005b9e:	f7fe ffe3 	bl	8004b68 <_free_r>
 8005ba2:	4625      	mov	r5, r4
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ba8:	f000 f8f2 	bl	8005d90 <_malloc_usable_size_r>
 8005bac:	42a0      	cmp	r0, r4
 8005bae:	d20f      	bcs.n	8005bd0 <_realloc_r+0x48>
 8005bb0:	4621      	mov	r1, r4
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	f7ff f828 	bl	8004c08 <_malloc_r>
 8005bb8:	4605      	mov	r5, r0
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d0f2      	beq.n	8005ba4 <_realloc_r+0x1c>
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	4622      	mov	r2, r4
 8005bc2:	f7fe ffc3 	bl	8004b4c <memcpy>
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	4638      	mov	r0, r7
 8005bca:	f7fe ffcd 	bl	8004b68 <_free_r>
 8005bce:	e7e9      	b.n	8005ba4 <_realloc_r+0x1c>
 8005bd0:	4635      	mov	r5, r6
 8005bd2:	e7e7      	b.n	8005ba4 <_realloc_r+0x1c>

08005bd4 <_raise_r>:
 8005bd4:	291f      	cmp	r1, #31
 8005bd6:	b538      	push	{r3, r4, r5, lr}
 8005bd8:	4604      	mov	r4, r0
 8005bda:	460d      	mov	r5, r1
 8005bdc:	d904      	bls.n	8005be8 <_raise_r+0x14>
 8005bde:	2316      	movs	r3, #22
 8005be0:	6003      	str	r3, [r0, #0]
 8005be2:	f04f 30ff 	mov.w	r0, #4294967295
 8005be6:	bd38      	pop	{r3, r4, r5, pc}
 8005be8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005bea:	b112      	cbz	r2, 8005bf2 <_raise_r+0x1e>
 8005bec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005bf0:	b94b      	cbnz	r3, 8005c06 <_raise_r+0x32>
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f000 f830 	bl	8005c58 <_getpid_r>
 8005bf8:	462a      	mov	r2, r5
 8005bfa:	4601      	mov	r1, r0
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c02:	f000 b817 	b.w	8005c34 <_kill_r>
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d00a      	beq.n	8005c20 <_raise_r+0x4c>
 8005c0a:	1c59      	adds	r1, r3, #1
 8005c0c:	d103      	bne.n	8005c16 <_raise_r+0x42>
 8005c0e:	2316      	movs	r3, #22
 8005c10:	6003      	str	r3, [r0, #0]
 8005c12:	2001      	movs	r0, #1
 8005c14:	e7e7      	b.n	8005be6 <_raise_r+0x12>
 8005c16:	2400      	movs	r4, #0
 8005c18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	4798      	blx	r3
 8005c20:	2000      	movs	r0, #0
 8005c22:	e7e0      	b.n	8005be6 <_raise_r+0x12>

08005c24 <raise>:
 8005c24:	4b02      	ldr	r3, [pc, #8]	; (8005c30 <raise+0xc>)
 8005c26:	4601      	mov	r1, r0
 8005c28:	6818      	ldr	r0, [r3, #0]
 8005c2a:	f7ff bfd3 	b.w	8005bd4 <_raise_r>
 8005c2e:	bf00      	nop
 8005c30:	2000000c 	.word	0x2000000c

08005c34 <_kill_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d07      	ldr	r5, [pc, #28]	; (8005c54 <_kill_r+0x20>)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	4611      	mov	r1, r2
 8005c40:	602b      	str	r3, [r5, #0]
 8005c42:	f7fb f96b 	bl	8000f1c <_kill>
 8005c46:	1c43      	adds	r3, r0, #1
 8005c48:	d102      	bne.n	8005c50 <_kill_r+0x1c>
 8005c4a:	682b      	ldr	r3, [r5, #0]
 8005c4c:	b103      	cbz	r3, 8005c50 <_kill_r+0x1c>
 8005c4e:	6023      	str	r3, [r4, #0]
 8005c50:	bd38      	pop	{r3, r4, r5, pc}
 8005c52:	bf00      	nop
 8005c54:	200001fc 	.word	0x200001fc

08005c58 <_getpid_r>:
 8005c58:	f7fb b958 	b.w	8000f0c <_getpid>

08005c5c <__sread>:
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	460c      	mov	r4, r1
 8005c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c64:	f000 f89c 	bl	8005da0 <_read_r>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	bfab      	itete	ge
 8005c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8005c70:	181b      	addge	r3, r3, r0
 8005c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c76:	bfac      	ite	ge
 8005c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c7a:	81a3      	strhlt	r3, [r4, #12]
 8005c7c:	bd10      	pop	{r4, pc}

08005c7e <__swrite>:
 8005c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c82:	461f      	mov	r7, r3
 8005c84:	898b      	ldrh	r3, [r1, #12]
 8005c86:	05db      	lsls	r3, r3, #23
 8005c88:	4605      	mov	r5, r0
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	4616      	mov	r6, r2
 8005c8e:	d505      	bpl.n	8005c9c <__swrite+0x1e>
 8005c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c94:	2302      	movs	r3, #2
 8005c96:	2200      	movs	r2, #0
 8005c98:	f000 f868 	bl	8005d6c <_lseek_r>
 8005c9c:	89a3      	ldrh	r3, [r4, #12]
 8005c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ca6:	81a3      	strh	r3, [r4, #12]
 8005ca8:	4632      	mov	r2, r6
 8005caa:	463b      	mov	r3, r7
 8005cac:	4628      	mov	r0, r5
 8005cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb2:	f000 b817 	b.w	8005ce4 <_write_r>

08005cb6 <__sseek>:
 8005cb6:	b510      	push	{r4, lr}
 8005cb8:	460c      	mov	r4, r1
 8005cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cbe:	f000 f855 	bl	8005d6c <_lseek_r>
 8005cc2:	1c43      	adds	r3, r0, #1
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	bf15      	itete	ne
 8005cc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cd2:	81a3      	strheq	r3, [r4, #12]
 8005cd4:	bf18      	it	ne
 8005cd6:	81a3      	strhne	r3, [r4, #12]
 8005cd8:	bd10      	pop	{r4, pc}

08005cda <__sclose>:
 8005cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cde:	f000 b813 	b.w	8005d08 <_close_r>
	...

08005ce4 <_write_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4d07      	ldr	r5, [pc, #28]	; (8005d04 <_write_r+0x20>)
 8005ce8:	4604      	mov	r4, r0
 8005cea:	4608      	mov	r0, r1
 8005cec:	4611      	mov	r1, r2
 8005cee:	2200      	movs	r2, #0
 8005cf0:	602a      	str	r2, [r5, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f7fb f949 	bl	8000f8a <_write>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d102      	bne.n	8005d02 <_write_r+0x1e>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	b103      	cbz	r3, 8005d02 <_write_r+0x1e>
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	200001fc 	.word	0x200001fc

08005d08 <_close_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4d06      	ldr	r5, [pc, #24]	; (8005d24 <_close_r+0x1c>)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4604      	mov	r4, r0
 8005d10:	4608      	mov	r0, r1
 8005d12:	602b      	str	r3, [r5, #0]
 8005d14:	f7fb f955 	bl	8000fc2 <_close>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_close_r+0x1a>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_close_r+0x1a>
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	200001fc 	.word	0x200001fc

08005d28 <_fstat_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	4d07      	ldr	r5, [pc, #28]	; (8005d48 <_fstat_r+0x20>)
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4604      	mov	r4, r0
 8005d30:	4608      	mov	r0, r1
 8005d32:	4611      	mov	r1, r2
 8005d34:	602b      	str	r3, [r5, #0]
 8005d36:	f7fb f950 	bl	8000fda <_fstat>
 8005d3a:	1c43      	adds	r3, r0, #1
 8005d3c:	d102      	bne.n	8005d44 <_fstat_r+0x1c>
 8005d3e:	682b      	ldr	r3, [r5, #0]
 8005d40:	b103      	cbz	r3, 8005d44 <_fstat_r+0x1c>
 8005d42:	6023      	str	r3, [r4, #0]
 8005d44:	bd38      	pop	{r3, r4, r5, pc}
 8005d46:	bf00      	nop
 8005d48:	200001fc 	.word	0x200001fc

08005d4c <_isatty_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	4d06      	ldr	r5, [pc, #24]	; (8005d68 <_isatty_r+0x1c>)
 8005d50:	2300      	movs	r3, #0
 8005d52:	4604      	mov	r4, r0
 8005d54:	4608      	mov	r0, r1
 8005d56:	602b      	str	r3, [r5, #0]
 8005d58:	f7fb f94f 	bl	8000ffa <_isatty>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d102      	bne.n	8005d66 <_isatty_r+0x1a>
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	b103      	cbz	r3, 8005d66 <_isatty_r+0x1a>
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	bd38      	pop	{r3, r4, r5, pc}
 8005d68:	200001fc 	.word	0x200001fc

08005d6c <_lseek_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4d07      	ldr	r5, [pc, #28]	; (8005d8c <_lseek_r+0x20>)
 8005d70:	4604      	mov	r4, r0
 8005d72:	4608      	mov	r0, r1
 8005d74:	4611      	mov	r1, r2
 8005d76:	2200      	movs	r2, #0
 8005d78:	602a      	str	r2, [r5, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f7fb f948 	bl	8001010 <_lseek>
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	d102      	bne.n	8005d8a <_lseek_r+0x1e>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	b103      	cbz	r3, 8005d8a <_lseek_r+0x1e>
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	bd38      	pop	{r3, r4, r5, pc}
 8005d8c:	200001fc 	.word	0x200001fc

08005d90 <_malloc_usable_size_r>:
 8005d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d94:	1f18      	subs	r0, r3, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	bfbc      	itt	lt
 8005d9a:	580b      	ldrlt	r3, [r1, r0]
 8005d9c:	18c0      	addlt	r0, r0, r3
 8005d9e:	4770      	bx	lr

08005da0 <_read_r>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	4d07      	ldr	r5, [pc, #28]	; (8005dc0 <_read_r+0x20>)
 8005da4:	4604      	mov	r4, r0
 8005da6:	4608      	mov	r0, r1
 8005da8:	4611      	mov	r1, r2
 8005daa:	2200      	movs	r2, #0
 8005dac:	602a      	str	r2, [r5, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	f7fb f8ce 	bl	8000f50 <_read>
 8005db4:	1c43      	adds	r3, r0, #1
 8005db6:	d102      	bne.n	8005dbe <_read_r+0x1e>
 8005db8:	682b      	ldr	r3, [r5, #0]
 8005dba:	b103      	cbz	r3, 8005dbe <_read_r+0x1e>
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	bd38      	pop	{r3, r4, r5, pc}
 8005dc0:	200001fc 	.word	0x200001fc

08005dc4 <_init>:
 8005dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc6:	bf00      	nop
 8005dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dca:	bc08      	pop	{r3}
 8005dcc:	469e      	mov	lr, r3
 8005dce:	4770      	bx	lr

08005dd0 <_fini>:
 8005dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd2:	bf00      	nop
 8005dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd6:	bc08      	pop	{r3}
 8005dd8:	469e      	mov	lr, r3
 8005dda:	4770      	bx	lr
