
nucleo-l476rg-SIM33EAU_GPS_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08005ecc  08005ecc  00015ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800610c  0800610c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800610c  0800610c  0001610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006114  08006114  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800611c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000070  0800618c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  0800618c  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102a5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213c  00000000  00000000  00030345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  00032488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  00032f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027109  00000000  00000000  000338d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd44  00000000  00000000  0005a9d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb6f3  00000000  00000000  0006771d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00152e10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036b8  00000000  00000000  00152e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005eb4 	.word	0x08005eb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005eb4 	.word	0x08005eb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN PTD */

uint8_t flag = 0;

// this interrupts changes flag to 1 as soon as the uint8_t buff[300] is full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

	flag = 1;
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <HAL_UART_RxCpltCallback+0x1c>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]

}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000008c 	.word	0x2000008c

08000598 <nmea0183_checksum>:

// function to calculate checksum of the NMEA sentence
// -4, but not -3 because the NMEA sentences are delimited with \r\n, and there also is the invisible \r in the end
int nmea0183_checksum(char *msg) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

	int checksum = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
	int j = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]

	// the first $ sign and the last two bytes of original CRC + the * sign
	for (j = 1; j < strlen(msg) - 4; j++) {
 80005a8:	2301      	movs	r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	e00a      	b.n	80005c4 <nmea0183_checksum+0x2c>
		checksum = checksum ^ (unsigned) msg[j];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4053      	eors	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
	for (j = 1; j < strlen(msg) - 4; j++) {
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff fe03 	bl	80001d0 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	1f1a      	subs	r2, r3, #4
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d8ec      	bhi.n	80005ae <nmea0183_checksum+0x16>
	}

	return checksum;
 80005d4:	68fb      	ldr	r3, [r7, #12]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e2:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 80005e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	int numGoodReadings = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ee:	f000 fdd3 	bl	8001198 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005f2:	f000 fa59 	bl	8000aa8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005f6:	f000 fb27 	bl	8000c48 <MX_GPIO_Init>
	MX_DMA_Init();
 80005fa:	f000 fb07 	bl	8000c0c <MX_DMA_Init>
	MX_USART1_UART_Init();
 80005fe:	f000 faa5 	bl	8000b4c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000602:	f000 fad3 	bl	8000bac <MX_USART2_UART_Init>

	char hH[2]; // hours
	char mM[2]; // minutes
	char sS[2]; // seconds

	uint8_t cnt = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f

	HAL_UART_Receive_DMA(&huart1, buff, 255);
 800060c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000610:	22ff      	movs	r2, #255	; 0xff
 8000612:	4619      	mov	r1, r3
 8000614:	4871      	ldr	r0, [pc, #452]	; (80007dc <main+0x1fc>)
 8000616:	f002 ff97 	bl	8003548 <HAL_UART_Receive_DMA>
//	HAL_UART_Transmit(&huart1, (uint8_t*) command, strlen(command), 200);


	//char command[100] = "$PMTK314,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n"; // GPGLL ONLY. 29 checksum correct.
	//char command[100] = "$PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*28\r\n"; //Only sentence 2 and 4. 28 checksum correct.
	char command[100] = "$PMTK314,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0*29\r\n"; //all sentences
 800061a:	f107 0614 	add.w	r6, r7, #20
 800061e:	4b70      	ldr	r3, [pc, #448]	; (80007e0 <main+0x200>)
 8000620:	4634      	mov	r4, r6
 8000622:	461d      	mov	r5, r3
 8000624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000630:	682b      	ldr	r3, [r5, #0]
 8000632:	6023      	str	r3, [r4, #0]
 8000634:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8000638:	2230      	movs	r2, #48	; 0x30
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f004 f9af 	bl	80049a0 <memset>
	HAL_UART_Transmit(&huart1, (uint8_t*) command, strlen(command), 200);//show the sentences chosen
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fdc2 	bl	80001d0 <strlen>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	f107 0114 	add.w	r1, r7, #20
 8000654:	23c8      	movs	r3, #200	; 0xc8
 8000656:	4861      	ldr	r0, [pc, #388]	; (80007dc <main+0x1fc>)
 8000658:	f002 fee2 	bl	8003420 <HAL_UART_Transmit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (flag == 1) { // interrupt signals that the buffer buff[300] is full
 800065c:	4b61      	ldr	r3, [pc, #388]	; (80007e4 <main+0x204>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b01      	cmp	r3, #1
 8000662:	f040 8204 	bne.w	8000a6e <main+0x48e>
			  or \r Carriage return
			  or \n Line feed, end delimiter

			 */

			memset(buffStr, 0, 255);
 8000666:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800066a:	22ff      	movs	r2, #255	; 0xff
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f004 f996 	bl	80049a0 <memset>

			sprintf(buffStr, "%s", buff);
 8000674:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8000678:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800067c:	495a      	ldr	r1, [pc, #360]	; (80007e8 <main+0x208>)
 800067e:	4618      	mov	r0, r3
 8000680:	f004 f9ca 	bl	8004a18 <siprintf>

			//***if we want to display the incoming raw data
			HAL_UART_Transmit(&huart2, buff, 255, 70);
 8000684:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8000688:	2346      	movs	r3, #70	; 0x46
 800068a:	22ff      	movs	r2, #255	; 0xff
 800068c:	4857      	ldr	r0, [pc, #348]	; (80007ec <main+0x20c>)
 800068e:	f002 fec7 	bl	8003420 <HAL_UART_Transmit>

			// splitting the buffStr by the "\n" delimiter with the strsep() C function
			// see http://www.manpagez.com/man/3/strsep/
			char *token, *string;

			string = strdup(buffStr);
 8000692:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000696:	4618      	mov	r0, r3
 8000698:	f004 fa02 	bl	8004aa0 <strdup>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	601a      	str	r2, [r3, #0]

			// actually splitting the string by "\n" delimiter
			while ((token = strsep(&string, "\n")) != NULL) {
 80006a6:	e1d2      	b.n	8000a4e <main+0x46e>

				memset(nmeaSnt, 0, 80);
 80006a8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80006ac:	2250      	movs	r2, #80	; 0x50
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 f975 	bl	80049a0 <memset>

				sprintf(nmeaSnt, "%s", token);
 80006b6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80006ba:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 80006be:	494a      	ldr	r1, [pc, #296]	; (80007e8 <main+0x208>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 f9a9 	bl	8004a18 <siprintf>

				// selecting only $GNGLL sentences, combined GPS and GLONASS
				// on my GPS sensor this good NMEA sentence is always 50 characters
				if ((strstr(nmeaSnt, "$GNGLL") != 0) && strlen(nmeaSnt) > 49 && strstr(nmeaSnt, "*") != 0) {
 80006c6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80006ca:	4949      	ldr	r1, [pc, #292]	; (80007f0 <main+0x210>)
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 fa09 	bl	8004ae4 <strstr>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	f000 81ba 	beq.w	8000a4e <main+0x46e>
 80006da:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fd76 	bl	80001d0 <strlen>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b31      	cmp	r3, #49	; 0x31
 80006e8:	f240 81b1 	bls.w	8000a4e <main+0x46e>
 80006ec:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80006f0:	212a      	movs	r1, #42	; 0x2a
 80006f2:	4618      	mov	r0, r3
 80006f4:	f004 f9bf 	bl	8004a76 <strchr>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	f000 81a7 	beq.w	8000a4e <main+0x46e>
					rawSum = strstr(nmeaSnt, "*");
 8000700:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000704:	212a      	movs	r1, #42	; 0x2a
 8000706:	4618      	mov	r0, r3
 8000708:	f004 f9b5 	bl	8004a76 <strchr>
 800070c:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360

					memcpy(smNmbr, &rawSum[1], 2);
 8000710:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8000714:	3301      	adds	r3, #1
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	b29a      	uxth	r2, r3
 800071a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800071e:	801a      	strh	r2, [r3, #0]

					smNmbr[2] = '\0';
 8000720:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000724:	2200      	movs	r2, #0
 8000726:	709a      	strb	r2, [r3, #2]

					uint8_t intSum = nmea0183_checksum(nmeaSnt);
 8000728:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff33 	bl	8000598 <nmea0183_checksum>
 8000732:	4603      	mov	r3, r0
 8000734:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f

					char hex[2];

					// "%X" unsigned hexadecimal integer (capital letters)
					sprintf(hex, "%X", intSum);
 8000738:	f897 235f 	ldrb.w	r2, [r7, #863]	; 0x35f
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	492c      	ldr	r1, [pc, #176]	; (80007f4 <main+0x214>)
 8000742:	4618      	mov	r0, r3
 8000744:	f004 f968 	bl	8004a18 <siprintf>

					// checksum data verification, if OK, then we can really trust
					// the data in the the NMEA sentence
					if (strstr(smNmbr, hex) != NULL) {
 8000748:	f107 020c 	add.w	r2, r7, #12
 800074c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f004 f9c6 	bl	8004ae4 <strstr>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	f000 8177 	beq.w	8000a4e <main+0x46e>

						//***if we want display good $GNGLL NMEA sentences
						//HAL_UART_Transmit(&huart2, nmeaSnt, 50, 70);
						//HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 200);

						cnt = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f

						// splitting the good NMEA sentence into the tokens by the comma delimiter
						for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8000766:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800076a:	4923      	ldr	r1, [pc, #140]	; (80007f8 <main+0x218>)
 800076c:	4618      	mov	r0, r3
 800076e:	f004 f9d1 	bl	8004b14 <strtok>
 8000772:	f8c7 0368 	str.w	r0, [r7, #872]	; 0x368
 8000776:	e054      	b.n	8000822 <main+0x242>

							switch (cnt) {
 8000778:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 800077c:	3b01      	subs	r3, #1
 800077e:	2b04      	cmp	r3, #4
 8000780:	d844      	bhi.n	800080c <main+0x22c>
 8000782:	a201      	add	r2, pc, #4	; (adr r2, 8000788 <main+0x1a8>)
 8000784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000788:	0800079d 	.word	0x0800079d
 800078c:	080007ad 	.word	0x080007ad
 8000790:	080007bd 	.word	0x080007bd
 8000794:	080007cd 	.word	0x080007cd
 8000798:	080007fd 	.word	0x080007fd
							case 1:
								latRaw = strdup(pV);
 800079c:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 80007a0:	f004 f97e 	bl	8004aa0 <strdup>
 80007a4:	4603      	mov	r3, r0
 80007a6:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
								break;
 80007aa:	e02f      	b.n	800080c <main+0x22c>
							case 2:
								hemNS = strdup(pV);
 80007ac:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 80007b0:	f004 f976 	bl	8004aa0 <strdup>
 80007b4:	4603      	mov	r3, r0
 80007b6:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
								break;
 80007ba:	e027      	b.n	800080c <main+0x22c>
							case 3:
								lonRaw = strdup(pV);
 80007bc:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 80007c0:	f004 f96e 	bl	8004aa0 <strdup>
 80007c4:	4603      	mov	r3, r0
 80007c6:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
								break;
 80007ca:	e01f      	b.n	800080c <main+0x22c>
							case 4:
								hemEW = strdup(pV);
 80007cc:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 80007d0:	f004 f966 	bl	8004aa0 <strdup>
 80007d4:	4603      	mov	r3, r0
 80007d6:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
								break;
 80007da:	e017      	b.n	800080c <main+0x22c>
 80007dc:	200000e4 	.word	0x200000e4
 80007e0:	08005f14 	.word	0x08005f14
 80007e4:	2000008c 	.word	0x2000008c
 80007e8:	08005ecc 	.word	0x08005ecc
 80007ec:	20000168 	.word	0x20000168
 80007f0:	08005ed0 	.word	0x08005ed0
 80007f4:	08005ed8 	.word	0x08005ed8
 80007f8:	08005edc 	.word	0x08005edc
							case 5:
								utcRaw = strdup(pV);
 80007fc:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 8000800:	f004 f94e 	bl	8004aa0 <strdup>
 8000804:	4603      	mov	r3, r0
 8000806:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
								break;
 800080a:	bf00      	nop
							}

							cnt++;
 800080c:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 8000810:	3301      	adds	r3, #1
 8000812:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
						for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8000816:	4998      	ldr	r1, [pc, #608]	; (8000a78 <main+0x498>)
 8000818:	2000      	movs	r0, #0
 800081a:	f004 f97b 	bl	8004b14 <strtok>
 800081e:	f8c7 0368 	str.w	r0, [r7, #872]	; 0x368
 8000822:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1a6      	bne.n	8000778 <main+0x198>
 800082a:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	b29a      	uxth	r2, r3

						}  // end for()

						memcpy(latDg, &latRaw[0], 2);
 8000832:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000836:	801a      	strh	r2, [r3, #0]
						latDg[2] = '\0';
 8000838:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800083c:	2200      	movs	r2, #0
 800083e:	709a      	strb	r2, [r3, #2]

						memcpy(latMS, &latRaw[2], 7);
 8000840:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8000844:	1c9a      	adds	r2, r3, #2
 8000846:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800084a:	6810      	ldr	r0, [r2, #0]
 800084c:	6018      	str	r0, [r3, #0]
 800084e:	8891      	ldrh	r1, [r2, #4]
 8000850:	7992      	ldrb	r2, [r2, #6]
 8000852:	8099      	strh	r1, [r3, #4]
 8000854:	719a      	strb	r2, [r3, #6]
						latMS[7] = '\0';
 8000856:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800085a:	2200      	movs	r2, #0
 800085c:	71da      	strb	r2, [r3, #7]

						memcpy(lonDg, &lonRaw[0], 3);
 800085e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000862:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8000866:	8811      	ldrh	r1, [r2, #0]
 8000868:	7892      	ldrb	r2, [r2, #2]
 800086a:	8019      	strh	r1, [r3, #0]
 800086c:	709a      	strb	r2, [r3, #2]
						lonDg[3] = '\0';
 800086e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000872:	2200      	movs	r2, #0
 8000874:	70da      	strb	r2, [r3, #3]

						memcpy(lonMS, &lonRaw[3], 7);
 8000876:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800087a:	1cda      	adds	r2, r3, #3
 800087c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000880:	6810      	ldr	r0, [r2, #0]
 8000882:	6018      	str	r0, [r3, #0]
 8000884:	8891      	ldrh	r1, [r2, #4]
 8000886:	7992      	ldrb	r2, [r2, #6]
 8000888:	8099      	strh	r1, [r3, #4]
 800088a:	719a      	strb	r2, [r3, #6]
						lonMS[7] = '\0';
 800088c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000890:	2200      	movs	r2, #0
 8000892:	71da      	strb	r2, [r3, #7]
						char strLonMS[7];
						sprintf(strLonMS, "%s", lonMS);
 8000894:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4978      	ldr	r1, [pc, #480]	; (8000a7c <main+0x49c>)
 800089c:	4618      	mov	r0, r3
 800089e:	f004 f8bb 	bl	8004a18 <siprintf>
 80008a2:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	b29a      	uxth	r2, r3

						//converting the UTC time in the hh:mm:ss format
						memcpy(hH, &utcRaw[0], 2);
 80008aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80008ae:	801a      	strh	r2, [r3, #0]
						hH[2] = '\0';
 80008b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80008b4:	2200      	movs	r2, #0
 80008b6:	709a      	strb	r2, [r3, #2]

						memcpy(mM, &utcRaw[2], 2);
 80008b8:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 80008bc:	3302      	adds	r3, #2
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008c6:	801a      	strh	r2, [r3, #0]
						mM[2] = '\0';
 80008c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008cc:	2200      	movs	r2, #0
 80008ce:	709a      	strb	r2, [r3, #2]

						memcpy(sS, &utcRaw[4], 2);
 80008d0:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 80008d4:	3304      	adds	r3, #4
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	b29a      	uxth	r2, r3
 80008da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80008de:	801a      	strh	r2, [r3, #0]
						sS[2] = '\0';
 80008e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80008e4:	2200      	movs	r2, #0
 80008e6:	709a      	strb	r2, [r3, #2]

						strcpy(strUTC, hH);
 80008e8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80008ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f004 f8cc 	bl	8004a90 <strcpy>
						strcat(strUTC, ":");
 80008f8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fc67 	bl	80001d0 <strlen>
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800090a:	4413      	add	r3, r2
 800090c:	495c      	ldr	r1, [pc, #368]	; (8000a80 <main+0x4a0>)
 800090e:	461a      	mov	r2, r3
 8000910:	460b      	mov	r3, r1
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	8013      	strh	r3, [r2, #0]
						strcat(strUTC, mM);
 8000916:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800091a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800091e:	4611      	mov	r1, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f004 f899 	bl	8004a58 <strcat>
						strcat(strUTC, ":");
 8000926:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fc50 	bl	80001d0 <strlen>
 8000930:	4603      	mov	r3, r0
 8000932:	461a      	mov	r2, r3
 8000934:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000938:	4413      	add	r3, r2
 800093a:	4951      	ldr	r1, [pc, #324]	; (8000a80 <main+0x4a0>)
 800093c:	461a      	mov	r2, r3
 800093e:	460b      	mov	r3, r1
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	8013      	strh	r3, [r2, #0]
						strcat(strUTC, sS);
 8000944:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000948:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800094c:	4611      	mov	r1, r2
 800094e:	4618      	mov	r0, r3
 8000950:	f004 f882 	bl	8004a58 <strcat>
						strUTC[8] = '\0';
 8000954:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000958:	2200      	movs	r2, #0
 800095a:	721a      	strb	r2, [r3, #8]

						numGoodReadings++;
 800095c:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8000960:	3301      	adds	r3, #1
 8000962:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
						snprintf(display_buff, sizeof(display_buff), "Reading #%d: ",  numGoodReadings);
 8000966:	f507 703e 	add.w	r0, r7, #760	; 0x2f8
 800096a:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800096e:	4a45      	ldr	r2, [pc, #276]	; (8000a84 <main+0x4a4>)
 8000970:	2164      	movs	r1, #100	; 0x64
 8000972:	f004 f81d 	bl	80049b0 <sniprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) display_buff, strlen(display_buff), 200);
 8000976:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fc28 	bl	80001d0 <strlen>
 8000980:	4603      	mov	r3, r0
 8000982:	b29a      	uxth	r2, r3
 8000984:	f507 713e 	add.w	r1, r7, #760	; 0x2f8
 8000988:	23c8      	movs	r3, #200	; 0xc8
 800098a:	483f      	ldr	r0, [pc, #252]	; (8000a88 <main+0x4a8>)
 800098c:	f002 fd48 	bl	8003420 <HAL_UART_Transmit>

						HAL_UART_Transmit(&huart2, (uint8_t*) hemNS, 1, 200);
 8000990:	23c8      	movs	r3, #200	; 0xc8
 8000992:	2201      	movs	r2, #1
 8000994:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8000998:	483b      	ldr	r0, [pc, #236]	; (8000a88 <main+0x4a8>)
 800099a:	f002 fd41 	bl	8003420 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) " ", 1, 200);
 800099e:	23c8      	movs	r3, #200	; 0xc8
 80009a0:	2201      	movs	r2, #1
 80009a2:	493a      	ldr	r1, [pc, #232]	; (8000a8c <main+0x4ac>)
 80009a4:	4838      	ldr	r0, [pc, #224]	; (8000a88 <main+0x4a8>)
 80009a6:	f002 fd3b 	bl	8003420 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) latDg, 2, 200);
 80009aa:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80009ae:	23c8      	movs	r3, #200	; 0xc8
 80009b0:	2202      	movs	r2, #2
 80009b2:	4835      	ldr	r0, [pc, #212]	; (8000a88 <main+0x4a8>)
 80009b4:	f002 fd34 	bl	8003420 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "°", 2, 200);
 80009b8:	23c8      	movs	r3, #200	; 0xc8
 80009ba:	2202      	movs	r2, #2
 80009bc:	4934      	ldr	r1, [pc, #208]	; (8000a90 <main+0x4b0>)
 80009be:	4832      	ldr	r0, [pc, #200]	; (8000a88 <main+0x4a8>)
 80009c0:	f002 fd2e 	bl	8003420 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) latMS, 7, 200);
 80009c4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80009c8:	23c8      	movs	r3, #200	; 0xc8
 80009ca:	2207      	movs	r2, #7
 80009cc:	482e      	ldr	r0, [pc, #184]	; (8000a88 <main+0x4a8>)
 80009ce:	f002 fd27 	bl	8003420 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\', ", 3, 200);
 80009d2:	23c8      	movs	r3, #200	; 0xc8
 80009d4:	2203      	movs	r2, #3
 80009d6:	492f      	ldr	r1, [pc, #188]	; (8000a94 <main+0x4b4>)
 80009d8:	482b      	ldr	r0, [pc, #172]	; (8000a88 <main+0x4a8>)
 80009da:	f002 fd21 	bl	8003420 <HAL_UART_Transmit>

						HAL_UART_Transmit(&huart2, (uint8_t*) hemEW, 1, 200);
 80009de:	23c8      	movs	r3, #200	; 0xc8
 80009e0:	2201      	movs	r2, #1
 80009e2:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 80009e6:	4828      	ldr	r0, [pc, #160]	; (8000a88 <main+0x4a8>)
 80009e8:	f002 fd1a 	bl	8003420 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) " ", 1, 200);
 80009ec:	23c8      	movs	r3, #200	; 0xc8
 80009ee:	2201      	movs	r2, #1
 80009f0:	4926      	ldr	r1, [pc, #152]	; (8000a8c <main+0x4ac>)
 80009f2:	4825      	ldr	r0, [pc, #148]	; (8000a88 <main+0x4a8>)
 80009f4:	f002 fd14 	bl	8003420 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) lonDg, 3, 200);
 80009f8:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80009fc:	23c8      	movs	r3, #200	; 0xc8
 80009fe:	2203      	movs	r2, #3
 8000a00:	4821      	ldr	r0, [pc, #132]	; (8000a88 <main+0x4a8>)
 8000a02:	f002 fd0d 	bl	8003420 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "°", 2, 200);
 8000a06:	23c8      	movs	r3, #200	; 0xc8
 8000a08:	2202      	movs	r2, #2
 8000a0a:	4921      	ldr	r1, [pc, #132]	; (8000a90 <main+0x4b0>)
 8000a0c:	481e      	ldr	r0, [pc, #120]	; (8000a88 <main+0x4a8>)
 8000a0e:	f002 fd07 	bl	8003420 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) strLonMS, strlen(strLonMS), 200);
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fbdb 	bl	80001d0 <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	1d39      	adds	r1, r7, #4
 8000a20:	23c8      	movs	r3, #200	; 0xc8
 8000a22:	4819      	ldr	r0, [pc, #100]	; (8000a88 <main+0x4a8>)
 8000a24:	f002 fcfc 	bl	8003420 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\', UTC: ", 8, 200);
 8000a28:	23c8      	movs	r3, #200	; 0xc8
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	491a      	ldr	r1, [pc, #104]	; (8000a98 <main+0x4b8>)
 8000a2e:	4816      	ldr	r0, [pc, #88]	; (8000a88 <main+0x4a8>)
 8000a30:	f002 fcf6 	bl	8003420 <HAL_UART_Transmit>

						HAL_UART_Transmit(&huart2, (uint8_t*) strUTC, 8, 200);
 8000a34:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000a38:	23c8      	movs	r3, #200	; 0xc8
 8000a3a:	2208      	movs	r2, #8
 8000a3c:	4812      	ldr	r0, [pc, #72]	; (8000a88 <main+0x4a8>)
 8000a3e:	f002 fcef 	bl	8003420 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 200);
 8000a42:	23c8      	movs	r3, #200	; 0xc8
 8000a44:	2202      	movs	r2, #2
 8000a46:	4915      	ldr	r1, [pc, #84]	; (8000a9c <main+0x4bc>)
 8000a48:	480f      	ldr	r0, [pc, #60]	; (8000a88 <main+0x4a8>)
 8000a4a:	f002 fce9 	bl	8003420 <HAL_UART_Transmit>
			while ((token = strsep(&string, "\n")) != NULL) {
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	4913      	ldr	r1, [pc, #76]	; (8000aa0 <main+0x4c0>)
 8000a54:	4618      	mov	r0, r3
 8000a56:	f004 f840 	bl	8004ada <strsep>
 8000a5a:	f8c7 0364 	str.w	r0, [r7, #868]	; 0x364
 8000a5e:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	f47f ae20 	bne.w	80006a8 <main+0xc8>

				} // end of $GNGLL sentences selection

			} // end of splitting the buffStr by the "\n" delimiter with the strsep() C function

			flag = 0; // we are ready to get new data from the sensor
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <main+0x4c4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]

		} // end of one interrupt/full-buffer cycle

		HAL_Delay(200);
 8000a6e:	20c8      	movs	r0, #200	; 0xc8
 8000a70:	f000 fc0e 	bl	8001290 <HAL_Delay>
		if (flag == 1) { // interrupt signals that the buffer buff[300] is full
 8000a74:	e5f2      	b.n	800065c <main+0x7c>
 8000a76:	bf00      	nop
 8000a78:	08005edc 	.word	0x08005edc
 8000a7c:	08005ecc 	.word	0x08005ecc
 8000a80:	08005ee0 	.word	0x08005ee0
 8000a84:	08005ee4 	.word	0x08005ee4
 8000a88:	20000168 	.word	0x20000168
 8000a8c:	08005ef4 	.word	0x08005ef4
 8000a90:	08005ef8 	.word	0x08005ef8
 8000a94:	08005efc 	.word	0x08005efc
 8000a98:	08005f00 	.word	0x08005f00
 8000a9c:	08005f0c 	.word	0x08005f0c
 8000aa0:	08005f10 	.word	0x08005f10
 8000aa4:	2000008c 	.word	0x2000008c

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b096      	sub	sp, #88	; 0x58
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	2244      	movs	r2, #68	; 0x44
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f003 ff72 	bl	80049a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000aca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ace:	f001 f95b 	bl	8001d88 <HAL_PWREx_ControlVoltageScaling>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ad8:	f000 f91c 	bl	8000d14 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000adc:	2302      	movs	r3, #2
 8000ade:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae6:	2310      	movs	r3, #16
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aea:	2302      	movs	r3, #2
 8000aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aee:	2302      	movs	r3, #2
 8000af0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000af6:	230a      	movs	r3, #10
 8000af8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000afa:	2307      	movs	r3, #7
 8000afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b02:	2302      	movs	r3, #2
 8000b04:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 f992 	bl	8001e34 <HAL_RCC_OscConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b16:	f000 f8fd 	bl	8000d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b2e:	463b      	mov	r3, r7
 8000b30:	2104      	movs	r1, #4
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 fd64 	bl	8002600 <HAL_RCC_ClockConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b3e:	f000 f8e9 	bl	8000d14 <Error_Handler>
  }
}
 8000b42:	bf00      	nop
 8000b44:	3758      	adds	r7, #88	; 0x58
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_USART1_UART_Init+0x58>)
 8000b52:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <MX_USART1_UART_Init+0x5c>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_USART1_UART_Init+0x58>)
 8000b58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_USART1_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_USART1_UART_Init+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_USART1_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_USART1_UART_Init+0x58>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_USART1_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_USART1_UART_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_USART1_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_USART1_UART_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_USART1_UART_Init+0x58>)
 8000b90:	f002 fbf8 	bl	8003384 <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b9a:	f000 f8bb 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200000e4 	.word	0x200000e4
 8000ba8:	40013800 	.word	0x40013800

08000bac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_USART2_UART_Init+0x58>)
 8000bb2:	4a15      	ldr	r2, [pc, #84]	; (8000c08 <MX_USART2_UART_Init+0x5c>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_USART2_UART_Init+0x58>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_USART2_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_USART2_UART_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_USART2_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_USART2_UART_Init+0x58>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <MX_USART2_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_USART2_UART_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <MX_USART2_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_USART2_UART_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_USART2_UART_Init+0x58>)
 8000bf0:	f002 fbc8 	bl	8003384 <HAL_UART_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bfa:	f000 f88b 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000168 	.word	0x20000168
 8000c08:	40004400 	.word	0x40004400

08000c0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_DMA_Init+0x38>)
 8000c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <MX_DMA_Init+0x38>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6493      	str	r3, [r2, #72]	; 0x48
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_DMA_Init+0x38>)
 8000c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f000 fc2d 	bl	800148e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000c34:	200f      	movs	r0, #15
 8000c36:	f000 fc46 	bl	80014c6 <HAL_NVIC_EnableIRQ>

}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40021000 	.word	0x40021000

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <MX_GPIO_Init+0xc4>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	4a2a      	ldr	r2, [pc, #168]	; (8000d0c <MX_GPIO_Init+0xc4>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <MX_GPIO_Init+0xc4>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c76:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <MX_GPIO_Init+0xc4>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	4a24      	ldr	r2, [pc, #144]	; (8000d0c <MX_GPIO_Init+0xc4>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c82:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <MX_GPIO_Init+0xc4>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <MX_GPIO_Init+0xc4>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <MX_GPIO_Init+0xc4>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <MX_GPIO_Init+0xc4>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <MX_GPIO_Init+0xc4>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a18      	ldr	r2, [pc, #96]	; (8000d0c <MX_GPIO_Init+0xc4>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <MX_GPIO_Init+0xc4>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2120      	movs	r1, #32
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f001 f839 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cd0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480b      	ldr	r0, [pc, #44]	; (8000d10 <MX_GPIO_Init+0xc8>)
 8000ce2:	f000 fe81 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ce6:	2320      	movs	r3, #32
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d00:	f000 fe72 	bl	80019e8 <HAL_GPIO_Init>

}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	48000800 	.word	0x48000800

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <HAL_MspInit+0x44>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <HAL_MspInit+0x44>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6613      	str	r3, [r2, #96]	; 0x60
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_MspInit+0x44>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_MspInit+0x44>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_MspInit+0x44>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d48:	6593      	str	r3, [r2, #88]	; 0x58
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_MspInit+0x44>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000

08000d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0ae      	sub	sp, #184	; 0xb8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	2288      	movs	r2, #136	; 0x88
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f003 fe09 	bl	80049a0 <memset>
  if(huart->Instance==USART1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a5c      	ldr	r2, [pc, #368]	; (8000f04 <HAL_UART_MspInit+0x19c>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d16f      	bne.n	8000e78 <HAL_UART_MspInit+0x110>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4618      	mov	r0, r3
 8000da6:	f001 fe31 	bl	8002a0c <HAL_RCCEx_PeriphCLKConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000db0:	f7ff ffb0 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db4:	4b54      	ldr	r3, [pc, #336]	; (8000f08 <HAL_UART_MspInit+0x1a0>)
 8000db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db8:	4a53      	ldr	r2, [pc, #332]	; (8000f08 <HAL_UART_MspInit+0x1a0>)
 8000dba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbe:	6613      	str	r3, [r2, #96]	; 0x60
 8000dc0:	4b51      	ldr	r3, [pc, #324]	; (8000f08 <HAL_UART_MspInit+0x1a0>)
 8000dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc8:	61bb      	str	r3, [r7, #24]
 8000dca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b4e      	ldr	r3, [pc, #312]	; (8000f08 <HAL_UART_MspInit+0x1a0>)
 8000dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd0:	4a4d      	ldr	r2, [pc, #308]	; (8000f08 <HAL_UART_MspInit+0x1a0>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd8:	4b4b      	ldr	r3, [pc, #300]	; (8000f08 <HAL_UART_MspInit+0x1a0>)
 8000dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000de4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000de8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dfe:	2307      	movs	r3, #7
 8000e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f000 fdeb 	bl	80019e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000e12:	4b3e      	ldr	r3, [pc, #248]	; (8000f0c <HAL_UART_MspInit+0x1a4>)
 8000e14:	4a3e      	ldr	r2, [pc, #248]	; (8000f10 <HAL_UART_MspInit+0x1a8>)
 8000e16:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000e18:	4b3c      	ldr	r3, [pc, #240]	; (8000f0c <HAL_UART_MspInit+0x1a4>)
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e1e:	4b3b      	ldr	r3, [pc, #236]	; (8000f0c <HAL_UART_MspInit+0x1a4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e24:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <HAL_UART_MspInit+0x1a4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2a:	4b38      	ldr	r3, [pc, #224]	; (8000f0c <HAL_UART_MspInit+0x1a4>)
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e30:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <HAL_UART_MspInit+0x1a4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e36:	4b35      	ldr	r3, [pc, #212]	; (8000f0c <HAL_UART_MspInit+0x1a4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e3c:	4b33      	ldr	r3, [pc, #204]	; (8000f0c <HAL_UART_MspInit+0x1a4>)
 8000e3e:	2220      	movs	r2, #32
 8000e40:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e42:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <HAL_UART_MspInit+0x1a4>)
 8000e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e4a:	4830      	ldr	r0, [pc, #192]	; (8000f0c <HAL_UART_MspInit+0x1a4>)
 8000e4c:	f000 fb56 	bl	80014fc <HAL_DMA_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8000e56:	f7ff ff5d 	bl	8000d14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a2b      	ldr	r2, [pc, #172]	; (8000f0c <HAL_UART_MspInit+0x1a4>)
 8000e5e:	671a      	str	r2, [r3, #112]	; 0x70
 8000e60:	4a2a      	ldr	r2, [pc, #168]	; (8000f0c <HAL_UART_MspInit+0x1a4>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2025      	movs	r0, #37	; 0x25
 8000e6c:	f000 fb0f 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e70:	2025      	movs	r0, #37	; 0x25
 8000e72:	f000 fb28 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e76:	e040      	b.n	8000efa <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a25      	ldr	r2, [pc, #148]	; (8000f14 <HAL_UART_MspInit+0x1ac>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d13b      	bne.n	8000efa <HAL_UART_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fdbc 	bl	8002a0c <HAL_RCCEx_PeriphCLKConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_UART_MspInit+0x136>
      Error_Handler();
 8000e9a:	f7ff ff3b 	bl	8000d14 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <HAL_UART_MspInit+0x1a0>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	4a19      	ldr	r2, [pc, #100]	; (8000f08 <HAL_UART_MspInit+0x1a0>)
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_UART_MspInit+0x1a0>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <HAL_UART_MspInit+0x1a0>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4a13      	ldr	r2, [pc, #76]	; (8000f08 <HAL_UART_MspInit+0x1a0>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_UART_MspInit+0x1a0>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ece:	230c      	movs	r3, #12
 8000ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef6:	f000 fd77 	bl	80019e8 <HAL_GPIO_Init>
}
 8000efa:	bf00      	nop
 8000efc:	37b8      	adds	r7, #184	; 0xb8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40013800 	.word	0x40013800
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	2000009c 	.word	0x2000009c
 8000f10:	40020058 	.word	0x40020058
 8000f14:	40004400 	.word	0x40004400

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <NMI_Handler+0x4>

08000f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f64:	f000 f974 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <DMA1_Channel5_IRQHandler+0x10>)
 8000f72:	f000 fc5a 	bl	800182a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000009c 	.word	0x2000009c

08000f80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <USART1_IRQHandler+0x10>)
 8000f86:	f002 fb35 	bl	80035f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200000e4 	.word	0x200000e4

08000f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
	return 1;
 8000f98:	2301      	movs	r3, #1
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <_kill>:

int _kill(int pid, int sig)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fae:	f003 fccd 	bl	800494c <__errno>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2216      	movs	r2, #22
 8000fb6:	601a      	str	r2, [r3, #0]
	return -1;
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_exit>:

void _exit (int status)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ffe7 	bl	8000fa4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fd6:	e7fe      	b.n	8000fd6 <_exit+0x12>

08000fd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	e00a      	b.n	8001000 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fea:	f3af 8000 	nop.w
 8000fee:	4601      	mov	r1, r0
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	b2ca      	uxtb	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbf0      	blt.n	8000fea <_read+0x12>
	}

return len;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	e009      	b.n	8001038 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	60ba      	str	r2, [r7, #8]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3301      	adds	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	dbf1      	blt.n	8001024 <_write+0x12>
	}
	return len;
 8001040:	687b      	ldr	r3, [r7, #4]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <_close>:

int _close(int file)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	return -1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001072:	605a      	str	r2, [r3, #4]
	return 0;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_isatty>:

int _isatty(int file)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
	return 1;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
	return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	; (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f003 fc32 	bl	800494c <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <_sbrk+0x64>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20018000 	.word	0x20018000
 8001114:	00000400 	.word	0x00000400
 8001118:	20000090 	.word	0x20000090
 800111c:	20000200 	.word	0x20000200

08001120 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <SystemInit+0x20>)
 8001126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <SystemInit+0x20>)
 800112c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800117c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001148:	f7ff ffea 	bl	8001120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800114c:	480c      	ldr	r0, [pc, #48]	; (8001180 <LoopForever+0x6>)
  ldr r1, =_edata
 800114e:	490d      	ldr	r1, [pc, #52]	; (8001184 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <LoopForever+0xe>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001164:	4c0a      	ldr	r4, [pc, #40]	; (8001190 <LoopForever+0x16>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001172:	f003 fbf1 	bl	8004958 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001176:	f7ff fa33 	bl	80005e0 <main>

0800117a <LoopForever>:

LoopForever:
    b LoopForever
 800117a:	e7fe      	b.n	800117a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800117c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001184:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001188:	0800611c 	.word	0x0800611c
  ldr r2, =_sbss
 800118c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001190:	20000200 	.word	0x20000200

08001194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC1_2_IRQHandler>
	...

08001198 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_Init+0x3c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HAL_Init+0x3c>)
 80011a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ae:	2003      	movs	r0, #3
 80011b0:	f000 f962 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b4:	2000      	movs	r0, #0
 80011b6:	f000 f80f 	bl	80011d8 <HAL_InitTick>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d002      	beq.n	80011c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	e001      	b.n	80011ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011c6:	f7ff fdab 	bl	8000d20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ca:	79fb      	ldrb	r3, [r7, #7]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40022000 	.word	0x40022000

080011d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_InitTick+0x6c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d023      	beq.n	8001234 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <HAL_InitTick+0x70>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_InitTick+0x6c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f96d 	bl	80014e2 <HAL_SYSTICK_Config>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10f      	bne.n	800122e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b0f      	cmp	r3, #15
 8001212:	d809      	bhi.n	8001228 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001214:	2200      	movs	r2, #0
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f000 f937 	bl	800148e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <HAL_InitTick+0x74>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e007      	b.n	8001238 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e004      	b.n	8001238 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e001      	b.n	8001238 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000008 	.word	0x20000008
 8001248:	20000000 	.word	0x20000000
 800124c:	20000004 	.word	0x20000004

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000008 	.word	0x20000008
 8001274:	200001ec 	.word	0x200001ec

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	200001ec 	.word	0x200001ec

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff ffee 	bl	8001278 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_Delay+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffde 	bl	8001278 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000008 	.word	0x20000008

080012d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <__NVIC_EnableIRQ+0x38>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ff8e 	bl	8001378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff29 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014a0:	f7ff ff3e 	bl	8001320 <__NVIC_GetPriorityGrouping>
 80014a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff ff8e 	bl	80013cc <NVIC_EncodePriority>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff5d 	bl	8001378 <__NVIC_SetPriority>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff31 	bl	800133c <__NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffa2 	bl	8001434 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e098      	b.n	8001640 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	4b4d      	ldr	r3, [pc, #308]	; (800164c <HAL_DMA_Init+0x150>)
 8001516:	429a      	cmp	r2, r3
 8001518:	d80f      	bhi.n	800153a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	4b4b      	ldr	r3, [pc, #300]	; (8001650 <HAL_DMA_Init+0x154>)
 8001522:	4413      	add	r3, r2
 8001524:	4a4b      	ldr	r2, [pc, #300]	; (8001654 <HAL_DMA_Init+0x158>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	009a      	lsls	r2, r3, #2
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a48      	ldr	r2, [pc, #288]	; (8001658 <HAL_DMA_Init+0x15c>)
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
 8001538:	e00e      	b.n	8001558 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	4b46      	ldr	r3, [pc, #280]	; (800165c <HAL_DMA_Init+0x160>)
 8001542:	4413      	add	r3, r2
 8001544:	4a43      	ldr	r2, [pc, #268]	; (8001654 <HAL_DMA_Init+0x158>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	009a      	lsls	r2, r3, #2
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a42      	ldr	r2, [pc, #264]	; (8001660 <HAL_DMA_Init+0x164>)
 8001556:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2202      	movs	r2, #2
 800155c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800156e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001572:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800157c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001588:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001594:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4313      	orrs	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015b2:	d039      	beq.n	8001628 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	4a27      	ldr	r2, [pc, #156]	; (8001658 <HAL_DMA_Init+0x15c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d11a      	bne.n	80015f4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015be:	4b29      	ldr	r3, [pc, #164]	; (8001664 <HAL_DMA_Init+0x168>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f003 031c 	and.w	r3, r3, #28
 80015ca:	210f      	movs	r1, #15
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	4924      	ldr	r1, [pc, #144]	; (8001664 <HAL_DMA_Init+0x168>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <HAL_DMA_Init+0x168>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6859      	ldr	r1, [r3, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	f003 031c 	and.w	r3, r3, #28
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	491d      	ldr	r1, [pc, #116]	; (8001664 <HAL_DMA_Init+0x168>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]
 80015f2:	e019      	b.n	8001628 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015f4:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <HAL_DMA_Init+0x16c>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	f003 031c 	and.w	r3, r3, #28
 8001600:	210f      	movs	r1, #15
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	4917      	ldr	r1, [pc, #92]	; (8001668 <HAL_DMA_Init+0x16c>)
 800160a:	4013      	ands	r3, r2
 800160c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <HAL_DMA_Init+0x16c>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6859      	ldr	r1, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f003 031c 	and.w	r3, r3, #28
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	4911      	ldr	r1, [pc, #68]	; (8001668 <HAL_DMA_Init+0x16c>)
 8001624:	4313      	orrs	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40020407 	.word	0x40020407
 8001650:	bffdfff8 	.word	0xbffdfff8
 8001654:	cccccccd 	.word	0xcccccccd
 8001658:	40020000 	.word	0x40020000
 800165c:	bffdfbf8 	.word	0xbffdfbf8
 8001660:	40020400 	.word	0x40020400
 8001664:	400200a8 	.word	0x400200a8
 8001668:	400204a8 	.word	0x400204a8

0800166c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <HAL_DMA_Start_IT+0x20>
 8001688:	2302      	movs	r3, #2
 800168a:	e04b      	b.n	8001724 <HAL_DMA_Start_IT+0xb8>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d13a      	bne.n	8001716 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2202      	movs	r2, #2
 80016a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0201 	bic.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	68b9      	ldr	r1, [r7, #8]
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 f95f 	bl	8001988 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d008      	beq.n	80016e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 020e 	orr.w	r2, r2, #14
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	e00f      	b.n	8001704 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0204 	bic.w	r2, r2, #4
 80016f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 020a 	orr.w	r2, r2, #10
 8001702:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	e005      	b.n	8001722 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800171e:	2302      	movs	r3, #2
 8001720:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001722:	7dfb      	ldrb	r3, [r7, #23]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d008      	beq.n	8001756 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2204      	movs	r2, #4
 8001748:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e022      	b.n	800179c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 020e 	bic.w	r2, r2, #14
 8001764:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0201 	bic.w	r2, r2, #1
 8001774:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f003 021c 	and.w	r2, r3, #28
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	2101      	movs	r1, #1
 8001784:	fa01 f202 	lsl.w	r2, r1, r2
 8001788:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d005      	beq.n	80017cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2204      	movs	r2, #4
 80017c4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	e029      	b.n	8001820 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 020e 	bic.w	r2, r2, #14
 80017da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0201 	bic.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f0:	f003 021c 	and.w	r2, r3, #28
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	2101      	movs	r1, #1
 80017fa:	fa01 f202 	lsl.w	r2, r1, r2
 80017fe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	4798      	blx	r3
    }
  }
  return status;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f003 031c 	and.w	r3, r3, #28
 800184a:	2204      	movs	r2, #4
 800184c:	409a      	lsls	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4013      	ands	r3, r2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d026      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x7a>
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d021      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0320 	and.w	r3, r3, #32
 800186a:	2b00      	cmp	r3, #0
 800186c:	d107      	bne.n	800187e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0204 	bic.w	r2, r2, #4
 800187c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f003 021c 	and.w	r2, r3, #28
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	2104      	movs	r1, #4
 800188c:	fa01 f202 	lsl.w	r2, r1, r2
 8001890:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	2b00      	cmp	r3, #0
 8001898:	d071      	beq.n	800197e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80018a2:	e06c      	b.n	800197e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	f003 031c 	and.w	r3, r3, #28
 80018ac:	2202      	movs	r2, #2
 80018ae:	409a      	lsls	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d02e      	beq.n	8001916 <HAL_DMA_IRQHandler+0xec>
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d029      	beq.n	8001916 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0320 	and.w	r3, r3, #32
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10b      	bne.n	80018e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 020a 	bic.w	r2, r2, #10
 80018de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ec:	f003 021c 	and.w	r2, r3, #28
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	2102      	movs	r1, #2
 80018f6:	fa01 f202 	lsl.w	r2, r1, r2
 80018fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	2b00      	cmp	r3, #0
 800190a:	d038      	beq.n	800197e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001914:	e033      	b.n	800197e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f003 031c 	and.w	r3, r3, #28
 800191e:	2208      	movs	r2, #8
 8001920:	409a      	lsls	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d02a      	beq.n	8001980 <HAL_DMA_IRQHandler+0x156>
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d025      	beq.n	8001980 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 020e 	bic.w	r2, r2, #14
 8001942:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001948:	f003 021c 	and.w	r2, r3, #28
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	2101      	movs	r1, #1
 8001952:	fa01 f202 	lsl.w	r2, r1, r2
 8001956:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001972:	2b00      	cmp	r3, #0
 8001974:	d004      	beq.n	8001980 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800197e:	bf00      	nop
 8001980:	bf00      	nop
}
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f003 021c 	and.w	r2, r3, #28
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	2101      	movs	r1, #1
 80019a4:	fa01 f202 	lsl.w	r2, r1, r2
 80019a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b10      	cmp	r3, #16
 80019b8:	d108      	bne.n	80019cc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019ca:	e007      	b.n	80019dc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	60da      	str	r2, [r3, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f6:	e17f      	b.n	8001cf8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2101      	movs	r1, #1
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8171 	beq.w	8001cf2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d005      	beq.n	8001a28 <HAL_GPIO_Init+0x40>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d130      	bne.n	8001a8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a5e:	2201      	movs	r2, #1
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	091b      	lsrs	r3, r3, #4
 8001a74:	f003 0201 	and.w	r2, r3, #1
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d118      	bne.n	8001ac8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	08db      	lsrs	r3, r3, #3
 8001ab2:	f003 0201 	and.w	r2, r3, #1
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d017      	beq.n	8001b04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d123      	bne.n	8001b58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	08da      	lsrs	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3208      	adds	r2, #8
 8001b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	08da      	lsrs	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3208      	adds	r2, #8
 8001b52:	6939      	ldr	r1, [r7, #16]
 8001b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80ac 	beq.w	8001cf2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	4b5f      	ldr	r3, [pc, #380]	; (8001d18 <HAL_GPIO_Init+0x330>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9e:	4a5e      	ldr	r2, [pc, #376]	; (8001d18 <HAL_GPIO_Init+0x330>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ba6:	4b5c      	ldr	r3, [pc, #368]	; (8001d18 <HAL_GPIO_Init+0x330>)
 8001ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bb2:	4a5a      	ldr	r2, [pc, #360]	; (8001d1c <HAL_GPIO_Init+0x334>)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3302      	adds	r3, #2
 8001bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	220f      	movs	r2, #15
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bdc:	d025      	beq.n	8001c2a <HAL_GPIO_Init+0x242>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4f      	ldr	r2, [pc, #316]	; (8001d20 <HAL_GPIO_Init+0x338>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d01f      	beq.n	8001c26 <HAL_GPIO_Init+0x23e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4e      	ldr	r2, [pc, #312]	; (8001d24 <HAL_GPIO_Init+0x33c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d019      	beq.n	8001c22 <HAL_GPIO_Init+0x23a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4d      	ldr	r2, [pc, #308]	; (8001d28 <HAL_GPIO_Init+0x340>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0x236>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4c      	ldr	r2, [pc, #304]	; (8001d2c <HAL_GPIO_Init+0x344>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00d      	beq.n	8001c1a <HAL_GPIO_Init+0x232>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4b      	ldr	r2, [pc, #300]	; (8001d30 <HAL_GPIO_Init+0x348>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d007      	beq.n	8001c16 <HAL_GPIO_Init+0x22e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4a      	ldr	r2, [pc, #296]	; (8001d34 <HAL_GPIO_Init+0x34c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_GPIO_Init+0x22a>
 8001c0e:	2306      	movs	r3, #6
 8001c10:	e00c      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c12:	2307      	movs	r3, #7
 8001c14:	e00a      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c16:	2305      	movs	r3, #5
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c3c:	4937      	ldr	r1, [pc, #220]	; (8001d1c <HAL_GPIO_Init+0x334>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c4a:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c6e:	4a32      	ldr	r2, [pc, #200]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c74:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c98:	4a27      	ldr	r2, [pc, #156]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c9e:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cc2:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cec:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f47f ae78 	bne.w	80019f8 <HAL_GPIO_Init+0x10>
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	48000400 	.word	0x48000400
 8001d24:	48000800 	.word	0x48000800
 8001d28:	48000c00 	.word	0x48000c00
 8001d2c:	48001000 	.word	0x48001000
 8001d30:	48001400 	.word	0x48001400
 8001d34:	48001800 	.word	0x48001800
 8001d38:	40010400 	.word	0x40010400

08001d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d4c:	787b      	ldrb	r3, [r7, #1]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40007000 	.word	0x40007000

08001d88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d96:	d130      	bne.n	8001dfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d98:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da4:	d038      	beq.n	8001e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dae:	4a1e      	ldr	r2, [pc, #120]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2232      	movs	r2, #50	; 0x32
 8001dbc:	fb02 f303 	mul.w	r3, r2, r3
 8001dc0:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	0c9b      	lsrs	r3, r3, #18
 8001dc8:	3301      	adds	r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dcc:	e002      	b.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de0:	d102      	bne.n	8001de8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f2      	bne.n	8001dce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df4:	d110      	bne.n	8001e18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e00f      	b.n	8001e1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e06:	d007      	beq.n	8001e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e08:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e10:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	431bde83 	.word	0x431bde83

08001e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e3d4      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e46:	4ba1      	ldr	r3, [pc, #644]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e50:	4b9e      	ldr	r3, [pc, #632]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80e4 	beq.w	8002030 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <HAL_RCC_OscConfig+0x4a>
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b0c      	cmp	r3, #12
 8001e72:	f040 808b 	bne.w	8001f8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	f040 8087 	bne.w	8001f8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e7e:	4b93      	ldr	r3, [pc, #588]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_RCC_OscConfig+0x62>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e3ac      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1a      	ldr	r2, [r3, #32]
 8001e9a:	4b8c      	ldr	r3, [pc, #560]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d004      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x7c>
 8001ea6:	4b89      	ldr	r3, [pc, #548]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eae:	e005      	b.n	8001ebc <HAL_RCC_OscConfig+0x88>
 8001eb0:	4b86      	ldr	r3, [pc, #536]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d223      	bcs.n	8001f08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fd41 	bl	800294c <RCC_SetFlashLatencyFromMSIRange>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e38d      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed4:	4b7d      	ldr	r3, [pc, #500]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a7c      	ldr	r2, [pc, #496]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001eda:	f043 0308 	orr.w	r3, r3, #8
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b7a      	ldr	r3, [pc, #488]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4977      	ldr	r1, [pc, #476]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef2:	4b76      	ldr	r3, [pc, #472]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	4972      	ldr	r1, [pc, #456]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	604b      	str	r3, [r1, #4]
 8001f06:	e025      	b.n	8001f54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f08:	4b70      	ldr	r3, [pc, #448]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a6f      	ldr	r2, [pc, #444]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f0e:	f043 0308 	orr.w	r3, r3, #8
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b6d      	ldr	r3, [pc, #436]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	496a      	ldr	r1, [pc, #424]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f26:	4b69      	ldr	r3, [pc, #420]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	4965      	ldr	r1, [pc, #404]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d109      	bne.n	8001f54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fd01 	bl	800294c <RCC_SetFlashLatencyFromMSIRange>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e34d      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f54:	f000 fc36 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	4b5c      	ldr	r3, [pc, #368]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	495a      	ldr	r1, [pc, #360]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001f66:	5ccb      	ldrb	r3, [r1, r3]
 8001f68:	f003 031f 	and.w	r3, r3, #31
 8001f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f70:	4a58      	ldr	r2, [pc, #352]	; (80020d4 <HAL_RCC_OscConfig+0x2a0>)
 8001f72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f74:	4b58      	ldr	r3, [pc, #352]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff f92d 	bl	80011d8 <HAL_InitTick>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d052      	beq.n	800202e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	e331      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d032      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f94:	4b4d      	ldr	r3, [pc, #308]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a4c      	ldr	r2, [pc, #304]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fa0:	f7ff f96a 	bl	8001278 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fa8:	f7ff f966 	bl	8001278 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e31a      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fba:	4b44      	ldr	r3, [pc, #272]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc6:	4b41      	ldr	r3, [pc, #260]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a40      	ldr	r2, [pc, #256]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001fcc:	f043 0308 	orr.w	r3, r3, #8
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	4b3e      	ldr	r3, [pc, #248]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	493b      	ldr	r1, [pc, #236]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe4:	4b39      	ldr	r3, [pc, #228]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	4936      	ldr	r1, [pc, #216]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
 8001ff8:	e01a      	b.n	8002030 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ffa:	4b34      	ldr	r3, [pc, #208]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a33      	ldr	r2, [pc, #204]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002006:	f7ff f937 	bl	8001278 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800200e:	f7ff f933 	bl	8001278 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e2e7      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002020:	4b2a      	ldr	r3, [pc, #168]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x1da>
 800202c:	e000      	b.n	8002030 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800202e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d074      	beq.n	8002126 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b08      	cmp	r3, #8
 8002040:	d005      	beq.n	800204e <HAL_RCC_OscConfig+0x21a>
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2b0c      	cmp	r3, #12
 8002046:	d10e      	bne.n	8002066 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b03      	cmp	r3, #3
 800204c:	d10b      	bne.n	8002066 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204e:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d064      	beq.n	8002124 <HAL_RCC_OscConfig+0x2f0>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d160      	bne.n	8002124 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e2c4      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x24a>
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a15      	ldr	r2, [pc, #84]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	e01d      	b.n	80020ba <HAL_RCC_OscConfig+0x286>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002086:	d10c      	bne.n	80020a2 <HAL_RCC_OscConfig+0x26e>
 8002088:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0f      	ldr	r2, [pc, #60]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 800208e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 800209a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	e00b      	b.n	80020ba <HAL_RCC_OscConfig+0x286>
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a09      	ldr	r2, [pc, #36]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 80020a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a06      	ldr	r2, [pc, #24]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 80020b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01c      	beq.n	80020fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7ff f8d9 	bl	8001278 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c8:	e011      	b.n	80020ee <HAL_RCC_OscConfig+0x2ba>
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	08005f78 	.word	0x08005f78
 80020d4:	20000000 	.word	0x20000000
 80020d8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff f8cc 	bl	8001278 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e280      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ee:	4baf      	ldr	r3, [pc, #700]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x2a8>
 80020fa:	e014      	b.n	8002126 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7ff f8bc 	bl	8001278 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002104:	f7ff f8b8 	bl	8001278 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	; 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e26c      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002116:	4ba5      	ldr	r3, [pc, #660]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x2d0>
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d060      	beq.n	80021f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b04      	cmp	r3, #4
 8002136:	d005      	beq.n	8002144 <HAL_RCC_OscConfig+0x310>
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2b0c      	cmp	r3, #12
 800213c:	d119      	bne.n	8002172 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d116      	bne.n	8002172 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002144:	4b99      	ldr	r3, [pc, #612]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_OscConfig+0x328>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e249      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215c:	4b93      	ldr	r3, [pc, #588]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	061b      	lsls	r3, r3, #24
 800216a:	4990      	ldr	r1, [pc, #576]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002170:	e040      	b.n	80021f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d023      	beq.n	80021c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217a:	4b8c      	ldr	r3, [pc, #560]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a8b      	ldr	r2, [pc, #556]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7ff f877 	bl	8001278 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218e:	f7ff f873 	bl	8001278 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e227      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a0:	4b82      	ldr	r3, [pc, #520]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ac:	4b7f      	ldr	r3, [pc, #508]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	061b      	lsls	r3, r3, #24
 80021ba:	497c      	ldr	r1, [pc, #496]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
 80021c0:	e018      	b.n	80021f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c2:	4b7a      	ldr	r3, [pc, #488]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a79      	ldr	r2, [pc, #484]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80021c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ce:	f7ff f853 	bl	8001278 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d6:	f7ff f84f 	bl	8001278 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e203      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e8:	4b70      	ldr	r3, [pc, #448]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f0      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d03c      	beq.n	800227a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01c      	beq.n	8002242 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002208:	4b68      	ldr	r3, [pc, #416]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800220a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220e:	4a67      	ldr	r2, [pc, #412]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7ff f82e 	bl	8001278 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002220:	f7ff f82a 	bl	8001278 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1de      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002232:	4b5e      	ldr	r3, [pc, #376]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0ef      	beq.n	8002220 <HAL_RCC_OscConfig+0x3ec>
 8002240:	e01b      	b.n	800227a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002242:	4b5a      	ldr	r3, [pc, #360]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002248:	4a58      	ldr	r2, [pc, #352]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800224a:	f023 0301 	bic.w	r3, r3, #1
 800224e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002252:	f7ff f811 	bl	8001278 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225a:	f7ff f80d 	bl	8001278 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e1c1      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800226c:	4b4f      	ldr	r3, [pc, #316]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800226e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1ef      	bne.n	800225a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 80a6 	beq.w	80023d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002288:	2300      	movs	r3, #0
 800228a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800228c:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10d      	bne.n	80022b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002298:	4b44      	ldr	r3, [pc, #272]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	4a43      	ldr	r2, [pc, #268]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800229e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a2:	6593      	str	r3, [r2, #88]	; 0x58
 80022a4:	4b41      	ldr	r3, [pc, #260]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b0:	2301      	movs	r3, #1
 80022b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b4:	4b3e      	ldr	r3, [pc, #248]	; (80023b0 <HAL_RCC_OscConfig+0x57c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d118      	bne.n	80022f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022c0:	4b3b      	ldr	r3, [pc, #236]	; (80023b0 <HAL_RCC_OscConfig+0x57c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a3a      	ldr	r2, [pc, #232]	; (80023b0 <HAL_RCC_OscConfig+0x57c>)
 80022c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022cc:	f7fe ffd4 	bl	8001278 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d4:	f7fe ffd0 	bl	8001278 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e184      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e6:	4b32      	ldr	r3, [pc, #200]	; (80023b0 <HAL_RCC_OscConfig+0x57c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d108      	bne.n	800230c <HAL_RCC_OscConfig+0x4d8>
 80022fa:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002300:	4a2a      	ldr	r2, [pc, #168]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800230a:	e024      	b.n	8002356 <HAL_RCC_OscConfig+0x522>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b05      	cmp	r3, #5
 8002312:	d110      	bne.n	8002336 <HAL_RCC_OscConfig+0x502>
 8002314:	4b25      	ldr	r3, [pc, #148]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	4a24      	ldr	r2, [pc, #144]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800231c:	f043 0304 	orr.w	r3, r3, #4
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002324:	4b21      	ldr	r3, [pc, #132]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	4a20      	ldr	r2, [pc, #128]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002334:	e00f      	b.n	8002356 <HAL_RCC_OscConfig+0x522>
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233c:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800233e:	f023 0301 	bic.w	r3, r3, #1
 8002342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002346:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800234e:	f023 0304 	bic.w	r3, r3, #4
 8002352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d016      	beq.n	800238c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235e:	f7fe ff8b 	bl	8001278 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002364:	e00a      	b.n	800237c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f7fe ff87 	bl	8001278 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f241 3288 	movw	r2, #5000	; 0x1388
 8002374:	4293      	cmp	r3, r2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e139      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0ed      	beq.n	8002366 <HAL_RCC_OscConfig+0x532>
 800238a:	e01a      	b.n	80023c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7fe ff74 	bl	8001278 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002392:	e00f      	b.n	80023b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002394:	f7fe ff70 	bl	8001278 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d906      	bls.n	80023b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e122      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b4:	4b90      	ldr	r3, [pc, #576]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1e8      	bne.n	8002394 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c2:	7ffb      	ldrb	r3, [r7, #31]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d105      	bne.n	80023d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c8:	4b8b      	ldr	r3, [pc, #556]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	4a8a      	ldr	r2, [pc, #552]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80023ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8108 	beq.w	80025ee <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	f040 80d0 	bne.w	8002588 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023e8:	4b83      	ldr	r3, [pc, #524]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f003 0203 	and.w	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d130      	bne.n	800245e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	3b01      	subs	r3, #1
 8002408:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d127      	bne.n	800245e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002418:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d11f      	bne.n	800245e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002428:	2a07      	cmp	r2, #7
 800242a:	bf14      	ite	ne
 800242c:	2201      	movne	r2, #1
 800242e:	2200      	moveq	r2, #0
 8002430:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002432:	4293      	cmp	r3, r2
 8002434:	d113      	bne.n	800245e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002440:	085b      	lsrs	r3, r3, #1
 8002442:	3b01      	subs	r3, #1
 8002444:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d109      	bne.n	800245e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	085b      	lsrs	r3, r3, #1
 8002456:	3b01      	subs	r3, #1
 8002458:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d06e      	beq.n	800253c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b0c      	cmp	r3, #12
 8002462:	d069      	beq.n	8002538 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002464:	4b64      	ldr	r3, [pc, #400]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d105      	bne.n	800247c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002470:	4b61      	ldr	r3, [pc, #388]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0b7      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002480:	4b5d      	ldr	r3, [pc, #372]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a5c      	ldr	r2, [pc, #368]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 8002486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800248a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800248c:	f7fe fef4 	bl	8001278 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002494:	f7fe fef0 	bl	8001278 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e0a4      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a6:	4b54      	ldr	r3, [pc, #336]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b2:	4b51      	ldr	r3, [pc, #324]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	4b51      	ldr	r3, [pc, #324]	; (80025fc <HAL_RCC_OscConfig+0x7c8>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024c2:	3a01      	subs	r2, #1
 80024c4:	0112      	lsls	r2, r2, #4
 80024c6:	4311      	orrs	r1, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024cc:	0212      	lsls	r2, r2, #8
 80024ce:	4311      	orrs	r1, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024d4:	0852      	lsrs	r2, r2, #1
 80024d6:	3a01      	subs	r2, #1
 80024d8:	0552      	lsls	r2, r2, #21
 80024da:	4311      	orrs	r1, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024e0:	0852      	lsrs	r2, r2, #1
 80024e2:	3a01      	subs	r2, #1
 80024e4:	0652      	lsls	r2, r2, #25
 80024e6:	4311      	orrs	r1, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024ec:	0912      	lsrs	r2, r2, #4
 80024ee:	0452      	lsls	r2, r2, #17
 80024f0:	430a      	orrs	r2, r1
 80024f2:	4941      	ldr	r1, [pc, #260]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024f8:	4b3f      	ldr	r3, [pc, #252]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a3e      	ldr	r2, [pc, #248]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80024fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002502:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002504:	4b3c      	ldr	r3, [pc, #240]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a3b      	ldr	r2, [pc, #236]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 800250a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800250e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002510:	f7fe feb2 	bl	8001278 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002518:	f7fe feae 	bl	8001278 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e062      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800252a:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002536:	e05a      	b.n	80025ee <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e059      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253c:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d152      	bne.n	80025ee <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002548:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a2a      	ldr	r2, [pc, #168]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 800254e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002552:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002554:	4b28      	ldr	r3, [pc, #160]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4a27      	ldr	r2, [pc, #156]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 800255a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800255e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002560:	f7fe fe8a 	bl	8001278 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002568:	f7fe fe86 	bl	8001278 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e03a      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257a:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x734>
 8002586:	e032      	b.n	80025ee <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2b0c      	cmp	r3, #12
 800258c:	d02d      	beq.n	80025ea <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258e:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 8002594:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002598:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800259a:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d105      	bne.n	80025b2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80025ac:	f023 0303 	bic.w	r3, r3, #3
 80025b0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80025b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80025bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7fe fe59 	bl	8001278 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ca:	f7fe fe55 	bl	8001278 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e009      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f0      	bne.n	80025ca <HAL_RCC_OscConfig+0x796>
 80025e8:	e001      	b.n	80025ee <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3720      	adds	r7, #32
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	f99d808c 	.word	0xf99d808c

08002600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0c8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002614:	4b66      	ldr	r3, [pc, #408]	; (80027b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d910      	bls.n	8002644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 0207 	bic.w	r2, r3, #7
 800262a:	4961      	ldr	r1, [pc, #388]	; (80027b0 <HAL_RCC_ClockConfig+0x1b0>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b5f      	ldr	r3, [pc, #380]	; (80027b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0b0      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d04c      	beq.n	80026ea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d107      	bne.n	8002668 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002658:	4b56      	ldr	r3, [pc, #344]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d121      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e09e      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d107      	bne.n	8002680 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002670:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d115      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e092      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d107      	bne.n	8002698 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002688:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e086      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002698:	4b46      	ldr	r3, [pc, #280]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e07e      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026a8:	4b42      	ldr	r3, [pc, #264]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f023 0203 	bic.w	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	493f      	ldr	r1, [pc, #252]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ba:	f7fe fddd 	bl	8001278 <HAL_GetTick>
 80026be:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c0:	e00a      	b.n	80026d8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c2:	f7fe fdd9 	bl	8001278 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e066      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d8:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 020c 	and.w	r2, r3, #12
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d1eb      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f6:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002704:	4313      	orrs	r3, r2
 8002706:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002708:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <HAL_RCC_ClockConfig+0x1b0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d210      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 0207 	bic.w	r2, r3, #7
 800271e:	4924      	ldr	r1, [pc, #144]	; (80027b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e036      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4918      	ldr	r1, [pc, #96]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002762:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002776:	f000 f825 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 800277a:	4602      	mov	r2, r0
 800277c:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	490c      	ldr	r1, [pc, #48]	; (80027b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002788:	5ccb      	ldrb	r3, [r1, r3]
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	fa22 f303 	lsr.w	r3, r2, r3
 8002792:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fd1c 	bl	80011d8 <HAL_InitTick>
 80027a0:	4603      	mov	r3, r0
 80027a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80027a4:	7afb      	ldrb	r3, [r7, #11]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40022000 	.word	0x40022000
 80027b4:	40021000 	.word	0x40021000
 80027b8:	08005f78 	.word	0x08005f78
 80027bc:	20000000 	.word	0x20000000
 80027c0:	20000004 	.word	0x20000004

080027c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d2:	4b3e      	ldr	r3, [pc, #248]	; (80028cc <HAL_RCC_GetSysClockFreq+0x108>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027dc:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <HAL_RCC_GetSysClockFreq+0x108>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x34>
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d121      	bne.n	8002836 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d11e      	bne.n	8002836 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027f8:	4b34      	ldr	r3, [pc, #208]	; (80028cc <HAL_RCC_GetSysClockFreq+0x108>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d107      	bne.n	8002814 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002804:	4b31      	ldr	r3, [pc, #196]	; (80028cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	e005      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002814:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002820:	4a2b      	ldr	r2, [pc, #172]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002828:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10d      	bne.n	800284c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002834:	e00a      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b04      	cmp	r3, #4
 800283a:	d102      	bne.n	8002842 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800283c:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	e004      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b08      	cmp	r3, #8
 8002846:	d101      	bne.n	800284c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002848:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800284a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d134      	bne.n	80028bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d003      	beq.n	800286a <HAL_RCC_GetSysClockFreq+0xa6>
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b03      	cmp	r3, #3
 8002866:	d003      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0xac>
 8002868:	e005      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800286a:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800286c:	617b      	str	r3, [r7, #20]
      break;
 800286e:	e005      	b.n	800287c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002870:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002872:	617b      	str	r3, [r7, #20]
      break;
 8002874:	e002      	b.n	800287c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	617b      	str	r3, [r7, #20]
      break;
 800287a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800287c:	4b13      	ldr	r3, [pc, #76]	; (80028cc <HAL_RCC_GetSysClockFreq+0x108>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	3301      	adds	r3, #1
 8002888:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_RCC_GetSysClockFreq+0x108>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	fb02 f203 	mul.w	r2, r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_RCC_GetSysClockFreq+0x108>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	0e5b      	lsrs	r3, r3, #25
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	3301      	adds	r3, #1
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028bc:	69bb      	ldr	r3, [r7, #24]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3724      	adds	r7, #36	; 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08005f90 	.word	0x08005f90
 80028d4:	00f42400 	.word	0x00f42400
 80028d8:	007a1200 	.word	0x007a1200

080028dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000000 	.word	0x20000000

080028f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028f8:	f7ff fff0 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 80028fc:	4602      	mov	r2, r0
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	4904      	ldr	r1, [pc, #16]	; (800291c <HAL_RCC_GetPCLK1Freq+0x28>)
 800290a:	5ccb      	ldrb	r3, [r1, r3]
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	08005f88 	.word	0x08005f88

08002920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002924:	f7ff ffda 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_RCC_GetPCLK2Freq+0x24>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	0adb      	lsrs	r3, r3, #11
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4904      	ldr	r1, [pc, #16]	; (8002948 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000
 8002948:	08005f88 	.word	0x08005f88

0800294c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002958:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002964:	f7ff fa02 	bl	8001d6c <HAL_PWREx_GetVoltageRange>
 8002968:	6178      	str	r0, [r7, #20]
 800296a:	e014      	b.n	8002996 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800296c:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	4a24      	ldr	r2, [pc, #144]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002976:	6593      	str	r3, [r2, #88]	; 0x58
 8002978:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002984:	f7ff f9f2 	bl	8001d6c <HAL_PWREx_GetVoltageRange>
 8002988:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800298a:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298e:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002994:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800299c:	d10b      	bne.n	80029b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b80      	cmp	r3, #128	; 0x80
 80029a2:	d919      	bls.n	80029d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2ba0      	cmp	r3, #160	; 0xa0
 80029a8:	d902      	bls.n	80029b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029aa:	2302      	movs	r3, #2
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	e013      	b.n	80029d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029b0:	2301      	movs	r3, #1
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	e010      	b.n	80029d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b80      	cmp	r3, #128	; 0x80
 80029ba:	d902      	bls.n	80029c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029bc:	2303      	movs	r3, #3
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	e00a      	b.n	80029d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b80      	cmp	r3, #128	; 0x80
 80029c6:	d102      	bne.n	80029ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029c8:	2302      	movs	r3, #2
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	e004      	b.n	80029d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b70      	cmp	r3, #112	; 0x70
 80029d2:	d101      	bne.n	80029d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029d4:	2301      	movs	r3, #1
 80029d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 0207 	bic.w	r2, r3, #7
 80029e0:	4909      	ldr	r1, [pc, #36]	; (8002a08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029e8:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d001      	beq.n	80029fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40022000 	.word	0x40022000

08002a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a14:	2300      	movs	r3, #0
 8002a16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a18:	2300      	movs	r3, #0
 8002a1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d041      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a30:	d02a      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a36:	d824      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a3c:	d008      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a42:	d81e      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a4c:	d010      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a4e:	e018      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a50:	4b86      	ldr	r3, [pc, #536]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4a85      	ldr	r2, [pc, #532]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a5c:	e015      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3304      	adds	r3, #4
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fabb 	bl	8002fe0 <RCCEx_PLLSAI1_Config>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a6e:	e00c      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3320      	adds	r3, #32
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fba6 	bl	80031c8 <RCCEx_PLLSAI2_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a80:	e003      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	74fb      	strb	r3, [r7, #19]
      break;
 8002a86:	e000      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a8a:	7cfb      	ldrb	r3, [r7, #19]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a90:	4b76      	ldr	r3, [pc, #472]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a9e:	4973      	ldr	r1, [pc, #460]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002aa6:	e001      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d041      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002abc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ac0:	d02a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ac2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ac6:	d824      	bhi.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ac8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002acc:	d008      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ace:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ad2:	d81e      	bhi.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00a      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002adc:	d010      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ade:	e018      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ae0:	4b62      	ldr	r3, [pc, #392]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a61      	ldr	r2, [pc, #388]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002aec:	e015      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3304      	adds	r3, #4
 8002af2:	2100      	movs	r1, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fa73 	bl	8002fe0 <RCCEx_PLLSAI1_Config>
 8002afa:	4603      	mov	r3, r0
 8002afc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002afe:	e00c      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3320      	adds	r3, #32
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 fb5e 	bl	80031c8 <RCCEx_PLLSAI2_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b10:	e003      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	74fb      	strb	r3, [r7, #19]
      break;
 8002b16:	e000      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b1a:	7cfb      	ldrb	r3, [r7, #19]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10b      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b20:	4b52      	ldr	r3, [pc, #328]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b2e:	494f      	ldr	r1, [pc, #316]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b36:	e001      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a0 	beq.w	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b4e:	4b47      	ldr	r3, [pc, #284]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00d      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b64:	4b41      	ldr	r3, [pc, #260]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	4a40      	ldr	r2, [pc, #256]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b70:	4b3e      	ldr	r3, [pc, #248]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b80:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a3a      	ldr	r2, [pc, #232]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b8c:	f7fe fb74 	bl	8001278 <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b92:	e009      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b94:	f7fe fb70 	bl	8001278 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d902      	bls.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	74fb      	strb	r3, [r7, #19]
        break;
 8002ba6:	e005      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ba8:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0ef      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d15c      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bba:	4b2c      	ldr	r3, [pc, #176]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01f      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d019      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bd8:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002be4:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bea:	4a20      	ldr	r2, [pc, #128]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf4:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfa:	4a1c      	ldr	r2, [pc, #112]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c04:	4a19      	ldr	r2, [pc, #100]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d016      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c16:	f7fe fb2f 	bl	8001278 <HAL_GetTick>
 8002c1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c1c:	e00b      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1e:	f7fe fb2b 	bl	8001278 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d902      	bls.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	74fb      	strb	r3, [r7, #19]
            break;
 8002c34:	e006      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0ec      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c44:	7cfb      	ldrb	r3, [r7, #19]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c4a:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c5a:	4904      	ldr	r1, [pc, #16]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c62:	e009      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c64:	7cfb      	ldrb	r3, [r7, #19]
 8002c66:	74bb      	strb	r3, [r7, #18]
 8002c68:	e006      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c78:	7c7b      	ldrb	r3, [r7, #17]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d105      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7e:	4b9e      	ldr	r3, [pc, #632]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	4a9d      	ldr	r2, [pc, #628]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c96:	4b98      	ldr	r3, [pc, #608]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	f023 0203 	bic.w	r2, r3, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	4994      	ldr	r1, [pc, #592]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cb8:	4b8f      	ldr	r3, [pc, #572]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbe:	f023 020c 	bic.w	r2, r3, #12
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc6:	498c      	ldr	r1, [pc, #560]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cda:	4b87      	ldr	r3, [pc, #540]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	4983      	ldr	r1, [pc, #524]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cfc:	4b7e      	ldr	r3, [pc, #504]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	497b      	ldr	r1, [pc, #492]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d1e:	4b76      	ldr	r3, [pc, #472]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2c:	4972      	ldr	r1, [pc, #456]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d40:	4b6d      	ldr	r3, [pc, #436]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4e:	496a      	ldr	r1, [pc, #424]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d62:	4b65      	ldr	r3, [pc, #404]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	4961      	ldr	r1, [pc, #388]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d84:	4b5c      	ldr	r3, [pc, #368]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d92:	4959      	ldr	r1, [pc, #356]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002da6:	4b54      	ldr	r3, [pc, #336]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db4:	4950      	ldr	r1, [pc, #320]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dc8:	4b4b      	ldr	r3, [pc, #300]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	4948      	ldr	r1, [pc, #288]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dea:	4b43      	ldr	r3, [pc, #268]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df8:	493f      	ldr	r1, [pc, #252]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d028      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e0c:	4b3a      	ldr	r3, [pc, #232]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e1a:	4937      	ldr	r1, [pc, #220]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e2c:	4b32      	ldr	r3, [pc, #200]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4a31      	ldr	r2, [pc, #196]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e36:	60d3      	str	r3, [r2, #12]
 8002e38:	e011      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e42:	d10c      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3304      	adds	r3, #4
 8002e48:	2101      	movs	r1, #1
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f8c8 	bl	8002fe0 <RCCEx_PLLSAI1_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e54:	7cfb      	ldrb	r3, [r7, #19]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002e5a:	7cfb      	ldrb	r3, [r7, #19]
 8002e5c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d028      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e6a:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	491f      	ldr	r1, [pc, #124]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e88:	d106      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	4a1a      	ldr	r2, [pc, #104]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e94:	60d3      	str	r3, [r2, #12]
 8002e96:	e011      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 f899 	bl	8002fe0 <RCCEx_PLLSAI1_Config>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eb2:	7cfb      	ldrb	r3, [r7, #19]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d02b      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ece:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed6:	4908      	ldr	r1, [pc, #32]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ee6:	d109      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4a02      	ldr	r2, [pc, #8]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ef2:	60d3      	str	r3, [r2, #12]
 8002ef4:	e014      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 f867 	bl	8002fe0 <RCCEx_PLLSAI1_Config>
 8002f12:	4603      	mov	r3, r0
 8002f14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f16:	7cfb      	ldrb	r3, [r7, #19]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f1c:	7cfb      	ldrb	r3, [r7, #19]
 8002f1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d02f      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f2c:	4b2b      	ldr	r3, [pc, #172]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f3a:	4928      	ldr	r1, [pc, #160]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f4a:	d10d      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	2102      	movs	r1, #2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f844 	bl	8002fe0 <RCCEx_PLLSAI1_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f5c:	7cfb      	ldrb	r3, [r7, #19]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d014      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	74bb      	strb	r3, [r7, #18]
 8002f66:	e011      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3320      	adds	r3, #32
 8002f76:	2102      	movs	r1, #2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 f925 	bl	80031c8 <RCCEx_PLLSAI2_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f82:	7cfb      	ldrb	r3, [r7, #19]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f98:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa6:	490d      	ldr	r1, [pc, #52]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00b      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fca:	4904      	ldr	r1, [pc, #16]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fd2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40021000 	.word	0x40021000

08002fe0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fee:	4b75      	ldr	r3, [pc, #468]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d018      	beq.n	800302c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ffa:	4b72      	ldr	r3, [pc, #456]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0203 	and.w	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d10d      	bne.n	8003026 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
       ||
 800300e:	2b00      	cmp	r3, #0
 8003010:	d009      	beq.n	8003026 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003012:	4b6c      	ldr	r3, [pc, #432]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	091b      	lsrs	r3, r3, #4
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
       ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d047      	beq.n	80030b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
 800302a:	e044      	b.n	80030b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b03      	cmp	r3, #3
 8003032:	d018      	beq.n	8003066 <RCCEx_PLLSAI1_Config+0x86>
 8003034:	2b03      	cmp	r3, #3
 8003036:	d825      	bhi.n	8003084 <RCCEx_PLLSAI1_Config+0xa4>
 8003038:	2b01      	cmp	r3, #1
 800303a:	d002      	beq.n	8003042 <RCCEx_PLLSAI1_Config+0x62>
 800303c:	2b02      	cmp	r3, #2
 800303e:	d009      	beq.n	8003054 <RCCEx_PLLSAI1_Config+0x74>
 8003040:	e020      	b.n	8003084 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003042:	4b60      	ldr	r3, [pc, #384]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d11d      	bne.n	800308a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003052:	e01a      	b.n	800308a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003054:	4b5b      	ldr	r3, [pc, #364]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305c:	2b00      	cmp	r3, #0
 800305e:	d116      	bne.n	800308e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003064:	e013      	b.n	800308e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003066:	4b57      	ldr	r3, [pc, #348]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10f      	bne.n	8003092 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003072:	4b54      	ldr	r3, [pc, #336]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003082:	e006      	b.n	8003092 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
      break;
 8003088:	e004      	b.n	8003094 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800308a:	bf00      	nop
 800308c:	e002      	b.n	8003094 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800308e:	bf00      	nop
 8003090:	e000      	b.n	8003094 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003092:	bf00      	nop
    }

    if(status == HAL_OK)
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10d      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800309a:	4b4a      	ldr	r3, [pc, #296]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6819      	ldr	r1, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	430b      	orrs	r3, r1
 80030b0:	4944      	ldr	r1, [pc, #272]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d17d      	bne.n	80031b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030bc:	4b41      	ldr	r3, [pc, #260]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a40      	ldr	r2, [pc, #256]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c8:	f7fe f8d6 	bl	8001278 <HAL_GetTick>
 80030cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030ce:	e009      	b.n	80030e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030d0:	f7fe f8d2 	bl	8001278 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d902      	bls.n	80030e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	73fb      	strb	r3, [r7, #15]
        break;
 80030e2:	e005      	b.n	80030f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030e4:	4b37      	ldr	r3, [pc, #220]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1ef      	bne.n	80030d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d160      	bne.n	80031b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d111      	bne.n	8003120 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030fc:	4b31      	ldr	r3, [pc, #196]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6892      	ldr	r2, [r2, #8]
 800310c:	0211      	lsls	r1, r2, #8
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68d2      	ldr	r2, [r2, #12]
 8003112:	0912      	lsrs	r2, r2, #4
 8003114:	0452      	lsls	r2, r2, #17
 8003116:	430a      	orrs	r2, r1
 8003118:	492a      	ldr	r1, [pc, #168]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800311a:	4313      	orrs	r3, r2
 800311c:	610b      	str	r3, [r1, #16]
 800311e:	e027      	b.n	8003170 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d112      	bne.n	800314c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003126:	4b27      	ldr	r3, [pc, #156]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800312e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6892      	ldr	r2, [r2, #8]
 8003136:	0211      	lsls	r1, r2, #8
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6912      	ldr	r2, [r2, #16]
 800313c:	0852      	lsrs	r2, r2, #1
 800313e:	3a01      	subs	r2, #1
 8003140:	0552      	lsls	r2, r2, #21
 8003142:	430a      	orrs	r2, r1
 8003144:	491f      	ldr	r1, [pc, #124]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003146:	4313      	orrs	r3, r2
 8003148:	610b      	str	r3, [r1, #16]
 800314a:	e011      	b.n	8003170 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800314c:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003154:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6892      	ldr	r2, [r2, #8]
 800315c:	0211      	lsls	r1, r2, #8
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6952      	ldr	r2, [r2, #20]
 8003162:	0852      	lsrs	r2, r2, #1
 8003164:	3a01      	subs	r2, #1
 8003166:	0652      	lsls	r2, r2, #25
 8003168:	430a      	orrs	r2, r1
 800316a:	4916      	ldr	r1, [pc, #88]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800316c:	4313      	orrs	r3, r2
 800316e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003170:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003176:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800317a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317c:	f7fe f87c 	bl	8001278 <HAL_GetTick>
 8003180:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003182:	e009      	b.n	8003198 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003184:	f7fe f878 	bl	8001278 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d902      	bls.n	8003198 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	73fb      	strb	r3, [r7, #15]
          break;
 8003196:	e005      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0ef      	beq.n	8003184 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ac:	691a      	ldr	r2, [r3, #16]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	4904      	ldr	r1, [pc, #16]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000

080031c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031d6:	4b6a      	ldr	r3, [pc, #424]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d018      	beq.n	8003214 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031e2:	4b67      	ldr	r3, [pc, #412]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0203 	and.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d10d      	bne.n	800320e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
       ||
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d009      	beq.n	800320e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80031fa:	4b61      	ldr	r3, [pc, #388]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
       ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d047      	beq.n	800329e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
 8003212:	e044      	b.n	800329e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d018      	beq.n	800324e <RCCEx_PLLSAI2_Config+0x86>
 800321c:	2b03      	cmp	r3, #3
 800321e:	d825      	bhi.n	800326c <RCCEx_PLLSAI2_Config+0xa4>
 8003220:	2b01      	cmp	r3, #1
 8003222:	d002      	beq.n	800322a <RCCEx_PLLSAI2_Config+0x62>
 8003224:	2b02      	cmp	r3, #2
 8003226:	d009      	beq.n	800323c <RCCEx_PLLSAI2_Config+0x74>
 8003228:	e020      	b.n	800326c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800322a:	4b55      	ldr	r3, [pc, #340]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d11d      	bne.n	8003272 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800323a:	e01a      	b.n	8003272 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800323c:	4b50      	ldr	r3, [pc, #320]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	2b00      	cmp	r3, #0
 8003246:	d116      	bne.n	8003276 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800324c:	e013      	b.n	8003276 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800324e:	4b4c      	ldr	r3, [pc, #304]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10f      	bne.n	800327a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800325a:	4b49      	ldr	r3, [pc, #292]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800326a:	e006      	b.n	800327a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
      break;
 8003270:	e004      	b.n	800327c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003272:	bf00      	nop
 8003274:	e002      	b.n	800327c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003276:	bf00      	nop
 8003278:	e000      	b.n	800327c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800327a:	bf00      	nop
    }

    if(status == HAL_OK)
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10d      	bne.n	800329e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003282:	4b3f      	ldr	r3, [pc, #252]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6819      	ldr	r1, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	3b01      	subs	r3, #1
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	430b      	orrs	r3, r1
 8003298:	4939      	ldr	r1, [pc, #228]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 800329a:	4313      	orrs	r3, r2
 800329c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d167      	bne.n	8003374 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032a4:	4b36      	ldr	r3, [pc, #216]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a35      	ldr	r2, [pc, #212]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b0:	f7fd ffe2 	bl	8001278 <HAL_GetTick>
 80032b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032b6:	e009      	b.n	80032cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032b8:	f7fd ffde 	bl	8001278 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d902      	bls.n	80032cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	73fb      	strb	r3, [r7, #15]
        break;
 80032ca:	e005      	b.n	80032d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032cc:	4b2c      	ldr	r3, [pc, #176]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1ef      	bne.n	80032b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d14a      	bne.n	8003374 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d111      	bne.n	8003308 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032e4:	4b26      	ldr	r3, [pc, #152]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6892      	ldr	r2, [r2, #8]
 80032f4:	0211      	lsls	r1, r2, #8
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	68d2      	ldr	r2, [r2, #12]
 80032fa:	0912      	lsrs	r2, r2, #4
 80032fc:	0452      	lsls	r2, r2, #17
 80032fe:	430a      	orrs	r2, r1
 8003300:	491f      	ldr	r1, [pc, #124]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003302:	4313      	orrs	r3, r2
 8003304:	614b      	str	r3, [r1, #20]
 8003306:	e011      	b.n	800332c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003308:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003310:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6892      	ldr	r2, [r2, #8]
 8003318:	0211      	lsls	r1, r2, #8
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6912      	ldr	r2, [r2, #16]
 800331e:	0852      	lsrs	r2, r2, #1
 8003320:	3a01      	subs	r2, #1
 8003322:	0652      	lsls	r2, r2, #25
 8003324:	430a      	orrs	r2, r1
 8003326:	4916      	ldr	r1, [pc, #88]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003328:	4313      	orrs	r3, r2
 800332a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800332c:	4b14      	ldr	r3, [pc, #80]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a13      	ldr	r2, [pc, #76]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003336:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fd ff9e 	bl	8001278 <HAL_GetTick>
 800333c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800333e:	e009      	b.n	8003354 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003340:	f7fd ff9a 	bl	8001278 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d902      	bls.n	8003354 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	73fb      	strb	r3, [r7, #15]
          break;
 8003352:	e005      	b.n	8003360 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0ef      	beq.n	8003340 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	4904      	ldr	r1, [pc, #16]	; (8003380 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003370:	4313      	orrs	r3, r2
 8003372:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003374:	7bfb      	ldrb	r3, [r7, #15]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40021000 	.word	0x40021000

08003384 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e040      	b.n	8003418 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fd fcde 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2224      	movs	r2, #36	; 0x24
 80033b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0201 	bic.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fc22 	bl	8003c0c <UART_SetConfig>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e022      	b.n	8003418 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fea0 	bl	8004120 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 ff27 	bl	8004264 <UART_CheckIdleState>
 8003416:	4603      	mov	r3, r0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08a      	sub	sp, #40	; 0x28
 8003424:	af02      	add	r7, sp, #8
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003434:	2b20      	cmp	r3, #32
 8003436:	f040 8082 	bne.w	800353e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <HAL_UART_Transmit+0x26>
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e07a      	b.n	8003540 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_UART_Transmit+0x38>
 8003454:	2302      	movs	r3, #2
 8003456:	e073      	b.n	8003540 <HAL_UART_Transmit+0x120>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2221      	movs	r2, #33	; 0x21
 800346c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800346e:	f7fd ff03 	bl	8001278 <HAL_GetTick>
 8003472:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	88fa      	ldrh	r2, [r7, #6]
 8003478:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	88fa      	ldrh	r2, [r7, #6]
 8003480:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348c:	d108      	bne.n	80034a0 <HAL_UART_Transmit+0x80>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d104      	bne.n	80034a0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	e003      	b.n	80034a8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80034b0:	e02d      	b.n	800350e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2180      	movs	r1, #128	; 0x80
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 ff1a 	bl	80042f6 <UART_WaitOnFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e039      	b.n	8003540 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10b      	bne.n	80034ea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	881a      	ldrh	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034de:	b292      	uxth	r2, r2
 80034e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	3302      	adds	r3, #2
 80034e6:	61bb      	str	r3, [r7, #24]
 80034e8:	e008      	b.n	80034fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	781a      	ldrb	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	b292      	uxth	r2, r2
 80034f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3301      	adds	r3, #1
 80034fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1cb      	bne.n	80034b2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2200      	movs	r2, #0
 8003522:	2140      	movs	r1, #64	; 0x40
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 fee6 	bl	80042f6 <UART_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e005      	b.n	8003540 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	e000      	b.n	8003540 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800353e:	2302      	movs	r3, #2
  }
}
 8003540:	4618      	mov	r0, r3
 8003542:	3720      	adds	r7, #32
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	4613      	mov	r3, r2
 8003554:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800355a:	2b20      	cmp	r3, #32
 800355c:	d142      	bne.n	80035e4 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <HAL_UART_Receive_DMA+0x22>
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e03b      	b.n	80035e6 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_UART_Receive_DMA+0x34>
 8003578:	2302      	movs	r3, #2
 800357a:	e034      	b.n	80035e6 <HAL_UART_Receive_DMA+0x9e>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <HAL_UART_Receive_DMA+0xa8>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d01f      	beq.n	80035d4 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d018      	beq.n	80035d4 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	e853 3f00 	ldrex	r3, [r3]
 80035ae:	613b      	str	r3, [r7, #16]
   return(result);
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	623b      	str	r3, [r7, #32]
 80035c2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c4:	69f9      	ldr	r1, [r7, #28]
 80035c6:	6a3a      	ldr	r2, [r7, #32]
 80035c8:	e841 2300 	strex	r3, r2, [r1]
 80035cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e6      	bne.n	80035a2 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	461a      	mov	r2, r3
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 ff50 	bl	8004480 <UART_Start_Receive_DMA>
 80035e0:	4603      	mov	r3, r0
 80035e2:	e000      	b.n	80035e6 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
  }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3728      	adds	r7, #40	; 0x28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40008000 	.word	0x40008000

080035f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b0ba      	sub	sp, #232	; 0xe8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800361a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800361e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003622:	4013      	ands	r3, r2
 8003624:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003628:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d115      	bne.n	800365c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00f      	beq.n	800365c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800363c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d009      	beq.n	800365c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 82a6 	beq.w	8003b9e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	4798      	blx	r3
      }
      return;
 800365a:	e2a0      	b.n	8003b9e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800365c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8117 	beq.w	8003894 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003672:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003676:	4b85      	ldr	r3, [pc, #532]	; (800388c <HAL_UART_IRQHandler+0x298>)
 8003678:	4013      	ands	r3, r2
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 810a 	beq.w	8003894 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d011      	beq.n	80036b0 <HAL_UART_IRQHandler+0xbc>
 800368c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00b      	beq.n	80036b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2201      	movs	r2, #1
 800369e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a6:	f043 0201 	orr.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d011      	beq.n	80036e0 <HAL_UART_IRQHandler+0xec>
 80036bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00b      	beq.n	80036e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2202      	movs	r2, #2
 80036ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036d6:	f043 0204 	orr.w	r2, r3, #4
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d011      	beq.n	8003710 <HAL_UART_IRQHandler+0x11c>
 80036ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00b      	beq.n	8003710 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2204      	movs	r2, #4
 80036fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003706:	f043 0202 	orr.w	r2, r3, #2
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d017      	beq.n	800374c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800371c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d105      	bne.n	8003734 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800372c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00b      	beq.n	800374c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2208      	movs	r2, #8
 800373a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003742:	f043 0208 	orr.w	r2, r3, #8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800374c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003754:	2b00      	cmp	r3, #0
 8003756:	d012      	beq.n	800377e <HAL_UART_IRQHandler+0x18a>
 8003758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800375c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00c      	beq.n	800377e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800376c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 820c 	beq.w	8003ba2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00d      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c6:	2b40      	cmp	r3, #64	; 0x40
 80037c8:	d005      	beq.n	80037d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d04f      	beq.n	8003876 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 ff1e 	bl	8004618 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d141      	bne.n	800386e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3308      	adds	r3, #8
 80037f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003800:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3308      	adds	r3, #8
 8003812:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003816:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800381a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003822:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800382e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1d9      	bne.n	80037ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	2b00      	cmp	r3, #0
 800383c:	d013      	beq.n	8003866 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	4a13      	ldr	r2, [pc, #76]	; (8003890 <HAL_UART_IRQHandler+0x29c>)
 8003844:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd ffac 	bl	80017a8 <HAL_DMA_Abort_IT>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d017      	beq.n	8003886 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003860:	4610      	mov	r0, r2
 8003862:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003864:	e00f      	b.n	8003886 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f9ba 	bl	8003be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386c:	e00b      	b.n	8003886 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f9b6 	bl	8003be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003874:	e007      	b.n	8003886 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f9b2 	bl	8003be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003884:	e18d      	b.n	8003ba2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003886:	bf00      	nop
    return;
 8003888:	e18b      	b.n	8003ba2 <HAL_UART_IRQHandler+0x5ae>
 800388a:	bf00      	nop
 800388c:	04000120 	.word	0x04000120
 8003890:	080048b7 	.word	0x080048b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003898:	2b01      	cmp	r3, #1
 800389a:	f040 8146 	bne.w	8003b2a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 813f 	beq.w	8003b2a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8138 	beq.w	8003b2a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2210      	movs	r2, #16
 80038c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	f040 80b4 	bne.w	8003a3a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 815f 	beq.w	8003ba6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80038ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038f2:	429a      	cmp	r2, r3
 80038f4:	f080 8157 	bcs.w	8003ba6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	f040 8085 	bne.w	8003a1e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003928:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800392c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003930:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800393e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003942:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800394a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003956:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1da      	bne.n	8003914 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3308      	adds	r3, #8
 8003964:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003968:	e853 3f00 	ldrex	r3, [r3]
 800396c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800396e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3308      	adds	r3, #8
 800397e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003982:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003986:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800398a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e1      	bne.n	800395e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3308      	adds	r3, #8
 80039a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039c6:	e841 2300 	strex	r3, r2, [r1]
 80039ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1e3      	bne.n	800399a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ee:	f023 0310 	bic.w	r3, r3, #16
 80039f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a00:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e4      	bne.n	80039de <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fd fe87 	bl	800172c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	4619      	mov	r1, r3
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f8de 	bl	8003bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a38:	e0b5      	b.n	8003ba6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 80a7 	beq.w	8003baa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003a5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80a2 	beq.w	8003baa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a88:	647b      	str	r3, [r7, #68]	; 0x44
 8003a8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a90:	e841 2300 	strex	r3, r2, [r1]
 8003a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e4      	bne.n	8003a66 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	623b      	str	r3, [r7, #32]
   return(result);
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3308      	adds	r3, #8
 8003abc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ac0:	633a      	str	r2, [r7, #48]	; 0x30
 8003ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e3      	bne.n	8003a9c <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	e853 3f00 	ldrex	r3, [r3]
 8003af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0310 	bic.w	r3, r3, #16
 8003afa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	69b9      	ldr	r1, [r7, #24]
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	617b      	str	r3, [r7, #20]
   return(result);
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e4      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b20:	4619      	mov	r1, r3
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f866 	bl	8003bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b28:	e03f      	b.n	8003baa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00e      	beq.n	8003b54 <HAL_UART_IRQHandler+0x560>
 8003b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fef2 	bl	8004936 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b52:	e02d      	b.n	8003bb0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00e      	beq.n	8003b7e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01c      	beq.n	8003bae <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	4798      	blx	r3
    }
    return;
 8003b7c:	e017      	b.n	8003bae <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d012      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x5bc>
 8003b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00c      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fea3 	bl	80048e2 <UART_EndTransmit_IT>
    return;
 8003b9c:	e008      	b.n	8003bb0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003b9e:	bf00      	nop
 8003ba0:	e006      	b.n	8003bb0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003ba2:	bf00      	nop
 8003ba4:	e004      	b.n	8003bb0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003ba6:	bf00      	nop
 8003ba8:	e002      	b.n	8003bb0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003baa:	bf00      	nop
 8003bac:	e000      	b.n	8003bb0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003bae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003bb0:	37e8      	adds	r7, #232	; 0xe8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop

08003bb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c0c:	b5b0      	push	{r4, r5, r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4bad      	ldr	r3, [pc, #692]	; (8003eec <UART_SetConfig+0x2e0>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	69f9      	ldr	r1, [r7, #28]
 8003c40:	430b      	orrs	r3, r1
 8003c42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4aa2      	ldr	r2, [pc, #648]	; (8003ef0 <UART_SetConfig+0x2e4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a99      	ldr	r2, [pc, #612]	; (8003ef4 <UART_SetConfig+0x2e8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d121      	bne.n	8003cd6 <UART_SetConfig+0xca>
 8003c92:	4b99      	ldr	r3, [pc, #612]	; (8003ef8 <UART_SetConfig+0x2ec>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d817      	bhi.n	8003cd0 <UART_SetConfig+0xc4>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <UART_SetConfig+0x9c>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003cb9 	.word	0x08003cb9
 8003cac:	08003cc5 	.word	0x08003cc5
 8003cb0:	08003cbf 	.word	0x08003cbf
 8003cb4:	08003ccb 	.word	0x08003ccb
 8003cb8:	2301      	movs	r3, #1
 8003cba:	76fb      	strb	r3, [r7, #27]
 8003cbc:	e0e7      	b.n	8003e8e <UART_SetConfig+0x282>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	76fb      	strb	r3, [r7, #27]
 8003cc2:	e0e4      	b.n	8003e8e <UART_SetConfig+0x282>
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	76fb      	strb	r3, [r7, #27]
 8003cc8:	e0e1      	b.n	8003e8e <UART_SetConfig+0x282>
 8003cca:	2308      	movs	r3, #8
 8003ccc:	76fb      	strb	r3, [r7, #27]
 8003cce:	e0de      	b.n	8003e8e <UART_SetConfig+0x282>
 8003cd0:	2310      	movs	r3, #16
 8003cd2:	76fb      	strb	r3, [r7, #27]
 8003cd4:	e0db      	b.n	8003e8e <UART_SetConfig+0x282>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a88      	ldr	r2, [pc, #544]	; (8003efc <UART_SetConfig+0x2f0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d132      	bne.n	8003d46 <UART_SetConfig+0x13a>
 8003ce0:	4b85      	ldr	r3, [pc, #532]	; (8003ef8 <UART_SetConfig+0x2ec>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b0c      	cmp	r3, #12
 8003cec:	d828      	bhi.n	8003d40 <UART_SetConfig+0x134>
 8003cee:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <UART_SetConfig+0xe8>)
 8003cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf4:	08003d29 	.word	0x08003d29
 8003cf8:	08003d41 	.word	0x08003d41
 8003cfc:	08003d41 	.word	0x08003d41
 8003d00:	08003d41 	.word	0x08003d41
 8003d04:	08003d35 	.word	0x08003d35
 8003d08:	08003d41 	.word	0x08003d41
 8003d0c:	08003d41 	.word	0x08003d41
 8003d10:	08003d41 	.word	0x08003d41
 8003d14:	08003d2f 	.word	0x08003d2f
 8003d18:	08003d41 	.word	0x08003d41
 8003d1c:	08003d41 	.word	0x08003d41
 8003d20:	08003d41 	.word	0x08003d41
 8003d24:	08003d3b 	.word	0x08003d3b
 8003d28:	2300      	movs	r3, #0
 8003d2a:	76fb      	strb	r3, [r7, #27]
 8003d2c:	e0af      	b.n	8003e8e <UART_SetConfig+0x282>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	76fb      	strb	r3, [r7, #27]
 8003d32:	e0ac      	b.n	8003e8e <UART_SetConfig+0x282>
 8003d34:	2304      	movs	r3, #4
 8003d36:	76fb      	strb	r3, [r7, #27]
 8003d38:	e0a9      	b.n	8003e8e <UART_SetConfig+0x282>
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	76fb      	strb	r3, [r7, #27]
 8003d3e:	e0a6      	b.n	8003e8e <UART_SetConfig+0x282>
 8003d40:	2310      	movs	r3, #16
 8003d42:	76fb      	strb	r3, [r7, #27]
 8003d44:	e0a3      	b.n	8003e8e <UART_SetConfig+0x282>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a6d      	ldr	r2, [pc, #436]	; (8003f00 <UART_SetConfig+0x2f4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d120      	bne.n	8003d92 <UART_SetConfig+0x186>
 8003d50:	4b69      	ldr	r3, [pc, #420]	; (8003ef8 <UART_SetConfig+0x2ec>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d5a:	2b30      	cmp	r3, #48	; 0x30
 8003d5c:	d013      	beq.n	8003d86 <UART_SetConfig+0x17a>
 8003d5e:	2b30      	cmp	r3, #48	; 0x30
 8003d60:	d814      	bhi.n	8003d8c <UART_SetConfig+0x180>
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d009      	beq.n	8003d7a <UART_SetConfig+0x16e>
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d810      	bhi.n	8003d8c <UART_SetConfig+0x180>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <UART_SetConfig+0x168>
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d006      	beq.n	8003d80 <UART_SetConfig+0x174>
 8003d72:	e00b      	b.n	8003d8c <UART_SetConfig+0x180>
 8003d74:	2300      	movs	r3, #0
 8003d76:	76fb      	strb	r3, [r7, #27]
 8003d78:	e089      	b.n	8003e8e <UART_SetConfig+0x282>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	76fb      	strb	r3, [r7, #27]
 8003d7e:	e086      	b.n	8003e8e <UART_SetConfig+0x282>
 8003d80:	2304      	movs	r3, #4
 8003d82:	76fb      	strb	r3, [r7, #27]
 8003d84:	e083      	b.n	8003e8e <UART_SetConfig+0x282>
 8003d86:	2308      	movs	r3, #8
 8003d88:	76fb      	strb	r3, [r7, #27]
 8003d8a:	e080      	b.n	8003e8e <UART_SetConfig+0x282>
 8003d8c:	2310      	movs	r3, #16
 8003d8e:	76fb      	strb	r3, [r7, #27]
 8003d90:	e07d      	b.n	8003e8e <UART_SetConfig+0x282>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a5b      	ldr	r2, [pc, #364]	; (8003f04 <UART_SetConfig+0x2f8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d120      	bne.n	8003dde <UART_SetConfig+0x1d2>
 8003d9c:	4b56      	ldr	r3, [pc, #344]	; (8003ef8 <UART_SetConfig+0x2ec>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003da6:	2bc0      	cmp	r3, #192	; 0xc0
 8003da8:	d013      	beq.n	8003dd2 <UART_SetConfig+0x1c6>
 8003daa:	2bc0      	cmp	r3, #192	; 0xc0
 8003dac:	d814      	bhi.n	8003dd8 <UART_SetConfig+0x1cc>
 8003dae:	2b80      	cmp	r3, #128	; 0x80
 8003db0:	d009      	beq.n	8003dc6 <UART_SetConfig+0x1ba>
 8003db2:	2b80      	cmp	r3, #128	; 0x80
 8003db4:	d810      	bhi.n	8003dd8 <UART_SetConfig+0x1cc>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <UART_SetConfig+0x1b4>
 8003dba:	2b40      	cmp	r3, #64	; 0x40
 8003dbc:	d006      	beq.n	8003dcc <UART_SetConfig+0x1c0>
 8003dbe:	e00b      	b.n	8003dd8 <UART_SetConfig+0x1cc>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	76fb      	strb	r3, [r7, #27]
 8003dc4:	e063      	b.n	8003e8e <UART_SetConfig+0x282>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	76fb      	strb	r3, [r7, #27]
 8003dca:	e060      	b.n	8003e8e <UART_SetConfig+0x282>
 8003dcc:	2304      	movs	r3, #4
 8003dce:	76fb      	strb	r3, [r7, #27]
 8003dd0:	e05d      	b.n	8003e8e <UART_SetConfig+0x282>
 8003dd2:	2308      	movs	r3, #8
 8003dd4:	76fb      	strb	r3, [r7, #27]
 8003dd6:	e05a      	b.n	8003e8e <UART_SetConfig+0x282>
 8003dd8:	2310      	movs	r3, #16
 8003dda:	76fb      	strb	r3, [r7, #27]
 8003ddc:	e057      	b.n	8003e8e <UART_SetConfig+0x282>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a49      	ldr	r2, [pc, #292]	; (8003f08 <UART_SetConfig+0x2fc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d125      	bne.n	8003e34 <UART_SetConfig+0x228>
 8003de8:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <UART_SetConfig+0x2ec>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003df6:	d017      	beq.n	8003e28 <UART_SetConfig+0x21c>
 8003df8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dfc:	d817      	bhi.n	8003e2e <UART_SetConfig+0x222>
 8003dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e02:	d00b      	beq.n	8003e1c <UART_SetConfig+0x210>
 8003e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e08:	d811      	bhi.n	8003e2e <UART_SetConfig+0x222>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <UART_SetConfig+0x20a>
 8003e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e12:	d006      	beq.n	8003e22 <UART_SetConfig+0x216>
 8003e14:	e00b      	b.n	8003e2e <UART_SetConfig+0x222>
 8003e16:	2300      	movs	r3, #0
 8003e18:	76fb      	strb	r3, [r7, #27]
 8003e1a:	e038      	b.n	8003e8e <UART_SetConfig+0x282>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	76fb      	strb	r3, [r7, #27]
 8003e20:	e035      	b.n	8003e8e <UART_SetConfig+0x282>
 8003e22:	2304      	movs	r3, #4
 8003e24:	76fb      	strb	r3, [r7, #27]
 8003e26:	e032      	b.n	8003e8e <UART_SetConfig+0x282>
 8003e28:	2308      	movs	r3, #8
 8003e2a:	76fb      	strb	r3, [r7, #27]
 8003e2c:	e02f      	b.n	8003e8e <UART_SetConfig+0x282>
 8003e2e:	2310      	movs	r3, #16
 8003e30:	76fb      	strb	r3, [r7, #27]
 8003e32:	e02c      	b.n	8003e8e <UART_SetConfig+0x282>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a2d      	ldr	r2, [pc, #180]	; (8003ef0 <UART_SetConfig+0x2e4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d125      	bne.n	8003e8a <UART_SetConfig+0x27e>
 8003e3e:	4b2e      	ldr	r3, [pc, #184]	; (8003ef8 <UART_SetConfig+0x2ec>)
 8003e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e4c:	d017      	beq.n	8003e7e <UART_SetConfig+0x272>
 8003e4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e52:	d817      	bhi.n	8003e84 <UART_SetConfig+0x278>
 8003e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e58:	d00b      	beq.n	8003e72 <UART_SetConfig+0x266>
 8003e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e5e:	d811      	bhi.n	8003e84 <UART_SetConfig+0x278>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <UART_SetConfig+0x260>
 8003e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e68:	d006      	beq.n	8003e78 <UART_SetConfig+0x26c>
 8003e6a:	e00b      	b.n	8003e84 <UART_SetConfig+0x278>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	76fb      	strb	r3, [r7, #27]
 8003e70:	e00d      	b.n	8003e8e <UART_SetConfig+0x282>
 8003e72:	2302      	movs	r3, #2
 8003e74:	76fb      	strb	r3, [r7, #27]
 8003e76:	e00a      	b.n	8003e8e <UART_SetConfig+0x282>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	76fb      	strb	r3, [r7, #27]
 8003e7c:	e007      	b.n	8003e8e <UART_SetConfig+0x282>
 8003e7e:	2308      	movs	r3, #8
 8003e80:	76fb      	strb	r3, [r7, #27]
 8003e82:	e004      	b.n	8003e8e <UART_SetConfig+0x282>
 8003e84:	2310      	movs	r3, #16
 8003e86:	76fb      	strb	r3, [r7, #27]
 8003e88:	e001      	b.n	8003e8e <UART_SetConfig+0x282>
 8003e8a:	2310      	movs	r3, #16
 8003e8c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a17      	ldr	r2, [pc, #92]	; (8003ef0 <UART_SetConfig+0x2e4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	f040 8087 	bne.w	8003fa8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e9a:	7efb      	ldrb	r3, [r7, #27]
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d837      	bhi.n	8003f10 <UART_SetConfig+0x304>
 8003ea0:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <UART_SetConfig+0x29c>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003ecd 	.word	0x08003ecd
 8003eac:	08003f11 	.word	0x08003f11
 8003eb0:	08003ed5 	.word	0x08003ed5
 8003eb4:	08003f11 	.word	0x08003f11
 8003eb8:	08003edb 	.word	0x08003edb
 8003ebc:	08003f11 	.word	0x08003f11
 8003ec0:	08003f11 	.word	0x08003f11
 8003ec4:	08003f11 	.word	0x08003f11
 8003ec8:	08003ee3 	.word	0x08003ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f7fe fd12 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 8003ed0:	6178      	str	r0, [r7, #20]
        break;
 8003ed2:	e022      	b.n	8003f1a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed4:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <UART_SetConfig+0x300>)
 8003ed6:	617b      	str	r3, [r7, #20]
        break;
 8003ed8:	e01f      	b.n	8003f1a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eda:	f7fe fc73 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8003ede:	6178      	str	r0, [r7, #20]
        break;
 8003ee0:	e01b      	b.n	8003f1a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee6:	617b      	str	r3, [r7, #20]
        break;
 8003ee8:	e017      	b.n	8003f1a <UART_SetConfig+0x30e>
 8003eea:	bf00      	nop
 8003eec:	efff69f3 	.word	0xefff69f3
 8003ef0:	40008000 	.word	0x40008000
 8003ef4:	40013800 	.word	0x40013800
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40004400 	.word	0x40004400
 8003f00:	40004800 	.word	0x40004800
 8003f04:	40004c00 	.word	0x40004c00
 8003f08:	40005000 	.word	0x40005000
 8003f0c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	76bb      	strb	r3, [r7, #26]
        break;
 8003f18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80f1 	beq.w	8004104 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	4413      	add	r3, r2
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d305      	bcc.n	8003f3e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d902      	bls.n	8003f44 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	76bb      	strb	r3, [r7, #26]
 8003f42:	e0df      	b.n	8004104 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f04f 0100 	mov.w	r1, #0
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	020b      	lsls	r3, r1, #8
 8003f56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f5a:	0202      	lsls	r2, r0, #8
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	6849      	ldr	r1, [r1, #4]
 8003f60:	0849      	lsrs	r1, r1, #1
 8003f62:	4608      	mov	r0, r1
 8003f64:	f04f 0100 	mov.w	r1, #0
 8003f68:	1814      	adds	r4, r2, r0
 8003f6a:	eb43 0501 	adc.w	r5, r3, r1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	4620      	mov	r0, r4
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	f7fc f980 	bl	8000280 <__aeabi_uldivmod>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4613      	mov	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f8e:	d308      	bcc.n	8003fa2 <UART_SetConfig+0x396>
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f96:	d204      	bcs.n	8003fa2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	60da      	str	r2, [r3, #12]
 8003fa0:	e0b0      	b.n	8004104 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	76bb      	strb	r3, [r7, #26]
 8003fa6:	e0ad      	b.n	8004104 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb0:	d15b      	bne.n	800406a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003fb2:	7efb      	ldrb	r3, [r7, #27]
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d828      	bhi.n	800400a <UART_SetConfig+0x3fe>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <UART_SetConfig+0x3b4>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08003fe5 	.word	0x08003fe5
 8003fc4:	08003fed 	.word	0x08003fed
 8003fc8:	08003ff5 	.word	0x08003ff5
 8003fcc:	0800400b 	.word	0x0800400b
 8003fd0:	08003ffb 	.word	0x08003ffb
 8003fd4:	0800400b 	.word	0x0800400b
 8003fd8:	0800400b 	.word	0x0800400b
 8003fdc:	0800400b 	.word	0x0800400b
 8003fe0:	08004003 	.word	0x08004003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe4:	f7fe fc86 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 8003fe8:	6178      	str	r0, [r7, #20]
        break;
 8003fea:	e013      	b.n	8004014 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fec:	f7fe fc98 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 8003ff0:	6178      	str	r0, [r7, #20]
        break;
 8003ff2:	e00f      	b.n	8004014 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff4:	4b49      	ldr	r3, [pc, #292]	; (800411c <UART_SetConfig+0x510>)
 8003ff6:	617b      	str	r3, [r7, #20]
        break;
 8003ff8:	e00c      	b.n	8004014 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ffa:	f7fe fbe3 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8003ffe:	6178      	str	r0, [r7, #20]
        break;
 8004000:	e008      	b.n	8004014 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004006:	617b      	str	r3, [r7, #20]
        break;
 8004008:	e004      	b.n	8004014 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	76bb      	strb	r3, [r7, #26]
        break;
 8004012:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d074      	beq.n	8004104 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	005a      	lsls	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	085b      	lsrs	r3, r3, #1
 8004024:	441a      	add	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	fbb2 f3f3 	udiv	r3, r2, r3
 800402e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b0f      	cmp	r3, #15
 8004034:	d916      	bls.n	8004064 <UART_SetConfig+0x458>
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403c:	d212      	bcs.n	8004064 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	b29b      	uxth	r3, r3
 8004042:	f023 030f 	bic.w	r3, r3, #15
 8004046:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	085b      	lsrs	r3, r3, #1
 800404c:	b29b      	uxth	r3, r3
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	b29a      	uxth	r2, r3
 8004054:	89fb      	ldrh	r3, [r7, #14]
 8004056:	4313      	orrs	r3, r2
 8004058:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	89fa      	ldrh	r2, [r7, #14]
 8004060:	60da      	str	r2, [r3, #12]
 8004062:	e04f      	b.n	8004104 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	76bb      	strb	r3, [r7, #26]
 8004068:	e04c      	b.n	8004104 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800406a:	7efb      	ldrb	r3, [r7, #27]
 800406c:	2b08      	cmp	r3, #8
 800406e:	d828      	bhi.n	80040c2 <UART_SetConfig+0x4b6>
 8004070:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <UART_SetConfig+0x46c>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	0800409d 	.word	0x0800409d
 800407c:	080040a5 	.word	0x080040a5
 8004080:	080040ad 	.word	0x080040ad
 8004084:	080040c3 	.word	0x080040c3
 8004088:	080040b3 	.word	0x080040b3
 800408c:	080040c3 	.word	0x080040c3
 8004090:	080040c3 	.word	0x080040c3
 8004094:	080040c3 	.word	0x080040c3
 8004098:	080040bb 	.word	0x080040bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800409c:	f7fe fc2a 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 80040a0:	6178      	str	r0, [r7, #20]
        break;
 80040a2:	e013      	b.n	80040cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a4:	f7fe fc3c 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 80040a8:	6178      	str	r0, [r7, #20]
        break;
 80040aa:	e00f      	b.n	80040cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040ac:	4b1b      	ldr	r3, [pc, #108]	; (800411c <UART_SetConfig+0x510>)
 80040ae:	617b      	str	r3, [r7, #20]
        break;
 80040b0:	e00c      	b.n	80040cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b2:	f7fe fb87 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 80040b6:	6178      	str	r0, [r7, #20]
        break;
 80040b8:	e008      	b.n	80040cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040be:	617b      	str	r3, [r7, #20]
        break;
 80040c0:	e004      	b.n	80040cc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	76bb      	strb	r3, [r7, #26]
        break;
 80040ca:	bf00      	nop
    }

    if (pclk != 0U)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d018      	beq.n	8004104 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	085a      	lsrs	r2, r3, #1
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	441a      	add	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b0f      	cmp	r3, #15
 80040ea:	d909      	bls.n	8004100 <UART_SetConfig+0x4f4>
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f2:	d205      	bcs.n	8004100 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	e001      	b.n	8004104 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004110:	7ebb      	ldrb	r3, [r7, #26]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bdb0      	pop	{r4, r5, r7, pc}
 800411a:	bf00      	nop
 800411c:	00f42400 	.word	0x00f42400

08004120 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01a      	beq.n	8004236 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800421e:	d10a      	bne.n	8004236 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	605a      	str	r2, [r3, #4]
  }
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af02      	add	r7, sp, #8
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004274:	f7fd f800 	bl	8001278 <HAL_GetTick>
 8004278:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b08      	cmp	r3, #8
 8004286:	d10e      	bne.n	80042a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004288:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f82d 	bl	80042f6 <UART_WaitOnFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e023      	b.n	80042ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d10e      	bne.n	80042d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f817 	bl	80042f6 <UART_WaitOnFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e00d      	b.n	80042ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b09c      	sub	sp, #112	; 0x70
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	4613      	mov	r3, r2
 8004304:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004306:	e0a5      	b.n	8004454 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430e:	f000 80a1 	beq.w	8004454 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fc ffb1 	bl	8001278 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <UART_WaitOnFlagUntilTimeout+0x32>
 8004322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004324:	2b00      	cmp	r3, #0
 8004326:	d13e      	bne.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004338:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800433c:	667b      	str	r3, [r7, #100]	; 0x64
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004348:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800434c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e6      	bne.n	8004328 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3308      	adds	r3, #8
 8004360:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800436a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	663b      	str	r3, [r7, #96]	; 0x60
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3308      	adds	r3, #8
 8004378:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800437a:	64ba      	str	r2, [r7, #72]	; 0x48
 800437c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e5      	bne.n	800435a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e067      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d04f      	beq.n	8004454 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043c2:	d147      	bne.n	8004454 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043cc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
 80043ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e6      	bne.n	80043ce <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3308      	adds	r3, #8
 8004406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	e853 3f00 	ldrex	r3, [r3]
 800440e:	613b      	str	r3, [r7, #16]
   return(result);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	66bb      	str	r3, [r7, #104]	; 0x68
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3308      	adds	r3, #8
 800441e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004420:	623a      	str	r2, [r7, #32]
 8004422:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004424:	69f9      	ldr	r1, [r7, #28]
 8004426:	6a3a      	ldr	r2, [r7, #32]
 8004428:	e841 2300 	strex	r3, r2, [r1]
 800442c:	61bb      	str	r3, [r7, #24]
   return(result);
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1e5      	bne.n	8004400 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2220      	movs	r2, #32
 800443e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e010      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	69da      	ldr	r2, [r3, #28]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	4013      	ands	r3, r2
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	429a      	cmp	r2, r3
 8004462:	bf0c      	ite	eq
 8004464:	2301      	moveq	r3, #1
 8004466:	2300      	movne	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	461a      	mov	r2, r3
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	429a      	cmp	r2, r3
 8004470:	f43f af4a 	beq.w	8004308 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3770      	adds	r7, #112	; 0x70
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b096      	sub	sp, #88	; 0x58
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	4613      	mov	r3, r2
 800448c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	88fa      	ldrh	r2, [r7, #6]
 8004498:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2222      	movs	r2, #34	; 0x22
 80044a8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d02b      	beq.n	800450a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	4a42      	ldr	r2, [pc, #264]	; (80045c0 <UART_Start_Receive_DMA+0x140>)
 80044b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4a41      	ldr	r2, [pc, #260]	; (80045c4 <UART_Start_Receive_DMA+0x144>)
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	4a40      	ldr	r2, [pc, #256]	; (80045c8 <UART_Start_Receive_DMA+0x148>)
 80044c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	2200      	movs	r2, #0
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3324      	adds	r3, #36	; 0x24
 80044dc:	4619      	mov	r1, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e2:	461a      	mov	r2, r3
 80044e4:	88fb      	ldrh	r3, [r7, #6]
 80044e6:	f7fd f8c1 	bl	800166c <HAL_DMA_Start_IT>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00c      	beq.n	800450a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2210      	movs	r2, #16
 80044f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e055      	b.n	80045b6 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d018      	beq.n	800454c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800452e:	657b      	str	r3, [r7, #84]	; 0x54
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004538:	64bb      	str	r3, [r7, #72]	; 0x48
 800453a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800453e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e6      	bne.n	800451a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3308      	adds	r3, #8
 8004552:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	653b      	str	r3, [r7, #80]	; 0x50
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3308      	adds	r3, #8
 800456a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800456c:	637a      	str	r2, [r7, #52]	; 0x34
 800456e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004572:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e5      	bne.n	800454c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3308      	adds	r3, #8
 8004586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	613b      	str	r3, [r7, #16]
   return(result);
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3308      	adds	r3, #8
 800459e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045a0:	623a      	str	r2, [r7, #32]
 80045a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	69f9      	ldr	r1, [r7, #28]
 80045a6:	6a3a      	ldr	r2, [r7, #32]
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e5      	bne.n	8004580 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3758      	adds	r7, #88	; 0x58
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	080046df 	.word	0x080046df
 80045c4:	08004803 	.word	0x08004803
 80045c8:	0800483b 	.word	0x0800483b

080045cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b089      	sub	sp, #36	; 0x24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	61bb      	str	r3, [r7, #24]
 80045f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6979      	ldr	r1, [r7, #20]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e6      	bne.n	80045d4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800460c:	bf00      	nop
 800460e:	3724      	adds	r7, #36	; 0x24
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004618:	b480      	push	{r7}
 800461a:	b095      	sub	sp, #84	; 0x54
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004628:	e853 3f00 	ldrex	r3, [r3]
 800462c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004634:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800463e:	643b      	str	r3, [r7, #64]	; 0x40
 8004640:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004642:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004644:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004646:	e841 2300 	strex	r3, r2, [r1]
 800464a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800464c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1e6      	bne.n	8004620 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3308      	adds	r3, #8
 8004658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	e853 3f00 	ldrex	r3, [r3]
 8004660:	61fb      	str	r3, [r7, #28]
   return(result);
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	64bb      	str	r3, [r7, #72]	; 0x48
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3308      	adds	r3, #8
 8004670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004672:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004674:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004676:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800467a:	e841 2300 	strex	r3, r2, [r1]
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1e5      	bne.n	8004652 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468a:	2b01      	cmp	r3, #1
 800468c:	d118      	bne.n	80046c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	e853 3f00 	ldrex	r3, [r3]
 800469a:	60bb      	str	r3, [r7, #8]
   return(result);
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f023 0310 	bic.w	r3, r3, #16
 80046a2:	647b      	str	r3, [r7, #68]	; 0x44
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b0:	6979      	ldr	r1, [r7, #20]
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	e841 2300 	strex	r3, r2, [r1]
 80046b8:	613b      	str	r3, [r7, #16]
   return(result);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e6      	bne.n	800468e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80046d2:	bf00      	nop
 80046d4:	3754      	adds	r7, #84	; 0x54
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b09c      	sub	sp, #112	; 0x70
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d170      	bne.n	80047dc <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 80046fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fc:	2200      	movs	r2, #0
 80046fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470a:	e853 3f00 	ldrex	r3, [r3]
 800470e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004712:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004716:	66bb      	str	r3, [r7, #104]	; 0x68
 8004718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	461a      	mov	r2, r3
 800471e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004720:	65bb      	str	r3, [r7, #88]	; 0x58
 8004722:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004726:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800472e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e6      	bne.n	8004702 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3308      	adds	r3, #8
 800473a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004746:	f023 0301 	bic.w	r3, r3, #1
 800474a:	667b      	str	r3, [r7, #100]	; 0x64
 800474c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3308      	adds	r3, #8
 8004752:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004754:	647a      	str	r2, [r7, #68]	; 0x44
 8004756:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800475a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800475c:	e841 2300 	strex	r3, r2, [r1]
 8004760:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e5      	bne.n	8004734 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3308      	adds	r3, #8
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	623b      	str	r3, [r7, #32]
   return(result);
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477e:	663b      	str	r3, [r7, #96]	; 0x60
 8004780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3308      	adds	r3, #8
 8004786:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004788:	633a      	str	r2, [r7, #48]	; 0x30
 800478a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800478e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e5      	bne.n	8004768 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800479c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479e:	2220      	movs	r2, #32
 80047a0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d118      	bne.n	80047dc <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0310 	bic.w	r3, r3, #16
 80047be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047cc:	69b9      	ldr	r1, [r7, #24]
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	e841 2300 	strex	r3, r2, [r1]
 80047d4:	617b      	str	r3, [r7, #20]
   return(result);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e6      	bne.n	80047aa <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d107      	bne.n	80047f4 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047ea:	4619      	mov	r1, r3
 80047ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80047ee:	f7ff fa01 	bl	8003bf4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047f2:	e002      	b.n	80047fa <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 80047f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80047f6:	f7fb febf 	bl	8000578 <HAL_UART_RxCpltCallback>
}
 80047fa:	bf00      	nop
 80047fc:	3770      	adds	r7, #112	; 0x70
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004814:	2b01      	cmp	r3, #1
 8004816:	d109      	bne.n	800482c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800481e:	085b      	lsrs	r3, r3, #1
 8004820:	b29b      	uxth	r3, r3
 8004822:	4619      	mov	r1, r3
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f7ff f9e5 	bl	8003bf4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800482a:	e002      	b.n	8004832 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f7ff f9cd 	bl	8003bcc <HAL_UART_RxHalfCpltCallback>
}
 8004832:	bf00      	nop
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b086      	sub	sp, #24
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004846:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800484c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004852:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485e:	2b80      	cmp	r3, #128	; 0x80
 8004860:	d109      	bne.n	8004876 <UART_DMAError+0x3c>
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2b21      	cmp	r3, #33	; 0x21
 8004866:	d106      	bne.n	8004876 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	2200      	movs	r2, #0
 800486c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004870:	6978      	ldr	r0, [r7, #20]
 8004872:	f7ff feab 	bl	80045cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004880:	2b40      	cmp	r3, #64	; 0x40
 8004882:	d109      	bne.n	8004898 <UART_DMAError+0x5e>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b22      	cmp	r3, #34	; 0x22
 8004888:	d106      	bne.n	8004898 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2200      	movs	r2, #0
 800488e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004892:	6978      	ldr	r0, [r7, #20]
 8004894:	f7ff fec0 	bl	8004618 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800489e:	f043 0210 	orr.w	r2, r3, #16
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048a8:	6978      	ldr	r0, [r7, #20]
 80048aa:	f7ff f999 	bl	8003be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ae:	bf00      	nop
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f7ff f983 	bl	8003be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048da:	bf00      	nop
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b088      	sub	sp, #32
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048fe:	61fb      	str	r3, [r7, #28]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	6979      	ldr	r1, [r7, #20]
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	e841 2300 	strex	r3, r2, [r1]
 8004914:	613b      	str	r3, [r7, #16]
   return(result);
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1e6      	bne.n	80048ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff f945 	bl	8003bb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800492e:	bf00      	nop
 8004930:	3720      	adds	r7, #32
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <__errno>:
 800494c:	4b01      	ldr	r3, [pc, #4]	; (8004954 <__errno+0x8>)
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	2000000c 	.word	0x2000000c

08004958 <__libc_init_array>:
 8004958:	b570      	push	{r4, r5, r6, lr}
 800495a:	4d0d      	ldr	r5, [pc, #52]	; (8004990 <__libc_init_array+0x38>)
 800495c:	4c0d      	ldr	r4, [pc, #52]	; (8004994 <__libc_init_array+0x3c>)
 800495e:	1b64      	subs	r4, r4, r5
 8004960:	10a4      	asrs	r4, r4, #2
 8004962:	2600      	movs	r6, #0
 8004964:	42a6      	cmp	r6, r4
 8004966:	d109      	bne.n	800497c <__libc_init_array+0x24>
 8004968:	4d0b      	ldr	r5, [pc, #44]	; (8004998 <__libc_init_array+0x40>)
 800496a:	4c0c      	ldr	r4, [pc, #48]	; (800499c <__libc_init_array+0x44>)
 800496c:	f001 faa2 	bl	8005eb4 <_init>
 8004970:	1b64      	subs	r4, r4, r5
 8004972:	10a4      	asrs	r4, r4, #2
 8004974:	2600      	movs	r6, #0
 8004976:	42a6      	cmp	r6, r4
 8004978:	d105      	bne.n	8004986 <__libc_init_array+0x2e>
 800497a:	bd70      	pop	{r4, r5, r6, pc}
 800497c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004980:	4798      	blx	r3
 8004982:	3601      	adds	r6, #1
 8004984:	e7ee      	b.n	8004964 <__libc_init_array+0xc>
 8004986:	f855 3b04 	ldr.w	r3, [r5], #4
 800498a:	4798      	blx	r3
 800498c:	3601      	adds	r6, #1
 800498e:	e7f2      	b.n	8004976 <__libc_init_array+0x1e>
 8004990:	08006114 	.word	0x08006114
 8004994:	08006114 	.word	0x08006114
 8004998:	08006114 	.word	0x08006114
 800499c:	08006118 	.word	0x08006118

080049a0 <memset>:
 80049a0:	4402      	add	r2, r0
 80049a2:	4603      	mov	r3, r0
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d100      	bne.n	80049aa <memset+0xa>
 80049a8:	4770      	bx	lr
 80049aa:	f803 1b01 	strb.w	r1, [r3], #1
 80049ae:	e7f9      	b.n	80049a4 <memset+0x4>

080049b0 <sniprintf>:
 80049b0:	b40c      	push	{r2, r3}
 80049b2:	b530      	push	{r4, r5, lr}
 80049b4:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <sniprintf+0x64>)
 80049b6:	1e0c      	subs	r4, r1, #0
 80049b8:	681d      	ldr	r5, [r3, #0]
 80049ba:	b09d      	sub	sp, #116	; 0x74
 80049bc:	da08      	bge.n	80049d0 <sniprintf+0x20>
 80049be:	238b      	movs	r3, #139	; 0x8b
 80049c0:	602b      	str	r3, [r5, #0]
 80049c2:	f04f 30ff 	mov.w	r0, #4294967295
 80049c6:	b01d      	add	sp, #116	; 0x74
 80049c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049cc:	b002      	add	sp, #8
 80049ce:	4770      	bx	lr
 80049d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80049d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80049d8:	bf14      	ite	ne
 80049da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80049de:	4623      	moveq	r3, r4
 80049e0:	9304      	str	r3, [sp, #16]
 80049e2:	9307      	str	r3, [sp, #28]
 80049e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049e8:	9002      	str	r0, [sp, #8]
 80049ea:	9006      	str	r0, [sp, #24]
 80049ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80049f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80049f2:	ab21      	add	r3, sp, #132	; 0x84
 80049f4:	a902      	add	r1, sp, #8
 80049f6:	4628      	mov	r0, r5
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	f000 fa33 	bl	8004e64 <_svfiprintf_r>
 80049fe:	1c43      	adds	r3, r0, #1
 8004a00:	bfbc      	itt	lt
 8004a02:	238b      	movlt	r3, #139	; 0x8b
 8004a04:	602b      	strlt	r3, [r5, #0]
 8004a06:	2c00      	cmp	r4, #0
 8004a08:	d0dd      	beq.n	80049c6 <sniprintf+0x16>
 8004a0a:	9b02      	ldr	r3, [sp, #8]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	701a      	strb	r2, [r3, #0]
 8004a10:	e7d9      	b.n	80049c6 <sniprintf+0x16>
 8004a12:	bf00      	nop
 8004a14:	2000000c 	.word	0x2000000c

08004a18 <siprintf>:
 8004a18:	b40e      	push	{r1, r2, r3}
 8004a1a:	b500      	push	{lr}
 8004a1c:	b09c      	sub	sp, #112	; 0x70
 8004a1e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a20:	9002      	str	r0, [sp, #8]
 8004a22:	9006      	str	r0, [sp, #24]
 8004a24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a28:	4809      	ldr	r0, [pc, #36]	; (8004a50 <siprintf+0x38>)
 8004a2a:	9107      	str	r1, [sp, #28]
 8004a2c:	9104      	str	r1, [sp, #16]
 8004a2e:	4909      	ldr	r1, [pc, #36]	; (8004a54 <siprintf+0x3c>)
 8004a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a34:	9105      	str	r1, [sp, #20]
 8004a36:	6800      	ldr	r0, [r0, #0]
 8004a38:	9301      	str	r3, [sp, #4]
 8004a3a:	a902      	add	r1, sp, #8
 8004a3c:	f000 fa12 	bl	8004e64 <_svfiprintf_r>
 8004a40:	9b02      	ldr	r3, [sp, #8]
 8004a42:	2200      	movs	r2, #0
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	b01c      	add	sp, #112	; 0x70
 8004a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a4c:	b003      	add	sp, #12
 8004a4e:	4770      	bx	lr
 8004a50:	2000000c 	.word	0x2000000c
 8004a54:	ffff0208 	.word	0xffff0208

08004a58 <strcat>:
 8004a58:	b510      	push	{r4, lr}
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	7814      	ldrb	r4, [r2, #0]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	3201      	adds	r2, #1
 8004a62:	2c00      	cmp	r4, #0
 8004a64:	d1fa      	bne.n	8004a5c <strcat+0x4>
 8004a66:	3b01      	subs	r3, #1
 8004a68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a6c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a70:	2a00      	cmp	r2, #0
 8004a72:	d1f9      	bne.n	8004a68 <strcat+0x10>
 8004a74:	bd10      	pop	{r4, pc}

08004a76 <strchr>:
 8004a76:	b2c9      	uxtb	r1, r1
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a7e:	b11a      	cbz	r2, 8004a88 <strchr+0x12>
 8004a80:	428a      	cmp	r2, r1
 8004a82:	d1f9      	bne.n	8004a78 <strchr+0x2>
 8004a84:	4618      	mov	r0, r3
 8004a86:	4770      	bx	lr
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	bf18      	it	ne
 8004a8c:	2300      	movne	r3, #0
 8004a8e:	e7f9      	b.n	8004a84 <strchr+0xe>

08004a90 <strcpy>:
 8004a90:	4603      	mov	r3, r0
 8004a92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a96:	f803 2b01 	strb.w	r2, [r3], #1
 8004a9a:	2a00      	cmp	r2, #0
 8004a9c:	d1f9      	bne.n	8004a92 <strcpy+0x2>
 8004a9e:	4770      	bx	lr

08004aa0 <strdup>:
 8004aa0:	4b02      	ldr	r3, [pc, #8]	; (8004aac <strdup+0xc>)
 8004aa2:	4601      	mov	r1, r0
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	f000 b803 	b.w	8004ab0 <_strdup_r>
 8004aaa:	bf00      	nop
 8004aac:	2000000c 	.word	0x2000000c

08004ab0 <_strdup_r>:
 8004ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	460d      	mov	r5, r1
 8004ab8:	f7fb fb8a 	bl	80001d0 <strlen>
 8004abc:	1c42      	adds	r2, r0, #1
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	9201      	str	r2, [sp, #4]
 8004ac4:	f000 f918 	bl	8004cf8 <_malloc_r>
 8004ac8:	4604      	mov	r4, r0
 8004aca:	b118      	cbz	r0, 8004ad4 <_strdup_r+0x24>
 8004acc:	9a01      	ldr	r2, [sp, #4]
 8004ace:	4629      	mov	r1, r5
 8004ad0:	f000 f8b4 	bl	8004c3c <memcpy>
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	b003      	add	sp, #12
 8004ad8:	bd30      	pop	{r4, r5, pc}

08004ada <strsep>:
 8004ada:	4602      	mov	r2, r0
 8004adc:	2300      	movs	r3, #0
 8004ade:	6800      	ldr	r0, [r0, #0]
 8004ae0:	f000 b84c 	b.w	8004b7c <__strtok_r>

08004ae4 <strstr>:
 8004ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae6:	780c      	ldrb	r4, [r1, #0]
 8004ae8:	b164      	cbz	r4, 8004b04 <strstr+0x20>
 8004aea:	4603      	mov	r3, r0
 8004aec:	781a      	ldrb	r2, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	1c5e      	adds	r6, r3, #1
 8004af2:	b90a      	cbnz	r2, 8004af8 <strstr+0x14>
 8004af4:	4610      	mov	r0, r2
 8004af6:	e005      	b.n	8004b04 <strstr+0x20>
 8004af8:	4294      	cmp	r4, r2
 8004afa:	d108      	bne.n	8004b0e <strstr+0x2a>
 8004afc:	460d      	mov	r5, r1
 8004afe:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004b02:	b902      	cbnz	r2, 8004b06 <strstr+0x22>
 8004b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b06:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004b0a:	4297      	cmp	r7, r2
 8004b0c:	d0f7      	beq.n	8004afe <strstr+0x1a>
 8004b0e:	4633      	mov	r3, r6
 8004b10:	e7ec      	b.n	8004aec <strstr+0x8>
	...

08004b14 <strtok>:
 8004b14:	4b16      	ldr	r3, [pc, #88]	; (8004b70 <strtok+0x5c>)
 8004b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b18:	681e      	ldr	r6, [r3, #0]
 8004b1a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004b1c:	4605      	mov	r5, r0
 8004b1e:	b9fc      	cbnz	r4, 8004b60 <strtok+0x4c>
 8004b20:	2050      	movs	r0, #80	; 0x50
 8004b22:	9101      	str	r1, [sp, #4]
 8004b24:	f000 f882 	bl	8004c2c <malloc>
 8004b28:	9901      	ldr	r1, [sp, #4]
 8004b2a:	65b0      	str	r0, [r6, #88]	; 0x58
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	b920      	cbnz	r0, 8004b3a <strtok+0x26>
 8004b30:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <strtok+0x60>)
 8004b32:	4811      	ldr	r0, [pc, #68]	; (8004b78 <strtok+0x64>)
 8004b34:	2157      	movs	r1, #87	; 0x57
 8004b36:	f000 f849 	bl	8004bcc <__assert_func>
 8004b3a:	e9c0 4400 	strd	r4, r4, [r0]
 8004b3e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004b42:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004b46:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004b4a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004b4e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004b52:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004b56:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004b5a:	6184      	str	r4, [r0, #24]
 8004b5c:	7704      	strb	r4, [r0, #28]
 8004b5e:	6244      	str	r4, [r0, #36]	; 0x24
 8004b60:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004b62:	2301      	movs	r3, #1
 8004b64:	4628      	mov	r0, r5
 8004b66:	b002      	add	sp, #8
 8004b68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004b6c:	f000 b806 	b.w	8004b7c <__strtok_r>
 8004b70:	2000000c 	.word	0x2000000c
 8004b74:	08005fc4 	.word	0x08005fc4
 8004b78:	08005fdb 	.word	0x08005fdb

08004b7c <__strtok_r>:
 8004b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b7e:	b908      	cbnz	r0, 8004b84 <__strtok_r+0x8>
 8004b80:	6810      	ldr	r0, [r2, #0]
 8004b82:	b188      	cbz	r0, 8004ba8 <__strtok_r+0x2c>
 8004b84:	4604      	mov	r4, r0
 8004b86:	4620      	mov	r0, r4
 8004b88:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004b8c:	460f      	mov	r7, r1
 8004b8e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004b92:	b91e      	cbnz	r6, 8004b9c <__strtok_r+0x20>
 8004b94:	b965      	cbnz	r5, 8004bb0 <__strtok_r+0x34>
 8004b96:	6015      	str	r5, [r2, #0]
 8004b98:	4628      	mov	r0, r5
 8004b9a:	e005      	b.n	8004ba8 <__strtok_r+0x2c>
 8004b9c:	42b5      	cmp	r5, r6
 8004b9e:	d1f6      	bne.n	8004b8e <__strtok_r+0x12>
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1f0      	bne.n	8004b86 <__strtok_r+0xa>
 8004ba4:	6014      	str	r4, [r2, #0]
 8004ba6:	7003      	strb	r3, [r0, #0]
 8004ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004baa:	461c      	mov	r4, r3
 8004bac:	e00c      	b.n	8004bc8 <__strtok_r+0x4c>
 8004bae:	b915      	cbnz	r5, 8004bb6 <__strtok_r+0x3a>
 8004bb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004bb4:	460e      	mov	r6, r1
 8004bb6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004bba:	42ab      	cmp	r3, r5
 8004bbc:	d1f7      	bne.n	8004bae <__strtok_r+0x32>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f3      	beq.n	8004baa <__strtok_r+0x2e>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004bc8:	6014      	str	r4, [r2, #0]
 8004bca:	e7ed      	b.n	8004ba8 <__strtok_r+0x2c>

08004bcc <__assert_func>:
 8004bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004bce:	4614      	mov	r4, r2
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <__assert_func+0x2c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4605      	mov	r5, r0
 8004bd8:	68d8      	ldr	r0, [r3, #12]
 8004bda:	b14c      	cbz	r4, 8004bf0 <__assert_func+0x24>
 8004bdc:	4b07      	ldr	r3, [pc, #28]	; (8004bfc <__assert_func+0x30>)
 8004bde:	9100      	str	r1, [sp, #0]
 8004be0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004be4:	4906      	ldr	r1, [pc, #24]	; (8004c00 <__assert_func+0x34>)
 8004be6:	462b      	mov	r3, r5
 8004be8:	f000 f80e 	bl	8004c08 <fiprintf>
 8004bec:	f000 fdf8 	bl	80057e0 <abort>
 8004bf0:	4b04      	ldr	r3, [pc, #16]	; (8004c04 <__assert_func+0x38>)
 8004bf2:	461c      	mov	r4, r3
 8004bf4:	e7f3      	b.n	8004bde <__assert_func+0x12>
 8004bf6:	bf00      	nop
 8004bf8:	2000000c 	.word	0x2000000c
 8004bfc:	0800603c 	.word	0x0800603c
 8004c00:	08006049 	.word	0x08006049
 8004c04:	08006077 	.word	0x08006077

08004c08 <fiprintf>:
 8004c08:	b40e      	push	{r1, r2, r3}
 8004c0a:	b503      	push	{r0, r1, lr}
 8004c0c:	4601      	mov	r1, r0
 8004c0e:	ab03      	add	r3, sp, #12
 8004c10:	4805      	ldr	r0, [pc, #20]	; (8004c28 <fiprintf+0x20>)
 8004c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c16:	6800      	ldr	r0, [r0, #0]
 8004c18:	9301      	str	r3, [sp, #4]
 8004c1a:	f000 fa4d 	bl	80050b8 <_vfiprintf_r>
 8004c1e:	b002      	add	sp, #8
 8004c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c24:	b003      	add	sp, #12
 8004c26:	4770      	bx	lr
 8004c28:	2000000c 	.word	0x2000000c

08004c2c <malloc>:
 8004c2c:	4b02      	ldr	r3, [pc, #8]	; (8004c38 <malloc+0xc>)
 8004c2e:	4601      	mov	r1, r0
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	f000 b861 	b.w	8004cf8 <_malloc_r>
 8004c36:	bf00      	nop
 8004c38:	2000000c 	.word	0x2000000c

08004c3c <memcpy>:
 8004c3c:	440a      	add	r2, r1
 8004c3e:	4291      	cmp	r1, r2
 8004c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c44:	d100      	bne.n	8004c48 <memcpy+0xc>
 8004c46:	4770      	bx	lr
 8004c48:	b510      	push	{r4, lr}
 8004c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c52:	4291      	cmp	r1, r2
 8004c54:	d1f9      	bne.n	8004c4a <memcpy+0xe>
 8004c56:	bd10      	pop	{r4, pc}

08004c58 <_free_r>:
 8004c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c5a:	2900      	cmp	r1, #0
 8004c5c:	d048      	beq.n	8004cf0 <_free_r+0x98>
 8004c5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c62:	9001      	str	r0, [sp, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f1a1 0404 	sub.w	r4, r1, #4
 8004c6a:	bfb8      	it	lt
 8004c6c:	18e4      	addlt	r4, r4, r3
 8004c6e:	f000 fff7 	bl	8005c60 <__malloc_lock>
 8004c72:	4a20      	ldr	r2, [pc, #128]	; (8004cf4 <_free_r+0x9c>)
 8004c74:	9801      	ldr	r0, [sp, #4]
 8004c76:	6813      	ldr	r3, [r2, #0]
 8004c78:	4615      	mov	r5, r2
 8004c7a:	b933      	cbnz	r3, 8004c8a <_free_r+0x32>
 8004c7c:	6063      	str	r3, [r4, #4]
 8004c7e:	6014      	str	r4, [r2, #0]
 8004c80:	b003      	add	sp, #12
 8004c82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c86:	f000 bff1 	b.w	8005c6c <__malloc_unlock>
 8004c8a:	42a3      	cmp	r3, r4
 8004c8c:	d90b      	bls.n	8004ca6 <_free_r+0x4e>
 8004c8e:	6821      	ldr	r1, [r4, #0]
 8004c90:	1862      	adds	r2, r4, r1
 8004c92:	4293      	cmp	r3, r2
 8004c94:	bf04      	itt	eq
 8004c96:	681a      	ldreq	r2, [r3, #0]
 8004c98:	685b      	ldreq	r3, [r3, #4]
 8004c9a:	6063      	str	r3, [r4, #4]
 8004c9c:	bf04      	itt	eq
 8004c9e:	1852      	addeq	r2, r2, r1
 8004ca0:	6022      	streq	r2, [r4, #0]
 8004ca2:	602c      	str	r4, [r5, #0]
 8004ca4:	e7ec      	b.n	8004c80 <_free_r+0x28>
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	b10b      	cbz	r3, 8004cb0 <_free_r+0x58>
 8004cac:	42a3      	cmp	r3, r4
 8004cae:	d9fa      	bls.n	8004ca6 <_free_r+0x4e>
 8004cb0:	6811      	ldr	r1, [r2, #0]
 8004cb2:	1855      	adds	r5, r2, r1
 8004cb4:	42a5      	cmp	r5, r4
 8004cb6:	d10b      	bne.n	8004cd0 <_free_r+0x78>
 8004cb8:	6824      	ldr	r4, [r4, #0]
 8004cba:	4421      	add	r1, r4
 8004cbc:	1854      	adds	r4, r2, r1
 8004cbe:	42a3      	cmp	r3, r4
 8004cc0:	6011      	str	r1, [r2, #0]
 8004cc2:	d1dd      	bne.n	8004c80 <_free_r+0x28>
 8004cc4:	681c      	ldr	r4, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	6053      	str	r3, [r2, #4]
 8004cca:	4421      	add	r1, r4
 8004ccc:	6011      	str	r1, [r2, #0]
 8004cce:	e7d7      	b.n	8004c80 <_free_r+0x28>
 8004cd0:	d902      	bls.n	8004cd8 <_free_r+0x80>
 8004cd2:	230c      	movs	r3, #12
 8004cd4:	6003      	str	r3, [r0, #0]
 8004cd6:	e7d3      	b.n	8004c80 <_free_r+0x28>
 8004cd8:	6825      	ldr	r5, [r4, #0]
 8004cda:	1961      	adds	r1, r4, r5
 8004cdc:	428b      	cmp	r3, r1
 8004cde:	bf04      	itt	eq
 8004ce0:	6819      	ldreq	r1, [r3, #0]
 8004ce2:	685b      	ldreq	r3, [r3, #4]
 8004ce4:	6063      	str	r3, [r4, #4]
 8004ce6:	bf04      	itt	eq
 8004ce8:	1949      	addeq	r1, r1, r5
 8004cea:	6021      	streq	r1, [r4, #0]
 8004cec:	6054      	str	r4, [r2, #4]
 8004cee:	e7c7      	b.n	8004c80 <_free_r+0x28>
 8004cf0:	b003      	add	sp, #12
 8004cf2:	bd30      	pop	{r4, r5, pc}
 8004cf4:	20000094 	.word	0x20000094

08004cf8 <_malloc_r>:
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfa:	1ccd      	adds	r5, r1, #3
 8004cfc:	f025 0503 	bic.w	r5, r5, #3
 8004d00:	3508      	adds	r5, #8
 8004d02:	2d0c      	cmp	r5, #12
 8004d04:	bf38      	it	cc
 8004d06:	250c      	movcc	r5, #12
 8004d08:	2d00      	cmp	r5, #0
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	db01      	blt.n	8004d12 <_malloc_r+0x1a>
 8004d0e:	42a9      	cmp	r1, r5
 8004d10:	d903      	bls.n	8004d1a <_malloc_r+0x22>
 8004d12:	230c      	movs	r3, #12
 8004d14:	6033      	str	r3, [r6, #0]
 8004d16:	2000      	movs	r0, #0
 8004d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d1a:	f000 ffa1 	bl	8005c60 <__malloc_lock>
 8004d1e:	4921      	ldr	r1, [pc, #132]	; (8004da4 <_malloc_r+0xac>)
 8004d20:	680a      	ldr	r2, [r1, #0]
 8004d22:	4614      	mov	r4, r2
 8004d24:	b99c      	cbnz	r4, 8004d4e <_malloc_r+0x56>
 8004d26:	4f20      	ldr	r7, [pc, #128]	; (8004da8 <_malloc_r+0xb0>)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	b923      	cbnz	r3, 8004d36 <_malloc_r+0x3e>
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	4630      	mov	r0, r6
 8004d30:	f000 fc86 	bl	8005640 <_sbrk_r>
 8004d34:	6038      	str	r0, [r7, #0]
 8004d36:	4629      	mov	r1, r5
 8004d38:	4630      	mov	r0, r6
 8004d3a:	f000 fc81 	bl	8005640 <_sbrk_r>
 8004d3e:	1c43      	adds	r3, r0, #1
 8004d40:	d123      	bne.n	8004d8a <_malloc_r+0x92>
 8004d42:	230c      	movs	r3, #12
 8004d44:	6033      	str	r3, [r6, #0]
 8004d46:	4630      	mov	r0, r6
 8004d48:	f000 ff90 	bl	8005c6c <__malloc_unlock>
 8004d4c:	e7e3      	b.n	8004d16 <_malloc_r+0x1e>
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	1b5b      	subs	r3, r3, r5
 8004d52:	d417      	bmi.n	8004d84 <_malloc_r+0x8c>
 8004d54:	2b0b      	cmp	r3, #11
 8004d56:	d903      	bls.n	8004d60 <_malloc_r+0x68>
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	441c      	add	r4, r3
 8004d5c:	6025      	str	r5, [r4, #0]
 8004d5e:	e004      	b.n	8004d6a <_malloc_r+0x72>
 8004d60:	6863      	ldr	r3, [r4, #4]
 8004d62:	42a2      	cmp	r2, r4
 8004d64:	bf0c      	ite	eq
 8004d66:	600b      	streq	r3, [r1, #0]
 8004d68:	6053      	strne	r3, [r2, #4]
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	f000 ff7e 	bl	8005c6c <__malloc_unlock>
 8004d70:	f104 000b 	add.w	r0, r4, #11
 8004d74:	1d23      	adds	r3, r4, #4
 8004d76:	f020 0007 	bic.w	r0, r0, #7
 8004d7a:	1ac2      	subs	r2, r0, r3
 8004d7c:	d0cc      	beq.n	8004d18 <_malloc_r+0x20>
 8004d7e:	1a1b      	subs	r3, r3, r0
 8004d80:	50a3      	str	r3, [r4, r2]
 8004d82:	e7c9      	b.n	8004d18 <_malloc_r+0x20>
 8004d84:	4622      	mov	r2, r4
 8004d86:	6864      	ldr	r4, [r4, #4]
 8004d88:	e7cc      	b.n	8004d24 <_malloc_r+0x2c>
 8004d8a:	1cc4      	adds	r4, r0, #3
 8004d8c:	f024 0403 	bic.w	r4, r4, #3
 8004d90:	42a0      	cmp	r0, r4
 8004d92:	d0e3      	beq.n	8004d5c <_malloc_r+0x64>
 8004d94:	1a21      	subs	r1, r4, r0
 8004d96:	4630      	mov	r0, r6
 8004d98:	f000 fc52 	bl	8005640 <_sbrk_r>
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	d1dd      	bne.n	8004d5c <_malloc_r+0x64>
 8004da0:	e7cf      	b.n	8004d42 <_malloc_r+0x4a>
 8004da2:	bf00      	nop
 8004da4:	20000094 	.word	0x20000094
 8004da8:	20000098 	.word	0x20000098

08004dac <__ssputs_r>:
 8004dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004db0:	688e      	ldr	r6, [r1, #8]
 8004db2:	429e      	cmp	r6, r3
 8004db4:	4682      	mov	sl, r0
 8004db6:	460c      	mov	r4, r1
 8004db8:	4690      	mov	r8, r2
 8004dba:	461f      	mov	r7, r3
 8004dbc:	d838      	bhi.n	8004e30 <__ssputs_r+0x84>
 8004dbe:	898a      	ldrh	r2, [r1, #12]
 8004dc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004dc4:	d032      	beq.n	8004e2c <__ssputs_r+0x80>
 8004dc6:	6825      	ldr	r5, [r4, #0]
 8004dc8:	6909      	ldr	r1, [r1, #16]
 8004dca:	eba5 0901 	sub.w	r9, r5, r1
 8004dce:	6965      	ldr	r5, [r4, #20]
 8004dd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dd8:	3301      	adds	r3, #1
 8004dda:	444b      	add	r3, r9
 8004ddc:	106d      	asrs	r5, r5, #1
 8004dde:	429d      	cmp	r5, r3
 8004de0:	bf38      	it	cc
 8004de2:	461d      	movcc	r5, r3
 8004de4:	0553      	lsls	r3, r2, #21
 8004de6:	d531      	bpl.n	8004e4c <__ssputs_r+0xa0>
 8004de8:	4629      	mov	r1, r5
 8004dea:	f7ff ff85 	bl	8004cf8 <_malloc_r>
 8004dee:	4606      	mov	r6, r0
 8004df0:	b950      	cbnz	r0, 8004e08 <__ssputs_r+0x5c>
 8004df2:	230c      	movs	r3, #12
 8004df4:	f8ca 3000 	str.w	r3, [sl]
 8004df8:	89a3      	ldrh	r3, [r4, #12]
 8004dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dfe:	81a3      	strh	r3, [r4, #12]
 8004e00:	f04f 30ff 	mov.w	r0, #4294967295
 8004e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e08:	6921      	ldr	r1, [r4, #16]
 8004e0a:	464a      	mov	r2, r9
 8004e0c:	f7ff ff16 	bl	8004c3c <memcpy>
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	6126      	str	r6, [r4, #16]
 8004e1e:	6165      	str	r5, [r4, #20]
 8004e20:	444e      	add	r6, r9
 8004e22:	eba5 0509 	sub.w	r5, r5, r9
 8004e26:	6026      	str	r6, [r4, #0]
 8004e28:	60a5      	str	r5, [r4, #8]
 8004e2a:	463e      	mov	r6, r7
 8004e2c:	42be      	cmp	r6, r7
 8004e2e:	d900      	bls.n	8004e32 <__ssputs_r+0x86>
 8004e30:	463e      	mov	r6, r7
 8004e32:	4632      	mov	r2, r6
 8004e34:	6820      	ldr	r0, [r4, #0]
 8004e36:	4641      	mov	r1, r8
 8004e38:	f000 fef8 	bl	8005c2c <memmove>
 8004e3c:	68a3      	ldr	r3, [r4, #8]
 8004e3e:	6822      	ldr	r2, [r4, #0]
 8004e40:	1b9b      	subs	r3, r3, r6
 8004e42:	4432      	add	r2, r6
 8004e44:	60a3      	str	r3, [r4, #8]
 8004e46:	6022      	str	r2, [r4, #0]
 8004e48:	2000      	movs	r0, #0
 8004e4a:	e7db      	b.n	8004e04 <__ssputs_r+0x58>
 8004e4c:	462a      	mov	r2, r5
 8004e4e:	f000 ff13 	bl	8005c78 <_realloc_r>
 8004e52:	4606      	mov	r6, r0
 8004e54:	2800      	cmp	r0, #0
 8004e56:	d1e1      	bne.n	8004e1c <__ssputs_r+0x70>
 8004e58:	6921      	ldr	r1, [r4, #16]
 8004e5a:	4650      	mov	r0, sl
 8004e5c:	f7ff fefc 	bl	8004c58 <_free_r>
 8004e60:	e7c7      	b.n	8004df2 <__ssputs_r+0x46>
	...

08004e64 <_svfiprintf_r>:
 8004e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e68:	4698      	mov	r8, r3
 8004e6a:	898b      	ldrh	r3, [r1, #12]
 8004e6c:	061b      	lsls	r3, r3, #24
 8004e6e:	b09d      	sub	sp, #116	; 0x74
 8004e70:	4607      	mov	r7, r0
 8004e72:	460d      	mov	r5, r1
 8004e74:	4614      	mov	r4, r2
 8004e76:	d50e      	bpl.n	8004e96 <_svfiprintf_r+0x32>
 8004e78:	690b      	ldr	r3, [r1, #16]
 8004e7a:	b963      	cbnz	r3, 8004e96 <_svfiprintf_r+0x32>
 8004e7c:	2140      	movs	r1, #64	; 0x40
 8004e7e:	f7ff ff3b 	bl	8004cf8 <_malloc_r>
 8004e82:	6028      	str	r0, [r5, #0]
 8004e84:	6128      	str	r0, [r5, #16]
 8004e86:	b920      	cbnz	r0, 8004e92 <_svfiprintf_r+0x2e>
 8004e88:	230c      	movs	r3, #12
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e90:	e0d1      	b.n	8005036 <_svfiprintf_r+0x1d2>
 8004e92:	2340      	movs	r3, #64	; 0x40
 8004e94:	616b      	str	r3, [r5, #20]
 8004e96:	2300      	movs	r3, #0
 8004e98:	9309      	str	r3, [sp, #36]	; 0x24
 8004e9a:	2320      	movs	r3, #32
 8004e9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ea0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ea4:	2330      	movs	r3, #48	; 0x30
 8004ea6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005050 <_svfiprintf_r+0x1ec>
 8004eaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004eae:	f04f 0901 	mov.w	r9, #1
 8004eb2:	4623      	mov	r3, r4
 8004eb4:	469a      	mov	sl, r3
 8004eb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eba:	b10a      	cbz	r2, 8004ec0 <_svfiprintf_r+0x5c>
 8004ebc:	2a25      	cmp	r2, #37	; 0x25
 8004ebe:	d1f9      	bne.n	8004eb4 <_svfiprintf_r+0x50>
 8004ec0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ec4:	d00b      	beq.n	8004ede <_svfiprintf_r+0x7a>
 8004ec6:	465b      	mov	r3, fp
 8004ec8:	4622      	mov	r2, r4
 8004eca:	4629      	mov	r1, r5
 8004ecc:	4638      	mov	r0, r7
 8004ece:	f7ff ff6d 	bl	8004dac <__ssputs_r>
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	f000 80aa 	beq.w	800502c <_svfiprintf_r+0x1c8>
 8004ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eda:	445a      	add	r2, fp
 8004edc:	9209      	str	r2, [sp, #36]	; 0x24
 8004ede:	f89a 3000 	ldrb.w	r3, [sl]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 80a2 	beq.w	800502c <_svfiprintf_r+0x1c8>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f04f 32ff 	mov.w	r2, #4294967295
 8004eee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ef2:	f10a 0a01 	add.w	sl, sl, #1
 8004ef6:	9304      	str	r3, [sp, #16]
 8004ef8:	9307      	str	r3, [sp, #28]
 8004efa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004efe:	931a      	str	r3, [sp, #104]	; 0x68
 8004f00:	4654      	mov	r4, sl
 8004f02:	2205      	movs	r2, #5
 8004f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f08:	4851      	ldr	r0, [pc, #324]	; (8005050 <_svfiprintf_r+0x1ec>)
 8004f0a:	f7fb f969 	bl	80001e0 <memchr>
 8004f0e:	9a04      	ldr	r2, [sp, #16]
 8004f10:	b9d8      	cbnz	r0, 8004f4a <_svfiprintf_r+0xe6>
 8004f12:	06d0      	lsls	r0, r2, #27
 8004f14:	bf44      	itt	mi
 8004f16:	2320      	movmi	r3, #32
 8004f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f1c:	0711      	lsls	r1, r2, #28
 8004f1e:	bf44      	itt	mi
 8004f20:	232b      	movmi	r3, #43	; 0x2b
 8004f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f26:	f89a 3000 	ldrb.w	r3, [sl]
 8004f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f2c:	d015      	beq.n	8004f5a <_svfiprintf_r+0xf6>
 8004f2e:	9a07      	ldr	r2, [sp, #28]
 8004f30:	4654      	mov	r4, sl
 8004f32:	2000      	movs	r0, #0
 8004f34:	f04f 0c0a 	mov.w	ip, #10
 8004f38:	4621      	mov	r1, r4
 8004f3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f3e:	3b30      	subs	r3, #48	; 0x30
 8004f40:	2b09      	cmp	r3, #9
 8004f42:	d94e      	bls.n	8004fe2 <_svfiprintf_r+0x17e>
 8004f44:	b1b0      	cbz	r0, 8004f74 <_svfiprintf_r+0x110>
 8004f46:	9207      	str	r2, [sp, #28]
 8004f48:	e014      	b.n	8004f74 <_svfiprintf_r+0x110>
 8004f4a:	eba0 0308 	sub.w	r3, r0, r8
 8004f4e:	fa09 f303 	lsl.w	r3, r9, r3
 8004f52:	4313      	orrs	r3, r2
 8004f54:	9304      	str	r3, [sp, #16]
 8004f56:	46a2      	mov	sl, r4
 8004f58:	e7d2      	b.n	8004f00 <_svfiprintf_r+0x9c>
 8004f5a:	9b03      	ldr	r3, [sp, #12]
 8004f5c:	1d19      	adds	r1, r3, #4
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	9103      	str	r1, [sp, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	bfbb      	ittet	lt
 8004f66:	425b      	neglt	r3, r3
 8004f68:	f042 0202 	orrlt.w	r2, r2, #2
 8004f6c:	9307      	strge	r3, [sp, #28]
 8004f6e:	9307      	strlt	r3, [sp, #28]
 8004f70:	bfb8      	it	lt
 8004f72:	9204      	strlt	r2, [sp, #16]
 8004f74:	7823      	ldrb	r3, [r4, #0]
 8004f76:	2b2e      	cmp	r3, #46	; 0x2e
 8004f78:	d10c      	bne.n	8004f94 <_svfiprintf_r+0x130>
 8004f7a:	7863      	ldrb	r3, [r4, #1]
 8004f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f7e:	d135      	bne.n	8004fec <_svfiprintf_r+0x188>
 8004f80:	9b03      	ldr	r3, [sp, #12]
 8004f82:	1d1a      	adds	r2, r3, #4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	9203      	str	r2, [sp, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bfb8      	it	lt
 8004f8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f90:	3402      	adds	r4, #2
 8004f92:	9305      	str	r3, [sp, #20]
 8004f94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005060 <_svfiprintf_r+0x1fc>
 8004f98:	7821      	ldrb	r1, [r4, #0]
 8004f9a:	2203      	movs	r2, #3
 8004f9c:	4650      	mov	r0, sl
 8004f9e:	f7fb f91f 	bl	80001e0 <memchr>
 8004fa2:	b140      	cbz	r0, 8004fb6 <_svfiprintf_r+0x152>
 8004fa4:	2340      	movs	r3, #64	; 0x40
 8004fa6:	eba0 000a 	sub.w	r0, r0, sl
 8004faa:	fa03 f000 	lsl.w	r0, r3, r0
 8004fae:	9b04      	ldr	r3, [sp, #16]
 8004fb0:	4303      	orrs	r3, r0
 8004fb2:	3401      	adds	r4, #1
 8004fb4:	9304      	str	r3, [sp, #16]
 8004fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fba:	4826      	ldr	r0, [pc, #152]	; (8005054 <_svfiprintf_r+0x1f0>)
 8004fbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fc0:	2206      	movs	r2, #6
 8004fc2:	f7fb f90d 	bl	80001e0 <memchr>
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	d038      	beq.n	800503c <_svfiprintf_r+0x1d8>
 8004fca:	4b23      	ldr	r3, [pc, #140]	; (8005058 <_svfiprintf_r+0x1f4>)
 8004fcc:	bb1b      	cbnz	r3, 8005016 <_svfiprintf_r+0x1b2>
 8004fce:	9b03      	ldr	r3, [sp, #12]
 8004fd0:	3307      	adds	r3, #7
 8004fd2:	f023 0307 	bic.w	r3, r3, #7
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	9303      	str	r3, [sp, #12]
 8004fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fdc:	4433      	add	r3, r6
 8004fde:	9309      	str	r3, [sp, #36]	; 0x24
 8004fe0:	e767      	b.n	8004eb2 <_svfiprintf_r+0x4e>
 8004fe2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	2001      	movs	r0, #1
 8004fea:	e7a5      	b.n	8004f38 <_svfiprintf_r+0xd4>
 8004fec:	2300      	movs	r3, #0
 8004fee:	3401      	adds	r4, #1
 8004ff0:	9305      	str	r3, [sp, #20]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	f04f 0c0a 	mov.w	ip, #10
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ffe:	3a30      	subs	r2, #48	; 0x30
 8005000:	2a09      	cmp	r2, #9
 8005002:	d903      	bls.n	800500c <_svfiprintf_r+0x1a8>
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0c5      	beq.n	8004f94 <_svfiprintf_r+0x130>
 8005008:	9105      	str	r1, [sp, #20]
 800500a:	e7c3      	b.n	8004f94 <_svfiprintf_r+0x130>
 800500c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005010:	4604      	mov	r4, r0
 8005012:	2301      	movs	r3, #1
 8005014:	e7f0      	b.n	8004ff8 <_svfiprintf_r+0x194>
 8005016:	ab03      	add	r3, sp, #12
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	462a      	mov	r2, r5
 800501c:	4b0f      	ldr	r3, [pc, #60]	; (800505c <_svfiprintf_r+0x1f8>)
 800501e:	a904      	add	r1, sp, #16
 8005020:	4638      	mov	r0, r7
 8005022:	f3af 8000 	nop.w
 8005026:	1c42      	adds	r2, r0, #1
 8005028:	4606      	mov	r6, r0
 800502a:	d1d6      	bne.n	8004fda <_svfiprintf_r+0x176>
 800502c:	89ab      	ldrh	r3, [r5, #12]
 800502e:	065b      	lsls	r3, r3, #25
 8005030:	f53f af2c 	bmi.w	8004e8c <_svfiprintf_r+0x28>
 8005034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005036:	b01d      	add	sp, #116	; 0x74
 8005038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503c:	ab03      	add	r3, sp, #12
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	462a      	mov	r2, r5
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <_svfiprintf_r+0x1f8>)
 8005044:	a904      	add	r1, sp, #16
 8005046:	4638      	mov	r0, r7
 8005048:	f000 f9d4 	bl	80053f4 <_printf_i>
 800504c:	e7eb      	b.n	8005026 <_svfiprintf_r+0x1c2>
 800504e:	bf00      	nop
 8005050:	08006078 	.word	0x08006078
 8005054:	08006082 	.word	0x08006082
 8005058:	00000000 	.word	0x00000000
 800505c:	08004dad 	.word	0x08004dad
 8005060:	0800607e 	.word	0x0800607e

08005064 <__sfputc_r>:
 8005064:	6893      	ldr	r3, [r2, #8]
 8005066:	3b01      	subs	r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	b410      	push	{r4}
 800506c:	6093      	str	r3, [r2, #8]
 800506e:	da08      	bge.n	8005082 <__sfputc_r+0x1e>
 8005070:	6994      	ldr	r4, [r2, #24]
 8005072:	42a3      	cmp	r3, r4
 8005074:	db01      	blt.n	800507a <__sfputc_r+0x16>
 8005076:	290a      	cmp	r1, #10
 8005078:	d103      	bne.n	8005082 <__sfputc_r+0x1e>
 800507a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800507e:	f000 baef 	b.w	8005660 <__swbuf_r>
 8005082:	6813      	ldr	r3, [r2, #0]
 8005084:	1c58      	adds	r0, r3, #1
 8005086:	6010      	str	r0, [r2, #0]
 8005088:	7019      	strb	r1, [r3, #0]
 800508a:	4608      	mov	r0, r1
 800508c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005090:	4770      	bx	lr

08005092 <__sfputs_r>:
 8005092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005094:	4606      	mov	r6, r0
 8005096:	460f      	mov	r7, r1
 8005098:	4614      	mov	r4, r2
 800509a:	18d5      	adds	r5, r2, r3
 800509c:	42ac      	cmp	r4, r5
 800509e:	d101      	bne.n	80050a4 <__sfputs_r+0x12>
 80050a0:	2000      	movs	r0, #0
 80050a2:	e007      	b.n	80050b4 <__sfputs_r+0x22>
 80050a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a8:	463a      	mov	r2, r7
 80050aa:	4630      	mov	r0, r6
 80050ac:	f7ff ffda 	bl	8005064 <__sfputc_r>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d1f3      	bne.n	800509c <__sfputs_r+0xa>
 80050b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050b8 <_vfiprintf_r>:
 80050b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050bc:	460d      	mov	r5, r1
 80050be:	b09d      	sub	sp, #116	; 0x74
 80050c0:	4614      	mov	r4, r2
 80050c2:	4698      	mov	r8, r3
 80050c4:	4606      	mov	r6, r0
 80050c6:	b118      	cbz	r0, 80050d0 <_vfiprintf_r+0x18>
 80050c8:	6983      	ldr	r3, [r0, #24]
 80050ca:	b90b      	cbnz	r3, 80050d0 <_vfiprintf_r+0x18>
 80050cc:	f000 fcaa 	bl	8005a24 <__sinit>
 80050d0:	4b89      	ldr	r3, [pc, #548]	; (80052f8 <_vfiprintf_r+0x240>)
 80050d2:	429d      	cmp	r5, r3
 80050d4:	d11b      	bne.n	800510e <_vfiprintf_r+0x56>
 80050d6:	6875      	ldr	r5, [r6, #4]
 80050d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050da:	07d9      	lsls	r1, r3, #31
 80050dc:	d405      	bmi.n	80050ea <_vfiprintf_r+0x32>
 80050de:	89ab      	ldrh	r3, [r5, #12]
 80050e0:	059a      	lsls	r2, r3, #22
 80050e2:	d402      	bmi.n	80050ea <_vfiprintf_r+0x32>
 80050e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050e6:	f000 fd3b 	bl	8005b60 <__retarget_lock_acquire_recursive>
 80050ea:	89ab      	ldrh	r3, [r5, #12]
 80050ec:	071b      	lsls	r3, r3, #28
 80050ee:	d501      	bpl.n	80050f4 <_vfiprintf_r+0x3c>
 80050f0:	692b      	ldr	r3, [r5, #16]
 80050f2:	b9eb      	cbnz	r3, 8005130 <_vfiprintf_r+0x78>
 80050f4:	4629      	mov	r1, r5
 80050f6:	4630      	mov	r0, r6
 80050f8:	f000 fb04 	bl	8005704 <__swsetup_r>
 80050fc:	b1c0      	cbz	r0, 8005130 <_vfiprintf_r+0x78>
 80050fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005100:	07dc      	lsls	r4, r3, #31
 8005102:	d50e      	bpl.n	8005122 <_vfiprintf_r+0x6a>
 8005104:	f04f 30ff 	mov.w	r0, #4294967295
 8005108:	b01d      	add	sp, #116	; 0x74
 800510a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800510e:	4b7b      	ldr	r3, [pc, #492]	; (80052fc <_vfiprintf_r+0x244>)
 8005110:	429d      	cmp	r5, r3
 8005112:	d101      	bne.n	8005118 <_vfiprintf_r+0x60>
 8005114:	68b5      	ldr	r5, [r6, #8]
 8005116:	e7df      	b.n	80050d8 <_vfiprintf_r+0x20>
 8005118:	4b79      	ldr	r3, [pc, #484]	; (8005300 <_vfiprintf_r+0x248>)
 800511a:	429d      	cmp	r5, r3
 800511c:	bf08      	it	eq
 800511e:	68f5      	ldreq	r5, [r6, #12]
 8005120:	e7da      	b.n	80050d8 <_vfiprintf_r+0x20>
 8005122:	89ab      	ldrh	r3, [r5, #12]
 8005124:	0598      	lsls	r0, r3, #22
 8005126:	d4ed      	bmi.n	8005104 <_vfiprintf_r+0x4c>
 8005128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800512a:	f000 fd1a 	bl	8005b62 <__retarget_lock_release_recursive>
 800512e:	e7e9      	b.n	8005104 <_vfiprintf_r+0x4c>
 8005130:	2300      	movs	r3, #0
 8005132:	9309      	str	r3, [sp, #36]	; 0x24
 8005134:	2320      	movs	r3, #32
 8005136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800513a:	f8cd 800c 	str.w	r8, [sp, #12]
 800513e:	2330      	movs	r3, #48	; 0x30
 8005140:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005304 <_vfiprintf_r+0x24c>
 8005144:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005148:	f04f 0901 	mov.w	r9, #1
 800514c:	4623      	mov	r3, r4
 800514e:	469a      	mov	sl, r3
 8005150:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005154:	b10a      	cbz	r2, 800515a <_vfiprintf_r+0xa2>
 8005156:	2a25      	cmp	r2, #37	; 0x25
 8005158:	d1f9      	bne.n	800514e <_vfiprintf_r+0x96>
 800515a:	ebba 0b04 	subs.w	fp, sl, r4
 800515e:	d00b      	beq.n	8005178 <_vfiprintf_r+0xc0>
 8005160:	465b      	mov	r3, fp
 8005162:	4622      	mov	r2, r4
 8005164:	4629      	mov	r1, r5
 8005166:	4630      	mov	r0, r6
 8005168:	f7ff ff93 	bl	8005092 <__sfputs_r>
 800516c:	3001      	adds	r0, #1
 800516e:	f000 80aa 	beq.w	80052c6 <_vfiprintf_r+0x20e>
 8005172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005174:	445a      	add	r2, fp
 8005176:	9209      	str	r2, [sp, #36]	; 0x24
 8005178:	f89a 3000 	ldrb.w	r3, [sl]
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 80a2 	beq.w	80052c6 <_vfiprintf_r+0x20e>
 8005182:	2300      	movs	r3, #0
 8005184:	f04f 32ff 	mov.w	r2, #4294967295
 8005188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800518c:	f10a 0a01 	add.w	sl, sl, #1
 8005190:	9304      	str	r3, [sp, #16]
 8005192:	9307      	str	r3, [sp, #28]
 8005194:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005198:	931a      	str	r3, [sp, #104]	; 0x68
 800519a:	4654      	mov	r4, sl
 800519c:	2205      	movs	r2, #5
 800519e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051a2:	4858      	ldr	r0, [pc, #352]	; (8005304 <_vfiprintf_r+0x24c>)
 80051a4:	f7fb f81c 	bl	80001e0 <memchr>
 80051a8:	9a04      	ldr	r2, [sp, #16]
 80051aa:	b9d8      	cbnz	r0, 80051e4 <_vfiprintf_r+0x12c>
 80051ac:	06d1      	lsls	r1, r2, #27
 80051ae:	bf44      	itt	mi
 80051b0:	2320      	movmi	r3, #32
 80051b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051b6:	0713      	lsls	r3, r2, #28
 80051b8:	bf44      	itt	mi
 80051ba:	232b      	movmi	r3, #43	; 0x2b
 80051bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051c0:	f89a 3000 	ldrb.w	r3, [sl]
 80051c4:	2b2a      	cmp	r3, #42	; 0x2a
 80051c6:	d015      	beq.n	80051f4 <_vfiprintf_r+0x13c>
 80051c8:	9a07      	ldr	r2, [sp, #28]
 80051ca:	4654      	mov	r4, sl
 80051cc:	2000      	movs	r0, #0
 80051ce:	f04f 0c0a 	mov.w	ip, #10
 80051d2:	4621      	mov	r1, r4
 80051d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051d8:	3b30      	subs	r3, #48	; 0x30
 80051da:	2b09      	cmp	r3, #9
 80051dc:	d94e      	bls.n	800527c <_vfiprintf_r+0x1c4>
 80051de:	b1b0      	cbz	r0, 800520e <_vfiprintf_r+0x156>
 80051e0:	9207      	str	r2, [sp, #28]
 80051e2:	e014      	b.n	800520e <_vfiprintf_r+0x156>
 80051e4:	eba0 0308 	sub.w	r3, r0, r8
 80051e8:	fa09 f303 	lsl.w	r3, r9, r3
 80051ec:	4313      	orrs	r3, r2
 80051ee:	9304      	str	r3, [sp, #16]
 80051f0:	46a2      	mov	sl, r4
 80051f2:	e7d2      	b.n	800519a <_vfiprintf_r+0xe2>
 80051f4:	9b03      	ldr	r3, [sp, #12]
 80051f6:	1d19      	adds	r1, r3, #4
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	9103      	str	r1, [sp, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	bfbb      	ittet	lt
 8005200:	425b      	neglt	r3, r3
 8005202:	f042 0202 	orrlt.w	r2, r2, #2
 8005206:	9307      	strge	r3, [sp, #28]
 8005208:	9307      	strlt	r3, [sp, #28]
 800520a:	bfb8      	it	lt
 800520c:	9204      	strlt	r2, [sp, #16]
 800520e:	7823      	ldrb	r3, [r4, #0]
 8005210:	2b2e      	cmp	r3, #46	; 0x2e
 8005212:	d10c      	bne.n	800522e <_vfiprintf_r+0x176>
 8005214:	7863      	ldrb	r3, [r4, #1]
 8005216:	2b2a      	cmp	r3, #42	; 0x2a
 8005218:	d135      	bne.n	8005286 <_vfiprintf_r+0x1ce>
 800521a:	9b03      	ldr	r3, [sp, #12]
 800521c:	1d1a      	adds	r2, r3, #4
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	9203      	str	r2, [sp, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	bfb8      	it	lt
 8005226:	f04f 33ff 	movlt.w	r3, #4294967295
 800522a:	3402      	adds	r4, #2
 800522c:	9305      	str	r3, [sp, #20]
 800522e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005314 <_vfiprintf_r+0x25c>
 8005232:	7821      	ldrb	r1, [r4, #0]
 8005234:	2203      	movs	r2, #3
 8005236:	4650      	mov	r0, sl
 8005238:	f7fa ffd2 	bl	80001e0 <memchr>
 800523c:	b140      	cbz	r0, 8005250 <_vfiprintf_r+0x198>
 800523e:	2340      	movs	r3, #64	; 0x40
 8005240:	eba0 000a 	sub.w	r0, r0, sl
 8005244:	fa03 f000 	lsl.w	r0, r3, r0
 8005248:	9b04      	ldr	r3, [sp, #16]
 800524a:	4303      	orrs	r3, r0
 800524c:	3401      	adds	r4, #1
 800524e:	9304      	str	r3, [sp, #16]
 8005250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005254:	482c      	ldr	r0, [pc, #176]	; (8005308 <_vfiprintf_r+0x250>)
 8005256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800525a:	2206      	movs	r2, #6
 800525c:	f7fa ffc0 	bl	80001e0 <memchr>
 8005260:	2800      	cmp	r0, #0
 8005262:	d03f      	beq.n	80052e4 <_vfiprintf_r+0x22c>
 8005264:	4b29      	ldr	r3, [pc, #164]	; (800530c <_vfiprintf_r+0x254>)
 8005266:	bb1b      	cbnz	r3, 80052b0 <_vfiprintf_r+0x1f8>
 8005268:	9b03      	ldr	r3, [sp, #12]
 800526a:	3307      	adds	r3, #7
 800526c:	f023 0307 	bic.w	r3, r3, #7
 8005270:	3308      	adds	r3, #8
 8005272:	9303      	str	r3, [sp, #12]
 8005274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005276:	443b      	add	r3, r7
 8005278:	9309      	str	r3, [sp, #36]	; 0x24
 800527a:	e767      	b.n	800514c <_vfiprintf_r+0x94>
 800527c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005280:	460c      	mov	r4, r1
 8005282:	2001      	movs	r0, #1
 8005284:	e7a5      	b.n	80051d2 <_vfiprintf_r+0x11a>
 8005286:	2300      	movs	r3, #0
 8005288:	3401      	adds	r4, #1
 800528a:	9305      	str	r3, [sp, #20]
 800528c:	4619      	mov	r1, r3
 800528e:	f04f 0c0a 	mov.w	ip, #10
 8005292:	4620      	mov	r0, r4
 8005294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005298:	3a30      	subs	r2, #48	; 0x30
 800529a:	2a09      	cmp	r2, #9
 800529c:	d903      	bls.n	80052a6 <_vfiprintf_r+0x1ee>
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0c5      	beq.n	800522e <_vfiprintf_r+0x176>
 80052a2:	9105      	str	r1, [sp, #20]
 80052a4:	e7c3      	b.n	800522e <_vfiprintf_r+0x176>
 80052a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80052aa:	4604      	mov	r4, r0
 80052ac:	2301      	movs	r3, #1
 80052ae:	e7f0      	b.n	8005292 <_vfiprintf_r+0x1da>
 80052b0:	ab03      	add	r3, sp, #12
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	462a      	mov	r2, r5
 80052b6:	4b16      	ldr	r3, [pc, #88]	; (8005310 <_vfiprintf_r+0x258>)
 80052b8:	a904      	add	r1, sp, #16
 80052ba:	4630      	mov	r0, r6
 80052bc:	f3af 8000 	nop.w
 80052c0:	4607      	mov	r7, r0
 80052c2:	1c78      	adds	r0, r7, #1
 80052c4:	d1d6      	bne.n	8005274 <_vfiprintf_r+0x1bc>
 80052c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052c8:	07d9      	lsls	r1, r3, #31
 80052ca:	d405      	bmi.n	80052d8 <_vfiprintf_r+0x220>
 80052cc:	89ab      	ldrh	r3, [r5, #12]
 80052ce:	059a      	lsls	r2, r3, #22
 80052d0:	d402      	bmi.n	80052d8 <_vfiprintf_r+0x220>
 80052d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052d4:	f000 fc45 	bl	8005b62 <__retarget_lock_release_recursive>
 80052d8:	89ab      	ldrh	r3, [r5, #12]
 80052da:	065b      	lsls	r3, r3, #25
 80052dc:	f53f af12 	bmi.w	8005104 <_vfiprintf_r+0x4c>
 80052e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052e2:	e711      	b.n	8005108 <_vfiprintf_r+0x50>
 80052e4:	ab03      	add	r3, sp, #12
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	462a      	mov	r2, r5
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <_vfiprintf_r+0x258>)
 80052ec:	a904      	add	r1, sp, #16
 80052ee:	4630      	mov	r0, r6
 80052f0:	f000 f880 	bl	80053f4 <_printf_i>
 80052f4:	e7e4      	b.n	80052c0 <_vfiprintf_r+0x208>
 80052f6:	bf00      	nop
 80052f8:	080060cc 	.word	0x080060cc
 80052fc:	080060ec 	.word	0x080060ec
 8005300:	080060ac 	.word	0x080060ac
 8005304:	08006078 	.word	0x08006078
 8005308:	08006082 	.word	0x08006082
 800530c:	00000000 	.word	0x00000000
 8005310:	08005093 	.word	0x08005093
 8005314:	0800607e 	.word	0x0800607e

08005318 <_printf_common>:
 8005318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800531c:	4616      	mov	r6, r2
 800531e:	4699      	mov	r9, r3
 8005320:	688a      	ldr	r2, [r1, #8]
 8005322:	690b      	ldr	r3, [r1, #16]
 8005324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005328:	4293      	cmp	r3, r2
 800532a:	bfb8      	it	lt
 800532c:	4613      	movlt	r3, r2
 800532e:	6033      	str	r3, [r6, #0]
 8005330:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005334:	4607      	mov	r7, r0
 8005336:	460c      	mov	r4, r1
 8005338:	b10a      	cbz	r2, 800533e <_printf_common+0x26>
 800533a:	3301      	adds	r3, #1
 800533c:	6033      	str	r3, [r6, #0]
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	0699      	lsls	r1, r3, #26
 8005342:	bf42      	ittt	mi
 8005344:	6833      	ldrmi	r3, [r6, #0]
 8005346:	3302      	addmi	r3, #2
 8005348:	6033      	strmi	r3, [r6, #0]
 800534a:	6825      	ldr	r5, [r4, #0]
 800534c:	f015 0506 	ands.w	r5, r5, #6
 8005350:	d106      	bne.n	8005360 <_printf_common+0x48>
 8005352:	f104 0a19 	add.w	sl, r4, #25
 8005356:	68e3      	ldr	r3, [r4, #12]
 8005358:	6832      	ldr	r2, [r6, #0]
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	42ab      	cmp	r3, r5
 800535e:	dc26      	bgt.n	80053ae <_printf_common+0x96>
 8005360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005364:	1e13      	subs	r3, r2, #0
 8005366:	6822      	ldr	r2, [r4, #0]
 8005368:	bf18      	it	ne
 800536a:	2301      	movne	r3, #1
 800536c:	0692      	lsls	r2, r2, #26
 800536e:	d42b      	bmi.n	80053c8 <_printf_common+0xb0>
 8005370:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005374:	4649      	mov	r1, r9
 8005376:	4638      	mov	r0, r7
 8005378:	47c0      	blx	r8
 800537a:	3001      	adds	r0, #1
 800537c:	d01e      	beq.n	80053bc <_printf_common+0xa4>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	68e5      	ldr	r5, [r4, #12]
 8005382:	6832      	ldr	r2, [r6, #0]
 8005384:	f003 0306 	and.w	r3, r3, #6
 8005388:	2b04      	cmp	r3, #4
 800538a:	bf08      	it	eq
 800538c:	1aad      	subeq	r5, r5, r2
 800538e:	68a3      	ldr	r3, [r4, #8]
 8005390:	6922      	ldr	r2, [r4, #16]
 8005392:	bf0c      	ite	eq
 8005394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005398:	2500      	movne	r5, #0
 800539a:	4293      	cmp	r3, r2
 800539c:	bfc4      	itt	gt
 800539e:	1a9b      	subgt	r3, r3, r2
 80053a0:	18ed      	addgt	r5, r5, r3
 80053a2:	2600      	movs	r6, #0
 80053a4:	341a      	adds	r4, #26
 80053a6:	42b5      	cmp	r5, r6
 80053a8:	d11a      	bne.n	80053e0 <_printf_common+0xc8>
 80053aa:	2000      	movs	r0, #0
 80053ac:	e008      	b.n	80053c0 <_printf_common+0xa8>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4652      	mov	r2, sl
 80053b2:	4649      	mov	r1, r9
 80053b4:	4638      	mov	r0, r7
 80053b6:	47c0      	blx	r8
 80053b8:	3001      	adds	r0, #1
 80053ba:	d103      	bne.n	80053c4 <_printf_common+0xac>
 80053bc:	f04f 30ff 	mov.w	r0, #4294967295
 80053c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c4:	3501      	adds	r5, #1
 80053c6:	e7c6      	b.n	8005356 <_printf_common+0x3e>
 80053c8:	18e1      	adds	r1, r4, r3
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	2030      	movs	r0, #48	; 0x30
 80053ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053d2:	4422      	add	r2, r4
 80053d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053dc:	3302      	adds	r3, #2
 80053de:	e7c7      	b.n	8005370 <_printf_common+0x58>
 80053e0:	2301      	movs	r3, #1
 80053e2:	4622      	mov	r2, r4
 80053e4:	4649      	mov	r1, r9
 80053e6:	4638      	mov	r0, r7
 80053e8:	47c0      	blx	r8
 80053ea:	3001      	adds	r0, #1
 80053ec:	d0e6      	beq.n	80053bc <_printf_common+0xa4>
 80053ee:	3601      	adds	r6, #1
 80053f0:	e7d9      	b.n	80053a6 <_printf_common+0x8e>
	...

080053f4 <_printf_i>:
 80053f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053f8:	460c      	mov	r4, r1
 80053fa:	4691      	mov	r9, r2
 80053fc:	7e27      	ldrb	r7, [r4, #24]
 80053fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005400:	2f78      	cmp	r7, #120	; 0x78
 8005402:	4680      	mov	r8, r0
 8005404:	469a      	mov	sl, r3
 8005406:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800540a:	d807      	bhi.n	800541c <_printf_i+0x28>
 800540c:	2f62      	cmp	r7, #98	; 0x62
 800540e:	d80a      	bhi.n	8005426 <_printf_i+0x32>
 8005410:	2f00      	cmp	r7, #0
 8005412:	f000 80d8 	beq.w	80055c6 <_printf_i+0x1d2>
 8005416:	2f58      	cmp	r7, #88	; 0x58
 8005418:	f000 80a3 	beq.w	8005562 <_printf_i+0x16e>
 800541c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005420:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005424:	e03a      	b.n	800549c <_printf_i+0xa8>
 8005426:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800542a:	2b15      	cmp	r3, #21
 800542c:	d8f6      	bhi.n	800541c <_printf_i+0x28>
 800542e:	a001      	add	r0, pc, #4	; (adr r0, 8005434 <_printf_i+0x40>)
 8005430:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005434:	0800548d 	.word	0x0800548d
 8005438:	080054a1 	.word	0x080054a1
 800543c:	0800541d 	.word	0x0800541d
 8005440:	0800541d 	.word	0x0800541d
 8005444:	0800541d 	.word	0x0800541d
 8005448:	0800541d 	.word	0x0800541d
 800544c:	080054a1 	.word	0x080054a1
 8005450:	0800541d 	.word	0x0800541d
 8005454:	0800541d 	.word	0x0800541d
 8005458:	0800541d 	.word	0x0800541d
 800545c:	0800541d 	.word	0x0800541d
 8005460:	080055ad 	.word	0x080055ad
 8005464:	080054d1 	.word	0x080054d1
 8005468:	0800558f 	.word	0x0800558f
 800546c:	0800541d 	.word	0x0800541d
 8005470:	0800541d 	.word	0x0800541d
 8005474:	080055cf 	.word	0x080055cf
 8005478:	0800541d 	.word	0x0800541d
 800547c:	080054d1 	.word	0x080054d1
 8005480:	0800541d 	.word	0x0800541d
 8005484:	0800541d 	.word	0x0800541d
 8005488:	08005597 	.word	0x08005597
 800548c:	680b      	ldr	r3, [r1, #0]
 800548e:	1d1a      	adds	r2, r3, #4
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	600a      	str	r2, [r1, #0]
 8005494:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005498:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800549c:	2301      	movs	r3, #1
 800549e:	e0a3      	b.n	80055e8 <_printf_i+0x1f4>
 80054a0:	6825      	ldr	r5, [r4, #0]
 80054a2:	6808      	ldr	r0, [r1, #0]
 80054a4:	062e      	lsls	r6, r5, #24
 80054a6:	f100 0304 	add.w	r3, r0, #4
 80054aa:	d50a      	bpl.n	80054c2 <_printf_i+0xce>
 80054ac:	6805      	ldr	r5, [r0, #0]
 80054ae:	600b      	str	r3, [r1, #0]
 80054b0:	2d00      	cmp	r5, #0
 80054b2:	da03      	bge.n	80054bc <_printf_i+0xc8>
 80054b4:	232d      	movs	r3, #45	; 0x2d
 80054b6:	426d      	negs	r5, r5
 80054b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054bc:	485e      	ldr	r0, [pc, #376]	; (8005638 <_printf_i+0x244>)
 80054be:	230a      	movs	r3, #10
 80054c0:	e019      	b.n	80054f6 <_printf_i+0x102>
 80054c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80054c6:	6805      	ldr	r5, [r0, #0]
 80054c8:	600b      	str	r3, [r1, #0]
 80054ca:	bf18      	it	ne
 80054cc:	b22d      	sxthne	r5, r5
 80054ce:	e7ef      	b.n	80054b0 <_printf_i+0xbc>
 80054d0:	680b      	ldr	r3, [r1, #0]
 80054d2:	6825      	ldr	r5, [r4, #0]
 80054d4:	1d18      	adds	r0, r3, #4
 80054d6:	6008      	str	r0, [r1, #0]
 80054d8:	0628      	lsls	r0, r5, #24
 80054da:	d501      	bpl.n	80054e0 <_printf_i+0xec>
 80054dc:	681d      	ldr	r5, [r3, #0]
 80054de:	e002      	b.n	80054e6 <_printf_i+0xf2>
 80054e0:	0669      	lsls	r1, r5, #25
 80054e2:	d5fb      	bpl.n	80054dc <_printf_i+0xe8>
 80054e4:	881d      	ldrh	r5, [r3, #0]
 80054e6:	4854      	ldr	r0, [pc, #336]	; (8005638 <_printf_i+0x244>)
 80054e8:	2f6f      	cmp	r7, #111	; 0x6f
 80054ea:	bf0c      	ite	eq
 80054ec:	2308      	moveq	r3, #8
 80054ee:	230a      	movne	r3, #10
 80054f0:	2100      	movs	r1, #0
 80054f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054f6:	6866      	ldr	r6, [r4, #4]
 80054f8:	60a6      	str	r6, [r4, #8]
 80054fa:	2e00      	cmp	r6, #0
 80054fc:	bfa2      	ittt	ge
 80054fe:	6821      	ldrge	r1, [r4, #0]
 8005500:	f021 0104 	bicge.w	r1, r1, #4
 8005504:	6021      	strge	r1, [r4, #0]
 8005506:	b90d      	cbnz	r5, 800550c <_printf_i+0x118>
 8005508:	2e00      	cmp	r6, #0
 800550a:	d04d      	beq.n	80055a8 <_printf_i+0x1b4>
 800550c:	4616      	mov	r6, r2
 800550e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005512:	fb03 5711 	mls	r7, r3, r1, r5
 8005516:	5dc7      	ldrb	r7, [r0, r7]
 8005518:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800551c:	462f      	mov	r7, r5
 800551e:	42bb      	cmp	r3, r7
 8005520:	460d      	mov	r5, r1
 8005522:	d9f4      	bls.n	800550e <_printf_i+0x11a>
 8005524:	2b08      	cmp	r3, #8
 8005526:	d10b      	bne.n	8005540 <_printf_i+0x14c>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	07df      	lsls	r7, r3, #31
 800552c:	d508      	bpl.n	8005540 <_printf_i+0x14c>
 800552e:	6923      	ldr	r3, [r4, #16]
 8005530:	6861      	ldr	r1, [r4, #4]
 8005532:	4299      	cmp	r1, r3
 8005534:	bfde      	ittt	le
 8005536:	2330      	movle	r3, #48	; 0x30
 8005538:	f806 3c01 	strble.w	r3, [r6, #-1]
 800553c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005540:	1b92      	subs	r2, r2, r6
 8005542:	6122      	str	r2, [r4, #16]
 8005544:	f8cd a000 	str.w	sl, [sp]
 8005548:	464b      	mov	r3, r9
 800554a:	aa03      	add	r2, sp, #12
 800554c:	4621      	mov	r1, r4
 800554e:	4640      	mov	r0, r8
 8005550:	f7ff fee2 	bl	8005318 <_printf_common>
 8005554:	3001      	adds	r0, #1
 8005556:	d14c      	bne.n	80055f2 <_printf_i+0x1fe>
 8005558:	f04f 30ff 	mov.w	r0, #4294967295
 800555c:	b004      	add	sp, #16
 800555e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005562:	4835      	ldr	r0, [pc, #212]	; (8005638 <_printf_i+0x244>)
 8005564:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	680e      	ldr	r6, [r1, #0]
 800556c:	061f      	lsls	r7, r3, #24
 800556e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005572:	600e      	str	r6, [r1, #0]
 8005574:	d514      	bpl.n	80055a0 <_printf_i+0x1ac>
 8005576:	07d9      	lsls	r1, r3, #31
 8005578:	bf44      	itt	mi
 800557a:	f043 0320 	orrmi.w	r3, r3, #32
 800557e:	6023      	strmi	r3, [r4, #0]
 8005580:	b91d      	cbnz	r5, 800558a <_printf_i+0x196>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	f023 0320 	bic.w	r3, r3, #32
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	2310      	movs	r3, #16
 800558c:	e7b0      	b.n	80054f0 <_printf_i+0xfc>
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	f043 0320 	orr.w	r3, r3, #32
 8005594:	6023      	str	r3, [r4, #0]
 8005596:	2378      	movs	r3, #120	; 0x78
 8005598:	4828      	ldr	r0, [pc, #160]	; (800563c <_printf_i+0x248>)
 800559a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800559e:	e7e3      	b.n	8005568 <_printf_i+0x174>
 80055a0:	065e      	lsls	r6, r3, #25
 80055a2:	bf48      	it	mi
 80055a4:	b2ad      	uxthmi	r5, r5
 80055a6:	e7e6      	b.n	8005576 <_printf_i+0x182>
 80055a8:	4616      	mov	r6, r2
 80055aa:	e7bb      	b.n	8005524 <_printf_i+0x130>
 80055ac:	680b      	ldr	r3, [r1, #0]
 80055ae:	6826      	ldr	r6, [r4, #0]
 80055b0:	6960      	ldr	r0, [r4, #20]
 80055b2:	1d1d      	adds	r5, r3, #4
 80055b4:	600d      	str	r5, [r1, #0]
 80055b6:	0635      	lsls	r5, r6, #24
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	d501      	bpl.n	80055c0 <_printf_i+0x1cc>
 80055bc:	6018      	str	r0, [r3, #0]
 80055be:	e002      	b.n	80055c6 <_printf_i+0x1d2>
 80055c0:	0671      	lsls	r1, r6, #25
 80055c2:	d5fb      	bpl.n	80055bc <_printf_i+0x1c8>
 80055c4:	8018      	strh	r0, [r3, #0]
 80055c6:	2300      	movs	r3, #0
 80055c8:	6123      	str	r3, [r4, #16]
 80055ca:	4616      	mov	r6, r2
 80055cc:	e7ba      	b.n	8005544 <_printf_i+0x150>
 80055ce:	680b      	ldr	r3, [r1, #0]
 80055d0:	1d1a      	adds	r2, r3, #4
 80055d2:	600a      	str	r2, [r1, #0]
 80055d4:	681e      	ldr	r6, [r3, #0]
 80055d6:	6862      	ldr	r2, [r4, #4]
 80055d8:	2100      	movs	r1, #0
 80055da:	4630      	mov	r0, r6
 80055dc:	f7fa fe00 	bl	80001e0 <memchr>
 80055e0:	b108      	cbz	r0, 80055e6 <_printf_i+0x1f2>
 80055e2:	1b80      	subs	r0, r0, r6
 80055e4:	6060      	str	r0, [r4, #4]
 80055e6:	6863      	ldr	r3, [r4, #4]
 80055e8:	6123      	str	r3, [r4, #16]
 80055ea:	2300      	movs	r3, #0
 80055ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f0:	e7a8      	b.n	8005544 <_printf_i+0x150>
 80055f2:	6923      	ldr	r3, [r4, #16]
 80055f4:	4632      	mov	r2, r6
 80055f6:	4649      	mov	r1, r9
 80055f8:	4640      	mov	r0, r8
 80055fa:	47d0      	blx	sl
 80055fc:	3001      	adds	r0, #1
 80055fe:	d0ab      	beq.n	8005558 <_printf_i+0x164>
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	079b      	lsls	r3, r3, #30
 8005604:	d413      	bmi.n	800562e <_printf_i+0x23a>
 8005606:	68e0      	ldr	r0, [r4, #12]
 8005608:	9b03      	ldr	r3, [sp, #12]
 800560a:	4298      	cmp	r0, r3
 800560c:	bfb8      	it	lt
 800560e:	4618      	movlt	r0, r3
 8005610:	e7a4      	b.n	800555c <_printf_i+0x168>
 8005612:	2301      	movs	r3, #1
 8005614:	4632      	mov	r2, r6
 8005616:	4649      	mov	r1, r9
 8005618:	4640      	mov	r0, r8
 800561a:	47d0      	blx	sl
 800561c:	3001      	adds	r0, #1
 800561e:	d09b      	beq.n	8005558 <_printf_i+0x164>
 8005620:	3501      	adds	r5, #1
 8005622:	68e3      	ldr	r3, [r4, #12]
 8005624:	9903      	ldr	r1, [sp, #12]
 8005626:	1a5b      	subs	r3, r3, r1
 8005628:	42ab      	cmp	r3, r5
 800562a:	dcf2      	bgt.n	8005612 <_printf_i+0x21e>
 800562c:	e7eb      	b.n	8005606 <_printf_i+0x212>
 800562e:	2500      	movs	r5, #0
 8005630:	f104 0619 	add.w	r6, r4, #25
 8005634:	e7f5      	b.n	8005622 <_printf_i+0x22e>
 8005636:	bf00      	nop
 8005638:	08006089 	.word	0x08006089
 800563c:	0800609a 	.word	0x0800609a

08005640 <_sbrk_r>:
 8005640:	b538      	push	{r3, r4, r5, lr}
 8005642:	4d06      	ldr	r5, [pc, #24]	; (800565c <_sbrk_r+0x1c>)
 8005644:	2300      	movs	r3, #0
 8005646:	4604      	mov	r4, r0
 8005648:	4608      	mov	r0, r1
 800564a:	602b      	str	r3, [r5, #0]
 800564c:	f7fb fd32 	bl	80010b4 <_sbrk>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_sbrk_r+0x1a>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	b103      	cbz	r3, 800565a <_sbrk_r+0x1a>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	200001fc 	.word	0x200001fc

08005660 <__swbuf_r>:
 8005660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005662:	460e      	mov	r6, r1
 8005664:	4614      	mov	r4, r2
 8005666:	4605      	mov	r5, r0
 8005668:	b118      	cbz	r0, 8005672 <__swbuf_r+0x12>
 800566a:	6983      	ldr	r3, [r0, #24]
 800566c:	b90b      	cbnz	r3, 8005672 <__swbuf_r+0x12>
 800566e:	f000 f9d9 	bl	8005a24 <__sinit>
 8005672:	4b21      	ldr	r3, [pc, #132]	; (80056f8 <__swbuf_r+0x98>)
 8005674:	429c      	cmp	r4, r3
 8005676:	d12b      	bne.n	80056d0 <__swbuf_r+0x70>
 8005678:	686c      	ldr	r4, [r5, #4]
 800567a:	69a3      	ldr	r3, [r4, #24]
 800567c:	60a3      	str	r3, [r4, #8]
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	071a      	lsls	r2, r3, #28
 8005682:	d52f      	bpl.n	80056e4 <__swbuf_r+0x84>
 8005684:	6923      	ldr	r3, [r4, #16]
 8005686:	b36b      	cbz	r3, 80056e4 <__swbuf_r+0x84>
 8005688:	6923      	ldr	r3, [r4, #16]
 800568a:	6820      	ldr	r0, [r4, #0]
 800568c:	1ac0      	subs	r0, r0, r3
 800568e:	6963      	ldr	r3, [r4, #20]
 8005690:	b2f6      	uxtb	r6, r6
 8005692:	4283      	cmp	r3, r0
 8005694:	4637      	mov	r7, r6
 8005696:	dc04      	bgt.n	80056a2 <__swbuf_r+0x42>
 8005698:	4621      	mov	r1, r4
 800569a:	4628      	mov	r0, r5
 800569c:	f000 f92e 	bl	80058fc <_fflush_r>
 80056a0:	bb30      	cbnz	r0, 80056f0 <__swbuf_r+0x90>
 80056a2:	68a3      	ldr	r3, [r4, #8]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	60a3      	str	r3, [r4, #8]
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	6022      	str	r2, [r4, #0]
 80056ae:	701e      	strb	r6, [r3, #0]
 80056b0:	6963      	ldr	r3, [r4, #20]
 80056b2:	3001      	adds	r0, #1
 80056b4:	4283      	cmp	r3, r0
 80056b6:	d004      	beq.n	80056c2 <__swbuf_r+0x62>
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	07db      	lsls	r3, r3, #31
 80056bc:	d506      	bpl.n	80056cc <__swbuf_r+0x6c>
 80056be:	2e0a      	cmp	r6, #10
 80056c0:	d104      	bne.n	80056cc <__swbuf_r+0x6c>
 80056c2:	4621      	mov	r1, r4
 80056c4:	4628      	mov	r0, r5
 80056c6:	f000 f919 	bl	80058fc <_fflush_r>
 80056ca:	b988      	cbnz	r0, 80056f0 <__swbuf_r+0x90>
 80056cc:	4638      	mov	r0, r7
 80056ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d0:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <__swbuf_r+0x9c>)
 80056d2:	429c      	cmp	r4, r3
 80056d4:	d101      	bne.n	80056da <__swbuf_r+0x7a>
 80056d6:	68ac      	ldr	r4, [r5, #8]
 80056d8:	e7cf      	b.n	800567a <__swbuf_r+0x1a>
 80056da:	4b09      	ldr	r3, [pc, #36]	; (8005700 <__swbuf_r+0xa0>)
 80056dc:	429c      	cmp	r4, r3
 80056de:	bf08      	it	eq
 80056e0:	68ec      	ldreq	r4, [r5, #12]
 80056e2:	e7ca      	b.n	800567a <__swbuf_r+0x1a>
 80056e4:	4621      	mov	r1, r4
 80056e6:	4628      	mov	r0, r5
 80056e8:	f000 f80c 	bl	8005704 <__swsetup_r>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d0cb      	beq.n	8005688 <__swbuf_r+0x28>
 80056f0:	f04f 37ff 	mov.w	r7, #4294967295
 80056f4:	e7ea      	b.n	80056cc <__swbuf_r+0x6c>
 80056f6:	bf00      	nop
 80056f8:	080060cc 	.word	0x080060cc
 80056fc:	080060ec 	.word	0x080060ec
 8005700:	080060ac 	.word	0x080060ac

08005704 <__swsetup_r>:
 8005704:	4b32      	ldr	r3, [pc, #200]	; (80057d0 <__swsetup_r+0xcc>)
 8005706:	b570      	push	{r4, r5, r6, lr}
 8005708:	681d      	ldr	r5, [r3, #0]
 800570a:	4606      	mov	r6, r0
 800570c:	460c      	mov	r4, r1
 800570e:	b125      	cbz	r5, 800571a <__swsetup_r+0x16>
 8005710:	69ab      	ldr	r3, [r5, #24]
 8005712:	b913      	cbnz	r3, 800571a <__swsetup_r+0x16>
 8005714:	4628      	mov	r0, r5
 8005716:	f000 f985 	bl	8005a24 <__sinit>
 800571a:	4b2e      	ldr	r3, [pc, #184]	; (80057d4 <__swsetup_r+0xd0>)
 800571c:	429c      	cmp	r4, r3
 800571e:	d10f      	bne.n	8005740 <__swsetup_r+0x3c>
 8005720:	686c      	ldr	r4, [r5, #4]
 8005722:	89a3      	ldrh	r3, [r4, #12]
 8005724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005728:	0719      	lsls	r1, r3, #28
 800572a:	d42c      	bmi.n	8005786 <__swsetup_r+0x82>
 800572c:	06dd      	lsls	r5, r3, #27
 800572e:	d411      	bmi.n	8005754 <__swsetup_r+0x50>
 8005730:	2309      	movs	r3, #9
 8005732:	6033      	str	r3, [r6, #0]
 8005734:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005738:	81a3      	strh	r3, [r4, #12]
 800573a:	f04f 30ff 	mov.w	r0, #4294967295
 800573e:	e03e      	b.n	80057be <__swsetup_r+0xba>
 8005740:	4b25      	ldr	r3, [pc, #148]	; (80057d8 <__swsetup_r+0xd4>)
 8005742:	429c      	cmp	r4, r3
 8005744:	d101      	bne.n	800574a <__swsetup_r+0x46>
 8005746:	68ac      	ldr	r4, [r5, #8]
 8005748:	e7eb      	b.n	8005722 <__swsetup_r+0x1e>
 800574a:	4b24      	ldr	r3, [pc, #144]	; (80057dc <__swsetup_r+0xd8>)
 800574c:	429c      	cmp	r4, r3
 800574e:	bf08      	it	eq
 8005750:	68ec      	ldreq	r4, [r5, #12]
 8005752:	e7e6      	b.n	8005722 <__swsetup_r+0x1e>
 8005754:	0758      	lsls	r0, r3, #29
 8005756:	d512      	bpl.n	800577e <__swsetup_r+0x7a>
 8005758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800575a:	b141      	cbz	r1, 800576e <__swsetup_r+0x6a>
 800575c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005760:	4299      	cmp	r1, r3
 8005762:	d002      	beq.n	800576a <__swsetup_r+0x66>
 8005764:	4630      	mov	r0, r6
 8005766:	f7ff fa77 	bl	8004c58 <_free_r>
 800576a:	2300      	movs	r3, #0
 800576c:	6363      	str	r3, [r4, #52]	; 0x34
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005774:	81a3      	strh	r3, [r4, #12]
 8005776:	2300      	movs	r3, #0
 8005778:	6063      	str	r3, [r4, #4]
 800577a:	6923      	ldr	r3, [r4, #16]
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	89a3      	ldrh	r3, [r4, #12]
 8005780:	f043 0308 	orr.w	r3, r3, #8
 8005784:	81a3      	strh	r3, [r4, #12]
 8005786:	6923      	ldr	r3, [r4, #16]
 8005788:	b94b      	cbnz	r3, 800579e <__swsetup_r+0x9a>
 800578a:	89a3      	ldrh	r3, [r4, #12]
 800578c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005794:	d003      	beq.n	800579e <__swsetup_r+0x9a>
 8005796:	4621      	mov	r1, r4
 8005798:	4630      	mov	r0, r6
 800579a:	f000 fa07 	bl	8005bac <__smakebuf_r>
 800579e:	89a0      	ldrh	r0, [r4, #12]
 80057a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057a4:	f010 0301 	ands.w	r3, r0, #1
 80057a8:	d00a      	beq.n	80057c0 <__swsetup_r+0xbc>
 80057aa:	2300      	movs	r3, #0
 80057ac:	60a3      	str	r3, [r4, #8]
 80057ae:	6963      	ldr	r3, [r4, #20]
 80057b0:	425b      	negs	r3, r3
 80057b2:	61a3      	str	r3, [r4, #24]
 80057b4:	6923      	ldr	r3, [r4, #16]
 80057b6:	b943      	cbnz	r3, 80057ca <__swsetup_r+0xc6>
 80057b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057bc:	d1ba      	bne.n	8005734 <__swsetup_r+0x30>
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	0781      	lsls	r1, r0, #30
 80057c2:	bf58      	it	pl
 80057c4:	6963      	ldrpl	r3, [r4, #20]
 80057c6:	60a3      	str	r3, [r4, #8]
 80057c8:	e7f4      	b.n	80057b4 <__swsetup_r+0xb0>
 80057ca:	2000      	movs	r0, #0
 80057cc:	e7f7      	b.n	80057be <__swsetup_r+0xba>
 80057ce:	bf00      	nop
 80057d0:	2000000c 	.word	0x2000000c
 80057d4:	080060cc 	.word	0x080060cc
 80057d8:	080060ec 	.word	0x080060ec
 80057dc:	080060ac 	.word	0x080060ac

080057e0 <abort>:
 80057e0:	b508      	push	{r3, lr}
 80057e2:	2006      	movs	r0, #6
 80057e4:	f000 fa96 	bl	8005d14 <raise>
 80057e8:	2001      	movs	r0, #1
 80057ea:	f7fb fbeb 	bl	8000fc4 <_exit>
	...

080057f0 <__sflush_r>:
 80057f0:	898a      	ldrh	r2, [r1, #12]
 80057f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f6:	4605      	mov	r5, r0
 80057f8:	0710      	lsls	r0, r2, #28
 80057fa:	460c      	mov	r4, r1
 80057fc:	d458      	bmi.n	80058b0 <__sflush_r+0xc0>
 80057fe:	684b      	ldr	r3, [r1, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	dc05      	bgt.n	8005810 <__sflush_r+0x20>
 8005804:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	dc02      	bgt.n	8005810 <__sflush_r+0x20>
 800580a:	2000      	movs	r0, #0
 800580c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005812:	2e00      	cmp	r6, #0
 8005814:	d0f9      	beq.n	800580a <__sflush_r+0x1a>
 8005816:	2300      	movs	r3, #0
 8005818:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800581c:	682f      	ldr	r7, [r5, #0]
 800581e:	602b      	str	r3, [r5, #0]
 8005820:	d032      	beq.n	8005888 <__sflush_r+0x98>
 8005822:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	075a      	lsls	r2, r3, #29
 8005828:	d505      	bpl.n	8005836 <__sflush_r+0x46>
 800582a:	6863      	ldr	r3, [r4, #4]
 800582c:	1ac0      	subs	r0, r0, r3
 800582e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005830:	b10b      	cbz	r3, 8005836 <__sflush_r+0x46>
 8005832:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005834:	1ac0      	subs	r0, r0, r3
 8005836:	2300      	movs	r3, #0
 8005838:	4602      	mov	r2, r0
 800583a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800583c:	6a21      	ldr	r1, [r4, #32]
 800583e:	4628      	mov	r0, r5
 8005840:	47b0      	blx	r6
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	89a3      	ldrh	r3, [r4, #12]
 8005846:	d106      	bne.n	8005856 <__sflush_r+0x66>
 8005848:	6829      	ldr	r1, [r5, #0]
 800584a:	291d      	cmp	r1, #29
 800584c:	d82c      	bhi.n	80058a8 <__sflush_r+0xb8>
 800584e:	4a2a      	ldr	r2, [pc, #168]	; (80058f8 <__sflush_r+0x108>)
 8005850:	40ca      	lsrs	r2, r1
 8005852:	07d6      	lsls	r6, r2, #31
 8005854:	d528      	bpl.n	80058a8 <__sflush_r+0xb8>
 8005856:	2200      	movs	r2, #0
 8005858:	6062      	str	r2, [r4, #4]
 800585a:	04d9      	lsls	r1, r3, #19
 800585c:	6922      	ldr	r2, [r4, #16]
 800585e:	6022      	str	r2, [r4, #0]
 8005860:	d504      	bpl.n	800586c <__sflush_r+0x7c>
 8005862:	1c42      	adds	r2, r0, #1
 8005864:	d101      	bne.n	800586a <__sflush_r+0x7a>
 8005866:	682b      	ldr	r3, [r5, #0]
 8005868:	b903      	cbnz	r3, 800586c <__sflush_r+0x7c>
 800586a:	6560      	str	r0, [r4, #84]	; 0x54
 800586c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800586e:	602f      	str	r7, [r5, #0]
 8005870:	2900      	cmp	r1, #0
 8005872:	d0ca      	beq.n	800580a <__sflush_r+0x1a>
 8005874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005878:	4299      	cmp	r1, r3
 800587a:	d002      	beq.n	8005882 <__sflush_r+0x92>
 800587c:	4628      	mov	r0, r5
 800587e:	f7ff f9eb 	bl	8004c58 <_free_r>
 8005882:	2000      	movs	r0, #0
 8005884:	6360      	str	r0, [r4, #52]	; 0x34
 8005886:	e7c1      	b.n	800580c <__sflush_r+0x1c>
 8005888:	6a21      	ldr	r1, [r4, #32]
 800588a:	2301      	movs	r3, #1
 800588c:	4628      	mov	r0, r5
 800588e:	47b0      	blx	r6
 8005890:	1c41      	adds	r1, r0, #1
 8005892:	d1c7      	bne.n	8005824 <__sflush_r+0x34>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0c4      	beq.n	8005824 <__sflush_r+0x34>
 800589a:	2b1d      	cmp	r3, #29
 800589c:	d001      	beq.n	80058a2 <__sflush_r+0xb2>
 800589e:	2b16      	cmp	r3, #22
 80058a0:	d101      	bne.n	80058a6 <__sflush_r+0xb6>
 80058a2:	602f      	str	r7, [r5, #0]
 80058a4:	e7b1      	b.n	800580a <__sflush_r+0x1a>
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ac:	81a3      	strh	r3, [r4, #12]
 80058ae:	e7ad      	b.n	800580c <__sflush_r+0x1c>
 80058b0:	690f      	ldr	r7, [r1, #16]
 80058b2:	2f00      	cmp	r7, #0
 80058b4:	d0a9      	beq.n	800580a <__sflush_r+0x1a>
 80058b6:	0793      	lsls	r3, r2, #30
 80058b8:	680e      	ldr	r6, [r1, #0]
 80058ba:	bf08      	it	eq
 80058bc:	694b      	ldreq	r3, [r1, #20]
 80058be:	600f      	str	r7, [r1, #0]
 80058c0:	bf18      	it	ne
 80058c2:	2300      	movne	r3, #0
 80058c4:	eba6 0807 	sub.w	r8, r6, r7
 80058c8:	608b      	str	r3, [r1, #8]
 80058ca:	f1b8 0f00 	cmp.w	r8, #0
 80058ce:	dd9c      	ble.n	800580a <__sflush_r+0x1a>
 80058d0:	6a21      	ldr	r1, [r4, #32]
 80058d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058d4:	4643      	mov	r3, r8
 80058d6:	463a      	mov	r2, r7
 80058d8:	4628      	mov	r0, r5
 80058da:	47b0      	blx	r6
 80058dc:	2800      	cmp	r0, #0
 80058de:	dc06      	bgt.n	80058ee <__sflush_r+0xfe>
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e6:	81a3      	strh	r3, [r4, #12]
 80058e8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ec:	e78e      	b.n	800580c <__sflush_r+0x1c>
 80058ee:	4407      	add	r7, r0
 80058f0:	eba8 0800 	sub.w	r8, r8, r0
 80058f4:	e7e9      	b.n	80058ca <__sflush_r+0xda>
 80058f6:	bf00      	nop
 80058f8:	20400001 	.word	0x20400001

080058fc <_fflush_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	690b      	ldr	r3, [r1, #16]
 8005900:	4605      	mov	r5, r0
 8005902:	460c      	mov	r4, r1
 8005904:	b913      	cbnz	r3, 800590c <_fflush_r+0x10>
 8005906:	2500      	movs	r5, #0
 8005908:	4628      	mov	r0, r5
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	b118      	cbz	r0, 8005916 <_fflush_r+0x1a>
 800590e:	6983      	ldr	r3, [r0, #24]
 8005910:	b90b      	cbnz	r3, 8005916 <_fflush_r+0x1a>
 8005912:	f000 f887 	bl	8005a24 <__sinit>
 8005916:	4b14      	ldr	r3, [pc, #80]	; (8005968 <_fflush_r+0x6c>)
 8005918:	429c      	cmp	r4, r3
 800591a:	d11b      	bne.n	8005954 <_fflush_r+0x58>
 800591c:	686c      	ldr	r4, [r5, #4]
 800591e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0ef      	beq.n	8005906 <_fflush_r+0xa>
 8005926:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005928:	07d0      	lsls	r0, r2, #31
 800592a:	d404      	bmi.n	8005936 <_fflush_r+0x3a>
 800592c:	0599      	lsls	r1, r3, #22
 800592e:	d402      	bmi.n	8005936 <_fflush_r+0x3a>
 8005930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005932:	f000 f915 	bl	8005b60 <__retarget_lock_acquire_recursive>
 8005936:	4628      	mov	r0, r5
 8005938:	4621      	mov	r1, r4
 800593a:	f7ff ff59 	bl	80057f0 <__sflush_r>
 800593e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005940:	07da      	lsls	r2, r3, #31
 8005942:	4605      	mov	r5, r0
 8005944:	d4e0      	bmi.n	8005908 <_fflush_r+0xc>
 8005946:	89a3      	ldrh	r3, [r4, #12]
 8005948:	059b      	lsls	r3, r3, #22
 800594a:	d4dd      	bmi.n	8005908 <_fflush_r+0xc>
 800594c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800594e:	f000 f908 	bl	8005b62 <__retarget_lock_release_recursive>
 8005952:	e7d9      	b.n	8005908 <_fflush_r+0xc>
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <_fflush_r+0x70>)
 8005956:	429c      	cmp	r4, r3
 8005958:	d101      	bne.n	800595e <_fflush_r+0x62>
 800595a:	68ac      	ldr	r4, [r5, #8]
 800595c:	e7df      	b.n	800591e <_fflush_r+0x22>
 800595e:	4b04      	ldr	r3, [pc, #16]	; (8005970 <_fflush_r+0x74>)
 8005960:	429c      	cmp	r4, r3
 8005962:	bf08      	it	eq
 8005964:	68ec      	ldreq	r4, [r5, #12]
 8005966:	e7da      	b.n	800591e <_fflush_r+0x22>
 8005968:	080060cc 	.word	0x080060cc
 800596c:	080060ec 	.word	0x080060ec
 8005970:	080060ac 	.word	0x080060ac

08005974 <std>:
 8005974:	2300      	movs	r3, #0
 8005976:	b510      	push	{r4, lr}
 8005978:	4604      	mov	r4, r0
 800597a:	e9c0 3300 	strd	r3, r3, [r0]
 800597e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005982:	6083      	str	r3, [r0, #8]
 8005984:	8181      	strh	r1, [r0, #12]
 8005986:	6643      	str	r3, [r0, #100]	; 0x64
 8005988:	81c2      	strh	r2, [r0, #14]
 800598a:	6183      	str	r3, [r0, #24]
 800598c:	4619      	mov	r1, r3
 800598e:	2208      	movs	r2, #8
 8005990:	305c      	adds	r0, #92	; 0x5c
 8005992:	f7ff f805 	bl	80049a0 <memset>
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <std+0x38>)
 8005998:	6263      	str	r3, [r4, #36]	; 0x24
 800599a:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <std+0x3c>)
 800599c:	62a3      	str	r3, [r4, #40]	; 0x28
 800599e:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <std+0x40>)
 80059a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059a2:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <std+0x44>)
 80059a4:	6224      	str	r4, [r4, #32]
 80059a6:	6323      	str	r3, [r4, #48]	; 0x30
 80059a8:	bd10      	pop	{r4, pc}
 80059aa:	bf00      	nop
 80059ac:	08005d4d 	.word	0x08005d4d
 80059b0:	08005d6f 	.word	0x08005d6f
 80059b4:	08005da7 	.word	0x08005da7
 80059b8:	08005dcb 	.word	0x08005dcb

080059bc <_cleanup_r>:
 80059bc:	4901      	ldr	r1, [pc, #4]	; (80059c4 <_cleanup_r+0x8>)
 80059be:	f000 b8af 	b.w	8005b20 <_fwalk_reent>
 80059c2:	bf00      	nop
 80059c4:	080058fd 	.word	0x080058fd

080059c8 <__sfmoreglue>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	1e4a      	subs	r2, r1, #1
 80059cc:	2568      	movs	r5, #104	; 0x68
 80059ce:	4355      	muls	r5, r2
 80059d0:	460e      	mov	r6, r1
 80059d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059d6:	f7ff f98f 	bl	8004cf8 <_malloc_r>
 80059da:	4604      	mov	r4, r0
 80059dc:	b140      	cbz	r0, 80059f0 <__sfmoreglue+0x28>
 80059de:	2100      	movs	r1, #0
 80059e0:	e9c0 1600 	strd	r1, r6, [r0]
 80059e4:	300c      	adds	r0, #12
 80059e6:	60a0      	str	r0, [r4, #8]
 80059e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059ec:	f7fe ffd8 	bl	80049a0 <memset>
 80059f0:	4620      	mov	r0, r4
 80059f2:	bd70      	pop	{r4, r5, r6, pc}

080059f4 <__sfp_lock_acquire>:
 80059f4:	4801      	ldr	r0, [pc, #4]	; (80059fc <__sfp_lock_acquire+0x8>)
 80059f6:	f000 b8b3 	b.w	8005b60 <__retarget_lock_acquire_recursive>
 80059fa:	bf00      	nop
 80059fc:	200001f8 	.word	0x200001f8

08005a00 <__sfp_lock_release>:
 8005a00:	4801      	ldr	r0, [pc, #4]	; (8005a08 <__sfp_lock_release+0x8>)
 8005a02:	f000 b8ae 	b.w	8005b62 <__retarget_lock_release_recursive>
 8005a06:	bf00      	nop
 8005a08:	200001f8 	.word	0x200001f8

08005a0c <__sinit_lock_acquire>:
 8005a0c:	4801      	ldr	r0, [pc, #4]	; (8005a14 <__sinit_lock_acquire+0x8>)
 8005a0e:	f000 b8a7 	b.w	8005b60 <__retarget_lock_acquire_recursive>
 8005a12:	bf00      	nop
 8005a14:	200001f3 	.word	0x200001f3

08005a18 <__sinit_lock_release>:
 8005a18:	4801      	ldr	r0, [pc, #4]	; (8005a20 <__sinit_lock_release+0x8>)
 8005a1a:	f000 b8a2 	b.w	8005b62 <__retarget_lock_release_recursive>
 8005a1e:	bf00      	nop
 8005a20:	200001f3 	.word	0x200001f3

08005a24 <__sinit>:
 8005a24:	b510      	push	{r4, lr}
 8005a26:	4604      	mov	r4, r0
 8005a28:	f7ff fff0 	bl	8005a0c <__sinit_lock_acquire>
 8005a2c:	69a3      	ldr	r3, [r4, #24]
 8005a2e:	b11b      	cbz	r3, 8005a38 <__sinit+0x14>
 8005a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a34:	f7ff bff0 	b.w	8005a18 <__sinit_lock_release>
 8005a38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a3c:	6523      	str	r3, [r4, #80]	; 0x50
 8005a3e:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <__sinit+0x68>)
 8005a40:	4a13      	ldr	r2, [pc, #76]	; (8005a90 <__sinit+0x6c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a46:	42a3      	cmp	r3, r4
 8005a48:	bf04      	itt	eq
 8005a4a:	2301      	moveq	r3, #1
 8005a4c:	61a3      	streq	r3, [r4, #24]
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f000 f820 	bl	8005a94 <__sfp>
 8005a54:	6060      	str	r0, [r4, #4]
 8005a56:	4620      	mov	r0, r4
 8005a58:	f000 f81c 	bl	8005a94 <__sfp>
 8005a5c:	60a0      	str	r0, [r4, #8]
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f000 f818 	bl	8005a94 <__sfp>
 8005a64:	2200      	movs	r2, #0
 8005a66:	60e0      	str	r0, [r4, #12]
 8005a68:	2104      	movs	r1, #4
 8005a6a:	6860      	ldr	r0, [r4, #4]
 8005a6c:	f7ff ff82 	bl	8005974 <std>
 8005a70:	68a0      	ldr	r0, [r4, #8]
 8005a72:	2201      	movs	r2, #1
 8005a74:	2109      	movs	r1, #9
 8005a76:	f7ff ff7d 	bl	8005974 <std>
 8005a7a:	68e0      	ldr	r0, [r4, #12]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	2112      	movs	r1, #18
 8005a80:	f7ff ff78 	bl	8005974 <std>
 8005a84:	2301      	movs	r3, #1
 8005a86:	61a3      	str	r3, [r4, #24]
 8005a88:	e7d2      	b.n	8005a30 <__sinit+0xc>
 8005a8a:	bf00      	nop
 8005a8c:	08005fc0 	.word	0x08005fc0
 8005a90:	080059bd 	.word	0x080059bd

08005a94 <__sfp>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	4607      	mov	r7, r0
 8005a98:	f7ff ffac 	bl	80059f4 <__sfp_lock_acquire>
 8005a9c:	4b1e      	ldr	r3, [pc, #120]	; (8005b18 <__sfp+0x84>)
 8005a9e:	681e      	ldr	r6, [r3, #0]
 8005aa0:	69b3      	ldr	r3, [r6, #24]
 8005aa2:	b913      	cbnz	r3, 8005aaa <__sfp+0x16>
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	f7ff ffbd 	bl	8005a24 <__sinit>
 8005aaa:	3648      	adds	r6, #72	; 0x48
 8005aac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	d503      	bpl.n	8005abc <__sfp+0x28>
 8005ab4:	6833      	ldr	r3, [r6, #0]
 8005ab6:	b30b      	cbz	r3, 8005afc <__sfp+0x68>
 8005ab8:	6836      	ldr	r6, [r6, #0]
 8005aba:	e7f7      	b.n	8005aac <__sfp+0x18>
 8005abc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ac0:	b9d5      	cbnz	r5, 8005af8 <__sfp+0x64>
 8005ac2:	4b16      	ldr	r3, [pc, #88]	; (8005b1c <__sfp+0x88>)
 8005ac4:	60e3      	str	r3, [r4, #12]
 8005ac6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005aca:	6665      	str	r5, [r4, #100]	; 0x64
 8005acc:	f000 f847 	bl	8005b5e <__retarget_lock_init_recursive>
 8005ad0:	f7ff ff96 	bl	8005a00 <__sfp_lock_release>
 8005ad4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ad8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005adc:	6025      	str	r5, [r4, #0]
 8005ade:	61a5      	str	r5, [r4, #24]
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	4629      	mov	r1, r5
 8005ae4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ae8:	f7fe ff5a 	bl	80049a0 <memset>
 8005aec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005af0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005af4:	4620      	mov	r0, r4
 8005af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af8:	3468      	adds	r4, #104	; 0x68
 8005afa:	e7d9      	b.n	8005ab0 <__sfp+0x1c>
 8005afc:	2104      	movs	r1, #4
 8005afe:	4638      	mov	r0, r7
 8005b00:	f7ff ff62 	bl	80059c8 <__sfmoreglue>
 8005b04:	4604      	mov	r4, r0
 8005b06:	6030      	str	r0, [r6, #0]
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	d1d5      	bne.n	8005ab8 <__sfp+0x24>
 8005b0c:	f7ff ff78 	bl	8005a00 <__sfp_lock_release>
 8005b10:	230c      	movs	r3, #12
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	e7ee      	b.n	8005af4 <__sfp+0x60>
 8005b16:	bf00      	nop
 8005b18:	08005fc0 	.word	0x08005fc0
 8005b1c:	ffff0001 	.word	0xffff0001

08005b20 <_fwalk_reent>:
 8005b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b24:	4606      	mov	r6, r0
 8005b26:	4688      	mov	r8, r1
 8005b28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b2c:	2700      	movs	r7, #0
 8005b2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b32:	f1b9 0901 	subs.w	r9, r9, #1
 8005b36:	d505      	bpl.n	8005b44 <_fwalk_reent+0x24>
 8005b38:	6824      	ldr	r4, [r4, #0]
 8005b3a:	2c00      	cmp	r4, #0
 8005b3c:	d1f7      	bne.n	8005b2e <_fwalk_reent+0xe>
 8005b3e:	4638      	mov	r0, r7
 8005b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b44:	89ab      	ldrh	r3, [r5, #12]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d907      	bls.n	8005b5a <_fwalk_reent+0x3a>
 8005b4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	d003      	beq.n	8005b5a <_fwalk_reent+0x3a>
 8005b52:	4629      	mov	r1, r5
 8005b54:	4630      	mov	r0, r6
 8005b56:	47c0      	blx	r8
 8005b58:	4307      	orrs	r7, r0
 8005b5a:	3568      	adds	r5, #104	; 0x68
 8005b5c:	e7e9      	b.n	8005b32 <_fwalk_reent+0x12>

08005b5e <__retarget_lock_init_recursive>:
 8005b5e:	4770      	bx	lr

08005b60 <__retarget_lock_acquire_recursive>:
 8005b60:	4770      	bx	lr

08005b62 <__retarget_lock_release_recursive>:
 8005b62:	4770      	bx	lr

08005b64 <__swhatbuf_r>:
 8005b64:	b570      	push	{r4, r5, r6, lr}
 8005b66:	460e      	mov	r6, r1
 8005b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	b096      	sub	sp, #88	; 0x58
 8005b70:	4614      	mov	r4, r2
 8005b72:	461d      	mov	r5, r3
 8005b74:	da07      	bge.n	8005b86 <__swhatbuf_r+0x22>
 8005b76:	2300      	movs	r3, #0
 8005b78:	602b      	str	r3, [r5, #0]
 8005b7a:	89b3      	ldrh	r3, [r6, #12]
 8005b7c:	061a      	lsls	r2, r3, #24
 8005b7e:	d410      	bmi.n	8005ba2 <__swhatbuf_r+0x3e>
 8005b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b84:	e00e      	b.n	8005ba4 <__swhatbuf_r+0x40>
 8005b86:	466a      	mov	r2, sp
 8005b88:	f000 f946 	bl	8005e18 <_fstat_r>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	dbf2      	blt.n	8005b76 <__swhatbuf_r+0x12>
 8005b90:	9a01      	ldr	r2, [sp, #4]
 8005b92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b9a:	425a      	negs	r2, r3
 8005b9c:	415a      	adcs	r2, r3
 8005b9e:	602a      	str	r2, [r5, #0]
 8005ba0:	e7ee      	b.n	8005b80 <__swhatbuf_r+0x1c>
 8005ba2:	2340      	movs	r3, #64	; 0x40
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	6023      	str	r3, [r4, #0]
 8005ba8:	b016      	add	sp, #88	; 0x58
 8005baa:	bd70      	pop	{r4, r5, r6, pc}

08005bac <__smakebuf_r>:
 8005bac:	898b      	ldrh	r3, [r1, #12]
 8005bae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bb0:	079d      	lsls	r5, r3, #30
 8005bb2:	4606      	mov	r6, r0
 8005bb4:	460c      	mov	r4, r1
 8005bb6:	d507      	bpl.n	8005bc8 <__smakebuf_r+0x1c>
 8005bb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	6123      	str	r3, [r4, #16]
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	6163      	str	r3, [r4, #20]
 8005bc4:	b002      	add	sp, #8
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	ab01      	add	r3, sp, #4
 8005bca:	466a      	mov	r2, sp
 8005bcc:	f7ff ffca 	bl	8005b64 <__swhatbuf_r>
 8005bd0:	9900      	ldr	r1, [sp, #0]
 8005bd2:	4605      	mov	r5, r0
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	f7ff f88f 	bl	8004cf8 <_malloc_r>
 8005bda:	b948      	cbnz	r0, 8005bf0 <__smakebuf_r+0x44>
 8005bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005be0:	059a      	lsls	r2, r3, #22
 8005be2:	d4ef      	bmi.n	8005bc4 <__smakebuf_r+0x18>
 8005be4:	f023 0303 	bic.w	r3, r3, #3
 8005be8:	f043 0302 	orr.w	r3, r3, #2
 8005bec:	81a3      	strh	r3, [r4, #12]
 8005bee:	e7e3      	b.n	8005bb8 <__smakebuf_r+0xc>
 8005bf0:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <__smakebuf_r+0x7c>)
 8005bf2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	6020      	str	r0, [r4, #0]
 8005bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfc:	81a3      	strh	r3, [r4, #12]
 8005bfe:	9b00      	ldr	r3, [sp, #0]
 8005c00:	6163      	str	r3, [r4, #20]
 8005c02:	9b01      	ldr	r3, [sp, #4]
 8005c04:	6120      	str	r0, [r4, #16]
 8005c06:	b15b      	cbz	r3, 8005c20 <__smakebuf_r+0x74>
 8005c08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f000 f915 	bl	8005e3c <_isatty_r>
 8005c12:	b128      	cbz	r0, 8005c20 <__smakebuf_r+0x74>
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	f023 0303 	bic.w	r3, r3, #3
 8005c1a:	f043 0301 	orr.w	r3, r3, #1
 8005c1e:	81a3      	strh	r3, [r4, #12]
 8005c20:	89a0      	ldrh	r0, [r4, #12]
 8005c22:	4305      	orrs	r5, r0
 8005c24:	81a5      	strh	r5, [r4, #12]
 8005c26:	e7cd      	b.n	8005bc4 <__smakebuf_r+0x18>
 8005c28:	080059bd 	.word	0x080059bd

08005c2c <memmove>:
 8005c2c:	4288      	cmp	r0, r1
 8005c2e:	b510      	push	{r4, lr}
 8005c30:	eb01 0402 	add.w	r4, r1, r2
 8005c34:	d902      	bls.n	8005c3c <memmove+0x10>
 8005c36:	4284      	cmp	r4, r0
 8005c38:	4623      	mov	r3, r4
 8005c3a:	d807      	bhi.n	8005c4c <memmove+0x20>
 8005c3c:	1e43      	subs	r3, r0, #1
 8005c3e:	42a1      	cmp	r1, r4
 8005c40:	d008      	beq.n	8005c54 <memmove+0x28>
 8005c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c4a:	e7f8      	b.n	8005c3e <memmove+0x12>
 8005c4c:	4402      	add	r2, r0
 8005c4e:	4601      	mov	r1, r0
 8005c50:	428a      	cmp	r2, r1
 8005c52:	d100      	bne.n	8005c56 <memmove+0x2a>
 8005c54:	bd10      	pop	{r4, pc}
 8005c56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c5e:	e7f7      	b.n	8005c50 <memmove+0x24>

08005c60 <__malloc_lock>:
 8005c60:	4801      	ldr	r0, [pc, #4]	; (8005c68 <__malloc_lock+0x8>)
 8005c62:	f7ff bf7d 	b.w	8005b60 <__retarget_lock_acquire_recursive>
 8005c66:	bf00      	nop
 8005c68:	200001f4 	.word	0x200001f4

08005c6c <__malloc_unlock>:
 8005c6c:	4801      	ldr	r0, [pc, #4]	; (8005c74 <__malloc_unlock+0x8>)
 8005c6e:	f7ff bf78 	b.w	8005b62 <__retarget_lock_release_recursive>
 8005c72:	bf00      	nop
 8005c74:	200001f4 	.word	0x200001f4

08005c78 <_realloc_r>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	4607      	mov	r7, r0
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	460e      	mov	r6, r1
 8005c80:	b921      	cbnz	r1, 8005c8c <_realloc_r+0x14>
 8005c82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c86:	4611      	mov	r1, r2
 8005c88:	f7ff b836 	b.w	8004cf8 <_malloc_r>
 8005c8c:	b922      	cbnz	r2, 8005c98 <_realloc_r+0x20>
 8005c8e:	f7fe ffe3 	bl	8004c58 <_free_r>
 8005c92:	4625      	mov	r5, r4
 8005c94:	4628      	mov	r0, r5
 8005c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c98:	f000 f8f2 	bl	8005e80 <_malloc_usable_size_r>
 8005c9c:	42a0      	cmp	r0, r4
 8005c9e:	d20f      	bcs.n	8005cc0 <_realloc_r+0x48>
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	f7ff f828 	bl	8004cf8 <_malloc_r>
 8005ca8:	4605      	mov	r5, r0
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d0f2      	beq.n	8005c94 <_realloc_r+0x1c>
 8005cae:	4631      	mov	r1, r6
 8005cb0:	4622      	mov	r2, r4
 8005cb2:	f7fe ffc3 	bl	8004c3c <memcpy>
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	4638      	mov	r0, r7
 8005cba:	f7fe ffcd 	bl	8004c58 <_free_r>
 8005cbe:	e7e9      	b.n	8005c94 <_realloc_r+0x1c>
 8005cc0:	4635      	mov	r5, r6
 8005cc2:	e7e7      	b.n	8005c94 <_realloc_r+0x1c>

08005cc4 <_raise_r>:
 8005cc4:	291f      	cmp	r1, #31
 8005cc6:	b538      	push	{r3, r4, r5, lr}
 8005cc8:	4604      	mov	r4, r0
 8005cca:	460d      	mov	r5, r1
 8005ccc:	d904      	bls.n	8005cd8 <_raise_r+0x14>
 8005cce:	2316      	movs	r3, #22
 8005cd0:	6003      	str	r3, [r0, #0]
 8005cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005cda:	b112      	cbz	r2, 8005ce2 <_raise_r+0x1e>
 8005cdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ce0:	b94b      	cbnz	r3, 8005cf6 <_raise_r+0x32>
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f000 f830 	bl	8005d48 <_getpid_r>
 8005ce8:	462a      	mov	r2, r5
 8005cea:	4601      	mov	r1, r0
 8005cec:	4620      	mov	r0, r4
 8005cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cf2:	f000 b817 	b.w	8005d24 <_kill_r>
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d00a      	beq.n	8005d10 <_raise_r+0x4c>
 8005cfa:	1c59      	adds	r1, r3, #1
 8005cfc:	d103      	bne.n	8005d06 <_raise_r+0x42>
 8005cfe:	2316      	movs	r3, #22
 8005d00:	6003      	str	r3, [r0, #0]
 8005d02:	2001      	movs	r0, #1
 8005d04:	e7e7      	b.n	8005cd6 <_raise_r+0x12>
 8005d06:	2400      	movs	r4, #0
 8005d08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	4798      	blx	r3
 8005d10:	2000      	movs	r0, #0
 8005d12:	e7e0      	b.n	8005cd6 <_raise_r+0x12>

08005d14 <raise>:
 8005d14:	4b02      	ldr	r3, [pc, #8]	; (8005d20 <raise+0xc>)
 8005d16:	4601      	mov	r1, r0
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	f7ff bfd3 	b.w	8005cc4 <_raise_r>
 8005d1e:	bf00      	nop
 8005d20:	2000000c 	.word	0x2000000c

08005d24 <_kill_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4d07      	ldr	r5, [pc, #28]	; (8005d44 <_kill_r+0x20>)
 8005d28:	2300      	movs	r3, #0
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	4608      	mov	r0, r1
 8005d2e:	4611      	mov	r1, r2
 8005d30:	602b      	str	r3, [r5, #0]
 8005d32:	f7fb f937 	bl	8000fa4 <_kill>
 8005d36:	1c43      	adds	r3, r0, #1
 8005d38:	d102      	bne.n	8005d40 <_kill_r+0x1c>
 8005d3a:	682b      	ldr	r3, [r5, #0]
 8005d3c:	b103      	cbz	r3, 8005d40 <_kill_r+0x1c>
 8005d3e:	6023      	str	r3, [r4, #0]
 8005d40:	bd38      	pop	{r3, r4, r5, pc}
 8005d42:	bf00      	nop
 8005d44:	200001fc 	.word	0x200001fc

08005d48 <_getpid_r>:
 8005d48:	f7fb b924 	b.w	8000f94 <_getpid>

08005d4c <__sread>:
 8005d4c:	b510      	push	{r4, lr}
 8005d4e:	460c      	mov	r4, r1
 8005d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d54:	f000 f89c 	bl	8005e90 <_read_r>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	bfab      	itete	ge
 8005d5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d5e:	89a3      	ldrhlt	r3, [r4, #12]
 8005d60:	181b      	addge	r3, r3, r0
 8005d62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d66:	bfac      	ite	ge
 8005d68:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d6a:	81a3      	strhlt	r3, [r4, #12]
 8005d6c:	bd10      	pop	{r4, pc}

08005d6e <__swrite>:
 8005d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d72:	461f      	mov	r7, r3
 8005d74:	898b      	ldrh	r3, [r1, #12]
 8005d76:	05db      	lsls	r3, r3, #23
 8005d78:	4605      	mov	r5, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	4616      	mov	r6, r2
 8005d7e:	d505      	bpl.n	8005d8c <__swrite+0x1e>
 8005d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d84:	2302      	movs	r3, #2
 8005d86:	2200      	movs	r2, #0
 8005d88:	f000 f868 	bl	8005e5c <_lseek_r>
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d96:	81a3      	strh	r3, [r4, #12]
 8005d98:	4632      	mov	r2, r6
 8005d9a:	463b      	mov	r3, r7
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005da2:	f000 b817 	b.w	8005dd4 <_write_r>

08005da6 <__sseek>:
 8005da6:	b510      	push	{r4, lr}
 8005da8:	460c      	mov	r4, r1
 8005daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dae:	f000 f855 	bl	8005e5c <_lseek_r>
 8005db2:	1c43      	adds	r3, r0, #1
 8005db4:	89a3      	ldrh	r3, [r4, #12]
 8005db6:	bf15      	itete	ne
 8005db8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005dba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005dbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005dc2:	81a3      	strheq	r3, [r4, #12]
 8005dc4:	bf18      	it	ne
 8005dc6:	81a3      	strhne	r3, [r4, #12]
 8005dc8:	bd10      	pop	{r4, pc}

08005dca <__sclose>:
 8005dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dce:	f000 b813 	b.w	8005df8 <_close_r>
	...

08005dd4 <_write_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4d07      	ldr	r5, [pc, #28]	; (8005df4 <_write_r+0x20>)
 8005dd8:	4604      	mov	r4, r0
 8005dda:	4608      	mov	r0, r1
 8005ddc:	4611      	mov	r1, r2
 8005dde:	2200      	movs	r2, #0
 8005de0:	602a      	str	r2, [r5, #0]
 8005de2:	461a      	mov	r2, r3
 8005de4:	f7fb f915 	bl	8001012 <_write>
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d102      	bne.n	8005df2 <_write_r+0x1e>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	b103      	cbz	r3, 8005df2 <_write_r+0x1e>
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	200001fc 	.word	0x200001fc

08005df8 <_close_r>:
 8005df8:	b538      	push	{r3, r4, r5, lr}
 8005dfa:	4d06      	ldr	r5, [pc, #24]	; (8005e14 <_close_r+0x1c>)
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	4604      	mov	r4, r0
 8005e00:	4608      	mov	r0, r1
 8005e02:	602b      	str	r3, [r5, #0]
 8005e04:	f7fb f921 	bl	800104a <_close>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d102      	bne.n	8005e12 <_close_r+0x1a>
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	b103      	cbz	r3, 8005e12 <_close_r+0x1a>
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	200001fc 	.word	0x200001fc

08005e18 <_fstat_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4d07      	ldr	r5, [pc, #28]	; (8005e38 <_fstat_r+0x20>)
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4604      	mov	r4, r0
 8005e20:	4608      	mov	r0, r1
 8005e22:	4611      	mov	r1, r2
 8005e24:	602b      	str	r3, [r5, #0]
 8005e26:	f7fb f91c 	bl	8001062 <_fstat>
 8005e2a:	1c43      	adds	r3, r0, #1
 8005e2c:	d102      	bne.n	8005e34 <_fstat_r+0x1c>
 8005e2e:	682b      	ldr	r3, [r5, #0]
 8005e30:	b103      	cbz	r3, 8005e34 <_fstat_r+0x1c>
 8005e32:	6023      	str	r3, [r4, #0]
 8005e34:	bd38      	pop	{r3, r4, r5, pc}
 8005e36:	bf00      	nop
 8005e38:	200001fc 	.word	0x200001fc

08005e3c <_isatty_r>:
 8005e3c:	b538      	push	{r3, r4, r5, lr}
 8005e3e:	4d06      	ldr	r5, [pc, #24]	; (8005e58 <_isatty_r+0x1c>)
 8005e40:	2300      	movs	r3, #0
 8005e42:	4604      	mov	r4, r0
 8005e44:	4608      	mov	r0, r1
 8005e46:	602b      	str	r3, [r5, #0]
 8005e48:	f7fb f91b 	bl	8001082 <_isatty>
 8005e4c:	1c43      	adds	r3, r0, #1
 8005e4e:	d102      	bne.n	8005e56 <_isatty_r+0x1a>
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	b103      	cbz	r3, 8005e56 <_isatty_r+0x1a>
 8005e54:	6023      	str	r3, [r4, #0]
 8005e56:	bd38      	pop	{r3, r4, r5, pc}
 8005e58:	200001fc 	.word	0x200001fc

08005e5c <_lseek_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	4d07      	ldr	r5, [pc, #28]	; (8005e7c <_lseek_r+0x20>)
 8005e60:	4604      	mov	r4, r0
 8005e62:	4608      	mov	r0, r1
 8005e64:	4611      	mov	r1, r2
 8005e66:	2200      	movs	r2, #0
 8005e68:	602a      	str	r2, [r5, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f7fb f914 	bl	8001098 <_lseek>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d102      	bne.n	8005e7a <_lseek_r+0x1e>
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	b103      	cbz	r3, 8005e7a <_lseek_r+0x1e>
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	200001fc 	.word	0x200001fc

08005e80 <_malloc_usable_size_r>:
 8005e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e84:	1f18      	subs	r0, r3, #4
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	bfbc      	itt	lt
 8005e8a:	580b      	ldrlt	r3, [r1, r0]
 8005e8c:	18c0      	addlt	r0, r0, r3
 8005e8e:	4770      	bx	lr

08005e90 <_read_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	4d07      	ldr	r5, [pc, #28]	; (8005eb0 <_read_r+0x20>)
 8005e94:	4604      	mov	r4, r0
 8005e96:	4608      	mov	r0, r1
 8005e98:	4611      	mov	r1, r2
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	602a      	str	r2, [r5, #0]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f7fb f89a 	bl	8000fd8 <_read>
 8005ea4:	1c43      	adds	r3, r0, #1
 8005ea6:	d102      	bne.n	8005eae <_read_r+0x1e>
 8005ea8:	682b      	ldr	r3, [r5, #0]
 8005eaa:	b103      	cbz	r3, 8005eae <_read_r+0x1e>
 8005eac:	6023      	str	r3, [r4, #0]
 8005eae:	bd38      	pop	{r3, r4, r5, pc}
 8005eb0:	200001fc 	.word	0x200001fc

08005eb4 <_init>:
 8005eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb6:	bf00      	nop
 8005eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eba:	bc08      	pop	{r3}
 8005ebc:	469e      	mov	lr, r3
 8005ebe:	4770      	bx	lr

08005ec0 <_fini>:
 8005ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec2:	bf00      	nop
 8005ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec6:	bc08      	pop	{r3}
 8005ec8:	469e      	mov	lr, r3
 8005eca:	4770      	bx	lr
