
nucleo-l476rg-SIM33EAU_GPS_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006050  08006050  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006050  08006050  00016050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006058  08006058  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006058  08006058  00016058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800605c  0800605c  0001605c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000070  080060d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080060d0  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010285  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213c  00000000  00000000  00030325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  00032468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  00032ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027109  00000000  00000000  000338b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd33  00000000  00000000  0005a9b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb6db  00000000  00000000  000676ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00152dc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000363c  00000000  00000000  00152e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e0c 	.word	0x08005e0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005e0c 	.word	0x08005e0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN PTD */

uint8_t flag = 0;

// this interrupts changes flag to 1 as soon as the uint8_t buff[300] is full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

	flag = 1;
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <HAL_UART_RxCpltCallback+0x1c>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]

}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000008c 	.word	0x2000008c

08000598 <nmea0183_checksum>:

// function to calculate checksum of the NMEA sentence
// -4, but not -3 because the NMEA sentences are delimited with \r\n, and there also is the invisible \r in the end
int nmea0183_checksum(char *msg) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

	int checksum = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
	int j = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]

	// the first $ sign and the last two bytes of original CRC + the * sign
	for (j = 1; j < strlen(msg) - 4; j++) {
 80005a8:	2301      	movs	r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	e00a      	b.n	80005c4 <nmea0183_checksum+0x2c>
		checksum = checksum ^ (unsigned) msg[j];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4053      	eors	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
	for (j = 1; j < strlen(msg) - 4; j++) {
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff fe03 	bl	80001d0 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	1f1a      	subs	r2, r3, #4
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d8ec      	bhi.n	80005ae <nmea0183_checksum+0x16>
	}

	return checksum;
 80005d4:	68fb      	ldr	r3, [r7, #12]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e2:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 80005e6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005e8:	f000 fdb6 	bl	8001158 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005ec:	f000 fa3c 	bl	8000a68 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005f0:	f000 fb0a 	bl	8000c08 <MX_GPIO_Init>
	MX_DMA_Init();
 80005f4:	f000 faea 	bl	8000bcc <MX_DMA_Init>
	MX_USART1_UART_Init();
 80005f8:	f000 fa88 	bl	8000b0c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80005fc:	f000 fab6 	bl	8000b6c <MX_USART2_UART_Init>

	char hH[2]; // hours
	char mM[2]; // minutes
	char sS[2]; // seconds

	uint8_t cnt = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	f887 3303 	strb.w	r3, [r7, #771]	; 0x303

	HAL_UART_Receive_DMA(&huart1, buff, 255);
 8000606:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800060a:	22ff      	movs	r2, #255	; 0xff
 800060c:	4619      	mov	r1, r3
 800060e:	4872      	ldr	r0, [pc, #456]	; (80007d8 <main+0x1f8>)
 8000610:	f002 ff7a 	bl	8003508 <HAL_UART_Receive_DMA>

	//My addition. Change settings for all sentences.
	char command[100] = "$PMTK314,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0*29\r\n"; //all sentences
 8000614:	f107 0610 	add.w	r6, r7, #16
 8000618:	4b70      	ldr	r3, [pc, #448]	; (80007dc <main+0x1fc>)
 800061a:	4634      	mov	r4, r6
 800061c:	461d      	mov	r5, r3
 800061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062a:	682b      	ldr	r3, [r5, #0]
 800062c:	6023      	str	r3, [r4, #0]
 800062e:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f004 f992 	bl	8004960 <memset>
	HAL_UART_Transmit(&huart1, (uint8_t*) command, strlen(command), 200);//show the sentences chosen
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fdc5 	bl	80001d0 <strlen>
 8000646:	4603      	mov	r3, r0
 8000648:	b29a      	uxth	r2, r3
 800064a:	f107 0110 	add.w	r1, r7, #16
 800064e:	23c8      	movs	r3, #200	; 0xc8
 8000650:	4861      	ldr	r0, [pc, #388]	; (80007d8 <main+0x1f8>)
 8000652:	f002 fec5 	bl	80033e0 <HAL_UART_Transmit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (flag == 1) { // interrupt signals that the buffer buff[300] is full
 8000656:	4b62      	ldr	r3, [pc, #392]	; (80007e0 <main+0x200>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b01      	cmp	r3, #1
 800065c:	f040 81eb 	bne.w	8000a36 <main+0x456>
			  or \r Carriage return
			  or \n Line feed, end delimiter

			 */

			memset(buffStr, 0, 255);
 8000660:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000664:	22ff      	movs	r2, #255	; 0xff
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f004 f979 	bl	8004960 <memset>

			sprintf(buffStr, "%s", buff);
 800066e:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8000672:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000676:	495b      	ldr	r1, [pc, #364]	; (80007e4 <main+0x204>)
 8000678:	4618      	mov	r0, r3
 800067a:	f004 f979 	bl	8004970 <siprintf>

			// if we want to display the incoming raw data
			HAL_UART_Transmit(&huart2, buff, 255, 70);
 800067e:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
 8000682:	2346      	movs	r3, #70	; 0x46
 8000684:	22ff      	movs	r2, #255	; 0xff
 8000686:	4858      	ldr	r0, [pc, #352]	; (80007e8 <main+0x208>)
 8000688:	f002 feaa 	bl	80033e0 <HAL_UART_Transmit>

			// splitting the buffStr by the "\n" delimiter with the strsep() C function
			// see http://www.manpagez.com/man/3/strsep/
			char *token, *string;

			string = strdup(buffStr);
 800068c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000690:	4618      	mov	r0, r3
 8000692:	f004 f9b1 	bl	80049f8 <strdup>
 8000696:	4603      	mov	r3, r0
 8000698:	461a      	mov	r2, r3
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	601a      	str	r2, [r3, #0]

			// actually splitting the string by "\n" delimiter
			while ((token = strsep(&string, "\n")) != NULL) {
 80006a0:	e1b9      	b.n	8000a16 <main+0x436>

				memset(nmeaSnt, 0, 80);
 80006a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006a6:	2250      	movs	r2, #80	; 0x50
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f004 f958 	bl	8004960 <memset>

				sprintf(nmeaSnt, "%s", token);
 80006b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006b4:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 80006b8:	494a      	ldr	r1, [pc, #296]	; (80007e4 <main+0x204>)
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 f958 	bl	8004970 <siprintf>

				// selecting only $GNGLL sentences, combined GPS and GLONASS
				// on my GPS sensor this good NMEA sentence is always 50 characters
				if ((strstr(nmeaSnt, "$GNGLL") != 0) && strlen(nmeaSnt) > 49 && strstr(nmeaSnt, "*") != 0) {
 80006c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006c4:	4949      	ldr	r1, [pc, #292]	; (80007ec <main+0x20c>)
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 f9b8 	bl	8004a3c <strstr>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	f000 81a1 	beq.w	8000a16 <main+0x436>
 80006d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fd79 	bl	80001d0 <strlen>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b31      	cmp	r3, #49	; 0x31
 80006e2:	f240 8198 	bls.w	8000a16 <main+0x436>
 80006e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006ea:	212a      	movs	r1, #42	; 0x2a
 80006ec:	4618      	mov	r0, r3
 80006ee:	f004 f96e 	bl	80049ce <strchr>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	f000 818e 	beq.w	8000a16 <main+0x436>

					rawSum = strstr(nmeaSnt, "*");
 80006fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006fe:	212a      	movs	r1, #42	; 0x2a
 8000700:	4618      	mov	r0, r3
 8000702:	f004 f964 	bl	80049ce <strchr>
 8000706:	f8c7 02f4 	str.w	r0, [r7, #756]	; 0x2f4

					memcpy(smNmbr, &rawSum[1], 2);
 800070a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800070e:	3301      	adds	r3, #1
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	b29a      	uxth	r2, r3
 8000714:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000718:	801a      	strh	r2, [r3, #0]

					smNmbr[2] = '\0';
 800071a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800071e:	2200      	movs	r2, #0
 8000720:	709a      	strb	r2, [r3, #2]

					uint8_t intSum = nmea0183_checksum(nmeaSnt);
 8000722:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff36 	bl	8000598 <nmea0183_checksum>
 800072c:	4603      	mov	r3, r0
 800072e:	f887 32f3 	strb.w	r3, [r7, #755]	; 0x2f3

					char hex[2];

					// "%X" unsigned hexadecimal integer (capital letters)
					sprintf(hex, "%X", intSum);
 8000732:	f897 22f3 	ldrb.w	r2, [r7, #755]	; 0x2f3
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	492d      	ldr	r1, [pc, #180]	; (80007f0 <main+0x210>)
 800073c:	4618      	mov	r0, r3
 800073e:	f004 f917 	bl	8004970 <siprintf>

					// checksum data verification, if OK, then we can really trust
					// the data in the the NMEA sentence
					if (strstr(smNmbr, hex) != NULL) {
 8000742:	f107 0208 	add.w	r2, r7, #8
 8000746:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800074a:	4611      	mov	r1, r2
 800074c:	4618      	mov	r0, r3
 800074e:	f004 f975 	bl	8004a3c <strstr>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	f000 815e 	beq.w	8000a16 <main+0x436>

						//if we want display good $GNGLL NMEA sentences
						//HAL_UART_Transmit(&huart2, nmeaSnt, 50, 70);
						//HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 200);

						cnt = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	f887 3303 	strb.w	r3, [r7, #771]	; 0x303

						// splitting the good NMEA sentence into the tokens by the comma delimiter
						for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8000760:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000764:	4923      	ldr	r1, [pc, #140]	; (80007f4 <main+0x214>)
 8000766:	4618      	mov	r0, r3
 8000768:	f004 f980 	bl	8004a6c <strtok>
 800076c:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 8000770:	e055      	b.n	800081e <main+0x23e>

							switch (cnt) {
 8000772:	f897 3303 	ldrb.w	r3, [r7, #771]	; 0x303
 8000776:	3b01      	subs	r3, #1
 8000778:	2b04      	cmp	r3, #4
 800077a:	d845      	bhi.n	8000808 <main+0x228>
 800077c:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <main+0x1a4>)
 800077e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000782:	bf00      	nop
 8000784:	08000799 	.word	0x08000799
 8000788:	080007a9 	.word	0x080007a9
 800078c:	080007b9 	.word	0x080007b9
 8000790:	080007c9 	.word	0x080007c9
 8000794:	080007f9 	.word	0x080007f9
							case 1:
								latRaw = strdup(pV);
 8000798:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 800079c:	f004 f92c 	bl	80049f8 <strdup>
 80007a0:	4603      	mov	r3, r0
 80007a2:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
								break;
 80007a6:	e02f      	b.n	8000808 <main+0x228>
							case 2:
								hemNS = strdup(pV);
 80007a8:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 80007ac:	f004 f924 	bl	80049f8 <strdup>
 80007b0:	4603      	mov	r3, r0
 80007b2:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
								break;
 80007b6:	e027      	b.n	8000808 <main+0x228>
							case 3:
								lonRaw = strdup(pV);
 80007b8:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 80007bc:	f004 f91c 	bl	80049f8 <strdup>
 80007c0:	4603      	mov	r3, r0
 80007c2:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
								break;
 80007c6:	e01f      	b.n	8000808 <main+0x228>
							case 4:
								hemEW = strdup(pV);
 80007c8:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 80007cc:	f004 f914 	bl	80049f8 <strdup>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
								break;
 80007d6:	e017      	b.n	8000808 <main+0x228>
 80007d8:	200000e4 	.word	0x200000e4
 80007dc:	08005e58 	.word	0x08005e58
 80007e0:	2000008c 	.word	0x2000008c
 80007e4:	08005e24 	.word	0x08005e24
 80007e8:	20000168 	.word	0x20000168
 80007ec:	08005e28 	.word	0x08005e28
 80007f0:	08005e30 	.word	0x08005e30
 80007f4:	08005e34 	.word	0x08005e34
							case 5:
								utcRaw = strdup(pV);
 80007f8:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 80007fc:	f004 f8fc 	bl	80049f8 <strdup>
 8000800:	4603      	mov	r3, r0
 8000802:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
								break;
 8000806:	bf00      	nop
							}

							cnt++;
 8000808:	f897 3303 	ldrb.w	r3, [r7, #771]	; 0x303
 800080c:	3301      	adds	r3, #1
 800080e:	f887 3303 	strb.w	r3, [r7, #771]	; 0x303
						for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8000812:	498b      	ldr	r1, [pc, #556]	; (8000a40 <main+0x460>)
 8000814:	2000      	movs	r0, #0
 8000816:	f004 f929 	bl	8004a6c <strtok>
 800081a:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 800081e:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8000822:	2b00      	cmp	r3, #0
 8000824:	d1a5      	bne.n	8000772 <main+0x192>
 8000826:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	b29a      	uxth	r2, r3

						}  // end for()

						memcpy(latDg, &latRaw[0], 2);
 800082e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000832:	801a      	strh	r2, [r3, #0]
						latDg[2] = '\0';
 8000834:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000838:	2200      	movs	r2, #0
 800083a:	709a      	strb	r2, [r3, #2]

						memcpy(latMS, &latRaw[2], 7);
 800083c:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8000840:	1c9a      	adds	r2, r3, #2
 8000842:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000846:	6810      	ldr	r0, [r2, #0]
 8000848:	6018      	str	r0, [r3, #0]
 800084a:	8891      	ldrh	r1, [r2, #4]
 800084c:	7992      	ldrb	r2, [r2, #6]
 800084e:	8099      	strh	r1, [r3, #4]
 8000850:	719a      	strb	r2, [r3, #6]
						latMS[7] = '\0';
 8000852:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000856:	2200      	movs	r2, #0
 8000858:	71da      	strb	r2, [r3, #7]

						memcpy(lonDg, &lonRaw[0], 3);
 800085a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800085e:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 8000862:	8811      	ldrh	r1, [r2, #0]
 8000864:	7892      	ldrb	r2, [r2, #2]
 8000866:	8019      	strh	r1, [r3, #0]
 8000868:	709a      	strb	r2, [r3, #2]
						lonDg[3] = '\0';
 800086a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800086e:	2200      	movs	r2, #0
 8000870:	70da      	strb	r2, [r3, #3]

						memcpy(lonMS, &lonRaw[3], 7);
 8000872:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8000876:	1cda      	adds	r2, r3, #3
 8000878:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800087c:	6810      	ldr	r0, [r2, #0]
 800087e:	6018      	str	r0, [r3, #0]
 8000880:	8891      	ldrh	r1, [r2, #4]
 8000882:	7992      	ldrb	r2, [r2, #6]
 8000884:	8099      	strh	r1, [r3, #4]
 8000886:	719a      	strb	r2, [r3, #6]
						lonMS[7] = '\0';
 8000888:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800088c:	2200      	movs	r2, #0
 800088e:	71da      	strb	r2, [r3, #7]
						char strLonMS[7];
						sprintf(strLonMS, "%s", lonMS);
 8000890:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000894:	463b      	mov	r3, r7
 8000896:	496b      	ldr	r1, [pc, #428]	; (8000a44 <main+0x464>)
 8000898:	4618      	mov	r0, r3
 800089a:	f004 f869 	bl	8004970 <siprintf>
 800089e:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	b29a      	uxth	r2, r3

						//converting the UTC time in the hh:mm:ss format
						memcpy(hH, &utcRaw[0], 2);
 80008a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008aa:	801a      	strh	r2, [r3, #0]
						hH[2] = '\0';
 80008ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008b0:	2200      	movs	r2, #0
 80008b2:	709a      	strb	r2, [r3, #2]

						memcpy(mM, &utcRaw[2], 2);
 80008b4:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 80008b8:	3302      	adds	r3, #2
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	b29a      	uxth	r2, r3
 80008be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80008c2:	801a      	strh	r2, [r3, #0]
						mM[2] = '\0';
 80008c4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80008c8:	2200      	movs	r2, #0
 80008ca:	709a      	strb	r2, [r3, #2]

						memcpy(sS, &utcRaw[4], 2);
 80008cc:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 80008d0:	3304      	adds	r3, #4
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008da:	801a      	strh	r2, [r3, #0]
						sS[2] = '\0';
 80008dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008e0:	2200      	movs	r2, #0
 80008e2:	709a      	strb	r2, [r3, #2]

						strcpy(strUTC, hH);
 80008e4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80008e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 f87a 	bl	80049e8 <strcpy>
						strcat(strUTC, ":");
 80008f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fc69 	bl	80001d0 <strlen>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000906:	4413      	add	r3, r2
 8000908:	494f      	ldr	r1, [pc, #316]	; (8000a48 <main+0x468>)
 800090a:	461a      	mov	r2, r3
 800090c:	460b      	mov	r3, r1
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	8013      	strh	r3, [r2, #0]
						strcat(strUTC, mM);
 8000912:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000916:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f004 f847 	bl	80049b0 <strcat>
						strcat(strUTC, ":");
 8000922:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fc52 	bl	80001d0 <strlen>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000934:	4413      	add	r3, r2
 8000936:	4944      	ldr	r1, [pc, #272]	; (8000a48 <main+0x468>)
 8000938:	461a      	mov	r2, r3
 800093a:	460b      	mov	r3, r1
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	8013      	strh	r3, [r2, #0]
						strcat(strUTC, sS);
 8000940:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000944:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f004 f830 	bl	80049b0 <strcat>
						strUTC[8] = '\0';
 8000950:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000954:	2200      	movs	r2, #0
 8000956:	721a      	strb	r2, [r3, #8]

						HAL_UART_Transmit(&huart2, (uint8_t*) hemNS, 1, 200);
 8000958:	23c8      	movs	r3, #200	; 0xc8
 800095a:	2201      	movs	r2, #1
 800095c:	f8d7 1310 	ldr.w	r1, [r7, #784]	; 0x310
 8000960:	483a      	ldr	r0, [pc, #232]	; (8000a4c <main+0x46c>)
 8000962:	f002 fd3d 	bl	80033e0 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) " ", 1, 200);
 8000966:	23c8      	movs	r3, #200	; 0xc8
 8000968:	2201      	movs	r2, #1
 800096a:	4939      	ldr	r1, [pc, #228]	; (8000a50 <main+0x470>)
 800096c:	4837      	ldr	r0, [pc, #220]	; (8000a4c <main+0x46c>)
 800096e:	f002 fd37 	bl	80033e0 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) latDg, 2, 200);
 8000972:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8000976:	23c8      	movs	r3, #200	; 0xc8
 8000978:	2202      	movs	r2, #2
 800097a:	4834      	ldr	r0, [pc, #208]	; (8000a4c <main+0x46c>)
 800097c:	f002 fd30 	bl	80033e0 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\241", 1, 200);
 8000980:	23c8      	movs	r3, #200	; 0xc8
 8000982:	2201      	movs	r2, #1
 8000984:	4933      	ldr	r1, [pc, #204]	; (8000a54 <main+0x474>)
 8000986:	4831      	ldr	r0, [pc, #196]	; (8000a4c <main+0x46c>)
 8000988:	f002 fd2a 	bl	80033e0 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) latMS, 7, 200);
 800098c:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8000990:	23c8      	movs	r3, #200	; 0xc8
 8000992:	2207      	movs	r2, #7
 8000994:	482d      	ldr	r0, [pc, #180]	; (8000a4c <main+0x46c>)
 8000996:	f002 fd23 	bl	80033e0 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\', ", 3, 200);
 800099a:	23c8      	movs	r3, #200	; 0xc8
 800099c:	2203      	movs	r2, #3
 800099e:	492e      	ldr	r1, [pc, #184]	; (8000a58 <main+0x478>)
 80009a0:	482a      	ldr	r0, [pc, #168]	; (8000a4c <main+0x46c>)
 80009a2:	f002 fd1d 	bl	80033e0 <HAL_UART_Transmit>

						HAL_UART_Transmit(&huart2, (uint8_t*) hemEW, 1, 200);
 80009a6:	23c8      	movs	r3, #200	; 0xc8
 80009a8:	2201      	movs	r2, #1
 80009aa:	f8d7 1308 	ldr.w	r1, [r7, #776]	; 0x308
 80009ae:	4827      	ldr	r0, [pc, #156]	; (8000a4c <main+0x46c>)
 80009b0:	f002 fd16 	bl	80033e0 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) " ", 1, 200);
 80009b4:	23c8      	movs	r3, #200	; 0xc8
 80009b6:	2201      	movs	r2, #1
 80009b8:	4925      	ldr	r1, [pc, #148]	; (8000a50 <main+0x470>)
 80009ba:	4824      	ldr	r0, [pc, #144]	; (8000a4c <main+0x46c>)
 80009bc:	f002 fd10 	bl	80033e0 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) lonDg, 3, 200);
 80009c0:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80009c4:	23c8      	movs	r3, #200	; 0xc8
 80009c6:	2203      	movs	r2, #3
 80009c8:	4820      	ldr	r0, [pc, #128]	; (8000a4c <main+0x46c>)
 80009ca:	f002 fd09 	bl	80033e0 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\241", 1, 200);
 80009ce:	23c8      	movs	r3, #200	; 0xc8
 80009d0:	2201      	movs	r2, #1
 80009d2:	4920      	ldr	r1, [pc, #128]	; (8000a54 <main+0x474>)
 80009d4:	481d      	ldr	r0, [pc, #116]	; (8000a4c <main+0x46c>)
 80009d6:	f002 fd03 	bl	80033e0 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) strLonMS, strlen(strLonMS), 200);
 80009da:	463b      	mov	r3, r7
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fbf7 	bl	80001d0 <strlen>
 80009e2:	4603      	mov	r3, r0
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4639      	mov	r1, r7
 80009e8:	23c8      	movs	r3, #200	; 0xc8
 80009ea:	4818      	ldr	r0, [pc, #96]	; (8000a4c <main+0x46c>)
 80009ec:	f002 fcf8 	bl	80033e0 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\', UTC: ", 8, 200);
 80009f0:	23c8      	movs	r3, #200	; 0xc8
 80009f2:	2208      	movs	r2, #8
 80009f4:	4919      	ldr	r1, [pc, #100]	; (8000a5c <main+0x47c>)
 80009f6:	4815      	ldr	r0, [pc, #84]	; (8000a4c <main+0x46c>)
 80009f8:	f002 fcf2 	bl	80033e0 <HAL_UART_Transmit>

						HAL_UART_Transmit(&huart2, (uint8_t*) strUTC, 8, 200);
 80009fc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000a00:	23c8      	movs	r3, #200	; 0xc8
 8000a02:	2208      	movs	r2, #8
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <main+0x46c>)
 8000a06:	f002 fceb 	bl	80033e0 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 200);
 8000a0a:	23c8      	movs	r3, #200	; 0xc8
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	4914      	ldr	r1, [pc, #80]	; (8000a60 <main+0x480>)
 8000a10:	480e      	ldr	r0, [pc, #56]	; (8000a4c <main+0x46c>)
 8000a12:	f002 fce5 	bl	80033e0 <HAL_UART_Transmit>
			while ((token = strsep(&string, "\n")) != NULL) {
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	4911      	ldr	r1, [pc, #68]	; (8000a60 <main+0x480>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f004 f808 	bl	8004a32 <strsep>
 8000a22:	f8c7 02f8 	str.w	r0, [r7, #760]	; 0x2f8
 8000a26:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f47f ae39 	bne.w	80006a2 <main+0xc2>

				} // end of $GNGLL sentences selection

			} // end of splitting the buffStr by the "\n" delimiter with the strsep() C function

			flag = 0; // we are ready to get new data from the sensor
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <main+0x484>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]

		} // end of one interrupt/full-buffer cycle

		HAL_Delay(200);
 8000a36:	20c8      	movs	r0, #200	; 0xc8
 8000a38:	f000 fc0a 	bl	8001250 <HAL_Delay>
		if (flag == 1) { // interrupt signals that the buffer buff[300] is full
 8000a3c:	e60b      	b.n	8000656 <main+0x76>
 8000a3e:	bf00      	nop
 8000a40:	08005e34 	.word	0x08005e34
 8000a44:	08005e24 	.word	0x08005e24
 8000a48:	08005e38 	.word	0x08005e38
 8000a4c:	20000168 	.word	0x20000168
 8000a50:	08005e3c 	.word	0x08005e3c
 8000a54:	08005e40 	.word	0x08005e40
 8000a58:	08005e44 	.word	0x08005e44
 8000a5c:	08005e48 	.word	0x08005e48
 8000a60:	08005e54 	.word	0x08005e54
 8000a64:	2000008c 	.word	0x2000008c

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b096      	sub	sp, #88	; 0x58
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	2244      	movs	r2, #68	; 0x44
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 ff72 	bl	8004960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a8e:	f001 f95b 	bl	8001d48 <HAL_PWREx_ControlVoltageScaling>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a98:	f000 f91c 	bl	8000cd4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa6:	2310      	movs	r3, #16
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000aba:	2307      	movs	r3, #7
 8000abc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 f992 	bl	8001df4 <HAL_RCC_OscConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ad6:	f000 f8fd 	bl	8000cd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ada:	230f      	movs	r3, #15
 8000adc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aee:	463b      	mov	r3, r7
 8000af0:	2104      	movs	r1, #4
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 fd64 	bl	80025c0 <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000afe:	f000 f8e9 	bl	8000cd4 <Error_Handler>
  }
}
 8000b02:	bf00      	nop
 8000b04:	3758      	adds	r7, #88	; 0x58
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <MX_USART1_UART_Init+0x5c>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b50:	f002 fbf8 	bl	8003344 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b5a:	f000 f8bb 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000e4 	.word	0x200000e4
 8000b68:	40013800 	.word	0x40013800

08000b6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <MX_USART2_UART_Init+0x5c>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000bb0:	f002 fbc8 	bl	8003344 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bba:	f000 f88b 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000168 	.word	0x20000168
 8000bc8:	40004400 	.word	0x40004400

08000bcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_DMA_Init+0x38>)
 8000bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <MX_DMA_Init+0x38>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6493      	str	r3, [r2, #72]	; 0x48
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_DMA_Init+0x38>)
 8000be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f000 fc2d 	bl	800144e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000bf4:	200f      	movs	r0, #15
 8000bf6:	f000 fc46 	bl	8001486 <HAL_NVIC_EnableIRQ>

}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <MX_GPIO_Init+0xc4>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a2a      	ldr	r2, [pc, #168]	; (8000ccc <MX_GPIO_Init+0xc4>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <MX_GPIO_Init+0xc4>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <MX_GPIO_Init+0xc4>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	4a24      	ldr	r2, [pc, #144]	; (8000ccc <MX_GPIO_Init+0xc4>)
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c42:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <MX_GPIO_Init+0xc4>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <MX_GPIO_Init+0xc4>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	4a1e      	ldr	r2, [pc, #120]	; (8000ccc <MX_GPIO_Init+0xc4>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <MX_GPIO_Init+0xc4>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <MX_GPIO_Init+0xc4>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <MX_GPIO_Init+0xc4>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <MX_GPIO_Init+0xc4>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2120      	movs	r1, #32
 8000c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c86:	f001 f839 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c90:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <MX_GPIO_Init+0xc8>)
 8000ca2:	f000 fe81 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ca6:	2320      	movs	r3, #32
 8000ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f000 fe72 	bl	80019a8 <HAL_GPIO_Init>

}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	; 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	48000800 	.word	0x48000800

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <Error_Handler+0x8>
	...

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_MspInit+0x44>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_MspInit+0x44>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_MspInit+0x44>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_MspInit+0x44>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0ae      	sub	sp, #184	; 0xb8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	2288      	movs	r2, #136	; 0x88
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f003 fe09 	bl	8004960 <memset>
  if(huart->Instance==USART1)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a5c      	ldr	r2, [pc, #368]	; (8000ec4 <HAL_UART_MspInit+0x19c>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d16f      	bne.n	8000e38 <HAL_UART_MspInit+0x110>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4618      	mov	r0, r3
 8000d66:	f001 fe31 	bl	80029cc <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d70:	f7ff ffb0 	bl	8000cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d74:	4b54      	ldr	r3, [pc, #336]	; (8000ec8 <HAL_UART_MspInit+0x1a0>)
 8000d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d78:	4a53      	ldr	r2, [pc, #332]	; (8000ec8 <HAL_UART_MspInit+0x1a0>)
 8000d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7e:	6613      	str	r3, [r2, #96]	; 0x60
 8000d80:	4b51      	ldr	r3, [pc, #324]	; (8000ec8 <HAL_UART_MspInit+0x1a0>)
 8000d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d88:	61bb      	str	r3, [r7, #24]
 8000d8a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b4e      	ldr	r3, [pc, #312]	; (8000ec8 <HAL_UART_MspInit+0x1a0>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d90:	4a4d      	ldr	r2, [pc, #308]	; (8000ec8 <HAL_UART_MspInit+0x1a0>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d98:	4b4b      	ldr	r3, [pc, #300]	; (8000ec8 <HAL_UART_MspInit+0x1a0>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000da4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000da8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dce:	f000 fdeb 	bl	80019a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000dd2:	4b3e      	ldr	r3, [pc, #248]	; (8000ecc <HAL_UART_MspInit+0x1a4>)
 8000dd4:	4a3e      	ldr	r2, [pc, #248]	; (8000ed0 <HAL_UART_MspInit+0x1a8>)
 8000dd6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000dd8:	4b3c      	ldr	r3, [pc, #240]	; (8000ecc <HAL_UART_MspInit+0x1a4>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dde:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <HAL_UART_MspInit+0x1a4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de4:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <HAL_UART_MspInit+0x1a4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dea:	4b38      	ldr	r3, [pc, #224]	; (8000ecc <HAL_UART_MspInit+0x1a4>)
 8000dec:	2280      	movs	r2, #128	; 0x80
 8000dee:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000df0:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <HAL_UART_MspInit+0x1a4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000df6:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <HAL_UART_MspInit+0x1a4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000dfc:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <HAL_UART_MspInit+0x1a4>)
 8000dfe:	2220      	movs	r2, #32
 8000e00:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e02:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <HAL_UART_MspInit+0x1a4>)
 8000e04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e0a:	4830      	ldr	r0, [pc, #192]	; (8000ecc <HAL_UART_MspInit+0x1a4>)
 8000e0c:	f000 fb56 	bl	80014bc <HAL_DMA_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8000e16:	f7ff ff5d 	bl	8000cd4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a2b      	ldr	r2, [pc, #172]	; (8000ecc <HAL_UART_MspInit+0x1a4>)
 8000e1e:	671a      	str	r2, [r3, #112]	; 0x70
 8000e20:	4a2a      	ldr	r2, [pc, #168]	; (8000ecc <HAL_UART_MspInit+0x1a4>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2025      	movs	r0, #37	; 0x25
 8000e2c:	f000 fb0f 	bl	800144e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e30:	2025      	movs	r0, #37	; 0x25
 8000e32:	f000 fb28 	bl	8001486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e36:	e040      	b.n	8000eba <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a25      	ldr	r2, [pc, #148]	; (8000ed4 <HAL_UART_MspInit+0x1ac>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d13b      	bne.n	8000eba <HAL_UART_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 fdbc 	bl	80029cc <HAL_RCCEx_PeriphCLKConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_UART_MspInit+0x136>
      Error_Handler();
 8000e5a:	f7ff ff3b 	bl	8000cd4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <HAL_UART_MspInit+0x1a0>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e62:	4a19      	ldr	r2, [pc, #100]	; (8000ec8 <HAL_UART_MspInit+0x1a0>)
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_UART_MspInit+0x1a0>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_UART_MspInit+0x1a0>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <HAL_UART_MspInit+0x1a0>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_UART_MspInit+0x1a0>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e8e:	230c      	movs	r3, #12
 8000e90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f000 fd77 	bl	80019a8 <HAL_GPIO_Init>
}
 8000eba:	bf00      	nop
 8000ebc:	37b8      	adds	r7, #184	; 0xb8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40013800 	.word	0x40013800
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	2000009c 	.word	0x2000009c
 8000ed0:	40020058 	.word	0x40020058
 8000ed4:	40004400 	.word	0x40004400

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <NMI_Handler+0x4>

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f974 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <DMA1_Channel5_IRQHandler+0x10>)
 8000f32:	f000 fc5a 	bl	80017ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2000009c 	.word	0x2000009c

08000f40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <USART1_IRQHandler+0x10>)
 8000f46:	f002 fb35 	bl	80035b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200000e4 	.word	0x200000e4

08000f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
	return 1;
 8000f58:	2301      	movs	r3, #1
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <_kill>:

int _kill(int pid, int sig)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f6e:	f003 fccd 	bl	800490c <__errno>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2216      	movs	r2, #22
 8000f76:	601a      	str	r2, [r3, #0]
	return -1;
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_exit>:

void _exit (int status)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ffe7 	bl	8000f64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f96:	e7fe      	b.n	8000f96 <_exit+0x12>

08000f98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	e00a      	b.n	8000fc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000faa:	f3af 8000 	nop.w
 8000fae:	4601      	mov	r1, r0
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	60ba      	str	r2, [r7, #8]
 8000fb6:	b2ca      	uxtb	r2, r1
 8000fb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	dbf0      	blt.n	8000faa <_read+0x12>
	}

return len;
 8000fc8:	687b      	ldr	r3, [r7, #4]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	e009      	b.n	8000ff8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	60ba      	str	r2, [r7, #8]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbf1      	blt.n	8000fe4 <_write+0x12>
	}
	return len;
 8001000:	687b      	ldr	r3, [r7, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_close>:

int _close(int file)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
	return -1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001032:	605a      	str	r2, [r3, #4]
	return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <_isatty>:

int _isatty(int file)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
	return 1;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <_sbrk+0x5c>)
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <_sbrk+0x60>)
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <_sbrk+0x64>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <_sbrk+0x68>)
 8001094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d207      	bcs.n	80010b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a4:	f003 fc32 	bl	800490c <__errno>
 80010a8:	4603      	mov	r3, r0
 80010aa:	220c      	movs	r2, #12
 80010ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	e009      	b.n	80010c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <_sbrk+0x64>)
 80010c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20018000 	.word	0x20018000
 80010d4:	00000400 	.word	0x00000400
 80010d8:	20000090 	.word	0x20000090
 80010dc:	20000200 	.word	0x20000200

080010e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <SystemInit+0x20>)
 80010e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <SystemInit+0x20>)
 80010ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800113c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001108:	f7ff ffea 	bl	80010e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <LoopForever+0x6>)
  ldr r1, =_edata
 800110e:	490d      	ldr	r1, [pc, #52]	; (8001144 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001110:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <LoopForever+0xe>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001124:	4c0a      	ldr	r4, [pc, #40]	; (8001150 <LoopForever+0x16>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001132:	f003 fbf1 	bl	8004918 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001136:	f7ff fa53 	bl	80005e0 <main>

0800113a <LoopForever>:

LoopForever:
    b LoopForever
 800113a:	e7fe      	b.n	800113a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800113c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001148:	08006060 	.word	0x08006060
  ldr r2, =_sbss
 800114c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001150:	20000200 	.word	0x20000200

08001154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC1_2_IRQHandler>
	...

08001158 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <HAL_Init+0x3c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <HAL_Init+0x3c>)
 8001168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116e:	2003      	movs	r0, #3
 8001170:	f000 f962 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001174:	2000      	movs	r0, #0
 8001176:	f000 f80f 	bl	8001198 <HAL_InitTick>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	e001      	b.n	800118a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001186:	f7ff fdab 	bl	8000ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800118a:	79fb      	ldrb	r3, [r7, #7]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40022000 	.word	0x40022000

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_InitTick+0x6c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d023      	beq.n	80011f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_InitTick+0x70>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_InitTick+0x6c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f96d 	bl	80014a2 <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10f      	bne.n	80011ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d809      	bhi.n	80011e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f000 f937 	bl	800144e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e0:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_InitTick+0x74>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e007      	b.n	80011f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e004      	b.n	80011f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
 80011f2:	e001      	b.n	80011f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008
 8001208:	20000000 	.word	0x20000000
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	200001ec 	.word	0x200001ec

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	200001ec 	.word	0x200001ec

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffee 	bl	8001238 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_Delay+0x44>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffde 	bl	8001238 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008

08001298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b4:	4013      	ands	r3, r2
 80012b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	60d3      	str	r3, [r2, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <__NVIC_GetPriorityGrouping+0x18>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	f003 0307 	and.w	r3, r3, #7
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	2b00      	cmp	r3, #0
 800130c:	db0b      	blt.n	8001326 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f003 021f 	and.w	r2, r3, #31
 8001314:	4907      	ldr	r1, [pc, #28]	; (8001334 <__NVIC_EnableIRQ+0x38>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	2001      	movs	r0, #1
 800131e:	fa00 f202 	lsl.w	r2, r0, r2
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f7ff ff8e 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff29 	bl	8001298 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff3e 	bl	80012e0 <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff8e 	bl	800138c <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5d 	bl	8001338 <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff31 	bl	80012fc <__NVIC_EnableIRQ>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffa2 	bl	80013f4 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e098      	b.n	8001600 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b4d      	ldr	r3, [pc, #308]	; (800160c <HAL_DMA_Init+0x150>)
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d80f      	bhi.n	80014fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	4b4b      	ldr	r3, [pc, #300]	; (8001610 <HAL_DMA_Init+0x154>)
 80014e2:	4413      	add	r3, r2
 80014e4:	4a4b      	ldr	r2, [pc, #300]	; (8001614 <HAL_DMA_Init+0x158>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	009a      	lsls	r2, r3, #2
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a48      	ldr	r2, [pc, #288]	; (8001618 <HAL_DMA_Init+0x15c>)
 80014f6:	641a      	str	r2, [r3, #64]	; 0x40
 80014f8:	e00e      	b.n	8001518 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	4b46      	ldr	r3, [pc, #280]	; (800161c <HAL_DMA_Init+0x160>)
 8001502:	4413      	add	r3, r2
 8001504:	4a43      	ldr	r2, [pc, #268]	; (8001614 <HAL_DMA_Init+0x158>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	009a      	lsls	r2, r3, #2
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a42      	ldr	r2, [pc, #264]	; (8001620 <HAL_DMA_Init+0x164>)
 8001516:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2202      	movs	r2, #2
 800151c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800152e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001532:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800153c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001548:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001554:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001572:	d039      	beq.n	80015e8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	4a27      	ldr	r2, [pc, #156]	; (8001618 <HAL_DMA_Init+0x15c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d11a      	bne.n	80015b4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800157e:	4b29      	ldr	r3, [pc, #164]	; (8001624 <HAL_DMA_Init+0x168>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f003 031c 	and.w	r3, r3, #28
 800158a:	210f      	movs	r1, #15
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	4924      	ldr	r1, [pc, #144]	; (8001624 <HAL_DMA_Init+0x168>)
 8001594:	4013      	ands	r3, r2
 8001596:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001598:	4b22      	ldr	r3, [pc, #136]	; (8001624 <HAL_DMA_Init+0x168>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a4:	f003 031c 	and.w	r3, r3, #28
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	491d      	ldr	r1, [pc, #116]	; (8001624 <HAL_DMA_Init+0x168>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
 80015b2:	e019      	b.n	80015e8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <HAL_DMA_Init+0x16c>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015bc:	f003 031c 	and.w	r3, r3, #28
 80015c0:	210f      	movs	r1, #15
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	4917      	ldr	r1, [pc, #92]	; (8001628 <HAL_DMA_Init+0x16c>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80015ce:	4b16      	ldr	r3, [pc, #88]	; (8001628 <HAL_DMA_Init+0x16c>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6859      	ldr	r1, [r3, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f003 031c 	and.w	r3, r3, #28
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	4911      	ldr	r1, [pc, #68]	; (8001628 <HAL_DMA_Init+0x16c>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	40020407 	.word	0x40020407
 8001610:	bffdfff8 	.word	0xbffdfff8
 8001614:	cccccccd 	.word	0xcccccccd
 8001618:	40020000 	.word	0x40020000
 800161c:	bffdfbf8 	.word	0xbffdfbf8
 8001620:	40020400 	.word	0x40020400
 8001624:	400200a8 	.word	0x400200a8
 8001628:	400204a8 	.word	0x400204a8

0800162c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001644:	2b01      	cmp	r3, #1
 8001646:	d101      	bne.n	800164c <HAL_DMA_Start_IT+0x20>
 8001648:	2302      	movs	r3, #2
 800164a:	e04b      	b.n	80016e4 <HAL_DMA_Start_IT+0xb8>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d13a      	bne.n	80016d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2202      	movs	r2, #2
 8001664:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0201 	bic.w	r2, r2, #1
 800167c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	68b9      	ldr	r1, [r7, #8]
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 f95f 	bl	8001948 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	2b00      	cmp	r3, #0
 8001690:	d008      	beq.n	80016a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 020e 	orr.w	r2, r2, #14
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	e00f      	b.n	80016c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0204 	bic.w	r2, r2, #4
 80016b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 020a 	orr.w	r2, r2, #10
 80016c2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0201 	orr.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	e005      	b.n	80016e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80016de:	2302      	movs	r3, #2
 80016e0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80016e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d008      	beq.n	8001716 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2204      	movs	r2, #4
 8001708:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e022      	b.n	800175c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 020e 	bic.w	r2, r2, #14
 8001724:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0201 	bic.w	r2, r2, #1
 8001734:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f003 021c 	and.w	r2, r3, #28
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	2101      	movs	r1, #1
 8001744:	fa01 f202 	lsl.w	r2, r1, r2
 8001748:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800175a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d005      	beq.n	800178c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2204      	movs	r2, #4
 8001784:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
 800178a:	e029      	b.n	80017e0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 020e 	bic.w	r2, r2, #14
 800179a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0201 	bic.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b0:	f003 021c 	and.w	r2, r3, #28
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	2101      	movs	r1, #1
 80017ba:	fa01 f202 	lsl.w	r2, r1, r2
 80017be:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
    }
  }
  return status;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f003 031c 	and.w	r3, r3, #28
 800180a:	2204      	movs	r2, #4
 800180c:	409a      	lsls	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4013      	ands	r3, r2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d026      	beq.n	8001864 <HAL_DMA_IRQHandler+0x7a>
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d021      	beq.n	8001864 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0320 	and.w	r3, r3, #32
 800182a:	2b00      	cmp	r3, #0
 800182c:	d107      	bne.n	800183e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0204 	bic.w	r2, r2, #4
 800183c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f003 021c 	and.w	r2, r3, #28
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	2104      	movs	r1, #4
 800184c:	fa01 f202 	lsl.w	r2, r1, r2
 8001850:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	2b00      	cmp	r3, #0
 8001858:	d071      	beq.n	800193e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001862:	e06c      	b.n	800193e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	f003 031c 	and.w	r3, r3, #28
 800186c:	2202      	movs	r2, #2
 800186e:	409a      	lsls	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d02e      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xec>
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d029      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0320 	and.w	r3, r3, #32
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10b      	bne.n	80018a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 020a 	bic.w	r2, r2, #10
 800189e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ac:	f003 021c 	and.w	r2, r3, #28
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	2102      	movs	r1, #2
 80018b6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d038      	beq.n	800193e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018d4:	e033      	b.n	800193e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f003 031c 	and.w	r3, r3, #28
 80018de:	2208      	movs	r2, #8
 80018e0:	409a      	lsls	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d02a      	beq.n	8001940 <HAL_DMA_IRQHandler+0x156>
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d025      	beq.n	8001940 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 020e 	bic.w	r2, r2, #14
 8001902:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001908:	f003 021c 	and.w	r2, r3, #28
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	2101      	movs	r1, #1
 8001912:	fa01 f202 	lsl.w	r2, r1, r2
 8001916:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800193e:	bf00      	nop
 8001940:	bf00      	nop
}
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f003 021c 	and.w	r2, r3, #28
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	2101      	movs	r1, #1
 8001964:	fa01 f202 	lsl.w	r2, r1, r2
 8001968:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b10      	cmp	r3, #16
 8001978:	d108      	bne.n	800198c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800198a:	e007      	b.n	800199c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	60da      	str	r2, [r3, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b6:	e17f      	b.n	8001cb8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2101      	movs	r1, #1
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 8171 	beq.w	8001cb2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d005      	beq.n	80019e8 <HAL_GPIO_Init+0x40>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d130      	bne.n	8001a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a1e:	2201      	movs	r2, #1
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	f003 0201 	and.w	r2, r3, #1
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d118      	bne.n	8001a88 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	08db      	lsrs	r3, r3, #3
 8001a72:	f003 0201 	and.w	r2, r3, #1
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d017      	beq.n	8001ac4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d123      	bne.n	8001b18 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	08da      	lsrs	r2, r3, #3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3208      	adds	r2, #8
 8001ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	08da      	lsrs	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3208      	adds	r2, #8
 8001b12:	6939      	ldr	r1, [r7, #16]
 8001b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0203 	and.w	r2, r3, #3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 80ac 	beq.w	8001cb2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	4b5f      	ldr	r3, [pc, #380]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5e:	4a5e      	ldr	r2, [pc, #376]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6613      	str	r3, [r2, #96]	; 0x60
 8001b66:	4b5c      	ldr	r3, [pc, #368]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b72:	4a5a      	ldr	r2, [pc, #360]	; (8001cdc <HAL_GPIO_Init+0x334>)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b9c:	d025      	beq.n	8001bea <HAL_GPIO_Init+0x242>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4f      	ldr	r2, [pc, #316]	; (8001ce0 <HAL_GPIO_Init+0x338>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d01f      	beq.n	8001be6 <HAL_GPIO_Init+0x23e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4e      	ldr	r2, [pc, #312]	; (8001ce4 <HAL_GPIO_Init+0x33c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d019      	beq.n	8001be2 <HAL_GPIO_Init+0x23a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4d      	ldr	r2, [pc, #308]	; (8001ce8 <HAL_GPIO_Init+0x340>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_GPIO_Init+0x236>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4c      	ldr	r2, [pc, #304]	; (8001cec <HAL_GPIO_Init+0x344>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00d      	beq.n	8001bda <HAL_GPIO_Init+0x232>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4b      	ldr	r2, [pc, #300]	; (8001cf0 <HAL_GPIO_Init+0x348>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d007      	beq.n	8001bd6 <HAL_GPIO_Init+0x22e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4a      	ldr	r2, [pc, #296]	; (8001cf4 <HAL_GPIO_Init+0x34c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_GPIO_Init+0x22a>
 8001bce:	2306      	movs	r3, #6
 8001bd0:	e00c      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	e00a      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	e008      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001bda:	2304      	movs	r3, #4
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001bde:	2303      	movs	r3, #3
 8001be0:	e004      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e002      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001bea:	2300      	movs	r3, #0
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	f002 0203 	and.w	r2, r2, #3
 8001bf2:	0092      	lsls	r2, r2, #2
 8001bf4:	4093      	lsls	r3, r2
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bfc:	4937      	ldr	r1, [pc, #220]	; (8001cdc <HAL_GPIO_Init+0x334>)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3302      	adds	r3, #2
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c0a:	4b3b      	ldr	r3, [pc, #236]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c2e:	4a32      	ldr	r2, [pc, #200]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c34:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c58:	4a27      	ldr	r2, [pc, #156]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c5e:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c82:	4a1d      	ldr	r2, [pc, #116]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cac:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f47f ae78 	bne.w	80019b8 <HAL_GPIO_Init+0x10>
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	48000400 	.word	0x48000400
 8001ce4:	48000800 	.word	0x48000800
 8001ce8:	48000c00 	.word	0x48000c00
 8001cec:	48001000 	.word	0x48001000
 8001cf0:	48001400 	.word	0x48001400
 8001cf4:	48001800 	.word	0x48001800
 8001cf8:	40010400 	.word	0x40010400

08001cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d0c:	787b      	ldrb	r3, [r7, #1]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d18:	e002      	b.n	8001d20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40007000 	.word	0x40007000

08001d48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d56:	d130      	bne.n	8001dba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d58:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d64:	d038      	beq.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d66:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d6e:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2232      	movs	r2, #50	; 0x32
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	0c9b      	lsrs	r3, r3, #18
 8001d88:	3301      	adds	r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d8c:	e002      	b.n	8001d94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da0:	d102      	bne.n	8001da8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f2      	bne.n	8001d8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db4:	d110      	bne.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e00f      	b.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc6:	d007      	beq.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dd0:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40007000 	.word	0x40007000
 8001dec:	20000000 	.word	0x20000000
 8001df0:	431bde83 	.word	0x431bde83

08001df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e3d4      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e06:	4ba1      	ldr	r3, [pc, #644]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e10:	4b9e      	ldr	r3, [pc, #632]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0310 	and.w	r3, r3, #16
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80e4 	beq.w	8001ff0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <HAL_RCC_OscConfig+0x4a>
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b0c      	cmp	r3, #12
 8001e32:	f040 808b 	bne.w	8001f4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	f040 8087 	bne.w	8001f4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e3e:	4b93      	ldr	r3, [pc, #588]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x62>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e3ac      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1a      	ldr	r2, [r3, #32]
 8001e5a:	4b8c      	ldr	r3, [pc, #560]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d004      	beq.n	8001e70 <HAL_RCC_OscConfig+0x7c>
 8001e66:	4b89      	ldr	r3, [pc, #548]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e6e:	e005      	b.n	8001e7c <HAL_RCC_OscConfig+0x88>
 8001e70:	4b86      	ldr	r3, [pc, #536]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e76:	091b      	lsrs	r3, r3, #4
 8001e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d223      	bcs.n	8001ec8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fd41 	bl	800290c <RCC_SetFlashLatencyFromMSIRange>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e38d      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e94:	4b7d      	ldr	r3, [pc, #500]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a7c      	ldr	r2, [pc, #496]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001e9a:	f043 0308 	orr.w	r3, r3, #8
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b7a      	ldr	r3, [pc, #488]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4977      	ldr	r1, [pc, #476]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eb2:	4b76      	ldr	r3, [pc, #472]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	4972      	ldr	r1, [pc, #456]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
 8001ec6:	e025      	b.n	8001f14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec8:	4b70      	ldr	r3, [pc, #448]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a6f      	ldr	r2, [pc, #444]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001ece:	f043 0308 	orr.w	r3, r3, #8
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b6d      	ldr	r3, [pc, #436]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	496a      	ldr	r1, [pc, #424]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee6:	4b69      	ldr	r3, [pc, #420]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	4965      	ldr	r1, [pc, #404]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d109      	bne.n	8001f14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 fd01 	bl	800290c <RCC_SetFlashLatencyFromMSIRange>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e34d      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f14:	f000 fc36 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	4b5c      	ldr	r3, [pc, #368]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	091b      	lsrs	r3, r3, #4
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	495a      	ldr	r1, [pc, #360]	; (8002090 <HAL_RCC_OscConfig+0x29c>)
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f30:	4a58      	ldr	r2, [pc, #352]	; (8002094 <HAL_RCC_OscConfig+0x2a0>)
 8001f32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f34:	4b58      	ldr	r3, [pc, #352]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff f92d 	bl	8001198 <HAL_InitTick>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d052      	beq.n	8001fee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	e331      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d032      	beq.n	8001fba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f54:	4b4d      	ldr	r3, [pc, #308]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a4c      	ldr	r2, [pc, #304]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f60:	f7ff f96a 	bl	8001238 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f68:	f7ff f966 	bl	8001238 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e31a      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f7a:	4b44      	ldr	r3, [pc, #272]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f86:	4b41      	ldr	r3, [pc, #260]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a40      	ldr	r2, [pc, #256]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001f8c:	f043 0308 	orr.w	r3, r3, #8
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b3e      	ldr	r3, [pc, #248]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	493b      	ldr	r1, [pc, #236]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa4:	4b39      	ldr	r3, [pc, #228]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	4936      	ldr	r1, [pc, #216]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
 8001fb8:	e01a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fba:	4b34      	ldr	r3, [pc, #208]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a33      	ldr	r2, [pc, #204]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fc6:	f7ff f937 	bl	8001238 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fce:	f7ff f933 	bl	8001238 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e2e7      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f0      	bne.n	8001fce <HAL_RCC_OscConfig+0x1da>
 8001fec:	e000      	b.n	8001ff0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d074      	beq.n	80020e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d005      	beq.n	800200e <HAL_RCC_OscConfig+0x21a>
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b0c      	cmp	r3, #12
 8002006:	d10e      	bne.n	8002026 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d10b      	bne.n	8002026 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200e:	4b1f      	ldr	r3, [pc, #124]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d064      	beq.n	80020e4 <HAL_RCC_OscConfig+0x2f0>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d160      	bne.n	80020e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e2c4      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x24a>
 8002030:	4b16      	ldr	r3, [pc, #88]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a15      	ldr	r2, [pc, #84]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8002036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	e01d      	b.n	800207a <HAL_RCC_OscConfig+0x286>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002046:	d10c      	bne.n	8002062 <HAL_RCC_OscConfig+0x26e>
 8002048:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_RCC_OscConfig+0x298>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0f      	ldr	r2, [pc, #60]	; (800208c <HAL_RCC_OscConfig+0x298>)
 800204e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0c      	ldr	r2, [pc, #48]	; (800208c <HAL_RCC_OscConfig+0x298>)
 800205a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	e00b      	b.n	800207a <HAL_RCC_OscConfig+0x286>
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a09      	ldr	r2, [pc, #36]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8002068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a06      	ldr	r2, [pc, #24]	; (800208c <HAL_RCC_OscConfig+0x298>)
 8002074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002078:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01c      	beq.n	80020bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7ff f8d9 	bl	8001238 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002088:	e011      	b.n	80020ae <HAL_RCC_OscConfig+0x2ba>
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	08005ebc 	.word	0x08005ebc
 8002094:	20000000 	.word	0x20000000
 8002098:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800209c:	f7ff f8cc 	bl	8001238 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	; 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e280      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ae:	4baf      	ldr	r3, [pc, #700]	; (800236c <HAL_RCC_OscConfig+0x578>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x2a8>
 80020ba:	e014      	b.n	80020e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff f8bc 	bl	8001238 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c4:	f7ff f8b8 	bl	8001238 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e26c      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020d6:	4ba5      	ldr	r3, [pc, #660]	; (800236c <HAL_RCC_OscConfig+0x578>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x2d0>
 80020e2:	e000      	b.n	80020e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d060      	beq.n	80021b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_OscConfig+0x310>
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b0c      	cmp	r3, #12
 80020fc:	d119      	bne.n	8002132 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d116      	bne.n	8002132 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002104:	4b99      	ldr	r3, [pc, #612]	; (800236c <HAL_RCC_OscConfig+0x578>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_OscConfig+0x328>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e249      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211c:	4b93      	ldr	r3, [pc, #588]	; (800236c <HAL_RCC_OscConfig+0x578>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	061b      	lsls	r3, r3, #24
 800212a:	4990      	ldr	r1, [pc, #576]	; (800236c <HAL_RCC_OscConfig+0x578>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002130:	e040      	b.n	80021b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d023      	beq.n	8002182 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800213a:	4b8c      	ldr	r3, [pc, #560]	; (800236c <HAL_RCC_OscConfig+0x578>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a8b      	ldr	r2, [pc, #556]	; (800236c <HAL_RCC_OscConfig+0x578>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002146:	f7ff f877 	bl	8001238 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214e:	f7ff f873 	bl	8001238 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e227      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002160:	4b82      	ldr	r3, [pc, #520]	; (800236c <HAL_RCC_OscConfig+0x578>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216c:	4b7f      	ldr	r3, [pc, #508]	; (800236c <HAL_RCC_OscConfig+0x578>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	061b      	lsls	r3, r3, #24
 800217a:	497c      	ldr	r1, [pc, #496]	; (800236c <HAL_RCC_OscConfig+0x578>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
 8002180:	e018      	b.n	80021b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002182:	4b7a      	ldr	r3, [pc, #488]	; (800236c <HAL_RCC_OscConfig+0x578>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a79      	ldr	r2, [pc, #484]	; (800236c <HAL_RCC_OscConfig+0x578>)
 8002188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800218c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218e:	f7ff f853 	bl	8001238 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002196:	f7ff f84f 	bl	8001238 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e203      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a8:	4b70      	ldr	r3, [pc, #448]	; (800236c <HAL_RCC_OscConfig+0x578>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d03c      	beq.n	800223a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d01c      	beq.n	8002202 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c8:	4b68      	ldr	r3, [pc, #416]	; (800236c <HAL_RCC_OscConfig+0x578>)
 80021ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ce:	4a67      	ldr	r2, [pc, #412]	; (800236c <HAL_RCC_OscConfig+0x578>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d8:	f7ff f82e 	bl	8001238 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e0:	f7ff f82a 	bl	8001238 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e1de      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021f2:	4b5e      	ldr	r3, [pc, #376]	; (800236c <HAL_RCC_OscConfig+0x578>)
 80021f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ef      	beq.n	80021e0 <HAL_RCC_OscConfig+0x3ec>
 8002200:	e01b      	b.n	800223a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002202:	4b5a      	ldr	r3, [pc, #360]	; (800236c <HAL_RCC_OscConfig+0x578>)
 8002204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002208:	4a58      	ldr	r2, [pc, #352]	; (800236c <HAL_RCC_OscConfig+0x578>)
 800220a:	f023 0301 	bic.w	r3, r3, #1
 800220e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002212:	f7ff f811 	bl	8001238 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221a:	f7ff f80d 	bl	8001238 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e1c1      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800222c:	4b4f      	ldr	r3, [pc, #316]	; (800236c <HAL_RCC_OscConfig+0x578>)
 800222e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1ef      	bne.n	800221a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80a6 	beq.w	8002394 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002248:	2300      	movs	r3, #0
 800224a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800224c:	4b47      	ldr	r3, [pc, #284]	; (800236c <HAL_RCC_OscConfig+0x578>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10d      	bne.n	8002274 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002258:	4b44      	ldr	r3, [pc, #272]	; (800236c <HAL_RCC_OscConfig+0x578>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	4a43      	ldr	r2, [pc, #268]	; (800236c <HAL_RCC_OscConfig+0x578>)
 800225e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002262:	6593      	str	r3, [r2, #88]	; 0x58
 8002264:	4b41      	ldr	r3, [pc, #260]	; (800236c <HAL_RCC_OscConfig+0x578>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002270:	2301      	movs	r3, #1
 8002272:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002274:	4b3e      	ldr	r3, [pc, #248]	; (8002370 <HAL_RCC_OscConfig+0x57c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d118      	bne.n	80022b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002280:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <HAL_RCC_OscConfig+0x57c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a3a      	ldr	r2, [pc, #232]	; (8002370 <HAL_RCC_OscConfig+0x57c>)
 8002286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228c:	f7fe ffd4 	bl	8001238 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002294:	f7fe ffd0 	bl	8001238 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e184      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a6:	4b32      	ldr	r3, [pc, #200]	; (8002370 <HAL_RCC_OscConfig+0x57c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d108      	bne.n	80022cc <HAL_RCC_OscConfig+0x4d8>
 80022ba:	4b2c      	ldr	r3, [pc, #176]	; (800236c <HAL_RCC_OscConfig+0x578>)
 80022bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c0:	4a2a      	ldr	r2, [pc, #168]	; (800236c <HAL_RCC_OscConfig+0x578>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ca:	e024      	b.n	8002316 <HAL_RCC_OscConfig+0x522>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d110      	bne.n	80022f6 <HAL_RCC_OscConfig+0x502>
 80022d4:	4b25      	ldr	r3, [pc, #148]	; (800236c <HAL_RCC_OscConfig+0x578>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022da:	4a24      	ldr	r2, [pc, #144]	; (800236c <HAL_RCC_OscConfig+0x578>)
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022e4:	4b21      	ldr	r3, [pc, #132]	; (800236c <HAL_RCC_OscConfig+0x578>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	4a20      	ldr	r2, [pc, #128]	; (800236c <HAL_RCC_OscConfig+0x578>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022f4:	e00f      	b.n	8002316 <HAL_RCC_OscConfig+0x522>
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <HAL_RCC_OscConfig+0x578>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	4a1b      	ldr	r2, [pc, #108]	; (800236c <HAL_RCC_OscConfig+0x578>)
 80022fe:	f023 0301 	bic.w	r3, r3, #1
 8002302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_RCC_OscConfig+0x578>)
 8002308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230c:	4a17      	ldr	r2, [pc, #92]	; (800236c <HAL_RCC_OscConfig+0x578>)
 800230e:	f023 0304 	bic.w	r3, r3, #4
 8002312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d016      	beq.n	800234c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231e:	f7fe ff8b 	bl	8001238 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002324:	e00a      	b.n	800233c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7fe ff87 	bl	8001238 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	f241 3288 	movw	r2, #5000	; 0x1388
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e139      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_OscConfig+0x578>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0ed      	beq.n	8002326 <HAL_RCC_OscConfig+0x532>
 800234a:	e01a      	b.n	8002382 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7fe ff74 	bl	8001238 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002352:	e00f      	b.n	8002374 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002354:	f7fe ff70 	bl	8001238 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d906      	bls.n	8002374 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e122      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002374:	4b90      	ldr	r3, [pc, #576]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1e8      	bne.n	8002354 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002382:	7ffb      	ldrb	r3, [r7, #31]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d105      	bne.n	8002394 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002388:	4b8b      	ldr	r3, [pc, #556]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	4a8a      	ldr	r2, [pc, #552]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 800238e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002392:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8108 	beq.w	80025ae <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	f040 80d0 	bne.w	8002548 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023a8:	4b83      	ldr	r3, [pc, #524]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 0203 	and.w	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d130      	bne.n	800241e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	3b01      	subs	r3, #1
 80023c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d127      	bne.n	800241e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d11f      	bne.n	800241e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023e8:	2a07      	cmp	r2, #7
 80023ea:	bf14      	ite	ne
 80023ec:	2201      	movne	r2, #1
 80023ee:	2200      	moveq	r2, #0
 80023f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d113      	bne.n	800241e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002400:	085b      	lsrs	r3, r3, #1
 8002402:	3b01      	subs	r3, #1
 8002404:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002406:	429a      	cmp	r2, r3
 8002408:	d109      	bne.n	800241e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	085b      	lsrs	r3, r3, #1
 8002416:	3b01      	subs	r3, #1
 8002418:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d06e      	beq.n	80024fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	2b0c      	cmp	r3, #12
 8002422:	d069      	beq.n	80024f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002424:	4b64      	ldr	r3, [pc, #400]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d105      	bne.n	800243c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002430:	4b61      	ldr	r3, [pc, #388]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0b7      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002440:	4b5d      	ldr	r3, [pc, #372]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a5c      	ldr	r2, [pc, #368]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 8002446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800244a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800244c:	f7fe fef4 	bl	8001238 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fef0 	bl	8001238 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e0a4      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002466:	4b54      	ldr	r3, [pc, #336]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002472:	4b51      	ldr	r3, [pc, #324]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	4b51      	ldr	r3, [pc, #324]	; (80025bc <HAL_RCC_OscConfig+0x7c8>)
 8002478:	4013      	ands	r3, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002482:	3a01      	subs	r2, #1
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	4311      	orrs	r1, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800248c:	0212      	lsls	r2, r2, #8
 800248e:	4311      	orrs	r1, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002494:	0852      	lsrs	r2, r2, #1
 8002496:	3a01      	subs	r2, #1
 8002498:	0552      	lsls	r2, r2, #21
 800249a:	4311      	orrs	r1, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024a0:	0852      	lsrs	r2, r2, #1
 80024a2:	3a01      	subs	r2, #1
 80024a4:	0652      	lsls	r2, r2, #25
 80024a6:	4311      	orrs	r1, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024ac:	0912      	lsrs	r2, r2, #4
 80024ae:	0452      	lsls	r2, r2, #17
 80024b0:	430a      	orrs	r2, r1
 80024b2:	4941      	ldr	r1, [pc, #260]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024b8:	4b3f      	ldr	r3, [pc, #252]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a3e      	ldr	r2, [pc, #248]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 80024be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c4:	4b3c      	ldr	r3, [pc, #240]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4a3b      	ldr	r2, [pc, #236]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 80024ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024d0:	f7fe feb2 	bl	8001238 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d8:	f7fe feae 	bl	8001238 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e062      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ea:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024f6:	e05a      	b.n	80025ae <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e059      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fc:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d152      	bne.n	80025ae <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a2a      	ldr	r2, [pc, #168]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 800250e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002512:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002514:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a27      	ldr	r2, [pc, #156]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 800251a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800251e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002520:	f7fe fe8a 	bl	8001238 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7fe fe86 	bl	8001238 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e03a      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253a:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x734>
 8002546:	e032      	b.n	80025ae <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d02d      	beq.n	80025aa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a19      	ldr	r2, [pc, #100]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 8002554:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002558:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d105      	bne.n	8002572 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	4a13      	ldr	r2, [pc, #76]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 800256c:	f023 0303 	bic.w	r3, r3, #3
 8002570:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 8002578:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800257c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002580:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7fe fe59 	bl	8001238 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258a:	f7fe fe55 	bl	8001238 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e009      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_RCC_OscConfig+0x7c4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f0      	bne.n	800258a <HAL_RCC_OscConfig+0x796>
 80025a8:	e001      	b.n	80025ae <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3720      	adds	r7, #32
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	f99d808c 	.word	0xf99d808c

080025c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0c8      	b.n	8002766 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025d4:	4b66      	ldr	r3, [pc, #408]	; (8002770 <HAL_RCC_ClockConfig+0x1b0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d910      	bls.n	8002604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b63      	ldr	r3, [pc, #396]	; (8002770 <HAL_RCC_ClockConfig+0x1b0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 0207 	bic.w	r2, r3, #7
 80025ea:	4961      	ldr	r1, [pc, #388]	; (8002770 <HAL_RCC_ClockConfig+0x1b0>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b5f      	ldr	r3, [pc, #380]	; (8002770 <HAL_RCC_ClockConfig+0x1b0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0b0      	b.n	8002766 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d04c      	beq.n	80026aa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b03      	cmp	r3, #3
 8002616:	d107      	bne.n	8002628 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002618:	4b56      	ldr	r3, [pc, #344]	; (8002774 <HAL_RCC_ClockConfig+0x1b4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d121      	bne.n	8002668 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e09e      	b.n	8002766 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d107      	bne.n	8002640 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002630:	4b50      	ldr	r3, [pc, #320]	; (8002774 <HAL_RCC_ClockConfig+0x1b4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d115      	bne.n	8002668 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e092      	b.n	8002766 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d107      	bne.n	8002658 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002648:	4b4a      	ldr	r3, [pc, #296]	; (8002774 <HAL_RCC_ClockConfig+0x1b4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e086      	b.n	8002766 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002658:	4b46      	ldr	r3, [pc, #280]	; (8002774 <HAL_RCC_ClockConfig+0x1b4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e07e      	b.n	8002766 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002668:	4b42      	ldr	r3, [pc, #264]	; (8002774 <HAL_RCC_ClockConfig+0x1b4>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f023 0203 	bic.w	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	493f      	ldr	r1, [pc, #252]	; (8002774 <HAL_RCC_ClockConfig+0x1b4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800267a:	f7fe fddd 	bl	8001238 <HAL_GetTick>
 800267e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002680:	e00a      	b.n	8002698 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002682:	f7fe fdd9 	bl	8001238 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e066      	b.n	8002766 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002698:	4b36      	ldr	r3, [pc, #216]	; (8002774 <HAL_RCC_ClockConfig+0x1b4>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 020c 	and.w	r2, r3, #12
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d1eb      	bne.n	8002682 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b6:	4b2f      	ldr	r3, [pc, #188]	; (8002774 <HAL_RCC_ClockConfig+0x1b4>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	492c      	ldr	r1, [pc, #176]	; (8002774 <HAL_RCC_ClockConfig+0x1b4>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c8:	4b29      	ldr	r3, [pc, #164]	; (8002770 <HAL_RCC_ClockConfig+0x1b0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d210      	bcs.n	80026f8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b26      	ldr	r3, [pc, #152]	; (8002770 <HAL_RCC_ClockConfig+0x1b0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 0207 	bic.w	r2, r3, #7
 80026de:	4924      	ldr	r1, [pc, #144]	; (8002770 <HAL_RCC_ClockConfig+0x1b0>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b22      	ldr	r3, [pc, #136]	; (8002770 <HAL_RCC_ClockConfig+0x1b0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e036      	b.n	8002766 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002704:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <HAL_RCC_ClockConfig+0x1b4>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4918      	ldr	r1, [pc, #96]	; (8002774 <HAL_RCC_ClockConfig+0x1b4>)
 8002712:	4313      	orrs	r3, r2
 8002714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <HAL_RCC_ClockConfig+0x1b4>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4910      	ldr	r1, [pc, #64]	; (8002774 <HAL_RCC_ClockConfig+0x1b4>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002736:	f000 f825 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 800273a:	4602      	mov	r2, r0
 800273c:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <HAL_RCC_ClockConfig+0x1b4>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	490c      	ldr	r1, [pc, #48]	; (8002778 <HAL_RCC_ClockConfig+0x1b8>)
 8002748:	5ccb      	ldrb	r3, [r1, r3]
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe fd1c 	bl	8001198 <HAL_InitTick>
 8002760:	4603      	mov	r3, r0
 8002762:	72fb      	strb	r3, [r7, #11]

  return status;
 8002764:	7afb      	ldrb	r3, [r7, #11]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40022000 	.word	0x40022000
 8002774:	40021000 	.word	0x40021000
 8002778:	08005ebc 	.word	0x08005ebc
 800277c:	20000000 	.word	0x20000000
 8002780:	20000004 	.word	0x20000004

08002784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	; 0x24
 8002788:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002792:	4b3e      	ldr	r3, [pc, #248]	; (800288c <HAL_RCC_GetSysClockFreq+0x108>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800279c:	4b3b      	ldr	r3, [pc, #236]	; (800288c <HAL_RCC_GetSysClockFreq+0x108>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x34>
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d121      	bne.n	80027f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d11e      	bne.n	80027f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027b8:	4b34      	ldr	r3, [pc, #208]	; (800288c <HAL_RCC_GetSysClockFreq+0x108>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d107      	bne.n	80027d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027c4:	4b31      	ldr	r3, [pc, #196]	; (800288c <HAL_RCC_GetSysClockFreq+0x108>)
 80027c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	e005      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027d4:	4b2d      	ldr	r3, [pc, #180]	; (800288c <HAL_RCC_GetSysClockFreq+0x108>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027e0:	4a2b      	ldr	r2, [pc, #172]	; (8002890 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10d      	bne.n	800280c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d102      	bne.n	8002802 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027fc:	4b25      	ldr	r3, [pc, #148]	; (8002894 <HAL_RCC_GetSysClockFreq+0x110>)
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	e004      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	2b08      	cmp	r3, #8
 8002806:	d101      	bne.n	800280c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002808:	4b23      	ldr	r3, [pc, #140]	; (8002898 <HAL_RCC_GetSysClockFreq+0x114>)
 800280a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	2b0c      	cmp	r3, #12
 8002810:	d134      	bne.n	800287c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002812:	4b1e      	ldr	r3, [pc, #120]	; (800288c <HAL_RCC_GetSysClockFreq+0x108>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d003      	beq.n	800282a <HAL_RCC_GetSysClockFreq+0xa6>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d003      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0xac>
 8002828:	e005      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800282a:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <HAL_RCC_GetSysClockFreq+0x110>)
 800282c:	617b      	str	r3, [r7, #20]
      break;
 800282e:	e005      	b.n	800283c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCC_GetSysClockFreq+0x114>)
 8002832:	617b      	str	r3, [r7, #20]
      break;
 8002834:	e002      	b.n	800283c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	617b      	str	r3, [r7, #20]
      break;
 800283a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800283c:	4b13      	ldr	r3, [pc, #76]	; (800288c <HAL_RCC_GetSysClockFreq+0x108>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	3301      	adds	r3, #1
 8002848:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <HAL_RCC_GetSysClockFreq+0x108>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	0a1b      	lsrs	r3, r3, #8
 8002850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	fb02 f203 	mul.w	r2, r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_RCC_GetSysClockFreq+0x108>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	0e5b      	lsrs	r3, r3, #25
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	3301      	adds	r3, #1
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	fbb2 f3f3 	udiv	r3, r2, r3
 800287a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800287c:	69bb      	ldr	r3, [r7, #24]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3724      	adds	r7, #36	; 0x24
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	08005ed4 	.word	0x08005ed4
 8002894:	00f42400 	.word	0x00f42400
 8002898:	007a1200 	.word	0x007a1200

0800289c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000000 	.word	0x20000000

080028b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028b8:	f7ff fff0 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4904      	ldr	r1, [pc, #16]	; (80028dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000
 80028dc:	08005ecc 	.word	0x08005ecc

080028e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028e4:	f7ff ffda 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028e8:	4602      	mov	r2, r0
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	0adb      	lsrs	r3, r3, #11
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	4904      	ldr	r1, [pc, #16]	; (8002908 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028f6:	5ccb      	ldrb	r3, [r1, r3]
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002900:	4618      	mov	r0, r3
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000
 8002908:	08005ecc 	.word	0x08005ecc

0800290c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002918:	4b2a      	ldr	r3, [pc, #168]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800291a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002924:	f7ff fa02 	bl	8001d2c <HAL_PWREx_GetVoltageRange>
 8002928:	6178      	str	r0, [r7, #20]
 800292a:	e014      	b.n	8002956 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	4a24      	ldr	r2, [pc, #144]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002936:	6593      	str	r3, [r2, #88]	; 0x58
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002944:	f7ff f9f2 	bl	8001d2c <HAL_PWREx_GetVoltageRange>
 8002948:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800294a:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002954:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800295c:	d10b      	bne.n	8002976 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b80      	cmp	r3, #128	; 0x80
 8002962:	d919      	bls.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2ba0      	cmp	r3, #160	; 0xa0
 8002968:	d902      	bls.n	8002970 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800296a:	2302      	movs	r3, #2
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	e013      	b.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002970:	2301      	movs	r3, #1
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	e010      	b.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d902      	bls.n	8002982 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800297c:	2303      	movs	r3, #3
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	e00a      	b.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b80      	cmp	r3, #128	; 0x80
 8002986:	d102      	bne.n	800298e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002988:	2302      	movs	r3, #2
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	e004      	b.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b70      	cmp	r3, #112	; 0x70
 8002992:	d101      	bne.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002994:	2301      	movs	r3, #1
 8002996:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f023 0207 	bic.w	r2, r3, #7
 80029a0:	4909      	ldr	r1, [pc, #36]	; (80029c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d001      	beq.n	80029ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40022000 	.word	0x40022000

080029cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029d4:	2300      	movs	r3, #0
 80029d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029d8:	2300      	movs	r3, #0
 80029da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d041      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029f0:	d02a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029f6:	d824      	bhi.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029fc:	d008      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a02:	d81e      	bhi.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a0c:	d010      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a0e:	e018      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a10:	4b86      	ldr	r3, [pc, #536]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a85      	ldr	r2, [pc, #532]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a1c:	e015      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3304      	adds	r3, #4
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fabb 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a2e:	e00c      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3320      	adds	r3, #32
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fba6 	bl	8003188 <RCCEx_PLLSAI2_Config>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a40:	e003      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	74fb      	strb	r3, [r7, #19]
      break;
 8002a46:	e000      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a4a:	7cfb      	ldrb	r3, [r7, #19]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10b      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a50:	4b76      	ldr	r3, [pc, #472]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a5e:	4973      	ldr	r1, [pc, #460]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a66:	e001      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a68:	7cfb      	ldrb	r3, [r7, #19]
 8002a6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d041      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a80:	d02a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a86:	d824      	bhi.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a8c:	d008      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a92:	d81e      	bhi.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a9c:	d010      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a9e:	e018      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002aa0:	4b62      	ldr	r3, [pc, #392]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a61      	ldr	r2, [pc, #388]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aaa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002aac:	e015      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fa73 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 8002aba:	4603      	mov	r3, r0
 8002abc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002abe:	e00c      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3320      	adds	r3, #32
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fb5e 	bl	8003188 <RCCEx_PLLSAI2_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ad0:	e003      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ad6:	e000      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ada:	7cfb      	ldrb	r3, [r7, #19]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10b      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ae0:	4b52      	ldr	r3, [pc, #328]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aee:	494f      	ldr	r1, [pc, #316]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002af6:	e001      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80a0 	beq.w	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b0e:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00d      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b24:	4b41      	ldr	r3, [pc, #260]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	4a40      	ldr	r2, [pc, #256]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b30:	4b3e      	ldr	r3, [pc, #248]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b40:	4b3b      	ldr	r3, [pc, #236]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a3a      	ldr	r2, [pc, #232]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fb74 	bl	8001238 <HAL_GetTick>
 8002b50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b52:	e009      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b54:	f7fe fb70 	bl	8001238 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d902      	bls.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	74fb      	strb	r3, [r7, #19]
        break;
 8002b66:	e005      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b68:	4b31      	ldr	r3, [pc, #196]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ef      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b74:	7cfb      	ldrb	r3, [r7, #19]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d15c      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b7a:	4b2c      	ldr	r3, [pc, #176]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d01f      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d019      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b98:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ba4:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002baa:	4a20      	ldr	r2, [pc, #128]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bba:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bc4:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d016      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7fe fb2f 	bl	8001238 <HAL_GetTick>
 8002bda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bdc:	e00b      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bde:	f7fe fb2b 	bl	8001238 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d902      	bls.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	74fb      	strb	r3, [r7, #19]
            break;
 8002bf4:	e006      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0ec      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c04:	7cfb      	ldrb	r3, [r7, #19]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c1a:	4904      	ldr	r1, [pc, #16]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c22:	e009      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c24:	7cfb      	ldrb	r3, [r7, #19]
 8002c26:	74bb      	strb	r3, [r7, #18]
 8002c28:	e006      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c34:	7cfb      	ldrb	r3, [r7, #19]
 8002c36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c38:	7c7b      	ldrb	r3, [r7, #17]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d105      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3e:	4b9e      	ldr	r3, [pc, #632]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	4a9d      	ldr	r2, [pc, #628]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c56:	4b98      	ldr	r3, [pc, #608]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5c:	f023 0203 	bic.w	r2, r3, #3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c64:	4994      	ldr	r1, [pc, #592]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c78:	4b8f      	ldr	r3, [pc, #572]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7e:	f023 020c 	bic.w	r2, r3, #12
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	498c      	ldr	r1, [pc, #560]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c9a:	4b87      	ldr	r3, [pc, #540]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	4983      	ldr	r1, [pc, #524]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cbc:	4b7e      	ldr	r3, [pc, #504]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	497b      	ldr	r1, [pc, #492]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cde:	4b76      	ldr	r3, [pc, #472]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cec:	4972      	ldr	r1, [pc, #456]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d00:	4b6d      	ldr	r3, [pc, #436]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0e:	496a      	ldr	r1, [pc, #424]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d22:	4b65      	ldr	r3, [pc, #404]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d30:	4961      	ldr	r1, [pc, #388]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d44:	4b5c      	ldr	r3, [pc, #368]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d52:	4959      	ldr	r1, [pc, #356]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d66:	4b54      	ldr	r3, [pc, #336]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d74:	4950      	ldr	r1, [pc, #320]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d88:	4b4b      	ldr	r3, [pc, #300]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d96:	4948      	ldr	r1, [pc, #288]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002daa:	4b43      	ldr	r3, [pc, #268]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	493f      	ldr	r1, [pc, #252]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d028      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dcc:	4b3a      	ldr	r3, [pc, #232]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dda:	4937      	ldr	r1, [pc, #220]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002de6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dea:	d106      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dec:	4b32      	ldr	r3, [pc, #200]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4a31      	ldr	r2, [pc, #196]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002df6:	60d3      	str	r3, [r2, #12]
 8002df8:	e011      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e02:	d10c      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3304      	adds	r3, #4
 8002e08:	2101      	movs	r1, #1
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f8c8 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 8002e10:	4603      	mov	r3, r0
 8002e12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e14:	7cfb      	ldrb	r3, [r7, #19]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002e1a:	7cfb      	ldrb	r3, [r7, #19]
 8002e1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d028      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e2a:	4b23      	ldr	r3, [pc, #140]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	491f      	ldr	r1, [pc, #124]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e48:	d106      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	4a1a      	ldr	r2, [pc, #104]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e54:	60d3      	str	r3, [r2, #12]
 8002e56:	e011      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3304      	adds	r3, #4
 8002e66:	2101      	movs	r1, #1
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 f899 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e72:	7cfb      	ldrb	r3, [r7, #19]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e78:	7cfb      	ldrb	r3, [r7, #19]
 8002e7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d02b      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e96:	4908      	ldr	r1, [pc, #32]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea6:	d109      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4a02      	ldr	r2, [pc, #8]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eb2:	60d3      	str	r3, [r2, #12]
 8002eb4:	e014      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	2101      	movs	r1, #1
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 f867 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ed6:	7cfb      	ldrb	r3, [r7, #19]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002edc:	7cfb      	ldrb	r3, [r7, #19]
 8002ede:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d02f      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eec:	4b2b      	ldr	r3, [pc, #172]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002efa:	4928      	ldr	r1, [pc, #160]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f0a:	d10d      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	2102      	movs	r1, #2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 f844 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f1c:	7cfb      	ldrb	r3, [r7, #19]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d014      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f22:	7cfb      	ldrb	r3, [r7, #19]
 8002f24:	74bb      	strb	r3, [r7, #18]
 8002f26:	e011      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3320      	adds	r3, #32
 8002f36:	2102      	movs	r1, #2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 f925 	bl	8003188 <RCCEx_PLLSAI2_Config>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f42:	7cfb      	ldrb	r3, [r7, #19]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f48:	7cfb      	ldrb	r3, [r7, #19]
 8002f4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f58:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f66:	490d      	ldr	r1, [pc, #52]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f7a:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f8a:	4904      	ldr	r1, [pc, #16]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f92:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40021000 	.word	0x40021000

08002fa0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fae:	4b75      	ldr	r3, [pc, #468]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d018      	beq.n	8002fec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fba:	4b72      	ldr	r3, [pc, #456]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f003 0203 	and.w	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d10d      	bne.n	8002fe6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
       ||
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d009      	beq.n	8002fe6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fd2:	4b6c      	ldr	r3, [pc, #432]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
       ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d047      	beq.n	8003076 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	73fb      	strb	r3, [r7, #15]
 8002fea:	e044      	b.n	8003076 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d018      	beq.n	8003026 <RCCEx_PLLSAI1_Config+0x86>
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d825      	bhi.n	8003044 <RCCEx_PLLSAI1_Config+0xa4>
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d002      	beq.n	8003002 <RCCEx_PLLSAI1_Config+0x62>
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d009      	beq.n	8003014 <RCCEx_PLLSAI1_Config+0x74>
 8003000:	e020      	b.n	8003044 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003002:	4b60      	ldr	r3, [pc, #384]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d11d      	bne.n	800304a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003012:	e01a      	b.n	800304a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003014:	4b5b      	ldr	r3, [pc, #364]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301c:	2b00      	cmp	r3, #0
 800301e:	d116      	bne.n	800304e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003024:	e013      	b.n	800304e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003026:	4b57      	ldr	r3, [pc, #348]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10f      	bne.n	8003052 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003032:	4b54      	ldr	r3, [pc, #336]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003042:	e006      	b.n	8003052 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
      break;
 8003048:	e004      	b.n	8003054 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800304a:	bf00      	nop
 800304c:	e002      	b.n	8003054 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800304e:	bf00      	nop
 8003050:	e000      	b.n	8003054 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003052:	bf00      	nop
    }

    if(status == HAL_OK)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10d      	bne.n	8003076 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800305a:	4b4a      	ldr	r3, [pc, #296]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6819      	ldr	r1, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	430b      	orrs	r3, r1
 8003070:	4944      	ldr	r1, [pc, #272]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003072:	4313      	orrs	r3, r2
 8003074:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d17d      	bne.n	8003178 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800307c:	4b41      	ldr	r3, [pc, #260]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a40      	ldr	r2, [pc, #256]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003082:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003088:	f7fe f8d6 	bl	8001238 <HAL_GetTick>
 800308c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800308e:	e009      	b.n	80030a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003090:	f7fe f8d2 	bl	8001238 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d902      	bls.n	80030a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	73fb      	strb	r3, [r7, #15]
        break;
 80030a2:	e005      	b.n	80030b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030a4:	4b37      	ldr	r3, [pc, #220]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1ef      	bne.n	8003090 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d160      	bne.n	8003178 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d111      	bne.n	80030e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030bc:	4b31      	ldr	r3, [pc, #196]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6892      	ldr	r2, [r2, #8]
 80030cc:	0211      	lsls	r1, r2, #8
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68d2      	ldr	r2, [r2, #12]
 80030d2:	0912      	lsrs	r2, r2, #4
 80030d4:	0452      	lsls	r2, r2, #17
 80030d6:	430a      	orrs	r2, r1
 80030d8:	492a      	ldr	r1, [pc, #168]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	610b      	str	r3, [r1, #16]
 80030de:	e027      	b.n	8003130 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d112      	bne.n	800310c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030e6:	4b27      	ldr	r3, [pc, #156]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6892      	ldr	r2, [r2, #8]
 80030f6:	0211      	lsls	r1, r2, #8
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6912      	ldr	r2, [r2, #16]
 80030fc:	0852      	lsrs	r2, r2, #1
 80030fe:	3a01      	subs	r2, #1
 8003100:	0552      	lsls	r2, r2, #21
 8003102:	430a      	orrs	r2, r1
 8003104:	491f      	ldr	r1, [pc, #124]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003106:	4313      	orrs	r3, r2
 8003108:	610b      	str	r3, [r1, #16]
 800310a:	e011      	b.n	8003130 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800310c:	4b1d      	ldr	r3, [pc, #116]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003114:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6892      	ldr	r2, [r2, #8]
 800311c:	0211      	lsls	r1, r2, #8
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6952      	ldr	r2, [r2, #20]
 8003122:	0852      	lsrs	r2, r2, #1
 8003124:	3a01      	subs	r2, #1
 8003126:	0652      	lsls	r2, r2, #25
 8003128:	430a      	orrs	r2, r1
 800312a:	4916      	ldr	r1, [pc, #88]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a13      	ldr	r2, [pc, #76]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003136:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800313a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7fe f87c 	bl	8001238 <HAL_GetTick>
 8003140:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003142:	e009      	b.n	8003158 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003144:	f7fe f878 	bl	8001238 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d902      	bls.n	8003158 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	73fb      	strb	r3, [r7, #15]
          break;
 8003156:	e005      	b.n	8003164 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ef      	beq.n	8003144 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	4904      	ldr	r1, [pc, #16]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003174:	4313      	orrs	r3, r2
 8003176:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003178:	7bfb      	ldrb	r3, [r7, #15]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000

08003188 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003196:	4b6a      	ldr	r3, [pc, #424]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d018      	beq.n	80031d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031a2:	4b67      	ldr	r3, [pc, #412]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f003 0203 	and.w	r2, r3, #3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d10d      	bne.n	80031ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
       ||
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80031ba:	4b61      	ldr	r3, [pc, #388]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
       ||
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d047      	beq.n	800325e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
 80031d2:	e044      	b.n	800325e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d018      	beq.n	800320e <RCCEx_PLLSAI2_Config+0x86>
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d825      	bhi.n	800322c <RCCEx_PLLSAI2_Config+0xa4>
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d002      	beq.n	80031ea <RCCEx_PLLSAI2_Config+0x62>
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d009      	beq.n	80031fc <RCCEx_PLLSAI2_Config+0x74>
 80031e8:	e020      	b.n	800322c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031ea:	4b55      	ldr	r3, [pc, #340]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d11d      	bne.n	8003232 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031fa:	e01a      	b.n	8003232 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031fc:	4b50      	ldr	r3, [pc, #320]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003204:	2b00      	cmp	r3, #0
 8003206:	d116      	bne.n	8003236 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800320c:	e013      	b.n	8003236 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800320e:	4b4c      	ldr	r3, [pc, #304]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10f      	bne.n	800323a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800321a:	4b49      	ldr	r3, [pc, #292]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800322a:	e006      	b.n	800323a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
      break;
 8003230:	e004      	b.n	800323c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003232:	bf00      	nop
 8003234:	e002      	b.n	800323c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800323a:	bf00      	nop
    }

    if(status == HAL_OK)
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10d      	bne.n	800325e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003242:	4b3f      	ldr	r3, [pc, #252]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6819      	ldr	r1, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	3b01      	subs	r3, #1
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	430b      	orrs	r3, r1
 8003258:	4939      	ldr	r1, [pc, #228]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d167      	bne.n	8003334 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003264:	4b36      	ldr	r3, [pc, #216]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a35      	ldr	r2, [pc, #212]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 800326a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800326e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003270:	f7fd ffe2 	bl	8001238 <HAL_GetTick>
 8003274:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003276:	e009      	b.n	800328c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003278:	f7fd ffde 	bl	8001238 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d902      	bls.n	800328c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	73fb      	strb	r3, [r7, #15]
        break;
 800328a:	e005      	b.n	8003298 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800328c:	4b2c      	ldr	r3, [pc, #176]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ef      	bne.n	8003278 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d14a      	bne.n	8003334 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d111      	bne.n	80032c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032a4:	4b26      	ldr	r3, [pc, #152]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6892      	ldr	r2, [r2, #8]
 80032b4:	0211      	lsls	r1, r2, #8
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68d2      	ldr	r2, [r2, #12]
 80032ba:	0912      	lsrs	r2, r2, #4
 80032bc:	0452      	lsls	r2, r2, #17
 80032be:	430a      	orrs	r2, r1
 80032c0:	491f      	ldr	r1, [pc, #124]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	614b      	str	r3, [r1, #20]
 80032c6:	e011      	b.n	80032ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032c8:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6892      	ldr	r2, [r2, #8]
 80032d8:	0211      	lsls	r1, r2, #8
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6912      	ldr	r2, [r2, #16]
 80032de:	0852      	lsrs	r2, r2, #1
 80032e0:	3a01      	subs	r2, #1
 80032e2:	0652      	lsls	r2, r2, #25
 80032e4:	430a      	orrs	r2, r1
 80032e6:	4916      	ldr	r1, [pc, #88]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032ec:	4b14      	ldr	r3, [pc, #80]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a13      	ldr	r2, [pc, #76]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7fd ff9e 	bl	8001238 <HAL_GetTick>
 80032fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032fe:	e009      	b.n	8003314 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003300:	f7fd ff9a 	bl	8001238 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d902      	bls.n	8003314 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	73fb      	strb	r3, [r7, #15]
          break;
 8003312:	e005      	b.n	8003320 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0ef      	beq.n	8003300 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	4904      	ldr	r1, [pc, #16]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003330:	4313      	orrs	r3, r2
 8003332:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003334:	7bfb      	ldrb	r3, [r7, #15]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40021000 	.word	0x40021000

08003344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e040      	b.n	80033d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fd fcde 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2224      	movs	r2, #36	; 0x24
 8003370:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0201 	bic.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fc22 	bl	8003bcc <UART_SetConfig>
 8003388:	4603      	mov	r3, r0
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e022      	b.n	80033d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fea0 	bl	80040e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 ff27 	bl	8004224 <UART_CheckIdleState>
 80033d6:	4603      	mov	r3, r0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	; 0x28
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	4613      	mov	r3, r2
 80033ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	f040 8082 	bne.w	80034fe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_UART_Transmit+0x26>
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e07a      	b.n	8003500 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_UART_Transmit+0x38>
 8003414:	2302      	movs	r3, #2
 8003416:	e073      	b.n	8003500 <HAL_UART_Transmit+0x120>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2221      	movs	r2, #33	; 0x21
 800342c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800342e:	f7fd ff03 	bl	8001238 <HAL_GetTick>
 8003432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	88fa      	ldrh	r2, [r7, #6]
 8003438:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	88fa      	ldrh	r2, [r7, #6]
 8003440:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344c:	d108      	bne.n	8003460 <HAL_UART_Transmit+0x80>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d104      	bne.n	8003460 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	61bb      	str	r3, [r7, #24]
 800345e:	e003      	b.n	8003468 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003470:	e02d      	b.n	80034ce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2200      	movs	r2, #0
 800347a:	2180      	movs	r1, #128	; 0x80
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 ff1a 	bl	80042b6 <UART_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e039      	b.n	8003500 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10b      	bne.n	80034aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	881a      	ldrh	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800349e:	b292      	uxth	r2, r2
 80034a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	3302      	adds	r3, #2
 80034a6:	61bb      	str	r3, [r7, #24]
 80034a8:	e008      	b.n	80034bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	781a      	ldrb	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	b292      	uxth	r2, r2
 80034b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3301      	adds	r3, #1
 80034ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1cb      	bne.n	8003472 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2200      	movs	r2, #0
 80034e2:	2140      	movs	r1, #64	; 0x40
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fee6 	bl	80042b6 <UART_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e005      	b.n	8003500 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e000      	b.n	8003500 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80034fe:	2302      	movs	r3, #2
  }
}
 8003500:	4618      	mov	r0, r3
 8003502:	3720      	adds	r7, #32
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	; 0x28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	4613      	mov	r3, r2
 8003514:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800351a:	2b20      	cmp	r3, #32
 800351c:	d142      	bne.n	80035a4 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HAL_UART_Receive_DMA+0x22>
 8003524:	88fb      	ldrh	r3, [r7, #6]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e03b      	b.n	80035a6 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_UART_Receive_DMA+0x34>
 8003538:	2302      	movs	r3, #2
 800353a:	e034      	b.n	80035a6 <HAL_UART_Receive_DMA+0x9e>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a18      	ldr	r2, [pc, #96]	; (80035b0 <HAL_UART_Receive_DMA+0xa8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d01f      	beq.n	8003594 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d018      	beq.n	8003594 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	e853 3f00 	ldrex	r3, [r3]
 800356e:	613b      	str	r3, [r7, #16]
   return(result);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	623b      	str	r3, [r7, #32]
 8003582:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003584:	69f9      	ldr	r1, [r7, #28]
 8003586:	6a3a      	ldr	r2, [r7, #32]
 8003588:	e841 2300 	strex	r3, r2, [r1]
 800358c:	61bb      	str	r3, [r7, #24]
   return(result);
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e6      	bne.n	8003562 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	461a      	mov	r2, r3
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 ff50 	bl	8004440 <UART_Start_Receive_DMA>
 80035a0:	4603      	mov	r3, r0
 80035a2:	e000      	b.n	80035a6 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
  }
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3728      	adds	r7, #40	; 0x28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40008000 	.word	0x40008000

080035b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b0ba      	sub	sp, #232	; 0xe8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80035de:	f640 030f 	movw	r3, #2063	; 0x80f
 80035e2:	4013      	ands	r3, r2
 80035e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80035e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d115      	bne.n	800361c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00f      	beq.n	800361c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b00      	cmp	r3, #0
 8003606:	d009      	beq.n	800361c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 82a6 	beq.w	8003b5e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	4798      	blx	r3
      }
      return;
 800361a:	e2a0      	b.n	8003b5e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800361c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8117 	beq.w	8003854 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003632:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003636:	4b85      	ldr	r3, [pc, #532]	; (800384c <HAL_UART_IRQHandler+0x298>)
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 810a 	beq.w	8003854 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d011      	beq.n	8003670 <HAL_UART_IRQHandler+0xbc>
 800364c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00b      	beq.n	8003670 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2201      	movs	r2, #1
 800365e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003666:	f043 0201 	orr.w	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d011      	beq.n	80036a0 <HAL_UART_IRQHandler+0xec>
 800367c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00b      	beq.n	80036a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2202      	movs	r2, #2
 800368e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003696:	f043 0204 	orr.w	r2, r3, #4
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d011      	beq.n	80036d0 <HAL_UART_IRQHandler+0x11c>
 80036ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00b      	beq.n	80036d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2204      	movs	r2, #4
 80036be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c6:	f043 0202 	orr.w	r2, r3, #2
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d017      	beq.n	800370c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d105      	bne.n	80036f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00b      	beq.n	800370c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2208      	movs	r2, #8
 80036fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003702:	f043 0208 	orr.w	r2, r3, #8
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800370c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003714:	2b00      	cmp	r3, #0
 8003716:	d012      	beq.n	800373e <HAL_UART_IRQHandler+0x18a>
 8003718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800371c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00c      	beq.n	800373e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800372c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003734:	f043 0220 	orr.w	r2, r3, #32
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 820c 	beq.w	8003b62 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800374a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00d      	beq.n	8003772 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003778:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d005      	beq.n	8003796 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800378a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800378e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003792:	2b00      	cmp	r3, #0
 8003794:	d04f      	beq.n	8003836 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 ff1e 	bl	80045d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b40      	cmp	r3, #64	; 0x40
 80037a8:	d141      	bne.n	800382e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3308      	adds	r3, #8
 80037b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3308      	adds	r3, #8
 80037d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037e6:	e841 2300 	strex	r3, r2, [r1]
 80037ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1d9      	bne.n	80037aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d013      	beq.n	8003826 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	4a13      	ldr	r2, [pc, #76]	; (8003850 <HAL_UART_IRQHandler+0x29c>)
 8003804:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	4618      	mov	r0, r3
 800380c:	f7fd ffac 	bl	8001768 <HAL_DMA_Abort_IT>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d017      	beq.n	8003846 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003820:	4610      	mov	r0, r2
 8003822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003824:	e00f      	b.n	8003846 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f9ba 	bl	8003ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382c:	e00b      	b.n	8003846 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f9b6 	bl	8003ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003834:	e007      	b.n	8003846 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f9b2 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003844:	e18d      	b.n	8003b62 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003846:	bf00      	nop
    return;
 8003848:	e18b      	b.n	8003b62 <HAL_UART_IRQHandler+0x5ae>
 800384a:	bf00      	nop
 800384c:	04000120 	.word	0x04000120
 8003850:	08004877 	.word	0x08004877

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003858:	2b01      	cmp	r3, #1
 800385a:	f040 8146 	bne.w	8003aea <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800385e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 813f 	beq.w	8003aea <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800386c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 8138 	beq.w	8003aea <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2210      	movs	r2, #16
 8003880:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388c:	2b40      	cmp	r3, #64	; 0x40
 800388e:	f040 80b4 	bne.w	80039fa <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800389e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 815f 	beq.w	8003b66 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80038ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038b2:	429a      	cmp	r2, r3
 80038b4:	f080 8157 	bcs.w	8003b66 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f040 8085 	bne.w	80039de <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003902:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800390a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800390e:	e841 2300 	strex	r3, r2, [r1]
 8003912:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003916:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1da      	bne.n	80038d4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3308      	adds	r3, #8
 8003924:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800392e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3308      	adds	r3, #8
 800393e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003942:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003946:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800394a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e1      	bne.n	800391e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3308      	adds	r3, #8
 8003960:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800396a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800396c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3308      	adds	r3, #8
 800397a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800397e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003980:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003984:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800398c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e3      	bne.n	800395a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a6:	e853 3f00 	ldrex	r3, [r3]
 80039aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ae:	f023 0310 	bic.w	r3, r3, #16
 80039b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80039c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039c8:	e841 2300 	strex	r3, r2, [r1]
 80039cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e4      	bne.n	800399e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fd fe87 	bl	80016ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	4619      	mov	r1, r3
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f8de 	bl	8003bb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039f8:	e0b5      	b.n	8003b66 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80a7 	beq.w	8003b6a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80a2 	beq.w	8003b6a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a48:	647b      	str	r3, [r7, #68]	; 0x44
 8003a4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e4      	bne.n	8003a26 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3308      	adds	r3, #8
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	623b      	str	r3, [r7, #32]
   return(result);
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	f023 0301 	bic.w	r3, r3, #1
 8003a72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a80:	633a      	str	r2, [r7, #48]	; 0x30
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e3      	bne.n	8003a5c <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0310 	bic.w	r3, r3, #16
 8003aba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003acc:	69b9      	ldr	r1, [r7, #24]
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	e841 2300 	strex	r3, r2, [r1]
 8003ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e4      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f866 	bl	8003bb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ae8:	e03f      	b.n	8003b6a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00e      	beq.n	8003b14 <HAL_UART_IRQHandler+0x560>
 8003af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 fef2 	bl	80048f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b12:	e02d      	b.n	8003b70 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00e      	beq.n	8003b3e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01c      	beq.n	8003b6e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	4798      	blx	r3
    }
    return;
 8003b3c:	e017      	b.n	8003b6e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d012      	beq.n	8003b70 <HAL_UART_IRQHandler+0x5bc>
 8003b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00c      	beq.n	8003b70 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fea3 	bl	80048a2 <UART_EndTransmit_IT>
    return;
 8003b5c:	e008      	b.n	8003b70 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003b5e:	bf00      	nop
 8003b60:	e006      	b.n	8003b70 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003b62:	bf00      	nop
 8003b64:	e004      	b.n	8003b70 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003b66:	bf00      	nop
 8003b68:	e002      	b.n	8003b70 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003b6a:	bf00      	nop
 8003b6c:	e000      	b.n	8003b70 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003b6e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003b70:	37e8      	adds	r7, #232	; 0xe8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop

08003b78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bcc:	b5b0      	push	{r4, r5, r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4bad      	ldr	r3, [pc, #692]	; (8003eac <UART_SetConfig+0x2e0>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6812      	ldr	r2, [r2, #0]
 8003bfe:	69f9      	ldr	r1, [r7, #28]
 8003c00:	430b      	orrs	r3, r1
 8003c02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4aa2      	ldr	r2, [pc, #648]	; (8003eb0 <UART_SetConfig+0x2e4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d004      	beq.n	8003c34 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a99      	ldr	r2, [pc, #612]	; (8003eb4 <UART_SetConfig+0x2e8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d121      	bne.n	8003c96 <UART_SetConfig+0xca>
 8003c52:	4b99      	ldr	r3, [pc, #612]	; (8003eb8 <UART_SetConfig+0x2ec>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d817      	bhi.n	8003c90 <UART_SetConfig+0xc4>
 8003c60:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <UART_SetConfig+0x9c>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003c79 	.word	0x08003c79
 8003c6c:	08003c85 	.word	0x08003c85
 8003c70:	08003c7f 	.word	0x08003c7f
 8003c74:	08003c8b 	.word	0x08003c8b
 8003c78:	2301      	movs	r3, #1
 8003c7a:	76fb      	strb	r3, [r7, #27]
 8003c7c:	e0e7      	b.n	8003e4e <UART_SetConfig+0x282>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	76fb      	strb	r3, [r7, #27]
 8003c82:	e0e4      	b.n	8003e4e <UART_SetConfig+0x282>
 8003c84:	2304      	movs	r3, #4
 8003c86:	76fb      	strb	r3, [r7, #27]
 8003c88:	e0e1      	b.n	8003e4e <UART_SetConfig+0x282>
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	76fb      	strb	r3, [r7, #27]
 8003c8e:	e0de      	b.n	8003e4e <UART_SetConfig+0x282>
 8003c90:	2310      	movs	r3, #16
 8003c92:	76fb      	strb	r3, [r7, #27]
 8003c94:	e0db      	b.n	8003e4e <UART_SetConfig+0x282>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a88      	ldr	r2, [pc, #544]	; (8003ebc <UART_SetConfig+0x2f0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d132      	bne.n	8003d06 <UART_SetConfig+0x13a>
 8003ca0:	4b85      	ldr	r3, [pc, #532]	; (8003eb8 <UART_SetConfig+0x2ec>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b0c      	cmp	r3, #12
 8003cac:	d828      	bhi.n	8003d00 <UART_SetConfig+0x134>
 8003cae:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <UART_SetConfig+0xe8>)
 8003cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb4:	08003ce9 	.word	0x08003ce9
 8003cb8:	08003d01 	.word	0x08003d01
 8003cbc:	08003d01 	.word	0x08003d01
 8003cc0:	08003d01 	.word	0x08003d01
 8003cc4:	08003cf5 	.word	0x08003cf5
 8003cc8:	08003d01 	.word	0x08003d01
 8003ccc:	08003d01 	.word	0x08003d01
 8003cd0:	08003d01 	.word	0x08003d01
 8003cd4:	08003cef 	.word	0x08003cef
 8003cd8:	08003d01 	.word	0x08003d01
 8003cdc:	08003d01 	.word	0x08003d01
 8003ce0:	08003d01 	.word	0x08003d01
 8003ce4:	08003cfb 	.word	0x08003cfb
 8003ce8:	2300      	movs	r3, #0
 8003cea:	76fb      	strb	r3, [r7, #27]
 8003cec:	e0af      	b.n	8003e4e <UART_SetConfig+0x282>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	76fb      	strb	r3, [r7, #27]
 8003cf2:	e0ac      	b.n	8003e4e <UART_SetConfig+0x282>
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	76fb      	strb	r3, [r7, #27]
 8003cf8:	e0a9      	b.n	8003e4e <UART_SetConfig+0x282>
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	76fb      	strb	r3, [r7, #27]
 8003cfe:	e0a6      	b.n	8003e4e <UART_SetConfig+0x282>
 8003d00:	2310      	movs	r3, #16
 8003d02:	76fb      	strb	r3, [r7, #27]
 8003d04:	e0a3      	b.n	8003e4e <UART_SetConfig+0x282>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a6d      	ldr	r2, [pc, #436]	; (8003ec0 <UART_SetConfig+0x2f4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d120      	bne.n	8003d52 <UART_SetConfig+0x186>
 8003d10:	4b69      	ldr	r3, [pc, #420]	; (8003eb8 <UART_SetConfig+0x2ec>)
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d1a:	2b30      	cmp	r3, #48	; 0x30
 8003d1c:	d013      	beq.n	8003d46 <UART_SetConfig+0x17a>
 8003d1e:	2b30      	cmp	r3, #48	; 0x30
 8003d20:	d814      	bhi.n	8003d4c <UART_SetConfig+0x180>
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d009      	beq.n	8003d3a <UART_SetConfig+0x16e>
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d810      	bhi.n	8003d4c <UART_SetConfig+0x180>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <UART_SetConfig+0x168>
 8003d2e:	2b10      	cmp	r3, #16
 8003d30:	d006      	beq.n	8003d40 <UART_SetConfig+0x174>
 8003d32:	e00b      	b.n	8003d4c <UART_SetConfig+0x180>
 8003d34:	2300      	movs	r3, #0
 8003d36:	76fb      	strb	r3, [r7, #27]
 8003d38:	e089      	b.n	8003e4e <UART_SetConfig+0x282>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	76fb      	strb	r3, [r7, #27]
 8003d3e:	e086      	b.n	8003e4e <UART_SetConfig+0x282>
 8003d40:	2304      	movs	r3, #4
 8003d42:	76fb      	strb	r3, [r7, #27]
 8003d44:	e083      	b.n	8003e4e <UART_SetConfig+0x282>
 8003d46:	2308      	movs	r3, #8
 8003d48:	76fb      	strb	r3, [r7, #27]
 8003d4a:	e080      	b.n	8003e4e <UART_SetConfig+0x282>
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	76fb      	strb	r3, [r7, #27]
 8003d50:	e07d      	b.n	8003e4e <UART_SetConfig+0x282>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a5b      	ldr	r2, [pc, #364]	; (8003ec4 <UART_SetConfig+0x2f8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d120      	bne.n	8003d9e <UART_SetConfig+0x1d2>
 8003d5c:	4b56      	ldr	r3, [pc, #344]	; (8003eb8 <UART_SetConfig+0x2ec>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d66:	2bc0      	cmp	r3, #192	; 0xc0
 8003d68:	d013      	beq.n	8003d92 <UART_SetConfig+0x1c6>
 8003d6a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d6c:	d814      	bhi.n	8003d98 <UART_SetConfig+0x1cc>
 8003d6e:	2b80      	cmp	r3, #128	; 0x80
 8003d70:	d009      	beq.n	8003d86 <UART_SetConfig+0x1ba>
 8003d72:	2b80      	cmp	r3, #128	; 0x80
 8003d74:	d810      	bhi.n	8003d98 <UART_SetConfig+0x1cc>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <UART_SetConfig+0x1b4>
 8003d7a:	2b40      	cmp	r3, #64	; 0x40
 8003d7c:	d006      	beq.n	8003d8c <UART_SetConfig+0x1c0>
 8003d7e:	e00b      	b.n	8003d98 <UART_SetConfig+0x1cc>
 8003d80:	2300      	movs	r3, #0
 8003d82:	76fb      	strb	r3, [r7, #27]
 8003d84:	e063      	b.n	8003e4e <UART_SetConfig+0x282>
 8003d86:	2302      	movs	r3, #2
 8003d88:	76fb      	strb	r3, [r7, #27]
 8003d8a:	e060      	b.n	8003e4e <UART_SetConfig+0x282>
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	76fb      	strb	r3, [r7, #27]
 8003d90:	e05d      	b.n	8003e4e <UART_SetConfig+0x282>
 8003d92:	2308      	movs	r3, #8
 8003d94:	76fb      	strb	r3, [r7, #27]
 8003d96:	e05a      	b.n	8003e4e <UART_SetConfig+0x282>
 8003d98:	2310      	movs	r3, #16
 8003d9a:	76fb      	strb	r3, [r7, #27]
 8003d9c:	e057      	b.n	8003e4e <UART_SetConfig+0x282>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a49      	ldr	r2, [pc, #292]	; (8003ec8 <UART_SetConfig+0x2fc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d125      	bne.n	8003df4 <UART_SetConfig+0x228>
 8003da8:	4b43      	ldr	r3, [pc, #268]	; (8003eb8 <UART_SetConfig+0x2ec>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003db6:	d017      	beq.n	8003de8 <UART_SetConfig+0x21c>
 8003db8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dbc:	d817      	bhi.n	8003dee <UART_SetConfig+0x222>
 8003dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc2:	d00b      	beq.n	8003ddc <UART_SetConfig+0x210>
 8003dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc8:	d811      	bhi.n	8003dee <UART_SetConfig+0x222>
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <UART_SetConfig+0x20a>
 8003dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd2:	d006      	beq.n	8003de2 <UART_SetConfig+0x216>
 8003dd4:	e00b      	b.n	8003dee <UART_SetConfig+0x222>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	76fb      	strb	r3, [r7, #27]
 8003dda:	e038      	b.n	8003e4e <UART_SetConfig+0x282>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	76fb      	strb	r3, [r7, #27]
 8003de0:	e035      	b.n	8003e4e <UART_SetConfig+0x282>
 8003de2:	2304      	movs	r3, #4
 8003de4:	76fb      	strb	r3, [r7, #27]
 8003de6:	e032      	b.n	8003e4e <UART_SetConfig+0x282>
 8003de8:	2308      	movs	r3, #8
 8003dea:	76fb      	strb	r3, [r7, #27]
 8003dec:	e02f      	b.n	8003e4e <UART_SetConfig+0x282>
 8003dee:	2310      	movs	r3, #16
 8003df0:	76fb      	strb	r3, [r7, #27]
 8003df2:	e02c      	b.n	8003e4e <UART_SetConfig+0x282>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a2d      	ldr	r2, [pc, #180]	; (8003eb0 <UART_SetConfig+0x2e4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d125      	bne.n	8003e4a <UART_SetConfig+0x27e>
 8003dfe:	4b2e      	ldr	r3, [pc, #184]	; (8003eb8 <UART_SetConfig+0x2ec>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e0c:	d017      	beq.n	8003e3e <UART_SetConfig+0x272>
 8003e0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e12:	d817      	bhi.n	8003e44 <UART_SetConfig+0x278>
 8003e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e18:	d00b      	beq.n	8003e32 <UART_SetConfig+0x266>
 8003e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e1e:	d811      	bhi.n	8003e44 <UART_SetConfig+0x278>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <UART_SetConfig+0x260>
 8003e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e28:	d006      	beq.n	8003e38 <UART_SetConfig+0x26c>
 8003e2a:	e00b      	b.n	8003e44 <UART_SetConfig+0x278>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	76fb      	strb	r3, [r7, #27]
 8003e30:	e00d      	b.n	8003e4e <UART_SetConfig+0x282>
 8003e32:	2302      	movs	r3, #2
 8003e34:	76fb      	strb	r3, [r7, #27]
 8003e36:	e00a      	b.n	8003e4e <UART_SetConfig+0x282>
 8003e38:	2304      	movs	r3, #4
 8003e3a:	76fb      	strb	r3, [r7, #27]
 8003e3c:	e007      	b.n	8003e4e <UART_SetConfig+0x282>
 8003e3e:	2308      	movs	r3, #8
 8003e40:	76fb      	strb	r3, [r7, #27]
 8003e42:	e004      	b.n	8003e4e <UART_SetConfig+0x282>
 8003e44:	2310      	movs	r3, #16
 8003e46:	76fb      	strb	r3, [r7, #27]
 8003e48:	e001      	b.n	8003e4e <UART_SetConfig+0x282>
 8003e4a:	2310      	movs	r3, #16
 8003e4c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a17      	ldr	r2, [pc, #92]	; (8003eb0 <UART_SetConfig+0x2e4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	f040 8087 	bne.w	8003f68 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e5a:	7efb      	ldrb	r3, [r7, #27]
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d837      	bhi.n	8003ed0 <UART_SetConfig+0x304>
 8003e60:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <UART_SetConfig+0x29c>)
 8003e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e66:	bf00      	nop
 8003e68:	08003e8d 	.word	0x08003e8d
 8003e6c:	08003ed1 	.word	0x08003ed1
 8003e70:	08003e95 	.word	0x08003e95
 8003e74:	08003ed1 	.word	0x08003ed1
 8003e78:	08003e9b 	.word	0x08003e9b
 8003e7c:	08003ed1 	.word	0x08003ed1
 8003e80:	08003ed1 	.word	0x08003ed1
 8003e84:	08003ed1 	.word	0x08003ed1
 8003e88:	08003ea3 	.word	0x08003ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e8c:	f7fe fd12 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8003e90:	6178      	str	r0, [r7, #20]
        break;
 8003e92:	e022      	b.n	8003eda <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e94:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <UART_SetConfig+0x300>)
 8003e96:	617b      	str	r3, [r7, #20]
        break;
 8003e98:	e01f      	b.n	8003eda <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e9a:	f7fe fc73 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8003e9e:	6178      	str	r0, [r7, #20]
        break;
 8003ea0:	e01b      	b.n	8003eda <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ea6:	617b      	str	r3, [r7, #20]
        break;
 8003ea8:	e017      	b.n	8003eda <UART_SetConfig+0x30e>
 8003eaa:	bf00      	nop
 8003eac:	efff69f3 	.word	0xefff69f3
 8003eb0:	40008000 	.word	0x40008000
 8003eb4:	40013800 	.word	0x40013800
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40004400 	.word	0x40004400
 8003ec0:	40004800 	.word	0x40004800
 8003ec4:	40004c00 	.word	0x40004c00
 8003ec8:	40005000 	.word	0x40005000
 8003ecc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	76bb      	strb	r3, [r7, #26]
        break;
 8003ed8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80f1 	beq.w	80040c4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	4413      	add	r3, r2
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d305      	bcc.n	8003efe <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d902      	bls.n	8003f04 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	76bb      	strb	r3, [r7, #26]
 8003f02:	e0df      	b.n	80040c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f04f 0100 	mov.w	r1, #0
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	020b      	lsls	r3, r1, #8
 8003f16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f1a:	0202      	lsls	r2, r0, #8
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	6849      	ldr	r1, [r1, #4]
 8003f20:	0849      	lsrs	r1, r1, #1
 8003f22:	4608      	mov	r0, r1
 8003f24:	f04f 0100 	mov.w	r1, #0
 8003f28:	1814      	adds	r4, r2, r0
 8003f2a:	eb43 0501 	adc.w	r5, r3, r1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	461a      	mov	r2, r3
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	4620      	mov	r0, r4
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	f7fc f9a0 	bl	8000280 <__aeabi_uldivmod>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4613      	mov	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f4e:	d308      	bcc.n	8003f62 <UART_SetConfig+0x396>
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f56:	d204      	bcs.n	8003f62 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	60da      	str	r2, [r3, #12]
 8003f60:	e0b0      	b.n	80040c4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	76bb      	strb	r3, [r7, #26]
 8003f66:	e0ad      	b.n	80040c4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f70:	d15b      	bne.n	800402a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003f72:	7efb      	ldrb	r3, [r7, #27]
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d828      	bhi.n	8003fca <UART_SetConfig+0x3fe>
 8003f78:	a201      	add	r2, pc, #4	; (adr r2, 8003f80 <UART_SetConfig+0x3b4>)
 8003f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7e:	bf00      	nop
 8003f80:	08003fa5 	.word	0x08003fa5
 8003f84:	08003fad 	.word	0x08003fad
 8003f88:	08003fb5 	.word	0x08003fb5
 8003f8c:	08003fcb 	.word	0x08003fcb
 8003f90:	08003fbb 	.word	0x08003fbb
 8003f94:	08003fcb 	.word	0x08003fcb
 8003f98:	08003fcb 	.word	0x08003fcb
 8003f9c:	08003fcb 	.word	0x08003fcb
 8003fa0:	08003fc3 	.word	0x08003fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa4:	f7fe fc86 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8003fa8:	6178      	str	r0, [r7, #20]
        break;
 8003faa:	e013      	b.n	8003fd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fac:	f7fe fc98 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8003fb0:	6178      	str	r0, [r7, #20]
        break;
 8003fb2:	e00f      	b.n	8003fd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb4:	4b49      	ldr	r3, [pc, #292]	; (80040dc <UART_SetConfig+0x510>)
 8003fb6:	617b      	str	r3, [r7, #20]
        break;
 8003fb8:	e00c      	b.n	8003fd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fba:	f7fe fbe3 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8003fbe:	6178      	str	r0, [r7, #20]
        break;
 8003fc0:	e008      	b.n	8003fd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc6:	617b      	str	r3, [r7, #20]
        break;
 8003fc8:	e004      	b.n	8003fd4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	76bb      	strb	r3, [r7, #26]
        break;
 8003fd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d074      	beq.n	80040c4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	005a      	lsls	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	441a      	add	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	2b0f      	cmp	r3, #15
 8003ff4:	d916      	bls.n	8004024 <UART_SetConfig+0x458>
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffc:	d212      	bcs.n	8004024 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	b29b      	uxth	r3, r3
 8004002:	f023 030f 	bic.w	r3, r3, #15
 8004006:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	b29b      	uxth	r3, r3
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	b29a      	uxth	r2, r3
 8004014:	89fb      	ldrh	r3, [r7, #14]
 8004016:	4313      	orrs	r3, r2
 8004018:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	89fa      	ldrh	r2, [r7, #14]
 8004020:	60da      	str	r2, [r3, #12]
 8004022:	e04f      	b.n	80040c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	76bb      	strb	r3, [r7, #26]
 8004028:	e04c      	b.n	80040c4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800402a:	7efb      	ldrb	r3, [r7, #27]
 800402c:	2b08      	cmp	r3, #8
 800402e:	d828      	bhi.n	8004082 <UART_SetConfig+0x4b6>
 8004030:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <UART_SetConfig+0x46c>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	0800405d 	.word	0x0800405d
 800403c:	08004065 	.word	0x08004065
 8004040:	0800406d 	.word	0x0800406d
 8004044:	08004083 	.word	0x08004083
 8004048:	08004073 	.word	0x08004073
 800404c:	08004083 	.word	0x08004083
 8004050:	08004083 	.word	0x08004083
 8004054:	08004083 	.word	0x08004083
 8004058:	0800407b 	.word	0x0800407b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800405c:	f7fe fc2a 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8004060:	6178      	str	r0, [r7, #20]
        break;
 8004062:	e013      	b.n	800408c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004064:	f7fe fc3c 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8004068:	6178      	str	r0, [r7, #20]
        break;
 800406a:	e00f      	b.n	800408c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800406c:	4b1b      	ldr	r3, [pc, #108]	; (80040dc <UART_SetConfig+0x510>)
 800406e:	617b      	str	r3, [r7, #20]
        break;
 8004070:	e00c      	b.n	800408c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004072:	f7fe fb87 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8004076:	6178      	str	r0, [r7, #20]
        break;
 8004078:	e008      	b.n	800408c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800407a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800407e:	617b      	str	r3, [r7, #20]
        break;
 8004080:	e004      	b.n	800408c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	76bb      	strb	r3, [r7, #26]
        break;
 800408a:	bf00      	nop
    }

    if (pclk != 0U)
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d018      	beq.n	80040c4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	085a      	lsrs	r2, r3, #1
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	441a      	add	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b0f      	cmp	r3, #15
 80040aa:	d909      	bls.n	80040c0 <UART_SetConfig+0x4f4>
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b2:	d205      	bcs.n	80040c0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60da      	str	r2, [r3, #12]
 80040be:	e001      	b.n	80040c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80040d0:	7ebb      	ldrb	r3, [r7, #26]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3720      	adds	r7, #32
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bdb0      	pop	{r4, r5, r7, pc}
 80040da:	bf00      	nop
 80040dc:	00f42400 	.word	0x00f42400

080040e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	f003 0320 	and.w	r3, r3, #32
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01a      	beq.n	80041f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041de:	d10a      	bne.n	80041f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	605a      	str	r2, [r3, #4]
  }
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af02      	add	r7, sp, #8
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004234:	f7fd f800 	bl	8001238 <HAL_GetTick>
 8004238:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b08      	cmp	r3, #8
 8004246:	d10e      	bne.n	8004266 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f82d 	bl	80042b6 <UART_WaitOnFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e023      	b.n	80042ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b04      	cmp	r3, #4
 8004272:	d10e      	bne.n	8004292 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f817 	bl	80042b6 <UART_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e00d      	b.n	80042ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b09c      	sub	sp, #112	; 0x70
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	603b      	str	r3, [r7, #0]
 80042c2:	4613      	mov	r3, r2
 80042c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c6:	e0a5      	b.n	8004414 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	f000 80a1 	beq.w	8004414 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d2:	f7fc ffb1 	bl	8001238 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042de:	429a      	cmp	r2, r3
 80042e0:	d302      	bcc.n	80042e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80042e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d13e      	bne.n	8004366 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f0:	e853 3f00 	ldrex	r3, [r3]
 80042f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042fc:	667b      	str	r3, [r7, #100]	; 0x64
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004306:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004308:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800430c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e6      	bne.n	80042e8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3308      	adds	r3, #8
 8004320:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	f023 0301 	bic.w	r3, r3, #1
 8004330:	663b      	str	r3, [r7, #96]	; 0x60
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3308      	adds	r3, #8
 8004338:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800433a:	64ba      	str	r2, [r7, #72]	; 0x48
 800433c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004340:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e5      	bne.n	800431a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e067      	b.n	8004436 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d04f      	beq.n	8004414 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800437e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004382:	d147      	bne.n	8004414 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800438c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
 80043ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e6      	bne.n	800438e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3308      	adds	r3, #8
 80043c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	613b      	str	r3, [r7, #16]
   return(result);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f023 0301 	bic.w	r3, r3, #1
 80043d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3308      	adds	r3, #8
 80043de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043e0:	623a      	str	r2, [r7, #32]
 80043e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	69f9      	ldr	r1, [r7, #28]
 80043e6:	6a3a      	ldr	r2, [r7, #32]
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e5      	bne.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e010      	b.n	8004436 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	429a      	cmp	r2, r3
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	429a      	cmp	r2, r3
 8004430:	f43f af4a 	beq.w	80042c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3770      	adds	r7, #112	; 0x70
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b096      	sub	sp, #88	; 0x58
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	4613      	mov	r3, r2
 800444c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	88fa      	ldrh	r2, [r7, #6]
 8004458:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2222      	movs	r2, #34	; 0x22
 8004468:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	2b00      	cmp	r3, #0
 8004470:	d02b      	beq.n	80044ca <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	4a42      	ldr	r2, [pc, #264]	; (8004580 <UART_Start_Receive_DMA+0x140>)
 8004478:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447e:	4a41      	ldr	r2, [pc, #260]	; (8004584 <UART_Start_Receive_DMA+0x144>)
 8004480:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004486:	4a40      	ldr	r2, [pc, #256]	; (8004588 <UART_Start_Receive_DMA+0x148>)
 8004488:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448e:	2200      	movs	r2, #0
 8004490:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3324      	adds	r3, #36	; 0x24
 800449c:	4619      	mov	r1, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a2:	461a      	mov	r2, r3
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	f7fd f8c1 	bl	800162c <HAL_DMA_Start_IT>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00c      	beq.n	80044ca <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2210      	movs	r2, #16
 80044b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e055      	b.n	8004576 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d018      	beq.n	800450c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ee:	657b      	str	r3, [r7, #84]	; 0x54
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80044fa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e6      	bne.n	80044da <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3308      	adds	r3, #8
 8004512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	653b      	str	r3, [r7, #80]	; 0x50
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3308      	adds	r3, #8
 800452a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800452c:	637a      	str	r2, [r7, #52]	; 0x34
 800452e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e5      	bne.n	800450c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3308      	adds	r3, #8
 8004546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	e853 3f00 	ldrex	r3, [r3]
 800454e:	613b      	str	r3, [r7, #16]
   return(result);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3308      	adds	r3, #8
 800455e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004560:	623a      	str	r2, [r7, #32]
 8004562:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	69f9      	ldr	r1, [r7, #28]
 8004566:	6a3a      	ldr	r2, [r7, #32]
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	61bb      	str	r3, [r7, #24]
   return(result);
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e5      	bne.n	8004540 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3758      	adds	r7, #88	; 0x58
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	0800469f 	.word	0x0800469f
 8004584:	080047c3 	.word	0x080047c3
 8004588:	080047fb 	.word	0x080047fb

0800458c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800458c:	b480      	push	{r7}
 800458e:	b089      	sub	sp, #36	; 0x24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	6979      	ldr	r1, [r7, #20]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	613b      	str	r3, [r7, #16]
   return(result);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e6      	bne.n	8004594 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2220      	movs	r2, #32
 80045ca:	679a      	str	r2, [r3, #120]	; 0x78
}
 80045cc:	bf00      	nop
 80045ce:	3724      	adds	r7, #36	; 0x24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045d8:	b480      	push	{r7}
 80045da:	b095      	sub	sp, #84	; 0x54
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004600:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004604:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800460c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e6      	bne.n	80045e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3308      	adds	r3, #8
 8004618:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	61fb      	str	r3, [r7, #28]
   return(result);
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	64bb      	str	r3, [r7, #72]	; 0x48
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3308      	adds	r3, #8
 8004630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004632:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004634:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004636:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e5      	bne.n	8004612 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464a:	2b01      	cmp	r3, #1
 800464c:	d118      	bne.n	8004680 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	60bb      	str	r3, [r7, #8]
   return(result);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f023 0310 	bic.w	r3, r3, #16
 8004662:	647b      	str	r3, [r7, #68]	; 0x44
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	6979      	ldr	r1, [r7, #20]
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	613b      	str	r3, [r7, #16]
   return(result);
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e6      	bne.n	800464e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004692:	bf00      	nop
 8004694:	3754      	adds	r7, #84	; 0x54
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b09c      	sub	sp, #112	; 0x70
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d170      	bne.n	800479c <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 80046ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046bc:	2200      	movs	r2, #0
 80046be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80046d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80046e2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046e8:	e841 2300 	strex	r3, r2, [r1]
 80046ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e6      	bne.n	80046c2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3308      	adds	r3, #8
 80046fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fe:	e853 3f00 	ldrex	r3, [r3]
 8004702:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	667b      	str	r3, [r7, #100]	; 0x64
 800470c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3308      	adds	r3, #8
 8004712:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004714:	647a      	str	r2, [r7, #68]	; 0x44
 8004716:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800471a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e5      	bne.n	80046f4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3308      	adds	r3, #8
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	623b      	str	r3, [r7, #32]
   return(result);
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800473e:	663b      	str	r3, [r7, #96]	; 0x60
 8004740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3308      	adds	r3, #8
 8004746:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004748:	633a      	str	r2, [r7, #48]	; 0x30
 800474a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800474e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e5      	bne.n	8004728 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800475c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800475e:	2220      	movs	r2, #32
 8004760:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004766:	2b01      	cmp	r3, #1
 8004768:	d118      	bne.n	800479c <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800476a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	60fb      	str	r3, [r7, #12]
   return(result);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0310 	bic.w	r3, r3, #16
 800477e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	69b9      	ldr	r1, [r7, #24]
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	617b      	str	r3, [r7, #20]
   return(result);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e6      	bne.n	800476a <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800479c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d107      	bne.n	80047b4 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047aa:	4619      	mov	r1, r3
 80047ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80047ae:	f7ff fa01 	bl	8003bb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047b2:	e002      	b.n	80047ba <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 80047b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80047b6:	f7fb fedf 	bl	8000578 <HAL_UART_RxCpltCallback>
}
 80047ba:	bf00      	nop
 80047bc:	3770      	adds	r7, #112	; 0x70
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d109      	bne.n	80047ec <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047de:	085b      	lsrs	r3, r3, #1
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	4619      	mov	r1, r3
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7ff f9e5 	bl	8003bb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047ea:	e002      	b.n	80047f2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff f9cd 	bl	8003b8c <HAL_UART_RxHalfCpltCallback>
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b086      	sub	sp, #24
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800480c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004812:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b80      	cmp	r3, #128	; 0x80
 8004820:	d109      	bne.n	8004836 <UART_DMAError+0x3c>
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b21      	cmp	r3, #33	; 0x21
 8004826:	d106      	bne.n	8004836 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2200      	movs	r2, #0
 800482c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004830:	6978      	ldr	r0, [r7, #20]
 8004832:	f7ff feab 	bl	800458c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004840:	2b40      	cmp	r3, #64	; 0x40
 8004842:	d109      	bne.n	8004858 <UART_DMAError+0x5e>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b22      	cmp	r3, #34	; 0x22
 8004848:	d106      	bne.n	8004858 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2200      	movs	r2, #0
 800484e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004852:	6978      	ldr	r0, [r7, #20]
 8004854:	f7ff fec0 	bl	80045d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800485e:	f043 0210 	orr.w	r2, r3, #16
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004868:	6978      	ldr	r0, [r7, #20]
 800486a:	f7ff f999 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800486e:	bf00      	nop
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f7ff f983 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800489a:	bf00      	nop
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b088      	sub	sp, #32
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048be:	61fb      	str	r3, [r7, #28]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6979      	ldr	r1, [r7, #20]
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	613b      	str	r3, [r7, #16]
   return(result);
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e6      	bne.n	80048aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2220      	movs	r2, #32
 80048e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff f945 	bl	8003b78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ee:	bf00      	nop
 80048f0:	3720      	adds	r7, #32
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
	...

0800490c <__errno>:
 800490c:	4b01      	ldr	r3, [pc, #4]	; (8004914 <__errno+0x8>)
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	2000000c 	.word	0x2000000c

08004918 <__libc_init_array>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	4d0d      	ldr	r5, [pc, #52]	; (8004950 <__libc_init_array+0x38>)
 800491c:	4c0d      	ldr	r4, [pc, #52]	; (8004954 <__libc_init_array+0x3c>)
 800491e:	1b64      	subs	r4, r4, r5
 8004920:	10a4      	asrs	r4, r4, #2
 8004922:	2600      	movs	r6, #0
 8004924:	42a6      	cmp	r6, r4
 8004926:	d109      	bne.n	800493c <__libc_init_array+0x24>
 8004928:	4d0b      	ldr	r5, [pc, #44]	; (8004958 <__libc_init_array+0x40>)
 800492a:	4c0c      	ldr	r4, [pc, #48]	; (800495c <__libc_init_array+0x44>)
 800492c:	f001 fa6e 	bl	8005e0c <_init>
 8004930:	1b64      	subs	r4, r4, r5
 8004932:	10a4      	asrs	r4, r4, #2
 8004934:	2600      	movs	r6, #0
 8004936:	42a6      	cmp	r6, r4
 8004938:	d105      	bne.n	8004946 <__libc_init_array+0x2e>
 800493a:	bd70      	pop	{r4, r5, r6, pc}
 800493c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004940:	4798      	blx	r3
 8004942:	3601      	adds	r6, #1
 8004944:	e7ee      	b.n	8004924 <__libc_init_array+0xc>
 8004946:	f855 3b04 	ldr.w	r3, [r5], #4
 800494a:	4798      	blx	r3
 800494c:	3601      	adds	r6, #1
 800494e:	e7f2      	b.n	8004936 <__libc_init_array+0x1e>
 8004950:	08006058 	.word	0x08006058
 8004954:	08006058 	.word	0x08006058
 8004958:	08006058 	.word	0x08006058
 800495c:	0800605c 	.word	0x0800605c

08004960 <memset>:
 8004960:	4402      	add	r2, r0
 8004962:	4603      	mov	r3, r0
 8004964:	4293      	cmp	r3, r2
 8004966:	d100      	bne.n	800496a <memset+0xa>
 8004968:	4770      	bx	lr
 800496a:	f803 1b01 	strb.w	r1, [r3], #1
 800496e:	e7f9      	b.n	8004964 <memset+0x4>

08004970 <siprintf>:
 8004970:	b40e      	push	{r1, r2, r3}
 8004972:	b500      	push	{lr}
 8004974:	b09c      	sub	sp, #112	; 0x70
 8004976:	ab1d      	add	r3, sp, #116	; 0x74
 8004978:	9002      	str	r0, [sp, #8]
 800497a:	9006      	str	r0, [sp, #24]
 800497c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004980:	4809      	ldr	r0, [pc, #36]	; (80049a8 <siprintf+0x38>)
 8004982:	9107      	str	r1, [sp, #28]
 8004984:	9104      	str	r1, [sp, #16]
 8004986:	4909      	ldr	r1, [pc, #36]	; (80049ac <siprintf+0x3c>)
 8004988:	f853 2b04 	ldr.w	r2, [r3], #4
 800498c:	9105      	str	r1, [sp, #20]
 800498e:	6800      	ldr	r0, [r0, #0]
 8004990:	9301      	str	r3, [sp, #4]
 8004992:	a902      	add	r1, sp, #8
 8004994:	f000 fa12 	bl	8004dbc <_svfiprintf_r>
 8004998:	9b02      	ldr	r3, [sp, #8]
 800499a:	2200      	movs	r2, #0
 800499c:	701a      	strb	r2, [r3, #0]
 800499e:	b01c      	add	sp, #112	; 0x70
 80049a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049a4:	b003      	add	sp, #12
 80049a6:	4770      	bx	lr
 80049a8:	2000000c 	.word	0x2000000c
 80049ac:	ffff0208 	.word	0xffff0208

080049b0 <strcat>:
 80049b0:	b510      	push	{r4, lr}
 80049b2:	4602      	mov	r2, r0
 80049b4:	7814      	ldrb	r4, [r2, #0]
 80049b6:	4613      	mov	r3, r2
 80049b8:	3201      	adds	r2, #1
 80049ba:	2c00      	cmp	r4, #0
 80049bc:	d1fa      	bne.n	80049b4 <strcat+0x4>
 80049be:	3b01      	subs	r3, #1
 80049c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049c8:	2a00      	cmp	r2, #0
 80049ca:	d1f9      	bne.n	80049c0 <strcat+0x10>
 80049cc:	bd10      	pop	{r4, pc}

080049ce <strchr>:
 80049ce:	b2c9      	uxtb	r1, r1
 80049d0:	4603      	mov	r3, r0
 80049d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049d6:	b11a      	cbz	r2, 80049e0 <strchr+0x12>
 80049d8:	428a      	cmp	r2, r1
 80049da:	d1f9      	bne.n	80049d0 <strchr+0x2>
 80049dc:	4618      	mov	r0, r3
 80049de:	4770      	bx	lr
 80049e0:	2900      	cmp	r1, #0
 80049e2:	bf18      	it	ne
 80049e4:	2300      	movne	r3, #0
 80049e6:	e7f9      	b.n	80049dc <strchr+0xe>

080049e8 <strcpy>:
 80049e8:	4603      	mov	r3, r0
 80049ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049ee:	f803 2b01 	strb.w	r2, [r3], #1
 80049f2:	2a00      	cmp	r2, #0
 80049f4:	d1f9      	bne.n	80049ea <strcpy+0x2>
 80049f6:	4770      	bx	lr

080049f8 <strdup>:
 80049f8:	4b02      	ldr	r3, [pc, #8]	; (8004a04 <strdup+0xc>)
 80049fa:	4601      	mov	r1, r0
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	f000 b803 	b.w	8004a08 <_strdup_r>
 8004a02:	bf00      	nop
 8004a04:	2000000c 	.word	0x2000000c

08004a08 <_strdup_r>:
 8004a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	460d      	mov	r5, r1
 8004a10:	f7fb fbde 	bl	80001d0 <strlen>
 8004a14:	1c42      	adds	r2, r0, #1
 8004a16:	4611      	mov	r1, r2
 8004a18:	4620      	mov	r0, r4
 8004a1a:	9201      	str	r2, [sp, #4]
 8004a1c:	f000 f918 	bl	8004c50 <_malloc_r>
 8004a20:	4604      	mov	r4, r0
 8004a22:	b118      	cbz	r0, 8004a2c <_strdup_r+0x24>
 8004a24:	9a01      	ldr	r2, [sp, #4]
 8004a26:	4629      	mov	r1, r5
 8004a28:	f000 f8b4 	bl	8004b94 <memcpy>
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	b003      	add	sp, #12
 8004a30:	bd30      	pop	{r4, r5, pc}

08004a32 <strsep>:
 8004a32:	4602      	mov	r2, r0
 8004a34:	2300      	movs	r3, #0
 8004a36:	6800      	ldr	r0, [r0, #0]
 8004a38:	f000 b84c 	b.w	8004ad4 <__strtok_r>

08004a3c <strstr>:
 8004a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a3e:	780c      	ldrb	r4, [r1, #0]
 8004a40:	b164      	cbz	r4, 8004a5c <strstr+0x20>
 8004a42:	4603      	mov	r3, r0
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	1c5e      	adds	r6, r3, #1
 8004a4a:	b90a      	cbnz	r2, 8004a50 <strstr+0x14>
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	e005      	b.n	8004a5c <strstr+0x20>
 8004a50:	4294      	cmp	r4, r2
 8004a52:	d108      	bne.n	8004a66 <strstr+0x2a>
 8004a54:	460d      	mov	r5, r1
 8004a56:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004a5a:	b902      	cbnz	r2, 8004a5e <strstr+0x22>
 8004a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a5e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004a62:	4297      	cmp	r7, r2
 8004a64:	d0f7      	beq.n	8004a56 <strstr+0x1a>
 8004a66:	4633      	mov	r3, r6
 8004a68:	e7ec      	b.n	8004a44 <strstr+0x8>
	...

08004a6c <strtok>:
 8004a6c:	4b16      	ldr	r3, [pc, #88]	; (8004ac8 <strtok+0x5c>)
 8004a6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a70:	681e      	ldr	r6, [r3, #0]
 8004a72:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004a74:	4605      	mov	r5, r0
 8004a76:	b9fc      	cbnz	r4, 8004ab8 <strtok+0x4c>
 8004a78:	2050      	movs	r0, #80	; 0x50
 8004a7a:	9101      	str	r1, [sp, #4]
 8004a7c:	f000 f882 	bl	8004b84 <malloc>
 8004a80:	9901      	ldr	r1, [sp, #4]
 8004a82:	65b0      	str	r0, [r6, #88]	; 0x58
 8004a84:	4602      	mov	r2, r0
 8004a86:	b920      	cbnz	r0, 8004a92 <strtok+0x26>
 8004a88:	4b10      	ldr	r3, [pc, #64]	; (8004acc <strtok+0x60>)
 8004a8a:	4811      	ldr	r0, [pc, #68]	; (8004ad0 <strtok+0x64>)
 8004a8c:	2157      	movs	r1, #87	; 0x57
 8004a8e:	f000 f849 	bl	8004b24 <__assert_func>
 8004a92:	e9c0 4400 	strd	r4, r4, [r0]
 8004a96:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004a9a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004a9e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004aa2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004aa6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004aaa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004aae:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004ab2:	6184      	str	r4, [r0, #24]
 8004ab4:	7704      	strb	r4, [r0, #28]
 8004ab6:	6244      	str	r4, [r0, #36]	; 0x24
 8004ab8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004aba:	2301      	movs	r3, #1
 8004abc:	4628      	mov	r0, r5
 8004abe:	b002      	add	sp, #8
 8004ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ac4:	f000 b806 	b.w	8004ad4 <__strtok_r>
 8004ac8:	2000000c 	.word	0x2000000c
 8004acc:	08005f08 	.word	0x08005f08
 8004ad0:	08005f1f 	.word	0x08005f1f

08004ad4 <__strtok_r>:
 8004ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ad6:	b908      	cbnz	r0, 8004adc <__strtok_r+0x8>
 8004ad8:	6810      	ldr	r0, [r2, #0]
 8004ada:	b188      	cbz	r0, 8004b00 <__strtok_r+0x2c>
 8004adc:	4604      	mov	r4, r0
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004ae4:	460f      	mov	r7, r1
 8004ae6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004aea:	b91e      	cbnz	r6, 8004af4 <__strtok_r+0x20>
 8004aec:	b965      	cbnz	r5, 8004b08 <__strtok_r+0x34>
 8004aee:	6015      	str	r5, [r2, #0]
 8004af0:	4628      	mov	r0, r5
 8004af2:	e005      	b.n	8004b00 <__strtok_r+0x2c>
 8004af4:	42b5      	cmp	r5, r6
 8004af6:	d1f6      	bne.n	8004ae6 <__strtok_r+0x12>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f0      	bne.n	8004ade <__strtok_r+0xa>
 8004afc:	6014      	str	r4, [r2, #0]
 8004afe:	7003      	strb	r3, [r0, #0]
 8004b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b02:	461c      	mov	r4, r3
 8004b04:	e00c      	b.n	8004b20 <__strtok_r+0x4c>
 8004b06:	b915      	cbnz	r5, 8004b0e <__strtok_r+0x3a>
 8004b08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004b0c:	460e      	mov	r6, r1
 8004b0e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004b12:	42ab      	cmp	r3, r5
 8004b14:	d1f7      	bne.n	8004b06 <__strtok_r+0x32>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f3      	beq.n	8004b02 <__strtok_r+0x2e>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004b20:	6014      	str	r4, [r2, #0]
 8004b22:	e7ed      	b.n	8004b00 <__strtok_r+0x2c>

08004b24 <__assert_func>:
 8004b24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b26:	4614      	mov	r4, r2
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <__assert_func+0x2c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4605      	mov	r5, r0
 8004b30:	68d8      	ldr	r0, [r3, #12]
 8004b32:	b14c      	cbz	r4, 8004b48 <__assert_func+0x24>
 8004b34:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <__assert_func+0x30>)
 8004b36:	9100      	str	r1, [sp, #0]
 8004b38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004b3c:	4906      	ldr	r1, [pc, #24]	; (8004b58 <__assert_func+0x34>)
 8004b3e:	462b      	mov	r3, r5
 8004b40:	f000 f80e 	bl	8004b60 <fiprintf>
 8004b44:	f000 fdf8 	bl	8005738 <abort>
 8004b48:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <__assert_func+0x38>)
 8004b4a:	461c      	mov	r4, r3
 8004b4c:	e7f3      	b.n	8004b36 <__assert_func+0x12>
 8004b4e:	bf00      	nop
 8004b50:	2000000c 	.word	0x2000000c
 8004b54:	08005f80 	.word	0x08005f80
 8004b58:	08005f8d 	.word	0x08005f8d
 8004b5c:	08005fbb 	.word	0x08005fbb

08004b60 <fiprintf>:
 8004b60:	b40e      	push	{r1, r2, r3}
 8004b62:	b503      	push	{r0, r1, lr}
 8004b64:	4601      	mov	r1, r0
 8004b66:	ab03      	add	r3, sp, #12
 8004b68:	4805      	ldr	r0, [pc, #20]	; (8004b80 <fiprintf+0x20>)
 8004b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b6e:	6800      	ldr	r0, [r0, #0]
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	f000 fa4d 	bl	8005010 <_vfiprintf_r>
 8004b76:	b002      	add	sp, #8
 8004b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b7c:	b003      	add	sp, #12
 8004b7e:	4770      	bx	lr
 8004b80:	2000000c 	.word	0x2000000c

08004b84 <malloc>:
 8004b84:	4b02      	ldr	r3, [pc, #8]	; (8004b90 <malloc+0xc>)
 8004b86:	4601      	mov	r1, r0
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	f000 b861 	b.w	8004c50 <_malloc_r>
 8004b8e:	bf00      	nop
 8004b90:	2000000c 	.word	0x2000000c

08004b94 <memcpy>:
 8004b94:	440a      	add	r2, r1
 8004b96:	4291      	cmp	r1, r2
 8004b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b9c:	d100      	bne.n	8004ba0 <memcpy+0xc>
 8004b9e:	4770      	bx	lr
 8004ba0:	b510      	push	{r4, lr}
 8004ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004baa:	4291      	cmp	r1, r2
 8004bac:	d1f9      	bne.n	8004ba2 <memcpy+0xe>
 8004bae:	bd10      	pop	{r4, pc}

08004bb0 <_free_r>:
 8004bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bb2:	2900      	cmp	r1, #0
 8004bb4:	d048      	beq.n	8004c48 <_free_r+0x98>
 8004bb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bba:	9001      	str	r0, [sp, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f1a1 0404 	sub.w	r4, r1, #4
 8004bc2:	bfb8      	it	lt
 8004bc4:	18e4      	addlt	r4, r4, r3
 8004bc6:	f000 fff7 	bl	8005bb8 <__malloc_lock>
 8004bca:	4a20      	ldr	r2, [pc, #128]	; (8004c4c <_free_r+0x9c>)
 8004bcc:	9801      	ldr	r0, [sp, #4]
 8004bce:	6813      	ldr	r3, [r2, #0]
 8004bd0:	4615      	mov	r5, r2
 8004bd2:	b933      	cbnz	r3, 8004be2 <_free_r+0x32>
 8004bd4:	6063      	str	r3, [r4, #4]
 8004bd6:	6014      	str	r4, [r2, #0]
 8004bd8:	b003      	add	sp, #12
 8004bda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bde:	f000 bff1 	b.w	8005bc4 <__malloc_unlock>
 8004be2:	42a3      	cmp	r3, r4
 8004be4:	d90b      	bls.n	8004bfe <_free_r+0x4e>
 8004be6:	6821      	ldr	r1, [r4, #0]
 8004be8:	1862      	adds	r2, r4, r1
 8004bea:	4293      	cmp	r3, r2
 8004bec:	bf04      	itt	eq
 8004bee:	681a      	ldreq	r2, [r3, #0]
 8004bf0:	685b      	ldreq	r3, [r3, #4]
 8004bf2:	6063      	str	r3, [r4, #4]
 8004bf4:	bf04      	itt	eq
 8004bf6:	1852      	addeq	r2, r2, r1
 8004bf8:	6022      	streq	r2, [r4, #0]
 8004bfa:	602c      	str	r4, [r5, #0]
 8004bfc:	e7ec      	b.n	8004bd8 <_free_r+0x28>
 8004bfe:	461a      	mov	r2, r3
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	b10b      	cbz	r3, 8004c08 <_free_r+0x58>
 8004c04:	42a3      	cmp	r3, r4
 8004c06:	d9fa      	bls.n	8004bfe <_free_r+0x4e>
 8004c08:	6811      	ldr	r1, [r2, #0]
 8004c0a:	1855      	adds	r5, r2, r1
 8004c0c:	42a5      	cmp	r5, r4
 8004c0e:	d10b      	bne.n	8004c28 <_free_r+0x78>
 8004c10:	6824      	ldr	r4, [r4, #0]
 8004c12:	4421      	add	r1, r4
 8004c14:	1854      	adds	r4, r2, r1
 8004c16:	42a3      	cmp	r3, r4
 8004c18:	6011      	str	r1, [r2, #0]
 8004c1a:	d1dd      	bne.n	8004bd8 <_free_r+0x28>
 8004c1c:	681c      	ldr	r4, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	6053      	str	r3, [r2, #4]
 8004c22:	4421      	add	r1, r4
 8004c24:	6011      	str	r1, [r2, #0]
 8004c26:	e7d7      	b.n	8004bd8 <_free_r+0x28>
 8004c28:	d902      	bls.n	8004c30 <_free_r+0x80>
 8004c2a:	230c      	movs	r3, #12
 8004c2c:	6003      	str	r3, [r0, #0]
 8004c2e:	e7d3      	b.n	8004bd8 <_free_r+0x28>
 8004c30:	6825      	ldr	r5, [r4, #0]
 8004c32:	1961      	adds	r1, r4, r5
 8004c34:	428b      	cmp	r3, r1
 8004c36:	bf04      	itt	eq
 8004c38:	6819      	ldreq	r1, [r3, #0]
 8004c3a:	685b      	ldreq	r3, [r3, #4]
 8004c3c:	6063      	str	r3, [r4, #4]
 8004c3e:	bf04      	itt	eq
 8004c40:	1949      	addeq	r1, r1, r5
 8004c42:	6021      	streq	r1, [r4, #0]
 8004c44:	6054      	str	r4, [r2, #4]
 8004c46:	e7c7      	b.n	8004bd8 <_free_r+0x28>
 8004c48:	b003      	add	sp, #12
 8004c4a:	bd30      	pop	{r4, r5, pc}
 8004c4c:	20000094 	.word	0x20000094

08004c50 <_malloc_r>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	1ccd      	adds	r5, r1, #3
 8004c54:	f025 0503 	bic.w	r5, r5, #3
 8004c58:	3508      	adds	r5, #8
 8004c5a:	2d0c      	cmp	r5, #12
 8004c5c:	bf38      	it	cc
 8004c5e:	250c      	movcc	r5, #12
 8004c60:	2d00      	cmp	r5, #0
 8004c62:	4606      	mov	r6, r0
 8004c64:	db01      	blt.n	8004c6a <_malloc_r+0x1a>
 8004c66:	42a9      	cmp	r1, r5
 8004c68:	d903      	bls.n	8004c72 <_malloc_r+0x22>
 8004c6a:	230c      	movs	r3, #12
 8004c6c:	6033      	str	r3, [r6, #0]
 8004c6e:	2000      	movs	r0, #0
 8004c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c72:	f000 ffa1 	bl	8005bb8 <__malloc_lock>
 8004c76:	4921      	ldr	r1, [pc, #132]	; (8004cfc <_malloc_r+0xac>)
 8004c78:	680a      	ldr	r2, [r1, #0]
 8004c7a:	4614      	mov	r4, r2
 8004c7c:	b99c      	cbnz	r4, 8004ca6 <_malloc_r+0x56>
 8004c7e:	4f20      	ldr	r7, [pc, #128]	; (8004d00 <_malloc_r+0xb0>)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	b923      	cbnz	r3, 8004c8e <_malloc_r+0x3e>
 8004c84:	4621      	mov	r1, r4
 8004c86:	4630      	mov	r0, r6
 8004c88:	f000 fc86 	bl	8005598 <_sbrk_r>
 8004c8c:	6038      	str	r0, [r7, #0]
 8004c8e:	4629      	mov	r1, r5
 8004c90:	4630      	mov	r0, r6
 8004c92:	f000 fc81 	bl	8005598 <_sbrk_r>
 8004c96:	1c43      	adds	r3, r0, #1
 8004c98:	d123      	bne.n	8004ce2 <_malloc_r+0x92>
 8004c9a:	230c      	movs	r3, #12
 8004c9c:	6033      	str	r3, [r6, #0]
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	f000 ff90 	bl	8005bc4 <__malloc_unlock>
 8004ca4:	e7e3      	b.n	8004c6e <_malloc_r+0x1e>
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	1b5b      	subs	r3, r3, r5
 8004caa:	d417      	bmi.n	8004cdc <_malloc_r+0x8c>
 8004cac:	2b0b      	cmp	r3, #11
 8004cae:	d903      	bls.n	8004cb8 <_malloc_r+0x68>
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	441c      	add	r4, r3
 8004cb4:	6025      	str	r5, [r4, #0]
 8004cb6:	e004      	b.n	8004cc2 <_malloc_r+0x72>
 8004cb8:	6863      	ldr	r3, [r4, #4]
 8004cba:	42a2      	cmp	r2, r4
 8004cbc:	bf0c      	ite	eq
 8004cbe:	600b      	streq	r3, [r1, #0]
 8004cc0:	6053      	strne	r3, [r2, #4]
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	f000 ff7e 	bl	8005bc4 <__malloc_unlock>
 8004cc8:	f104 000b 	add.w	r0, r4, #11
 8004ccc:	1d23      	adds	r3, r4, #4
 8004cce:	f020 0007 	bic.w	r0, r0, #7
 8004cd2:	1ac2      	subs	r2, r0, r3
 8004cd4:	d0cc      	beq.n	8004c70 <_malloc_r+0x20>
 8004cd6:	1a1b      	subs	r3, r3, r0
 8004cd8:	50a3      	str	r3, [r4, r2]
 8004cda:	e7c9      	b.n	8004c70 <_malloc_r+0x20>
 8004cdc:	4622      	mov	r2, r4
 8004cde:	6864      	ldr	r4, [r4, #4]
 8004ce0:	e7cc      	b.n	8004c7c <_malloc_r+0x2c>
 8004ce2:	1cc4      	adds	r4, r0, #3
 8004ce4:	f024 0403 	bic.w	r4, r4, #3
 8004ce8:	42a0      	cmp	r0, r4
 8004cea:	d0e3      	beq.n	8004cb4 <_malloc_r+0x64>
 8004cec:	1a21      	subs	r1, r4, r0
 8004cee:	4630      	mov	r0, r6
 8004cf0:	f000 fc52 	bl	8005598 <_sbrk_r>
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	d1dd      	bne.n	8004cb4 <_malloc_r+0x64>
 8004cf8:	e7cf      	b.n	8004c9a <_malloc_r+0x4a>
 8004cfa:	bf00      	nop
 8004cfc:	20000094 	.word	0x20000094
 8004d00:	20000098 	.word	0x20000098

08004d04 <__ssputs_r>:
 8004d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d08:	688e      	ldr	r6, [r1, #8]
 8004d0a:	429e      	cmp	r6, r3
 8004d0c:	4682      	mov	sl, r0
 8004d0e:	460c      	mov	r4, r1
 8004d10:	4690      	mov	r8, r2
 8004d12:	461f      	mov	r7, r3
 8004d14:	d838      	bhi.n	8004d88 <__ssputs_r+0x84>
 8004d16:	898a      	ldrh	r2, [r1, #12]
 8004d18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d1c:	d032      	beq.n	8004d84 <__ssputs_r+0x80>
 8004d1e:	6825      	ldr	r5, [r4, #0]
 8004d20:	6909      	ldr	r1, [r1, #16]
 8004d22:	eba5 0901 	sub.w	r9, r5, r1
 8004d26:	6965      	ldr	r5, [r4, #20]
 8004d28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d30:	3301      	adds	r3, #1
 8004d32:	444b      	add	r3, r9
 8004d34:	106d      	asrs	r5, r5, #1
 8004d36:	429d      	cmp	r5, r3
 8004d38:	bf38      	it	cc
 8004d3a:	461d      	movcc	r5, r3
 8004d3c:	0553      	lsls	r3, r2, #21
 8004d3e:	d531      	bpl.n	8004da4 <__ssputs_r+0xa0>
 8004d40:	4629      	mov	r1, r5
 8004d42:	f7ff ff85 	bl	8004c50 <_malloc_r>
 8004d46:	4606      	mov	r6, r0
 8004d48:	b950      	cbnz	r0, 8004d60 <__ssputs_r+0x5c>
 8004d4a:	230c      	movs	r3, #12
 8004d4c:	f8ca 3000 	str.w	r3, [sl]
 8004d50:	89a3      	ldrh	r3, [r4, #12]
 8004d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d56:	81a3      	strh	r3, [r4, #12]
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d60:	6921      	ldr	r1, [r4, #16]
 8004d62:	464a      	mov	r2, r9
 8004d64:	f7ff ff16 	bl	8004b94 <memcpy>
 8004d68:	89a3      	ldrh	r3, [r4, #12]
 8004d6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d72:	81a3      	strh	r3, [r4, #12]
 8004d74:	6126      	str	r6, [r4, #16]
 8004d76:	6165      	str	r5, [r4, #20]
 8004d78:	444e      	add	r6, r9
 8004d7a:	eba5 0509 	sub.w	r5, r5, r9
 8004d7e:	6026      	str	r6, [r4, #0]
 8004d80:	60a5      	str	r5, [r4, #8]
 8004d82:	463e      	mov	r6, r7
 8004d84:	42be      	cmp	r6, r7
 8004d86:	d900      	bls.n	8004d8a <__ssputs_r+0x86>
 8004d88:	463e      	mov	r6, r7
 8004d8a:	4632      	mov	r2, r6
 8004d8c:	6820      	ldr	r0, [r4, #0]
 8004d8e:	4641      	mov	r1, r8
 8004d90:	f000 fef8 	bl	8005b84 <memmove>
 8004d94:	68a3      	ldr	r3, [r4, #8]
 8004d96:	6822      	ldr	r2, [r4, #0]
 8004d98:	1b9b      	subs	r3, r3, r6
 8004d9a:	4432      	add	r2, r6
 8004d9c:	60a3      	str	r3, [r4, #8]
 8004d9e:	6022      	str	r2, [r4, #0]
 8004da0:	2000      	movs	r0, #0
 8004da2:	e7db      	b.n	8004d5c <__ssputs_r+0x58>
 8004da4:	462a      	mov	r2, r5
 8004da6:	f000 ff13 	bl	8005bd0 <_realloc_r>
 8004daa:	4606      	mov	r6, r0
 8004dac:	2800      	cmp	r0, #0
 8004dae:	d1e1      	bne.n	8004d74 <__ssputs_r+0x70>
 8004db0:	6921      	ldr	r1, [r4, #16]
 8004db2:	4650      	mov	r0, sl
 8004db4:	f7ff fefc 	bl	8004bb0 <_free_r>
 8004db8:	e7c7      	b.n	8004d4a <__ssputs_r+0x46>
	...

08004dbc <_svfiprintf_r>:
 8004dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc0:	4698      	mov	r8, r3
 8004dc2:	898b      	ldrh	r3, [r1, #12]
 8004dc4:	061b      	lsls	r3, r3, #24
 8004dc6:	b09d      	sub	sp, #116	; 0x74
 8004dc8:	4607      	mov	r7, r0
 8004dca:	460d      	mov	r5, r1
 8004dcc:	4614      	mov	r4, r2
 8004dce:	d50e      	bpl.n	8004dee <_svfiprintf_r+0x32>
 8004dd0:	690b      	ldr	r3, [r1, #16]
 8004dd2:	b963      	cbnz	r3, 8004dee <_svfiprintf_r+0x32>
 8004dd4:	2140      	movs	r1, #64	; 0x40
 8004dd6:	f7ff ff3b 	bl	8004c50 <_malloc_r>
 8004dda:	6028      	str	r0, [r5, #0]
 8004ddc:	6128      	str	r0, [r5, #16]
 8004dde:	b920      	cbnz	r0, 8004dea <_svfiprintf_r+0x2e>
 8004de0:	230c      	movs	r3, #12
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	f04f 30ff 	mov.w	r0, #4294967295
 8004de8:	e0d1      	b.n	8004f8e <_svfiprintf_r+0x1d2>
 8004dea:	2340      	movs	r3, #64	; 0x40
 8004dec:	616b      	str	r3, [r5, #20]
 8004dee:	2300      	movs	r3, #0
 8004df0:	9309      	str	r3, [sp, #36]	; 0x24
 8004df2:	2320      	movs	r3, #32
 8004df4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004df8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dfc:	2330      	movs	r3, #48	; 0x30
 8004dfe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004fa8 <_svfiprintf_r+0x1ec>
 8004e02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e06:	f04f 0901 	mov.w	r9, #1
 8004e0a:	4623      	mov	r3, r4
 8004e0c:	469a      	mov	sl, r3
 8004e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e12:	b10a      	cbz	r2, 8004e18 <_svfiprintf_r+0x5c>
 8004e14:	2a25      	cmp	r2, #37	; 0x25
 8004e16:	d1f9      	bne.n	8004e0c <_svfiprintf_r+0x50>
 8004e18:	ebba 0b04 	subs.w	fp, sl, r4
 8004e1c:	d00b      	beq.n	8004e36 <_svfiprintf_r+0x7a>
 8004e1e:	465b      	mov	r3, fp
 8004e20:	4622      	mov	r2, r4
 8004e22:	4629      	mov	r1, r5
 8004e24:	4638      	mov	r0, r7
 8004e26:	f7ff ff6d 	bl	8004d04 <__ssputs_r>
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	f000 80aa 	beq.w	8004f84 <_svfiprintf_r+0x1c8>
 8004e30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e32:	445a      	add	r2, fp
 8004e34:	9209      	str	r2, [sp, #36]	; 0x24
 8004e36:	f89a 3000 	ldrb.w	r3, [sl]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80a2 	beq.w	8004f84 <_svfiprintf_r+0x1c8>
 8004e40:	2300      	movs	r3, #0
 8004e42:	f04f 32ff 	mov.w	r2, #4294967295
 8004e46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e4a:	f10a 0a01 	add.w	sl, sl, #1
 8004e4e:	9304      	str	r3, [sp, #16]
 8004e50:	9307      	str	r3, [sp, #28]
 8004e52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e56:	931a      	str	r3, [sp, #104]	; 0x68
 8004e58:	4654      	mov	r4, sl
 8004e5a:	2205      	movs	r2, #5
 8004e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e60:	4851      	ldr	r0, [pc, #324]	; (8004fa8 <_svfiprintf_r+0x1ec>)
 8004e62:	f7fb f9bd 	bl	80001e0 <memchr>
 8004e66:	9a04      	ldr	r2, [sp, #16]
 8004e68:	b9d8      	cbnz	r0, 8004ea2 <_svfiprintf_r+0xe6>
 8004e6a:	06d0      	lsls	r0, r2, #27
 8004e6c:	bf44      	itt	mi
 8004e6e:	2320      	movmi	r3, #32
 8004e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e74:	0711      	lsls	r1, r2, #28
 8004e76:	bf44      	itt	mi
 8004e78:	232b      	movmi	r3, #43	; 0x2b
 8004e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e82:	2b2a      	cmp	r3, #42	; 0x2a
 8004e84:	d015      	beq.n	8004eb2 <_svfiprintf_r+0xf6>
 8004e86:	9a07      	ldr	r2, [sp, #28]
 8004e88:	4654      	mov	r4, sl
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	f04f 0c0a 	mov.w	ip, #10
 8004e90:	4621      	mov	r1, r4
 8004e92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e96:	3b30      	subs	r3, #48	; 0x30
 8004e98:	2b09      	cmp	r3, #9
 8004e9a:	d94e      	bls.n	8004f3a <_svfiprintf_r+0x17e>
 8004e9c:	b1b0      	cbz	r0, 8004ecc <_svfiprintf_r+0x110>
 8004e9e:	9207      	str	r2, [sp, #28]
 8004ea0:	e014      	b.n	8004ecc <_svfiprintf_r+0x110>
 8004ea2:	eba0 0308 	sub.w	r3, r0, r8
 8004ea6:	fa09 f303 	lsl.w	r3, r9, r3
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	9304      	str	r3, [sp, #16]
 8004eae:	46a2      	mov	sl, r4
 8004eb0:	e7d2      	b.n	8004e58 <_svfiprintf_r+0x9c>
 8004eb2:	9b03      	ldr	r3, [sp, #12]
 8004eb4:	1d19      	adds	r1, r3, #4
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	9103      	str	r1, [sp, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	bfbb      	ittet	lt
 8004ebe:	425b      	neglt	r3, r3
 8004ec0:	f042 0202 	orrlt.w	r2, r2, #2
 8004ec4:	9307      	strge	r3, [sp, #28]
 8004ec6:	9307      	strlt	r3, [sp, #28]
 8004ec8:	bfb8      	it	lt
 8004eca:	9204      	strlt	r2, [sp, #16]
 8004ecc:	7823      	ldrb	r3, [r4, #0]
 8004ece:	2b2e      	cmp	r3, #46	; 0x2e
 8004ed0:	d10c      	bne.n	8004eec <_svfiprintf_r+0x130>
 8004ed2:	7863      	ldrb	r3, [r4, #1]
 8004ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ed6:	d135      	bne.n	8004f44 <_svfiprintf_r+0x188>
 8004ed8:	9b03      	ldr	r3, [sp, #12]
 8004eda:	1d1a      	adds	r2, r3, #4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	9203      	str	r2, [sp, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	bfb8      	it	lt
 8004ee4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ee8:	3402      	adds	r4, #2
 8004eea:	9305      	str	r3, [sp, #20]
 8004eec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004fb8 <_svfiprintf_r+0x1fc>
 8004ef0:	7821      	ldrb	r1, [r4, #0]
 8004ef2:	2203      	movs	r2, #3
 8004ef4:	4650      	mov	r0, sl
 8004ef6:	f7fb f973 	bl	80001e0 <memchr>
 8004efa:	b140      	cbz	r0, 8004f0e <_svfiprintf_r+0x152>
 8004efc:	2340      	movs	r3, #64	; 0x40
 8004efe:	eba0 000a 	sub.w	r0, r0, sl
 8004f02:	fa03 f000 	lsl.w	r0, r3, r0
 8004f06:	9b04      	ldr	r3, [sp, #16]
 8004f08:	4303      	orrs	r3, r0
 8004f0a:	3401      	adds	r4, #1
 8004f0c:	9304      	str	r3, [sp, #16]
 8004f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f12:	4826      	ldr	r0, [pc, #152]	; (8004fac <_svfiprintf_r+0x1f0>)
 8004f14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f18:	2206      	movs	r2, #6
 8004f1a:	f7fb f961 	bl	80001e0 <memchr>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d038      	beq.n	8004f94 <_svfiprintf_r+0x1d8>
 8004f22:	4b23      	ldr	r3, [pc, #140]	; (8004fb0 <_svfiprintf_r+0x1f4>)
 8004f24:	bb1b      	cbnz	r3, 8004f6e <_svfiprintf_r+0x1b2>
 8004f26:	9b03      	ldr	r3, [sp, #12]
 8004f28:	3307      	adds	r3, #7
 8004f2a:	f023 0307 	bic.w	r3, r3, #7
 8004f2e:	3308      	adds	r3, #8
 8004f30:	9303      	str	r3, [sp, #12]
 8004f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f34:	4433      	add	r3, r6
 8004f36:	9309      	str	r3, [sp, #36]	; 0x24
 8004f38:	e767      	b.n	8004e0a <_svfiprintf_r+0x4e>
 8004f3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f3e:	460c      	mov	r4, r1
 8004f40:	2001      	movs	r0, #1
 8004f42:	e7a5      	b.n	8004e90 <_svfiprintf_r+0xd4>
 8004f44:	2300      	movs	r3, #0
 8004f46:	3401      	adds	r4, #1
 8004f48:	9305      	str	r3, [sp, #20]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	f04f 0c0a 	mov.w	ip, #10
 8004f50:	4620      	mov	r0, r4
 8004f52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f56:	3a30      	subs	r2, #48	; 0x30
 8004f58:	2a09      	cmp	r2, #9
 8004f5a:	d903      	bls.n	8004f64 <_svfiprintf_r+0x1a8>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0c5      	beq.n	8004eec <_svfiprintf_r+0x130>
 8004f60:	9105      	str	r1, [sp, #20]
 8004f62:	e7c3      	b.n	8004eec <_svfiprintf_r+0x130>
 8004f64:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f68:	4604      	mov	r4, r0
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e7f0      	b.n	8004f50 <_svfiprintf_r+0x194>
 8004f6e:	ab03      	add	r3, sp, #12
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	462a      	mov	r2, r5
 8004f74:	4b0f      	ldr	r3, [pc, #60]	; (8004fb4 <_svfiprintf_r+0x1f8>)
 8004f76:	a904      	add	r1, sp, #16
 8004f78:	4638      	mov	r0, r7
 8004f7a:	f3af 8000 	nop.w
 8004f7e:	1c42      	adds	r2, r0, #1
 8004f80:	4606      	mov	r6, r0
 8004f82:	d1d6      	bne.n	8004f32 <_svfiprintf_r+0x176>
 8004f84:	89ab      	ldrh	r3, [r5, #12]
 8004f86:	065b      	lsls	r3, r3, #25
 8004f88:	f53f af2c 	bmi.w	8004de4 <_svfiprintf_r+0x28>
 8004f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f8e:	b01d      	add	sp, #116	; 0x74
 8004f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f94:	ab03      	add	r3, sp, #12
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	462a      	mov	r2, r5
 8004f9a:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <_svfiprintf_r+0x1f8>)
 8004f9c:	a904      	add	r1, sp, #16
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	f000 f9d4 	bl	800534c <_printf_i>
 8004fa4:	e7eb      	b.n	8004f7e <_svfiprintf_r+0x1c2>
 8004fa6:	bf00      	nop
 8004fa8:	08005fbc 	.word	0x08005fbc
 8004fac:	08005fc6 	.word	0x08005fc6
 8004fb0:	00000000 	.word	0x00000000
 8004fb4:	08004d05 	.word	0x08004d05
 8004fb8:	08005fc2 	.word	0x08005fc2

08004fbc <__sfputc_r>:
 8004fbc:	6893      	ldr	r3, [r2, #8]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	b410      	push	{r4}
 8004fc4:	6093      	str	r3, [r2, #8]
 8004fc6:	da08      	bge.n	8004fda <__sfputc_r+0x1e>
 8004fc8:	6994      	ldr	r4, [r2, #24]
 8004fca:	42a3      	cmp	r3, r4
 8004fcc:	db01      	blt.n	8004fd2 <__sfputc_r+0x16>
 8004fce:	290a      	cmp	r1, #10
 8004fd0:	d103      	bne.n	8004fda <__sfputc_r+0x1e>
 8004fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fd6:	f000 baef 	b.w	80055b8 <__swbuf_r>
 8004fda:	6813      	ldr	r3, [r2, #0]
 8004fdc:	1c58      	adds	r0, r3, #1
 8004fde:	6010      	str	r0, [r2, #0]
 8004fe0:	7019      	strb	r1, [r3, #0]
 8004fe2:	4608      	mov	r0, r1
 8004fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <__sfputs_r>:
 8004fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fec:	4606      	mov	r6, r0
 8004fee:	460f      	mov	r7, r1
 8004ff0:	4614      	mov	r4, r2
 8004ff2:	18d5      	adds	r5, r2, r3
 8004ff4:	42ac      	cmp	r4, r5
 8004ff6:	d101      	bne.n	8004ffc <__sfputs_r+0x12>
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	e007      	b.n	800500c <__sfputs_r+0x22>
 8004ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005000:	463a      	mov	r2, r7
 8005002:	4630      	mov	r0, r6
 8005004:	f7ff ffda 	bl	8004fbc <__sfputc_r>
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	d1f3      	bne.n	8004ff4 <__sfputs_r+0xa>
 800500c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005010 <_vfiprintf_r>:
 8005010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005014:	460d      	mov	r5, r1
 8005016:	b09d      	sub	sp, #116	; 0x74
 8005018:	4614      	mov	r4, r2
 800501a:	4698      	mov	r8, r3
 800501c:	4606      	mov	r6, r0
 800501e:	b118      	cbz	r0, 8005028 <_vfiprintf_r+0x18>
 8005020:	6983      	ldr	r3, [r0, #24]
 8005022:	b90b      	cbnz	r3, 8005028 <_vfiprintf_r+0x18>
 8005024:	f000 fcaa 	bl	800597c <__sinit>
 8005028:	4b89      	ldr	r3, [pc, #548]	; (8005250 <_vfiprintf_r+0x240>)
 800502a:	429d      	cmp	r5, r3
 800502c:	d11b      	bne.n	8005066 <_vfiprintf_r+0x56>
 800502e:	6875      	ldr	r5, [r6, #4]
 8005030:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005032:	07d9      	lsls	r1, r3, #31
 8005034:	d405      	bmi.n	8005042 <_vfiprintf_r+0x32>
 8005036:	89ab      	ldrh	r3, [r5, #12]
 8005038:	059a      	lsls	r2, r3, #22
 800503a:	d402      	bmi.n	8005042 <_vfiprintf_r+0x32>
 800503c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800503e:	f000 fd3b 	bl	8005ab8 <__retarget_lock_acquire_recursive>
 8005042:	89ab      	ldrh	r3, [r5, #12]
 8005044:	071b      	lsls	r3, r3, #28
 8005046:	d501      	bpl.n	800504c <_vfiprintf_r+0x3c>
 8005048:	692b      	ldr	r3, [r5, #16]
 800504a:	b9eb      	cbnz	r3, 8005088 <_vfiprintf_r+0x78>
 800504c:	4629      	mov	r1, r5
 800504e:	4630      	mov	r0, r6
 8005050:	f000 fb04 	bl	800565c <__swsetup_r>
 8005054:	b1c0      	cbz	r0, 8005088 <_vfiprintf_r+0x78>
 8005056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005058:	07dc      	lsls	r4, r3, #31
 800505a:	d50e      	bpl.n	800507a <_vfiprintf_r+0x6a>
 800505c:	f04f 30ff 	mov.w	r0, #4294967295
 8005060:	b01d      	add	sp, #116	; 0x74
 8005062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005066:	4b7b      	ldr	r3, [pc, #492]	; (8005254 <_vfiprintf_r+0x244>)
 8005068:	429d      	cmp	r5, r3
 800506a:	d101      	bne.n	8005070 <_vfiprintf_r+0x60>
 800506c:	68b5      	ldr	r5, [r6, #8]
 800506e:	e7df      	b.n	8005030 <_vfiprintf_r+0x20>
 8005070:	4b79      	ldr	r3, [pc, #484]	; (8005258 <_vfiprintf_r+0x248>)
 8005072:	429d      	cmp	r5, r3
 8005074:	bf08      	it	eq
 8005076:	68f5      	ldreq	r5, [r6, #12]
 8005078:	e7da      	b.n	8005030 <_vfiprintf_r+0x20>
 800507a:	89ab      	ldrh	r3, [r5, #12]
 800507c:	0598      	lsls	r0, r3, #22
 800507e:	d4ed      	bmi.n	800505c <_vfiprintf_r+0x4c>
 8005080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005082:	f000 fd1a 	bl	8005aba <__retarget_lock_release_recursive>
 8005086:	e7e9      	b.n	800505c <_vfiprintf_r+0x4c>
 8005088:	2300      	movs	r3, #0
 800508a:	9309      	str	r3, [sp, #36]	; 0x24
 800508c:	2320      	movs	r3, #32
 800508e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005092:	f8cd 800c 	str.w	r8, [sp, #12]
 8005096:	2330      	movs	r3, #48	; 0x30
 8005098:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800525c <_vfiprintf_r+0x24c>
 800509c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050a0:	f04f 0901 	mov.w	r9, #1
 80050a4:	4623      	mov	r3, r4
 80050a6:	469a      	mov	sl, r3
 80050a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050ac:	b10a      	cbz	r2, 80050b2 <_vfiprintf_r+0xa2>
 80050ae:	2a25      	cmp	r2, #37	; 0x25
 80050b0:	d1f9      	bne.n	80050a6 <_vfiprintf_r+0x96>
 80050b2:	ebba 0b04 	subs.w	fp, sl, r4
 80050b6:	d00b      	beq.n	80050d0 <_vfiprintf_r+0xc0>
 80050b8:	465b      	mov	r3, fp
 80050ba:	4622      	mov	r2, r4
 80050bc:	4629      	mov	r1, r5
 80050be:	4630      	mov	r0, r6
 80050c0:	f7ff ff93 	bl	8004fea <__sfputs_r>
 80050c4:	3001      	adds	r0, #1
 80050c6:	f000 80aa 	beq.w	800521e <_vfiprintf_r+0x20e>
 80050ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050cc:	445a      	add	r2, fp
 80050ce:	9209      	str	r2, [sp, #36]	; 0x24
 80050d0:	f89a 3000 	ldrb.w	r3, [sl]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80a2 	beq.w	800521e <_vfiprintf_r+0x20e>
 80050da:	2300      	movs	r3, #0
 80050dc:	f04f 32ff 	mov.w	r2, #4294967295
 80050e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050e4:	f10a 0a01 	add.w	sl, sl, #1
 80050e8:	9304      	str	r3, [sp, #16]
 80050ea:	9307      	str	r3, [sp, #28]
 80050ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050f0:	931a      	str	r3, [sp, #104]	; 0x68
 80050f2:	4654      	mov	r4, sl
 80050f4:	2205      	movs	r2, #5
 80050f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050fa:	4858      	ldr	r0, [pc, #352]	; (800525c <_vfiprintf_r+0x24c>)
 80050fc:	f7fb f870 	bl	80001e0 <memchr>
 8005100:	9a04      	ldr	r2, [sp, #16]
 8005102:	b9d8      	cbnz	r0, 800513c <_vfiprintf_r+0x12c>
 8005104:	06d1      	lsls	r1, r2, #27
 8005106:	bf44      	itt	mi
 8005108:	2320      	movmi	r3, #32
 800510a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800510e:	0713      	lsls	r3, r2, #28
 8005110:	bf44      	itt	mi
 8005112:	232b      	movmi	r3, #43	; 0x2b
 8005114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005118:	f89a 3000 	ldrb.w	r3, [sl]
 800511c:	2b2a      	cmp	r3, #42	; 0x2a
 800511e:	d015      	beq.n	800514c <_vfiprintf_r+0x13c>
 8005120:	9a07      	ldr	r2, [sp, #28]
 8005122:	4654      	mov	r4, sl
 8005124:	2000      	movs	r0, #0
 8005126:	f04f 0c0a 	mov.w	ip, #10
 800512a:	4621      	mov	r1, r4
 800512c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005130:	3b30      	subs	r3, #48	; 0x30
 8005132:	2b09      	cmp	r3, #9
 8005134:	d94e      	bls.n	80051d4 <_vfiprintf_r+0x1c4>
 8005136:	b1b0      	cbz	r0, 8005166 <_vfiprintf_r+0x156>
 8005138:	9207      	str	r2, [sp, #28]
 800513a:	e014      	b.n	8005166 <_vfiprintf_r+0x156>
 800513c:	eba0 0308 	sub.w	r3, r0, r8
 8005140:	fa09 f303 	lsl.w	r3, r9, r3
 8005144:	4313      	orrs	r3, r2
 8005146:	9304      	str	r3, [sp, #16]
 8005148:	46a2      	mov	sl, r4
 800514a:	e7d2      	b.n	80050f2 <_vfiprintf_r+0xe2>
 800514c:	9b03      	ldr	r3, [sp, #12]
 800514e:	1d19      	adds	r1, r3, #4
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	9103      	str	r1, [sp, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	bfbb      	ittet	lt
 8005158:	425b      	neglt	r3, r3
 800515a:	f042 0202 	orrlt.w	r2, r2, #2
 800515e:	9307      	strge	r3, [sp, #28]
 8005160:	9307      	strlt	r3, [sp, #28]
 8005162:	bfb8      	it	lt
 8005164:	9204      	strlt	r2, [sp, #16]
 8005166:	7823      	ldrb	r3, [r4, #0]
 8005168:	2b2e      	cmp	r3, #46	; 0x2e
 800516a:	d10c      	bne.n	8005186 <_vfiprintf_r+0x176>
 800516c:	7863      	ldrb	r3, [r4, #1]
 800516e:	2b2a      	cmp	r3, #42	; 0x2a
 8005170:	d135      	bne.n	80051de <_vfiprintf_r+0x1ce>
 8005172:	9b03      	ldr	r3, [sp, #12]
 8005174:	1d1a      	adds	r2, r3, #4
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	9203      	str	r2, [sp, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	bfb8      	it	lt
 800517e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005182:	3402      	adds	r4, #2
 8005184:	9305      	str	r3, [sp, #20]
 8005186:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800526c <_vfiprintf_r+0x25c>
 800518a:	7821      	ldrb	r1, [r4, #0]
 800518c:	2203      	movs	r2, #3
 800518e:	4650      	mov	r0, sl
 8005190:	f7fb f826 	bl	80001e0 <memchr>
 8005194:	b140      	cbz	r0, 80051a8 <_vfiprintf_r+0x198>
 8005196:	2340      	movs	r3, #64	; 0x40
 8005198:	eba0 000a 	sub.w	r0, r0, sl
 800519c:	fa03 f000 	lsl.w	r0, r3, r0
 80051a0:	9b04      	ldr	r3, [sp, #16]
 80051a2:	4303      	orrs	r3, r0
 80051a4:	3401      	adds	r4, #1
 80051a6:	9304      	str	r3, [sp, #16]
 80051a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ac:	482c      	ldr	r0, [pc, #176]	; (8005260 <_vfiprintf_r+0x250>)
 80051ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051b2:	2206      	movs	r2, #6
 80051b4:	f7fb f814 	bl	80001e0 <memchr>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d03f      	beq.n	800523c <_vfiprintf_r+0x22c>
 80051bc:	4b29      	ldr	r3, [pc, #164]	; (8005264 <_vfiprintf_r+0x254>)
 80051be:	bb1b      	cbnz	r3, 8005208 <_vfiprintf_r+0x1f8>
 80051c0:	9b03      	ldr	r3, [sp, #12]
 80051c2:	3307      	adds	r3, #7
 80051c4:	f023 0307 	bic.w	r3, r3, #7
 80051c8:	3308      	adds	r3, #8
 80051ca:	9303      	str	r3, [sp, #12]
 80051cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ce:	443b      	add	r3, r7
 80051d0:	9309      	str	r3, [sp, #36]	; 0x24
 80051d2:	e767      	b.n	80050a4 <_vfiprintf_r+0x94>
 80051d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80051d8:	460c      	mov	r4, r1
 80051da:	2001      	movs	r0, #1
 80051dc:	e7a5      	b.n	800512a <_vfiprintf_r+0x11a>
 80051de:	2300      	movs	r3, #0
 80051e0:	3401      	adds	r4, #1
 80051e2:	9305      	str	r3, [sp, #20]
 80051e4:	4619      	mov	r1, r3
 80051e6:	f04f 0c0a 	mov.w	ip, #10
 80051ea:	4620      	mov	r0, r4
 80051ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051f0:	3a30      	subs	r2, #48	; 0x30
 80051f2:	2a09      	cmp	r2, #9
 80051f4:	d903      	bls.n	80051fe <_vfiprintf_r+0x1ee>
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0c5      	beq.n	8005186 <_vfiprintf_r+0x176>
 80051fa:	9105      	str	r1, [sp, #20]
 80051fc:	e7c3      	b.n	8005186 <_vfiprintf_r+0x176>
 80051fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005202:	4604      	mov	r4, r0
 8005204:	2301      	movs	r3, #1
 8005206:	e7f0      	b.n	80051ea <_vfiprintf_r+0x1da>
 8005208:	ab03      	add	r3, sp, #12
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	462a      	mov	r2, r5
 800520e:	4b16      	ldr	r3, [pc, #88]	; (8005268 <_vfiprintf_r+0x258>)
 8005210:	a904      	add	r1, sp, #16
 8005212:	4630      	mov	r0, r6
 8005214:	f3af 8000 	nop.w
 8005218:	4607      	mov	r7, r0
 800521a:	1c78      	adds	r0, r7, #1
 800521c:	d1d6      	bne.n	80051cc <_vfiprintf_r+0x1bc>
 800521e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005220:	07d9      	lsls	r1, r3, #31
 8005222:	d405      	bmi.n	8005230 <_vfiprintf_r+0x220>
 8005224:	89ab      	ldrh	r3, [r5, #12]
 8005226:	059a      	lsls	r2, r3, #22
 8005228:	d402      	bmi.n	8005230 <_vfiprintf_r+0x220>
 800522a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800522c:	f000 fc45 	bl	8005aba <__retarget_lock_release_recursive>
 8005230:	89ab      	ldrh	r3, [r5, #12]
 8005232:	065b      	lsls	r3, r3, #25
 8005234:	f53f af12 	bmi.w	800505c <_vfiprintf_r+0x4c>
 8005238:	9809      	ldr	r0, [sp, #36]	; 0x24
 800523a:	e711      	b.n	8005060 <_vfiprintf_r+0x50>
 800523c:	ab03      	add	r3, sp, #12
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	462a      	mov	r2, r5
 8005242:	4b09      	ldr	r3, [pc, #36]	; (8005268 <_vfiprintf_r+0x258>)
 8005244:	a904      	add	r1, sp, #16
 8005246:	4630      	mov	r0, r6
 8005248:	f000 f880 	bl	800534c <_printf_i>
 800524c:	e7e4      	b.n	8005218 <_vfiprintf_r+0x208>
 800524e:	bf00      	nop
 8005250:	08006010 	.word	0x08006010
 8005254:	08006030 	.word	0x08006030
 8005258:	08005ff0 	.word	0x08005ff0
 800525c:	08005fbc 	.word	0x08005fbc
 8005260:	08005fc6 	.word	0x08005fc6
 8005264:	00000000 	.word	0x00000000
 8005268:	08004feb 	.word	0x08004feb
 800526c:	08005fc2 	.word	0x08005fc2

08005270 <_printf_common>:
 8005270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005274:	4616      	mov	r6, r2
 8005276:	4699      	mov	r9, r3
 8005278:	688a      	ldr	r2, [r1, #8]
 800527a:	690b      	ldr	r3, [r1, #16]
 800527c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005280:	4293      	cmp	r3, r2
 8005282:	bfb8      	it	lt
 8005284:	4613      	movlt	r3, r2
 8005286:	6033      	str	r3, [r6, #0]
 8005288:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800528c:	4607      	mov	r7, r0
 800528e:	460c      	mov	r4, r1
 8005290:	b10a      	cbz	r2, 8005296 <_printf_common+0x26>
 8005292:	3301      	adds	r3, #1
 8005294:	6033      	str	r3, [r6, #0]
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	0699      	lsls	r1, r3, #26
 800529a:	bf42      	ittt	mi
 800529c:	6833      	ldrmi	r3, [r6, #0]
 800529e:	3302      	addmi	r3, #2
 80052a0:	6033      	strmi	r3, [r6, #0]
 80052a2:	6825      	ldr	r5, [r4, #0]
 80052a4:	f015 0506 	ands.w	r5, r5, #6
 80052a8:	d106      	bne.n	80052b8 <_printf_common+0x48>
 80052aa:	f104 0a19 	add.w	sl, r4, #25
 80052ae:	68e3      	ldr	r3, [r4, #12]
 80052b0:	6832      	ldr	r2, [r6, #0]
 80052b2:	1a9b      	subs	r3, r3, r2
 80052b4:	42ab      	cmp	r3, r5
 80052b6:	dc26      	bgt.n	8005306 <_printf_common+0x96>
 80052b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052bc:	1e13      	subs	r3, r2, #0
 80052be:	6822      	ldr	r2, [r4, #0]
 80052c0:	bf18      	it	ne
 80052c2:	2301      	movne	r3, #1
 80052c4:	0692      	lsls	r2, r2, #26
 80052c6:	d42b      	bmi.n	8005320 <_printf_common+0xb0>
 80052c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052cc:	4649      	mov	r1, r9
 80052ce:	4638      	mov	r0, r7
 80052d0:	47c0      	blx	r8
 80052d2:	3001      	adds	r0, #1
 80052d4:	d01e      	beq.n	8005314 <_printf_common+0xa4>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	68e5      	ldr	r5, [r4, #12]
 80052da:	6832      	ldr	r2, [r6, #0]
 80052dc:	f003 0306 	and.w	r3, r3, #6
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	bf08      	it	eq
 80052e4:	1aad      	subeq	r5, r5, r2
 80052e6:	68a3      	ldr	r3, [r4, #8]
 80052e8:	6922      	ldr	r2, [r4, #16]
 80052ea:	bf0c      	ite	eq
 80052ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052f0:	2500      	movne	r5, #0
 80052f2:	4293      	cmp	r3, r2
 80052f4:	bfc4      	itt	gt
 80052f6:	1a9b      	subgt	r3, r3, r2
 80052f8:	18ed      	addgt	r5, r5, r3
 80052fa:	2600      	movs	r6, #0
 80052fc:	341a      	adds	r4, #26
 80052fe:	42b5      	cmp	r5, r6
 8005300:	d11a      	bne.n	8005338 <_printf_common+0xc8>
 8005302:	2000      	movs	r0, #0
 8005304:	e008      	b.n	8005318 <_printf_common+0xa8>
 8005306:	2301      	movs	r3, #1
 8005308:	4652      	mov	r2, sl
 800530a:	4649      	mov	r1, r9
 800530c:	4638      	mov	r0, r7
 800530e:	47c0      	blx	r8
 8005310:	3001      	adds	r0, #1
 8005312:	d103      	bne.n	800531c <_printf_common+0xac>
 8005314:	f04f 30ff 	mov.w	r0, #4294967295
 8005318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800531c:	3501      	adds	r5, #1
 800531e:	e7c6      	b.n	80052ae <_printf_common+0x3e>
 8005320:	18e1      	adds	r1, r4, r3
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	2030      	movs	r0, #48	; 0x30
 8005326:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800532a:	4422      	add	r2, r4
 800532c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005330:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005334:	3302      	adds	r3, #2
 8005336:	e7c7      	b.n	80052c8 <_printf_common+0x58>
 8005338:	2301      	movs	r3, #1
 800533a:	4622      	mov	r2, r4
 800533c:	4649      	mov	r1, r9
 800533e:	4638      	mov	r0, r7
 8005340:	47c0      	blx	r8
 8005342:	3001      	adds	r0, #1
 8005344:	d0e6      	beq.n	8005314 <_printf_common+0xa4>
 8005346:	3601      	adds	r6, #1
 8005348:	e7d9      	b.n	80052fe <_printf_common+0x8e>
	...

0800534c <_printf_i>:
 800534c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005350:	460c      	mov	r4, r1
 8005352:	4691      	mov	r9, r2
 8005354:	7e27      	ldrb	r7, [r4, #24]
 8005356:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005358:	2f78      	cmp	r7, #120	; 0x78
 800535a:	4680      	mov	r8, r0
 800535c:	469a      	mov	sl, r3
 800535e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005362:	d807      	bhi.n	8005374 <_printf_i+0x28>
 8005364:	2f62      	cmp	r7, #98	; 0x62
 8005366:	d80a      	bhi.n	800537e <_printf_i+0x32>
 8005368:	2f00      	cmp	r7, #0
 800536a:	f000 80d8 	beq.w	800551e <_printf_i+0x1d2>
 800536e:	2f58      	cmp	r7, #88	; 0x58
 8005370:	f000 80a3 	beq.w	80054ba <_printf_i+0x16e>
 8005374:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005378:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800537c:	e03a      	b.n	80053f4 <_printf_i+0xa8>
 800537e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005382:	2b15      	cmp	r3, #21
 8005384:	d8f6      	bhi.n	8005374 <_printf_i+0x28>
 8005386:	a001      	add	r0, pc, #4	; (adr r0, 800538c <_printf_i+0x40>)
 8005388:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800538c:	080053e5 	.word	0x080053e5
 8005390:	080053f9 	.word	0x080053f9
 8005394:	08005375 	.word	0x08005375
 8005398:	08005375 	.word	0x08005375
 800539c:	08005375 	.word	0x08005375
 80053a0:	08005375 	.word	0x08005375
 80053a4:	080053f9 	.word	0x080053f9
 80053a8:	08005375 	.word	0x08005375
 80053ac:	08005375 	.word	0x08005375
 80053b0:	08005375 	.word	0x08005375
 80053b4:	08005375 	.word	0x08005375
 80053b8:	08005505 	.word	0x08005505
 80053bc:	08005429 	.word	0x08005429
 80053c0:	080054e7 	.word	0x080054e7
 80053c4:	08005375 	.word	0x08005375
 80053c8:	08005375 	.word	0x08005375
 80053cc:	08005527 	.word	0x08005527
 80053d0:	08005375 	.word	0x08005375
 80053d4:	08005429 	.word	0x08005429
 80053d8:	08005375 	.word	0x08005375
 80053dc:	08005375 	.word	0x08005375
 80053e0:	080054ef 	.word	0x080054ef
 80053e4:	680b      	ldr	r3, [r1, #0]
 80053e6:	1d1a      	adds	r2, r3, #4
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	600a      	str	r2, [r1, #0]
 80053ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0a3      	b.n	8005540 <_printf_i+0x1f4>
 80053f8:	6825      	ldr	r5, [r4, #0]
 80053fa:	6808      	ldr	r0, [r1, #0]
 80053fc:	062e      	lsls	r6, r5, #24
 80053fe:	f100 0304 	add.w	r3, r0, #4
 8005402:	d50a      	bpl.n	800541a <_printf_i+0xce>
 8005404:	6805      	ldr	r5, [r0, #0]
 8005406:	600b      	str	r3, [r1, #0]
 8005408:	2d00      	cmp	r5, #0
 800540a:	da03      	bge.n	8005414 <_printf_i+0xc8>
 800540c:	232d      	movs	r3, #45	; 0x2d
 800540e:	426d      	negs	r5, r5
 8005410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005414:	485e      	ldr	r0, [pc, #376]	; (8005590 <_printf_i+0x244>)
 8005416:	230a      	movs	r3, #10
 8005418:	e019      	b.n	800544e <_printf_i+0x102>
 800541a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800541e:	6805      	ldr	r5, [r0, #0]
 8005420:	600b      	str	r3, [r1, #0]
 8005422:	bf18      	it	ne
 8005424:	b22d      	sxthne	r5, r5
 8005426:	e7ef      	b.n	8005408 <_printf_i+0xbc>
 8005428:	680b      	ldr	r3, [r1, #0]
 800542a:	6825      	ldr	r5, [r4, #0]
 800542c:	1d18      	adds	r0, r3, #4
 800542e:	6008      	str	r0, [r1, #0]
 8005430:	0628      	lsls	r0, r5, #24
 8005432:	d501      	bpl.n	8005438 <_printf_i+0xec>
 8005434:	681d      	ldr	r5, [r3, #0]
 8005436:	e002      	b.n	800543e <_printf_i+0xf2>
 8005438:	0669      	lsls	r1, r5, #25
 800543a:	d5fb      	bpl.n	8005434 <_printf_i+0xe8>
 800543c:	881d      	ldrh	r5, [r3, #0]
 800543e:	4854      	ldr	r0, [pc, #336]	; (8005590 <_printf_i+0x244>)
 8005440:	2f6f      	cmp	r7, #111	; 0x6f
 8005442:	bf0c      	ite	eq
 8005444:	2308      	moveq	r3, #8
 8005446:	230a      	movne	r3, #10
 8005448:	2100      	movs	r1, #0
 800544a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800544e:	6866      	ldr	r6, [r4, #4]
 8005450:	60a6      	str	r6, [r4, #8]
 8005452:	2e00      	cmp	r6, #0
 8005454:	bfa2      	ittt	ge
 8005456:	6821      	ldrge	r1, [r4, #0]
 8005458:	f021 0104 	bicge.w	r1, r1, #4
 800545c:	6021      	strge	r1, [r4, #0]
 800545e:	b90d      	cbnz	r5, 8005464 <_printf_i+0x118>
 8005460:	2e00      	cmp	r6, #0
 8005462:	d04d      	beq.n	8005500 <_printf_i+0x1b4>
 8005464:	4616      	mov	r6, r2
 8005466:	fbb5 f1f3 	udiv	r1, r5, r3
 800546a:	fb03 5711 	mls	r7, r3, r1, r5
 800546e:	5dc7      	ldrb	r7, [r0, r7]
 8005470:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005474:	462f      	mov	r7, r5
 8005476:	42bb      	cmp	r3, r7
 8005478:	460d      	mov	r5, r1
 800547a:	d9f4      	bls.n	8005466 <_printf_i+0x11a>
 800547c:	2b08      	cmp	r3, #8
 800547e:	d10b      	bne.n	8005498 <_printf_i+0x14c>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	07df      	lsls	r7, r3, #31
 8005484:	d508      	bpl.n	8005498 <_printf_i+0x14c>
 8005486:	6923      	ldr	r3, [r4, #16]
 8005488:	6861      	ldr	r1, [r4, #4]
 800548a:	4299      	cmp	r1, r3
 800548c:	bfde      	ittt	le
 800548e:	2330      	movle	r3, #48	; 0x30
 8005490:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005494:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005498:	1b92      	subs	r2, r2, r6
 800549a:	6122      	str	r2, [r4, #16]
 800549c:	f8cd a000 	str.w	sl, [sp]
 80054a0:	464b      	mov	r3, r9
 80054a2:	aa03      	add	r2, sp, #12
 80054a4:	4621      	mov	r1, r4
 80054a6:	4640      	mov	r0, r8
 80054a8:	f7ff fee2 	bl	8005270 <_printf_common>
 80054ac:	3001      	adds	r0, #1
 80054ae:	d14c      	bne.n	800554a <_printf_i+0x1fe>
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295
 80054b4:	b004      	add	sp, #16
 80054b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ba:	4835      	ldr	r0, [pc, #212]	; (8005590 <_printf_i+0x244>)
 80054bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	680e      	ldr	r6, [r1, #0]
 80054c4:	061f      	lsls	r7, r3, #24
 80054c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80054ca:	600e      	str	r6, [r1, #0]
 80054cc:	d514      	bpl.n	80054f8 <_printf_i+0x1ac>
 80054ce:	07d9      	lsls	r1, r3, #31
 80054d0:	bf44      	itt	mi
 80054d2:	f043 0320 	orrmi.w	r3, r3, #32
 80054d6:	6023      	strmi	r3, [r4, #0]
 80054d8:	b91d      	cbnz	r5, 80054e2 <_printf_i+0x196>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	f023 0320 	bic.w	r3, r3, #32
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	2310      	movs	r3, #16
 80054e4:	e7b0      	b.n	8005448 <_printf_i+0xfc>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	f043 0320 	orr.w	r3, r3, #32
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	2378      	movs	r3, #120	; 0x78
 80054f0:	4828      	ldr	r0, [pc, #160]	; (8005594 <_printf_i+0x248>)
 80054f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054f6:	e7e3      	b.n	80054c0 <_printf_i+0x174>
 80054f8:	065e      	lsls	r6, r3, #25
 80054fa:	bf48      	it	mi
 80054fc:	b2ad      	uxthmi	r5, r5
 80054fe:	e7e6      	b.n	80054ce <_printf_i+0x182>
 8005500:	4616      	mov	r6, r2
 8005502:	e7bb      	b.n	800547c <_printf_i+0x130>
 8005504:	680b      	ldr	r3, [r1, #0]
 8005506:	6826      	ldr	r6, [r4, #0]
 8005508:	6960      	ldr	r0, [r4, #20]
 800550a:	1d1d      	adds	r5, r3, #4
 800550c:	600d      	str	r5, [r1, #0]
 800550e:	0635      	lsls	r5, r6, #24
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	d501      	bpl.n	8005518 <_printf_i+0x1cc>
 8005514:	6018      	str	r0, [r3, #0]
 8005516:	e002      	b.n	800551e <_printf_i+0x1d2>
 8005518:	0671      	lsls	r1, r6, #25
 800551a:	d5fb      	bpl.n	8005514 <_printf_i+0x1c8>
 800551c:	8018      	strh	r0, [r3, #0]
 800551e:	2300      	movs	r3, #0
 8005520:	6123      	str	r3, [r4, #16]
 8005522:	4616      	mov	r6, r2
 8005524:	e7ba      	b.n	800549c <_printf_i+0x150>
 8005526:	680b      	ldr	r3, [r1, #0]
 8005528:	1d1a      	adds	r2, r3, #4
 800552a:	600a      	str	r2, [r1, #0]
 800552c:	681e      	ldr	r6, [r3, #0]
 800552e:	6862      	ldr	r2, [r4, #4]
 8005530:	2100      	movs	r1, #0
 8005532:	4630      	mov	r0, r6
 8005534:	f7fa fe54 	bl	80001e0 <memchr>
 8005538:	b108      	cbz	r0, 800553e <_printf_i+0x1f2>
 800553a:	1b80      	subs	r0, r0, r6
 800553c:	6060      	str	r0, [r4, #4]
 800553e:	6863      	ldr	r3, [r4, #4]
 8005540:	6123      	str	r3, [r4, #16]
 8005542:	2300      	movs	r3, #0
 8005544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005548:	e7a8      	b.n	800549c <_printf_i+0x150>
 800554a:	6923      	ldr	r3, [r4, #16]
 800554c:	4632      	mov	r2, r6
 800554e:	4649      	mov	r1, r9
 8005550:	4640      	mov	r0, r8
 8005552:	47d0      	blx	sl
 8005554:	3001      	adds	r0, #1
 8005556:	d0ab      	beq.n	80054b0 <_printf_i+0x164>
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	079b      	lsls	r3, r3, #30
 800555c:	d413      	bmi.n	8005586 <_printf_i+0x23a>
 800555e:	68e0      	ldr	r0, [r4, #12]
 8005560:	9b03      	ldr	r3, [sp, #12]
 8005562:	4298      	cmp	r0, r3
 8005564:	bfb8      	it	lt
 8005566:	4618      	movlt	r0, r3
 8005568:	e7a4      	b.n	80054b4 <_printf_i+0x168>
 800556a:	2301      	movs	r3, #1
 800556c:	4632      	mov	r2, r6
 800556e:	4649      	mov	r1, r9
 8005570:	4640      	mov	r0, r8
 8005572:	47d0      	blx	sl
 8005574:	3001      	adds	r0, #1
 8005576:	d09b      	beq.n	80054b0 <_printf_i+0x164>
 8005578:	3501      	adds	r5, #1
 800557a:	68e3      	ldr	r3, [r4, #12]
 800557c:	9903      	ldr	r1, [sp, #12]
 800557e:	1a5b      	subs	r3, r3, r1
 8005580:	42ab      	cmp	r3, r5
 8005582:	dcf2      	bgt.n	800556a <_printf_i+0x21e>
 8005584:	e7eb      	b.n	800555e <_printf_i+0x212>
 8005586:	2500      	movs	r5, #0
 8005588:	f104 0619 	add.w	r6, r4, #25
 800558c:	e7f5      	b.n	800557a <_printf_i+0x22e>
 800558e:	bf00      	nop
 8005590:	08005fcd 	.word	0x08005fcd
 8005594:	08005fde 	.word	0x08005fde

08005598 <_sbrk_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4d06      	ldr	r5, [pc, #24]	; (80055b4 <_sbrk_r+0x1c>)
 800559c:	2300      	movs	r3, #0
 800559e:	4604      	mov	r4, r0
 80055a0:	4608      	mov	r0, r1
 80055a2:	602b      	str	r3, [r5, #0]
 80055a4:	f7fb fd66 	bl	8001074 <_sbrk>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d102      	bne.n	80055b2 <_sbrk_r+0x1a>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	b103      	cbz	r3, 80055b2 <_sbrk_r+0x1a>
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
 80055b4:	200001fc 	.word	0x200001fc

080055b8 <__swbuf_r>:
 80055b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ba:	460e      	mov	r6, r1
 80055bc:	4614      	mov	r4, r2
 80055be:	4605      	mov	r5, r0
 80055c0:	b118      	cbz	r0, 80055ca <__swbuf_r+0x12>
 80055c2:	6983      	ldr	r3, [r0, #24]
 80055c4:	b90b      	cbnz	r3, 80055ca <__swbuf_r+0x12>
 80055c6:	f000 f9d9 	bl	800597c <__sinit>
 80055ca:	4b21      	ldr	r3, [pc, #132]	; (8005650 <__swbuf_r+0x98>)
 80055cc:	429c      	cmp	r4, r3
 80055ce:	d12b      	bne.n	8005628 <__swbuf_r+0x70>
 80055d0:	686c      	ldr	r4, [r5, #4]
 80055d2:	69a3      	ldr	r3, [r4, #24]
 80055d4:	60a3      	str	r3, [r4, #8]
 80055d6:	89a3      	ldrh	r3, [r4, #12]
 80055d8:	071a      	lsls	r2, r3, #28
 80055da:	d52f      	bpl.n	800563c <__swbuf_r+0x84>
 80055dc:	6923      	ldr	r3, [r4, #16]
 80055de:	b36b      	cbz	r3, 800563c <__swbuf_r+0x84>
 80055e0:	6923      	ldr	r3, [r4, #16]
 80055e2:	6820      	ldr	r0, [r4, #0]
 80055e4:	1ac0      	subs	r0, r0, r3
 80055e6:	6963      	ldr	r3, [r4, #20]
 80055e8:	b2f6      	uxtb	r6, r6
 80055ea:	4283      	cmp	r3, r0
 80055ec:	4637      	mov	r7, r6
 80055ee:	dc04      	bgt.n	80055fa <__swbuf_r+0x42>
 80055f0:	4621      	mov	r1, r4
 80055f2:	4628      	mov	r0, r5
 80055f4:	f000 f92e 	bl	8005854 <_fflush_r>
 80055f8:	bb30      	cbnz	r0, 8005648 <__swbuf_r+0x90>
 80055fa:	68a3      	ldr	r3, [r4, #8]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	60a3      	str	r3, [r4, #8]
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	6022      	str	r2, [r4, #0]
 8005606:	701e      	strb	r6, [r3, #0]
 8005608:	6963      	ldr	r3, [r4, #20]
 800560a:	3001      	adds	r0, #1
 800560c:	4283      	cmp	r3, r0
 800560e:	d004      	beq.n	800561a <__swbuf_r+0x62>
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	07db      	lsls	r3, r3, #31
 8005614:	d506      	bpl.n	8005624 <__swbuf_r+0x6c>
 8005616:	2e0a      	cmp	r6, #10
 8005618:	d104      	bne.n	8005624 <__swbuf_r+0x6c>
 800561a:	4621      	mov	r1, r4
 800561c:	4628      	mov	r0, r5
 800561e:	f000 f919 	bl	8005854 <_fflush_r>
 8005622:	b988      	cbnz	r0, 8005648 <__swbuf_r+0x90>
 8005624:	4638      	mov	r0, r7
 8005626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005628:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <__swbuf_r+0x9c>)
 800562a:	429c      	cmp	r4, r3
 800562c:	d101      	bne.n	8005632 <__swbuf_r+0x7a>
 800562e:	68ac      	ldr	r4, [r5, #8]
 8005630:	e7cf      	b.n	80055d2 <__swbuf_r+0x1a>
 8005632:	4b09      	ldr	r3, [pc, #36]	; (8005658 <__swbuf_r+0xa0>)
 8005634:	429c      	cmp	r4, r3
 8005636:	bf08      	it	eq
 8005638:	68ec      	ldreq	r4, [r5, #12]
 800563a:	e7ca      	b.n	80055d2 <__swbuf_r+0x1a>
 800563c:	4621      	mov	r1, r4
 800563e:	4628      	mov	r0, r5
 8005640:	f000 f80c 	bl	800565c <__swsetup_r>
 8005644:	2800      	cmp	r0, #0
 8005646:	d0cb      	beq.n	80055e0 <__swbuf_r+0x28>
 8005648:	f04f 37ff 	mov.w	r7, #4294967295
 800564c:	e7ea      	b.n	8005624 <__swbuf_r+0x6c>
 800564e:	bf00      	nop
 8005650:	08006010 	.word	0x08006010
 8005654:	08006030 	.word	0x08006030
 8005658:	08005ff0 	.word	0x08005ff0

0800565c <__swsetup_r>:
 800565c:	4b32      	ldr	r3, [pc, #200]	; (8005728 <__swsetup_r+0xcc>)
 800565e:	b570      	push	{r4, r5, r6, lr}
 8005660:	681d      	ldr	r5, [r3, #0]
 8005662:	4606      	mov	r6, r0
 8005664:	460c      	mov	r4, r1
 8005666:	b125      	cbz	r5, 8005672 <__swsetup_r+0x16>
 8005668:	69ab      	ldr	r3, [r5, #24]
 800566a:	b913      	cbnz	r3, 8005672 <__swsetup_r+0x16>
 800566c:	4628      	mov	r0, r5
 800566e:	f000 f985 	bl	800597c <__sinit>
 8005672:	4b2e      	ldr	r3, [pc, #184]	; (800572c <__swsetup_r+0xd0>)
 8005674:	429c      	cmp	r4, r3
 8005676:	d10f      	bne.n	8005698 <__swsetup_r+0x3c>
 8005678:	686c      	ldr	r4, [r5, #4]
 800567a:	89a3      	ldrh	r3, [r4, #12]
 800567c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005680:	0719      	lsls	r1, r3, #28
 8005682:	d42c      	bmi.n	80056de <__swsetup_r+0x82>
 8005684:	06dd      	lsls	r5, r3, #27
 8005686:	d411      	bmi.n	80056ac <__swsetup_r+0x50>
 8005688:	2309      	movs	r3, #9
 800568a:	6033      	str	r3, [r6, #0]
 800568c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005690:	81a3      	strh	r3, [r4, #12]
 8005692:	f04f 30ff 	mov.w	r0, #4294967295
 8005696:	e03e      	b.n	8005716 <__swsetup_r+0xba>
 8005698:	4b25      	ldr	r3, [pc, #148]	; (8005730 <__swsetup_r+0xd4>)
 800569a:	429c      	cmp	r4, r3
 800569c:	d101      	bne.n	80056a2 <__swsetup_r+0x46>
 800569e:	68ac      	ldr	r4, [r5, #8]
 80056a0:	e7eb      	b.n	800567a <__swsetup_r+0x1e>
 80056a2:	4b24      	ldr	r3, [pc, #144]	; (8005734 <__swsetup_r+0xd8>)
 80056a4:	429c      	cmp	r4, r3
 80056a6:	bf08      	it	eq
 80056a8:	68ec      	ldreq	r4, [r5, #12]
 80056aa:	e7e6      	b.n	800567a <__swsetup_r+0x1e>
 80056ac:	0758      	lsls	r0, r3, #29
 80056ae:	d512      	bpl.n	80056d6 <__swsetup_r+0x7a>
 80056b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056b2:	b141      	cbz	r1, 80056c6 <__swsetup_r+0x6a>
 80056b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056b8:	4299      	cmp	r1, r3
 80056ba:	d002      	beq.n	80056c2 <__swsetup_r+0x66>
 80056bc:	4630      	mov	r0, r6
 80056be:	f7ff fa77 	bl	8004bb0 <_free_r>
 80056c2:	2300      	movs	r3, #0
 80056c4:	6363      	str	r3, [r4, #52]	; 0x34
 80056c6:	89a3      	ldrh	r3, [r4, #12]
 80056c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056cc:	81a3      	strh	r3, [r4, #12]
 80056ce:	2300      	movs	r3, #0
 80056d0:	6063      	str	r3, [r4, #4]
 80056d2:	6923      	ldr	r3, [r4, #16]
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	f043 0308 	orr.w	r3, r3, #8
 80056dc:	81a3      	strh	r3, [r4, #12]
 80056de:	6923      	ldr	r3, [r4, #16]
 80056e0:	b94b      	cbnz	r3, 80056f6 <__swsetup_r+0x9a>
 80056e2:	89a3      	ldrh	r3, [r4, #12]
 80056e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ec:	d003      	beq.n	80056f6 <__swsetup_r+0x9a>
 80056ee:	4621      	mov	r1, r4
 80056f0:	4630      	mov	r0, r6
 80056f2:	f000 fa07 	bl	8005b04 <__smakebuf_r>
 80056f6:	89a0      	ldrh	r0, [r4, #12]
 80056f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056fc:	f010 0301 	ands.w	r3, r0, #1
 8005700:	d00a      	beq.n	8005718 <__swsetup_r+0xbc>
 8005702:	2300      	movs	r3, #0
 8005704:	60a3      	str	r3, [r4, #8]
 8005706:	6963      	ldr	r3, [r4, #20]
 8005708:	425b      	negs	r3, r3
 800570a:	61a3      	str	r3, [r4, #24]
 800570c:	6923      	ldr	r3, [r4, #16]
 800570e:	b943      	cbnz	r3, 8005722 <__swsetup_r+0xc6>
 8005710:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005714:	d1ba      	bne.n	800568c <__swsetup_r+0x30>
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	0781      	lsls	r1, r0, #30
 800571a:	bf58      	it	pl
 800571c:	6963      	ldrpl	r3, [r4, #20]
 800571e:	60a3      	str	r3, [r4, #8]
 8005720:	e7f4      	b.n	800570c <__swsetup_r+0xb0>
 8005722:	2000      	movs	r0, #0
 8005724:	e7f7      	b.n	8005716 <__swsetup_r+0xba>
 8005726:	bf00      	nop
 8005728:	2000000c 	.word	0x2000000c
 800572c:	08006010 	.word	0x08006010
 8005730:	08006030 	.word	0x08006030
 8005734:	08005ff0 	.word	0x08005ff0

08005738 <abort>:
 8005738:	b508      	push	{r3, lr}
 800573a:	2006      	movs	r0, #6
 800573c:	f000 fa96 	bl	8005c6c <raise>
 8005740:	2001      	movs	r0, #1
 8005742:	f7fb fc1f 	bl	8000f84 <_exit>
	...

08005748 <__sflush_r>:
 8005748:	898a      	ldrh	r2, [r1, #12]
 800574a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800574e:	4605      	mov	r5, r0
 8005750:	0710      	lsls	r0, r2, #28
 8005752:	460c      	mov	r4, r1
 8005754:	d458      	bmi.n	8005808 <__sflush_r+0xc0>
 8005756:	684b      	ldr	r3, [r1, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	dc05      	bgt.n	8005768 <__sflush_r+0x20>
 800575c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	dc02      	bgt.n	8005768 <__sflush_r+0x20>
 8005762:	2000      	movs	r0, #0
 8005764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800576a:	2e00      	cmp	r6, #0
 800576c:	d0f9      	beq.n	8005762 <__sflush_r+0x1a>
 800576e:	2300      	movs	r3, #0
 8005770:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005774:	682f      	ldr	r7, [r5, #0]
 8005776:	602b      	str	r3, [r5, #0]
 8005778:	d032      	beq.n	80057e0 <__sflush_r+0x98>
 800577a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	075a      	lsls	r2, r3, #29
 8005780:	d505      	bpl.n	800578e <__sflush_r+0x46>
 8005782:	6863      	ldr	r3, [r4, #4]
 8005784:	1ac0      	subs	r0, r0, r3
 8005786:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005788:	b10b      	cbz	r3, 800578e <__sflush_r+0x46>
 800578a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800578c:	1ac0      	subs	r0, r0, r3
 800578e:	2300      	movs	r3, #0
 8005790:	4602      	mov	r2, r0
 8005792:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005794:	6a21      	ldr	r1, [r4, #32]
 8005796:	4628      	mov	r0, r5
 8005798:	47b0      	blx	r6
 800579a:	1c43      	adds	r3, r0, #1
 800579c:	89a3      	ldrh	r3, [r4, #12]
 800579e:	d106      	bne.n	80057ae <__sflush_r+0x66>
 80057a0:	6829      	ldr	r1, [r5, #0]
 80057a2:	291d      	cmp	r1, #29
 80057a4:	d82c      	bhi.n	8005800 <__sflush_r+0xb8>
 80057a6:	4a2a      	ldr	r2, [pc, #168]	; (8005850 <__sflush_r+0x108>)
 80057a8:	40ca      	lsrs	r2, r1
 80057aa:	07d6      	lsls	r6, r2, #31
 80057ac:	d528      	bpl.n	8005800 <__sflush_r+0xb8>
 80057ae:	2200      	movs	r2, #0
 80057b0:	6062      	str	r2, [r4, #4]
 80057b2:	04d9      	lsls	r1, r3, #19
 80057b4:	6922      	ldr	r2, [r4, #16]
 80057b6:	6022      	str	r2, [r4, #0]
 80057b8:	d504      	bpl.n	80057c4 <__sflush_r+0x7c>
 80057ba:	1c42      	adds	r2, r0, #1
 80057bc:	d101      	bne.n	80057c2 <__sflush_r+0x7a>
 80057be:	682b      	ldr	r3, [r5, #0]
 80057c0:	b903      	cbnz	r3, 80057c4 <__sflush_r+0x7c>
 80057c2:	6560      	str	r0, [r4, #84]	; 0x54
 80057c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057c6:	602f      	str	r7, [r5, #0]
 80057c8:	2900      	cmp	r1, #0
 80057ca:	d0ca      	beq.n	8005762 <__sflush_r+0x1a>
 80057cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057d0:	4299      	cmp	r1, r3
 80057d2:	d002      	beq.n	80057da <__sflush_r+0x92>
 80057d4:	4628      	mov	r0, r5
 80057d6:	f7ff f9eb 	bl	8004bb0 <_free_r>
 80057da:	2000      	movs	r0, #0
 80057dc:	6360      	str	r0, [r4, #52]	; 0x34
 80057de:	e7c1      	b.n	8005764 <__sflush_r+0x1c>
 80057e0:	6a21      	ldr	r1, [r4, #32]
 80057e2:	2301      	movs	r3, #1
 80057e4:	4628      	mov	r0, r5
 80057e6:	47b0      	blx	r6
 80057e8:	1c41      	adds	r1, r0, #1
 80057ea:	d1c7      	bne.n	800577c <__sflush_r+0x34>
 80057ec:	682b      	ldr	r3, [r5, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0c4      	beq.n	800577c <__sflush_r+0x34>
 80057f2:	2b1d      	cmp	r3, #29
 80057f4:	d001      	beq.n	80057fa <__sflush_r+0xb2>
 80057f6:	2b16      	cmp	r3, #22
 80057f8:	d101      	bne.n	80057fe <__sflush_r+0xb6>
 80057fa:	602f      	str	r7, [r5, #0]
 80057fc:	e7b1      	b.n	8005762 <__sflush_r+0x1a>
 80057fe:	89a3      	ldrh	r3, [r4, #12]
 8005800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005804:	81a3      	strh	r3, [r4, #12]
 8005806:	e7ad      	b.n	8005764 <__sflush_r+0x1c>
 8005808:	690f      	ldr	r7, [r1, #16]
 800580a:	2f00      	cmp	r7, #0
 800580c:	d0a9      	beq.n	8005762 <__sflush_r+0x1a>
 800580e:	0793      	lsls	r3, r2, #30
 8005810:	680e      	ldr	r6, [r1, #0]
 8005812:	bf08      	it	eq
 8005814:	694b      	ldreq	r3, [r1, #20]
 8005816:	600f      	str	r7, [r1, #0]
 8005818:	bf18      	it	ne
 800581a:	2300      	movne	r3, #0
 800581c:	eba6 0807 	sub.w	r8, r6, r7
 8005820:	608b      	str	r3, [r1, #8]
 8005822:	f1b8 0f00 	cmp.w	r8, #0
 8005826:	dd9c      	ble.n	8005762 <__sflush_r+0x1a>
 8005828:	6a21      	ldr	r1, [r4, #32]
 800582a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800582c:	4643      	mov	r3, r8
 800582e:	463a      	mov	r2, r7
 8005830:	4628      	mov	r0, r5
 8005832:	47b0      	blx	r6
 8005834:	2800      	cmp	r0, #0
 8005836:	dc06      	bgt.n	8005846 <__sflush_r+0xfe>
 8005838:	89a3      	ldrh	r3, [r4, #12]
 800583a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800583e:	81a3      	strh	r3, [r4, #12]
 8005840:	f04f 30ff 	mov.w	r0, #4294967295
 8005844:	e78e      	b.n	8005764 <__sflush_r+0x1c>
 8005846:	4407      	add	r7, r0
 8005848:	eba8 0800 	sub.w	r8, r8, r0
 800584c:	e7e9      	b.n	8005822 <__sflush_r+0xda>
 800584e:	bf00      	nop
 8005850:	20400001 	.word	0x20400001

08005854 <_fflush_r>:
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	690b      	ldr	r3, [r1, #16]
 8005858:	4605      	mov	r5, r0
 800585a:	460c      	mov	r4, r1
 800585c:	b913      	cbnz	r3, 8005864 <_fflush_r+0x10>
 800585e:	2500      	movs	r5, #0
 8005860:	4628      	mov	r0, r5
 8005862:	bd38      	pop	{r3, r4, r5, pc}
 8005864:	b118      	cbz	r0, 800586e <_fflush_r+0x1a>
 8005866:	6983      	ldr	r3, [r0, #24]
 8005868:	b90b      	cbnz	r3, 800586e <_fflush_r+0x1a>
 800586a:	f000 f887 	bl	800597c <__sinit>
 800586e:	4b14      	ldr	r3, [pc, #80]	; (80058c0 <_fflush_r+0x6c>)
 8005870:	429c      	cmp	r4, r3
 8005872:	d11b      	bne.n	80058ac <_fflush_r+0x58>
 8005874:	686c      	ldr	r4, [r5, #4]
 8005876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0ef      	beq.n	800585e <_fflush_r+0xa>
 800587e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005880:	07d0      	lsls	r0, r2, #31
 8005882:	d404      	bmi.n	800588e <_fflush_r+0x3a>
 8005884:	0599      	lsls	r1, r3, #22
 8005886:	d402      	bmi.n	800588e <_fflush_r+0x3a>
 8005888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800588a:	f000 f915 	bl	8005ab8 <__retarget_lock_acquire_recursive>
 800588e:	4628      	mov	r0, r5
 8005890:	4621      	mov	r1, r4
 8005892:	f7ff ff59 	bl	8005748 <__sflush_r>
 8005896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005898:	07da      	lsls	r2, r3, #31
 800589a:	4605      	mov	r5, r0
 800589c:	d4e0      	bmi.n	8005860 <_fflush_r+0xc>
 800589e:	89a3      	ldrh	r3, [r4, #12]
 80058a0:	059b      	lsls	r3, r3, #22
 80058a2:	d4dd      	bmi.n	8005860 <_fflush_r+0xc>
 80058a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058a6:	f000 f908 	bl	8005aba <__retarget_lock_release_recursive>
 80058aa:	e7d9      	b.n	8005860 <_fflush_r+0xc>
 80058ac:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <_fflush_r+0x70>)
 80058ae:	429c      	cmp	r4, r3
 80058b0:	d101      	bne.n	80058b6 <_fflush_r+0x62>
 80058b2:	68ac      	ldr	r4, [r5, #8]
 80058b4:	e7df      	b.n	8005876 <_fflush_r+0x22>
 80058b6:	4b04      	ldr	r3, [pc, #16]	; (80058c8 <_fflush_r+0x74>)
 80058b8:	429c      	cmp	r4, r3
 80058ba:	bf08      	it	eq
 80058bc:	68ec      	ldreq	r4, [r5, #12]
 80058be:	e7da      	b.n	8005876 <_fflush_r+0x22>
 80058c0:	08006010 	.word	0x08006010
 80058c4:	08006030 	.word	0x08006030
 80058c8:	08005ff0 	.word	0x08005ff0

080058cc <std>:
 80058cc:	2300      	movs	r3, #0
 80058ce:	b510      	push	{r4, lr}
 80058d0:	4604      	mov	r4, r0
 80058d2:	e9c0 3300 	strd	r3, r3, [r0]
 80058d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058da:	6083      	str	r3, [r0, #8]
 80058dc:	8181      	strh	r1, [r0, #12]
 80058de:	6643      	str	r3, [r0, #100]	; 0x64
 80058e0:	81c2      	strh	r2, [r0, #14]
 80058e2:	6183      	str	r3, [r0, #24]
 80058e4:	4619      	mov	r1, r3
 80058e6:	2208      	movs	r2, #8
 80058e8:	305c      	adds	r0, #92	; 0x5c
 80058ea:	f7ff f839 	bl	8004960 <memset>
 80058ee:	4b05      	ldr	r3, [pc, #20]	; (8005904 <std+0x38>)
 80058f0:	6263      	str	r3, [r4, #36]	; 0x24
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <std+0x3c>)
 80058f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80058f6:	4b05      	ldr	r3, [pc, #20]	; (800590c <std+0x40>)
 80058f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <std+0x44>)
 80058fc:	6224      	str	r4, [r4, #32]
 80058fe:	6323      	str	r3, [r4, #48]	; 0x30
 8005900:	bd10      	pop	{r4, pc}
 8005902:	bf00      	nop
 8005904:	08005ca5 	.word	0x08005ca5
 8005908:	08005cc7 	.word	0x08005cc7
 800590c:	08005cff 	.word	0x08005cff
 8005910:	08005d23 	.word	0x08005d23

08005914 <_cleanup_r>:
 8005914:	4901      	ldr	r1, [pc, #4]	; (800591c <_cleanup_r+0x8>)
 8005916:	f000 b8af 	b.w	8005a78 <_fwalk_reent>
 800591a:	bf00      	nop
 800591c:	08005855 	.word	0x08005855

08005920 <__sfmoreglue>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	1e4a      	subs	r2, r1, #1
 8005924:	2568      	movs	r5, #104	; 0x68
 8005926:	4355      	muls	r5, r2
 8005928:	460e      	mov	r6, r1
 800592a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800592e:	f7ff f98f 	bl	8004c50 <_malloc_r>
 8005932:	4604      	mov	r4, r0
 8005934:	b140      	cbz	r0, 8005948 <__sfmoreglue+0x28>
 8005936:	2100      	movs	r1, #0
 8005938:	e9c0 1600 	strd	r1, r6, [r0]
 800593c:	300c      	adds	r0, #12
 800593e:	60a0      	str	r0, [r4, #8]
 8005940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005944:	f7ff f80c 	bl	8004960 <memset>
 8005948:	4620      	mov	r0, r4
 800594a:	bd70      	pop	{r4, r5, r6, pc}

0800594c <__sfp_lock_acquire>:
 800594c:	4801      	ldr	r0, [pc, #4]	; (8005954 <__sfp_lock_acquire+0x8>)
 800594e:	f000 b8b3 	b.w	8005ab8 <__retarget_lock_acquire_recursive>
 8005952:	bf00      	nop
 8005954:	200001f8 	.word	0x200001f8

08005958 <__sfp_lock_release>:
 8005958:	4801      	ldr	r0, [pc, #4]	; (8005960 <__sfp_lock_release+0x8>)
 800595a:	f000 b8ae 	b.w	8005aba <__retarget_lock_release_recursive>
 800595e:	bf00      	nop
 8005960:	200001f8 	.word	0x200001f8

08005964 <__sinit_lock_acquire>:
 8005964:	4801      	ldr	r0, [pc, #4]	; (800596c <__sinit_lock_acquire+0x8>)
 8005966:	f000 b8a7 	b.w	8005ab8 <__retarget_lock_acquire_recursive>
 800596a:	bf00      	nop
 800596c:	200001f3 	.word	0x200001f3

08005970 <__sinit_lock_release>:
 8005970:	4801      	ldr	r0, [pc, #4]	; (8005978 <__sinit_lock_release+0x8>)
 8005972:	f000 b8a2 	b.w	8005aba <__retarget_lock_release_recursive>
 8005976:	bf00      	nop
 8005978:	200001f3 	.word	0x200001f3

0800597c <__sinit>:
 800597c:	b510      	push	{r4, lr}
 800597e:	4604      	mov	r4, r0
 8005980:	f7ff fff0 	bl	8005964 <__sinit_lock_acquire>
 8005984:	69a3      	ldr	r3, [r4, #24]
 8005986:	b11b      	cbz	r3, 8005990 <__sinit+0x14>
 8005988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800598c:	f7ff bff0 	b.w	8005970 <__sinit_lock_release>
 8005990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005994:	6523      	str	r3, [r4, #80]	; 0x50
 8005996:	4b13      	ldr	r3, [pc, #76]	; (80059e4 <__sinit+0x68>)
 8005998:	4a13      	ldr	r2, [pc, #76]	; (80059e8 <__sinit+0x6c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	62a2      	str	r2, [r4, #40]	; 0x28
 800599e:	42a3      	cmp	r3, r4
 80059a0:	bf04      	itt	eq
 80059a2:	2301      	moveq	r3, #1
 80059a4:	61a3      	streq	r3, [r4, #24]
 80059a6:	4620      	mov	r0, r4
 80059a8:	f000 f820 	bl	80059ec <__sfp>
 80059ac:	6060      	str	r0, [r4, #4]
 80059ae:	4620      	mov	r0, r4
 80059b0:	f000 f81c 	bl	80059ec <__sfp>
 80059b4:	60a0      	str	r0, [r4, #8]
 80059b6:	4620      	mov	r0, r4
 80059b8:	f000 f818 	bl	80059ec <__sfp>
 80059bc:	2200      	movs	r2, #0
 80059be:	60e0      	str	r0, [r4, #12]
 80059c0:	2104      	movs	r1, #4
 80059c2:	6860      	ldr	r0, [r4, #4]
 80059c4:	f7ff ff82 	bl	80058cc <std>
 80059c8:	68a0      	ldr	r0, [r4, #8]
 80059ca:	2201      	movs	r2, #1
 80059cc:	2109      	movs	r1, #9
 80059ce:	f7ff ff7d 	bl	80058cc <std>
 80059d2:	68e0      	ldr	r0, [r4, #12]
 80059d4:	2202      	movs	r2, #2
 80059d6:	2112      	movs	r1, #18
 80059d8:	f7ff ff78 	bl	80058cc <std>
 80059dc:	2301      	movs	r3, #1
 80059de:	61a3      	str	r3, [r4, #24]
 80059e0:	e7d2      	b.n	8005988 <__sinit+0xc>
 80059e2:	bf00      	nop
 80059e4:	08005f04 	.word	0x08005f04
 80059e8:	08005915 	.word	0x08005915

080059ec <__sfp>:
 80059ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ee:	4607      	mov	r7, r0
 80059f0:	f7ff ffac 	bl	800594c <__sfp_lock_acquire>
 80059f4:	4b1e      	ldr	r3, [pc, #120]	; (8005a70 <__sfp+0x84>)
 80059f6:	681e      	ldr	r6, [r3, #0]
 80059f8:	69b3      	ldr	r3, [r6, #24]
 80059fa:	b913      	cbnz	r3, 8005a02 <__sfp+0x16>
 80059fc:	4630      	mov	r0, r6
 80059fe:	f7ff ffbd 	bl	800597c <__sinit>
 8005a02:	3648      	adds	r6, #72	; 0x48
 8005a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	d503      	bpl.n	8005a14 <__sfp+0x28>
 8005a0c:	6833      	ldr	r3, [r6, #0]
 8005a0e:	b30b      	cbz	r3, 8005a54 <__sfp+0x68>
 8005a10:	6836      	ldr	r6, [r6, #0]
 8005a12:	e7f7      	b.n	8005a04 <__sfp+0x18>
 8005a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a18:	b9d5      	cbnz	r5, 8005a50 <__sfp+0x64>
 8005a1a:	4b16      	ldr	r3, [pc, #88]	; (8005a74 <__sfp+0x88>)
 8005a1c:	60e3      	str	r3, [r4, #12]
 8005a1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a22:	6665      	str	r5, [r4, #100]	; 0x64
 8005a24:	f000 f847 	bl	8005ab6 <__retarget_lock_init_recursive>
 8005a28:	f7ff ff96 	bl	8005958 <__sfp_lock_release>
 8005a2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a34:	6025      	str	r5, [r4, #0]
 8005a36:	61a5      	str	r5, [r4, #24]
 8005a38:	2208      	movs	r2, #8
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a40:	f7fe ff8e 	bl	8004960 <memset>
 8005a44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a50:	3468      	adds	r4, #104	; 0x68
 8005a52:	e7d9      	b.n	8005a08 <__sfp+0x1c>
 8005a54:	2104      	movs	r1, #4
 8005a56:	4638      	mov	r0, r7
 8005a58:	f7ff ff62 	bl	8005920 <__sfmoreglue>
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	6030      	str	r0, [r6, #0]
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d1d5      	bne.n	8005a10 <__sfp+0x24>
 8005a64:	f7ff ff78 	bl	8005958 <__sfp_lock_release>
 8005a68:	230c      	movs	r3, #12
 8005a6a:	603b      	str	r3, [r7, #0]
 8005a6c:	e7ee      	b.n	8005a4c <__sfp+0x60>
 8005a6e:	bf00      	nop
 8005a70:	08005f04 	.word	0x08005f04
 8005a74:	ffff0001 	.word	0xffff0001

08005a78 <_fwalk_reent>:
 8005a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	4688      	mov	r8, r1
 8005a80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a84:	2700      	movs	r7, #0
 8005a86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a8a:	f1b9 0901 	subs.w	r9, r9, #1
 8005a8e:	d505      	bpl.n	8005a9c <_fwalk_reent+0x24>
 8005a90:	6824      	ldr	r4, [r4, #0]
 8005a92:	2c00      	cmp	r4, #0
 8005a94:	d1f7      	bne.n	8005a86 <_fwalk_reent+0xe>
 8005a96:	4638      	mov	r0, r7
 8005a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a9c:	89ab      	ldrh	r3, [r5, #12]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d907      	bls.n	8005ab2 <_fwalk_reent+0x3a>
 8005aa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	d003      	beq.n	8005ab2 <_fwalk_reent+0x3a>
 8005aaa:	4629      	mov	r1, r5
 8005aac:	4630      	mov	r0, r6
 8005aae:	47c0      	blx	r8
 8005ab0:	4307      	orrs	r7, r0
 8005ab2:	3568      	adds	r5, #104	; 0x68
 8005ab4:	e7e9      	b.n	8005a8a <_fwalk_reent+0x12>

08005ab6 <__retarget_lock_init_recursive>:
 8005ab6:	4770      	bx	lr

08005ab8 <__retarget_lock_acquire_recursive>:
 8005ab8:	4770      	bx	lr

08005aba <__retarget_lock_release_recursive>:
 8005aba:	4770      	bx	lr

08005abc <__swhatbuf_r>:
 8005abc:	b570      	push	{r4, r5, r6, lr}
 8005abe:	460e      	mov	r6, r1
 8005ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac4:	2900      	cmp	r1, #0
 8005ac6:	b096      	sub	sp, #88	; 0x58
 8005ac8:	4614      	mov	r4, r2
 8005aca:	461d      	mov	r5, r3
 8005acc:	da07      	bge.n	8005ade <__swhatbuf_r+0x22>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	602b      	str	r3, [r5, #0]
 8005ad2:	89b3      	ldrh	r3, [r6, #12]
 8005ad4:	061a      	lsls	r2, r3, #24
 8005ad6:	d410      	bmi.n	8005afa <__swhatbuf_r+0x3e>
 8005ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005adc:	e00e      	b.n	8005afc <__swhatbuf_r+0x40>
 8005ade:	466a      	mov	r2, sp
 8005ae0:	f000 f946 	bl	8005d70 <_fstat_r>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	dbf2      	blt.n	8005ace <__swhatbuf_r+0x12>
 8005ae8:	9a01      	ldr	r2, [sp, #4]
 8005aea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005aee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005af2:	425a      	negs	r2, r3
 8005af4:	415a      	adcs	r2, r3
 8005af6:	602a      	str	r2, [r5, #0]
 8005af8:	e7ee      	b.n	8005ad8 <__swhatbuf_r+0x1c>
 8005afa:	2340      	movs	r3, #64	; 0x40
 8005afc:	2000      	movs	r0, #0
 8005afe:	6023      	str	r3, [r4, #0]
 8005b00:	b016      	add	sp, #88	; 0x58
 8005b02:	bd70      	pop	{r4, r5, r6, pc}

08005b04 <__smakebuf_r>:
 8005b04:	898b      	ldrh	r3, [r1, #12]
 8005b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b08:	079d      	lsls	r5, r3, #30
 8005b0a:	4606      	mov	r6, r0
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	d507      	bpl.n	8005b20 <__smakebuf_r+0x1c>
 8005b10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b14:	6023      	str	r3, [r4, #0]
 8005b16:	6123      	str	r3, [r4, #16]
 8005b18:	2301      	movs	r3, #1
 8005b1a:	6163      	str	r3, [r4, #20]
 8005b1c:	b002      	add	sp, #8
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	ab01      	add	r3, sp, #4
 8005b22:	466a      	mov	r2, sp
 8005b24:	f7ff ffca 	bl	8005abc <__swhatbuf_r>
 8005b28:	9900      	ldr	r1, [sp, #0]
 8005b2a:	4605      	mov	r5, r0
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	f7ff f88f 	bl	8004c50 <_malloc_r>
 8005b32:	b948      	cbnz	r0, 8005b48 <__smakebuf_r+0x44>
 8005b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b38:	059a      	lsls	r2, r3, #22
 8005b3a:	d4ef      	bmi.n	8005b1c <__smakebuf_r+0x18>
 8005b3c:	f023 0303 	bic.w	r3, r3, #3
 8005b40:	f043 0302 	orr.w	r3, r3, #2
 8005b44:	81a3      	strh	r3, [r4, #12]
 8005b46:	e7e3      	b.n	8005b10 <__smakebuf_r+0xc>
 8005b48:	4b0d      	ldr	r3, [pc, #52]	; (8005b80 <__smakebuf_r+0x7c>)
 8005b4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b4c:	89a3      	ldrh	r3, [r4, #12]
 8005b4e:	6020      	str	r0, [r4, #0]
 8005b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b54:	81a3      	strh	r3, [r4, #12]
 8005b56:	9b00      	ldr	r3, [sp, #0]
 8005b58:	6163      	str	r3, [r4, #20]
 8005b5a:	9b01      	ldr	r3, [sp, #4]
 8005b5c:	6120      	str	r0, [r4, #16]
 8005b5e:	b15b      	cbz	r3, 8005b78 <__smakebuf_r+0x74>
 8005b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b64:	4630      	mov	r0, r6
 8005b66:	f000 f915 	bl	8005d94 <_isatty_r>
 8005b6a:	b128      	cbz	r0, 8005b78 <__smakebuf_r+0x74>
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	f023 0303 	bic.w	r3, r3, #3
 8005b72:	f043 0301 	orr.w	r3, r3, #1
 8005b76:	81a3      	strh	r3, [r4, #12]
 8005b78:	89a0      	ldrh	r0, [r4, #12]
 8005b7a:	4305      	orrs	r5, r0
 8005b7c:	81a5      	strh	r5, [r4, #12]
 8005b7e:	e7cd      	b.n	8005b1c <__smakebuf_r+0x18>
 8005b80:	08005915 	.word	0x08005915

08005b84 <memmove>:
 8005b84:	4288      	cmp	r0, r1
 8005b86:	b510      	push	{r4, lr}
 8005b88:	eb01 0402 	add.w	r4, r1, r2
 8005b8c:	d902      	bls.n	8005b94 <memmove+0x10>
 8005b8e:	4284      	cmp	r4, r0
 8005b90:	4623      	mov	r3, r4
 8005b92:	d807      	bhi.n	8005ba4 <memmove+0x20>
 8005b94:	1e43      	subs	r3, r0, #1
 8005b96:	42a1      	cmp	r1, r4
 8005b98:	d008      	beq.n	8005bac <memmove+0x28>
 8005b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ba2:	e7f8      	b.n	8005b96 <memmove+0x12>
 8005ba4:	4402      	add	r2, r0
 8005ba6:	4601      	mov	r1, r0
 8005ba8:	428a      	cmp	r2, r1
 8005baa:	d100      	bne.n	8005bae <memmove+0x2a>
 8005bac:	bd10      	pop	{r4, pc}
 8005bae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bb6:	e7f7      	b.n	8005ba8 <memmove+0x24>

08005bb8 <__malloc_lock>:
 8005bb8:	4801      	ldr	r0, [pc, #4]	; (8005bc0 <__malloc_lock+0x8>)
 8005bba:	f7ff bf7d 	b.w	8005ab8 <__retarget_lock_acquire_recursive>
 8005bbe:	bf00      	nop
 8005bc0:	200001f4 	.word	0x200001f4

08005bc4 <__malloc_unlock>:
 8005bc4:	4801      	ldr	r0, [pc, #4]	; (8005bcc <__malloc_unlock+0x8>)
 8005bc6:	f7ff bf78 	b.w	8005aba <__retarget_lock_release_recursive>
 8005bca:	bf00      	nop
 8005bcc:	200001f4 	.word	0x200001f4

08005bd0 <_realloc_r>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	4607      	mov	r7, r0
 8005bd4:	4614      	mov	r4, r2
 8005bd6:	460e      	mov	r6, r1
 8005bd8:	b921      	cbnz	r1, 8005be4 <_realloc_r+0x14>
 8005bda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005bde:	4611      	mov	r1, r2
 8005be0:	f7ff b836 	b.w	8004c50 <_malloc_r>
 8005be4:	b922      	cbnz	r2, 8005bf0 <_realloc_r+0x20>
 8005be6:	f7fe ffe3 	bl	8004bb0 <_free_r>
 8005bea:	4625      	mov	r5, r4
 8005bec:	4628      	mov	r0, r5
 8005bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bf0:	f000 f8f2 	bl	8005dd8 <_malloc_usable_size_r>
 8005bf4:	42a0      	cmp	r0, r4
 8005bf6:	d20f      	bcs.n	8005c18 <_realloc_r+0x48>
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	f7ff f828 	bl	8004c50 <_malloc_r>
 8005c00:	4605      	mov	r5, r0
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d0f2      	beq.n	8005bec <_realloc_r+0x1c>
 8005c06:	4631      	mov	r1, r6
 8005c08:	4622      	mov	r2, r4
 8005c0a:	f7fe ffc3 	bl	8004b94 <memcpy>
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4638      	mov	r0, r7
 8005c12:	f7fe ffcd 	bl	8004bb0 <_free_r>
 8005c16:	e7e9      	b.n	8005bec <_realloc_r+0x1c>
 8005c18:	4635      	mov	r5, r6
 8005c1a:	e7e7      	b.n	8005bec <_realloc_r+0x1c>

08005c1c <_raise_r>:
 8005c1c:	291f      	cmp	r1, #31
 8005c1e:	b538      	push	{r3, r4, r5, lr}
 8005c20:	4604      	mov	r4, r0
 8005c22:	460d      	mov	r5, r1
 8005c24:	d904      	bls.n	8005c30 <_raise_r+0x14>
 8005c26:	2316      	movs	r3, #22
 8005c28:	6003      	str	r3, [r0, #0]
 8005c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c32:	b112      	cbz	r2, 8005c3a <_raise_r+0x1e>
 8005c34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c38:	b94b      	cbnz	r3, 8005c4e <_raise_r+0x32>
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f000 f830 	bl	8005ca0 <_getpid_r>
 8005c40:	462a      	mov	r2, r5
 8005c42:	4601      	mov	r1, r0
 8005c44:	4620      	mov	r0, r4
 8005c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c4a:	f000 b817 	b.w	8005c7c <_kill_r>
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d00a      	beq.n	8005c68 <_raise_r+0x4c>
 8005c52:	1c59      	adds	r1, r3, #1
 8005c54:	d103      	bne.n	8005c5e <_raise_r+0x42>
 8005c56:	2316      	movs	r3, #22
 8005c58:	6003      	str	r3, [r0, #0]
 8005c5a:	2001      	movs	r0, #1
 8005c5c:	e7e7      	b.n	8005c2e <_raise_r+0x12>
 8005c5e:	2400      	movs	r4, #0
 8005c60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c64:	4628      	mov	r0, r5
 8005c66:	4798      	blx	r3
 8005c68:	2000      	movs	r0, #0
 8005c6a:	e7e0      	b.n	8005c2e <_raise_r+0x12>

08005c6c <raise>:
 8005c6c:	4b02      	ldr	r3, [pc, #8]	; (8005c78 <raise+0xc>)
 8005c6e:	4601      	mov	r1, r0
 8005c70:	6818      	ldr	r0, [r3, #0]
 8005c72:	f7ff bfd3 	b.w	8005c1c <_raise_r>
 8005c76:	bf00      	nop
 8005c78:	2000000c 	.word	0x2000000c

08005c7c <_kill_r>:
 8005c7c:	b538      	push	{r3, r4, r5, lr}
 8005c7e:	4d07      	ldr	r5, [pc, #28]	; (8005c9c <_kill_r+0x20>)
 8005c80:	2300      	movs	r3, #0
 8005c82:	4604      	mov	r4, r0
 8005c84:	4608      	mov	r0, r1
 8005c86:	4611      	mov	r1, r2
 8005c88:	602b      	str	r3, [r5, #0]
 8005c8a:	f7fb f96b 	bl	8000f64 <_kill>
 8005c8e:	1c43      	adds	r3, r0, #1
 8005c90:	d102      	bne.n	8005c98 <_kill_r+0x1c>
 8005c92:	682b      	ldr	r3, [r5, #0]
 8005c94:	b103      	cbz	r3, 8005c98 <_kill_r+0x1c>
 8005c96:	6023      	str	r3, [r4, #0]
 8005c98:	bd38      	pop	{r3, r4, r5, pc}
 8005c9a:	bf00      	nop
 8005c9c:	200001fc 	.word	0x200001fc

08005ca0 <_getpid_r>:
 8005ca0:	f7fb b958 	b.w	8000f54 <_getpid>

08005ca4 <__sread>:
 8005ca4:	b510      	push	{r4, lr}
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cac:	f000 f89c 	bl	8005de8 <_read_r>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	bfab      	itete	ge
 8005cb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cb6:	89a3      	ldrhlt	r3, [r4, #12]
 8005cb8:	181b      	addge	r3, r3, r0
 8005cba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cbe:	bfac      	ite	ge
 8005cc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cc2:	81a3      	strhlt	r3, [r4, #12]
 8005cc4:	bd10      	pop	{r4, pc}

08005cc6 <__swrite>:
 8005cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cca:	461f      	mov	r7, r3
 8005ccc:	898b      	ldrh	r3, [r1, #12]
 8005cce:	05db      	lsls	r3, r3, #23
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	460c      	mov	r4, r1
 8005cd4:	4616      	mov	r6, r2
 8005cd6:	d505      	bpl.n	8005ce4 <__swrite+0x1e>
 8005cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cdc:	2302      	movs	r3, #2
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f000 f868 	bl	8005db4 <_lseek_r>
 8005ce4:	89a3      	ldrh	r3, [r4, #12]
 8005ce6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cee:	81a3      	strh	r3, [r4, #12]
 8005cf0:	4632      	mov	r2, r6
 8005cf2:	463b      	mov	r3, r7
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cfa:	f000 b817 	b.w	8005d2c <_write_r>

08005cfe <__sseek>:
 8005cfe:	b510      	push	{r4, lr}
 8005d00:	460c      	mov	r4, r1
 8005d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d06:	f000 f855 	bl	8005db4 <_lseek_r>
 8005d0a:	1c43      	adds	r3, r0, #1
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	bf15      	itete	ne
 8005d10:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d1a:	81a3      	strheq	r3, [r4, #12]
 8005d1c:	bf18      	it	ne
 8005d1e:	81a3      	strhne	r3, [r4, #12]
 8005d20:	bd10      	pop	{r4, pc}

08005d22 <__sclose>:
 8005d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d26:	f000 b813 	b.w	8005d50 <_close_r>
	...

08005d2c <_write_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4d07      	ldr	r5, [pc, #28]	; (8005d4c <_write_r+0x20>)
 8005d30:	4604      	mov	r4, r0
 8005d32:	4608      	mov	r0, r1
 8005d34:	4611      	mov	r1, r2
 8005d36:	2200      	movs	r2, #0
 8005d38:	602a      	str	r2, [r5, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f7fb f949 	bl	8000fd2 <_write>
 8005d40:	1c43      	adds	r3, r0, #1
 8005d42:	d102      	bne.n	8005d4a <_write_r+0x1e>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	b103      	cbz	r3, 8005d4a <_write_r+0x1e>
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	200001fc 	.word	0x200001fc

08005d50 <_close_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4d06      	ldr	r5, [pc, #24]	; (8005d6c <_close_r+0x1c>)
 8005d54:	2300      	movs	r3, #0
 8005d56:	4604      	mov	r4, r0
 8005d58:	4608      	mov	r0, r1
 8005d5a:	602b      	str	r3, [r5, #0]
 8005d5c:	f7fb f955 	bl	800100a <_close>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d102      	bne.n	8005d6a <_close_r+0x1a>
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	b103      	cbz	r3, 8005d6a <_close_r+0x1a>
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	200001fc 	.word	0x200001fc

08005d70 <_fstat_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4d07      	ldr	r5, [pc, #28]	; (8005d90 <_fstat_r+0x20>)
 8005d74:	2300      	movs	r3, #0
 8005d76:	4604      	mov	r4, r0
 8005d78:	4608      	mov	r0, r1
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	602b      	str	r3, [r5, #0]
 8005d7e:	f7fb f950 	bl	8001022 <_fstat>
 8005d82:	1c43      	adds	r3, r0, #1
 8005d84:	d102      	bne.n	8005d8c <_fstat_r+0x1c>
 8005d86:	682b      	ldr	r3, [r5, #0]
 8005d88:	b103      	cbz	r3, 8005d8c <_fstat_r+0x1c>
 8005d8a:	6023      	str	r3, [r4, #0]
 8005d8c:	bd38      	pop	{r3, r4, r5, pc}
 8005d8e:	bf00      	nop
 8005d90:	200001fc 	.word	0x200001fc

08005d94 <_isatty_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4d06      	ldr	r5, [pc, #24]	; (8005db0 <_isatty_r+0x1c>)
 8005d98:	2300      	movs	r3, #0
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	4608      	mov	r0, r1
 8005d9e:	602b      	str	r3, [r5, #0]
 8005da0:	f7fb f94f 	bl	8001042 <_isatty>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	d102      	bne.n	8005dae <_isatty_r+0x1a>
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	b103      	cbz	r3, 8005dae <_isatty_r+0x1a>
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	bd38      	pop	{r3, r4, r5, pc}
 8005db0:	200001fc 	.word	0x200001fc

08005db4 <_lseek_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4d07      	ldr	r5, [pc, #28]	; (8005dd4 <_lseek_r+0x20>)
 8005db8:	4604      	mov	r4, r0
 8005dba:	4608      	mov	r0, r1
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	602a      	str	r2, [r5, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f7fb f948 	bl	8001058 <_lseek>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d102      	bne.n	8005dd2 <_lseek_r+0x1e>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	b103      	cbz	r3, 8005dd2 <_lseek_r+0x1e>
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	200001fc 	.word	0x200001fc

08005dd8 <_malloc_usable_size_r>:
 8005dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ddc:	1f18      	subs	r0, r3, #4
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	bfbc      	itt	lt
 8005de2:	580b      	ldrlt	r3, [r1, r0]
 8005de4:	18c0      	addlt	r0, r0, r3
 8005de6:	4770      	bx	lr

08005de8 <_read_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4d07      	ldr	r5, [pc, #28]	; (8005e08 <_read_r+0x20>)
 8005dec:	4604      	mov	r4, r0
 8005dee:	4608      	mov	r0, r1
 8005df0:	4611      	mov	r1, r2
 8005df2:	2200      	movs	r2, #0
 8005df4:	602a      	str	r2, [r5, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	f7fb f8ce 	bl	8000f98 <_read>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d102      	bne.n	8005e06 <_read_r+0x1e>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	b103      	cbz	r3, 8005e06 <_read_r+0x1e>
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	bd38      	pop	{r3, r4, r5, pc}
 8005e08:	200001fc 	.word	0x200001fc

08005e0c <_init>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	bf00      	nop
 8005e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e12:	bc08      	pop	{r3}
 8005e14:	469e      	mov	lr, r3
 8005e16:	4770      	bx	lr

08005e18 <_fini>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	bf00      	nop
 8005e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1e:	bc08      	pop	{r3}
 8005e20:	469e      	mov	lr, r3
 8005e22:	4770      	bx	lr
