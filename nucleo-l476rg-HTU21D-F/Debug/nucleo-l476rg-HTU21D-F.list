
nucleo-l476rg-HTU21D-F.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004228  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080043b0  080043b0  000143b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004410  08004410  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004410  08004410  00014410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004418  08004418  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004418  08004418  00014418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800441c  0800441c  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  0800442c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  0800442c  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001166d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001efd  00000000  00000000  000316a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  000335a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  00034170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000266db  00000000  00000000  00034c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f315  00000000  00000000  0005b34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eac6e  00000000  00000000  0006a660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001552ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f0  00000000  00000000  00155324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004398 	.word	0x08004398

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004398 	.word	0x08004398

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b96e 	b.w	8000b28 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	4604      	mov	r4, r0
 800086c:	468c      	mov	ip, r1
 800086e:	2b00      	cmp	r3, #0
 8000870:	f040 8083 	bne.w	800097a <__udivmoddi4+0x116>
 8000874:	428a      	cmp	r2, r1
 8000876:	4617      	mov	r7, r2
 8000878:	d947      	bls.n	800090a <__udivmoddi4+0xa6>
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	b142      	cbz	r2, 8000892 <__udivmoddi4+0x2e>
 8000880:	f1c2 0020 	rsb	r0, r2, #32
 8000884:	fa24 f000 	lsr.w	r0, r4, r0
 8000888:	4091      	lsls	r1, r2
 800088a:	4097      	lsls	r7, r2
 800088c:	ea40 0c01 	orr.w	ip, r0, r1
 8000890:	4094      	lsls	r4, r2
 8000892:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000896:	0c23      	lsrs	r3, r4, #16
 8000898:	fbbc f6f8 	udiv	r6, ip, r8
 800089c:	fa1f fe87 	uxth.w	lr, r7
 80008a0:	fb08 c116 	mls	r1, r8, r6, ip
 80008a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a8:	fb06 f10e 	mul.w	r1, r6, lr
 80008ac:	4299      	cmp	r1, r3
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x60>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008b6:	f080 8119 	bcs.w	8000aec <__udivmoddi4+0x288>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 8116 	bls.w	8000aec <__udivmoddi4+0x288>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008cc:	fb08 3310 	mls	r3, r8, r0, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d8:	45a6      	cmp	lr, r4
 80008da:	d909      	bls.n	80008f0 <__udivmoddi4+0x8c>
 80008dc:	193c      	adds	r4, r7, r4
 80008de:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e2:	f080 8105 	bcs.w	8000af0 <__udivmoddi4+0x28c>
 80008e6:	45a6      	cmp	lr, r4
 80008e8:	f240 8102 	bls.w	8000af0 <__udivmoddi4+0x28c>
 80008ec:	3802      	subs	r0, #2
 80008ee:	443c      	add	r4, r7
 80008f0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f4:	eba4 040e 	sub.w	r4, r4, lr
 80008f8:	2600      	movs	r6, #0
 80008fa:	b11d      	cbz	r5, 8000904 <__udivmoddi4+0xa0>
 80008fc:	40d4      	lsrs	r4, r2
 80008fe:	2300      	movs	r3, #0
 8000900:	e9c5 4300 	strd	r4, r3, [r5]
 8000904:	4631      	mov	r1, r6
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	b902      	cbnz	r2, 800090e <__udivmoddi4+0xaa>
 800090c:	deff      	udf	#255	; 0xff
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	2a00      	cmp	r2, #0
 8000914:	d150      	bne.n	80009b8 <__udivmoddi4+0x154>
 8000916:	1bcb      	subs	r3, r1, r7
 8000918:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800091c:	fa1f f887 	uxth.w	r8, r7
 8000920:	2601      	movs	r6, #1
 8000922:	fbb3 fcfe 	udiv	ip, r3, lr
 8000926:	0c21      	lsrs	r1, r4, #16
 8000928:	fb0e 331c 	mls	r3, lr, ip, r3
 800092c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000930:	fb08 f30c 	mul.w	r3, r8, ip
 8000934:	428b      	cmp	r3, r1
 8000936:	d907      	bls.n	8000948 <__udivmoddi4+0xe4>
 8000938:	1879      	adds	r1, r7, r1
 800093a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0xe2>
 8000940:	428b      	cmp	r3, r1
 8000942:	f200 80e9 	bhi.w	8000b18 <__udivmoddi4+0x2b4>
 8000946:	4684      	mov	ip, r0
 8000948:	1ac9      	subs	r1, r1, r3
 800094a:	b2a3      	uxth	r3, r4
 800094c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000950:	fb0e 1110 	mls	r1, lr, r0, r1
 8000954:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000958:	fb08 f800 	mul.w	r8, r8, r0
 800095c:	45a0      	cmp	r8, r4
 800095e:	d907      	bls.n	8000970 <__udivmoddi4+0x10c>
 8000960:	193c      	adds	r4, r7, r4
 8000962:	f100 33ff 	add.w	r3, r0, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x10a>
 8000968:	45a0      	cmp	r8, r4
 800096a:	f200 80d9 	bhi.w	8000b20 <__udivmoddi4+0x2bc>
 800096e:	4618      	mov	r0, r3
 8000970:	eba4 0408 	sub.w	r4, r4, r8
 8000974:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000978:	e7bf      	b.n	80008fa <__udivmoddi4+0x96>
 800097a:	428b      	cmp	r3, r1
 800097c:	d909      	bls.n	8000992 <__udivmoddi4+0x12e>
 800097e:	2d00      	cmp	r5, #0
 8000980:	f000 80b1 	beq.w	8000ae6 <__udivmoddi4+0x282>
 8000984:	2600      	movs	r6, #0
 8000986:	e9c5 0100 	strd	r0, r1, [r5]
 800098a:	4630      	mov	r0, r6
 800098c:	4631      	mov	r1, r6
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	fab3 f683 	clz	r6, r3
 8000996:	2e00      	cmp	r6, #0
 8000998:	d14a      	bne.n	8000a30 <__udivmoddi4+0x1cc>
 800099a:	428b      	cmp	r3, r1
 800099c:	d302      	bcc.n	80009a4 <__udivmoddi4+0x140>
 800099e:	4282      	cmp	r2, r0
 80009a0:	f200 80b8 	bhi.w	8000b14 <__udivmoddi4+0x2b0>
 80009a4:	1a84      	subs	r4, r0, r2
 80009a6:	eb61 0103 	sbc.w	r1, r1, r3
 80009aa:	2001      	movs	r0, #1
 80009ac:	468c      	mov	ip, r1
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d0a8      	beq.n	8000904 <__udivmoddi4+0xa0>
 80009b2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0xa0>
 80009b8:	f1c2 0320 	rsb	r3, r2, #32
 80009bc:	fa20 f603 	lsr.w	r6, r0, r3
 80009c0:	4097      	lsls	r7, r2
 80009c2:	fa01 f002 	lsl.w	r0, r1, r2
 80009c6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ca:	40d9      	lsrs	r1, r3
 80009cc:	4330      	orrs	r0, r6
 80009ce:	0c03      	lsrs	r3, r0, #16
 80009d0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009e0:	fb06 f108 	mul.w	r1, r6, r8
 80009e4:	4299      	cmp	r1, r3
 80009e6:	fa04 f402 	lsl.w	r4, r4, r2
 80009ea:	d909      	bls.n	8000a00 <__udivmoddi4+0x19c>
 80009ec:	18fb      	adds	r3, r7, r3
 80009ee:	f106 3cff 	add.w	ip, r6, #4294967295
 80009f2:	f080 808d 	bcs.w	8000b10 <__udivmoddi4+0x2ac>
 80009f6:	4299      	cmp	r1, r3
 80009f8:	f240 808a 	bls.w	8000b10 <__udivmoddi4+0x2ac>
 80009fc:	3e02      	subs	r6, #2
 80009fe:	443b      	add	r3, r7
 8000a00:	1a5b      	subs	r3, r3, r1
 8000a02:	b281      	uxth	r1, r0
 8000a04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a10:	fb00 f308 	mul.w	r3, r0, r8
 8000a14:	428b      	cmp	r3, r1
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x1c4>
 8000a18:	1879      	adds	r1, r7, r1
 8000a1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a1e:	d273      	bcs.n	8000b08 <__udivmoddi4+0x2a4>
 8000a20:	428b      	cmp	r3, r1
 8000a22:	d971      	bls.n	8000b08 <__udivmoddi4+0x2a4>
 8000a24:	3802      	subs	r0, #2
 8000a26:	4439      	add	r1, r7
 8000a28:	1acb      	subs	r3, r1, r3
 8000a2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a2e:	e778      	b.n	8000922 <__udivmoddi4+0xbe>
 8000a30:	f1c6 0c20 	rsb	ip, r6, #32
 8000a34:	fa03 f406 	lsl.w	r4, r3, r6
 8000a38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a3c:	431c      	orrs	r4, r3
 8000a3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a42:	fa01 f306 	lsl.w	r3, r1, r6
 8000a46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a4e:	431f      	orrs	r7, r3
 8000a50:	0c3b      	lsrs	r3, r7, #16
 8000a52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a56:	fa1f f884 	uxth.w	r8, r4
 8000a5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a62:	fb09 fa08 	mul.w	sl, r9, r8
 8000a66:	458a      	cmp	sl, r1
 8000a68:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x220>
 8000a72:	1861      	adds	r1, r4, r1
 8000a74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a78:	d248      	bcs.n	8000b0c <__udivmoddi4+0x2a8>
 8000a7a:	458a      	cmp	sl, r1
 8000a7c:	d946      	bls.n	8000b0c <__udivmoddi4+0x2a8>
 8000a7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a82:	4421      	add	r1, r4
 8000a84:	eba1 010a 	sub.w	r1, r1, sl
 8000a88:	b2bf      	uxth	r7, r7
 8000a8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a96:	fb00 f808 	mul.w	r8, r0, r8
 8000a9a:	45b8      	cmp	r8, r7
 8000a9c:	d907      	bls.n	8000aae <__udivmoddi4+0x24a>
 8000a9e:	19e7      	adds	r7, r4, r7
 8000aa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aa4:	d22e      	bcs.n	8000b04 <__udivmoddi4+0x2a0>
 8000aa6:	45b8      	cmp	r8, r7
 8000aa8:	d92c      	bls.n	8000b04 <__udivmoddi4+0x2a0>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4427      	add	r7, r4
 8000aae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ab2:	eba7 0708 	sub.w	r7, r7, r8
 8000ab6:	fba0 8902 	umull	r8, r9, r0, r2
 8000aba:	454f      	cmp	r7, r9
 8000abc:	46c6      	mov	lr, r8
 8000abe:	4649      	mov	r1, r9
 8000ac0:	d31a      	bcc.n	8000af8 <__udivmoddi4+0x294>
 8000ac2:	d017      	beq.n	8000af4 <__udivmoddi4+0x290>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x27a>
 8000ac6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aca:	eb67 0701 	sbc.w	r7, r7, r1
 8000ace:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ad2:	40f2      	lsrs	r2, r6
 8000ad4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ad8:	40f7      	lsrs	r7, r6
 8000ada:	e9c5 2700 	strd	r2, r7, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	462e      	mov	r6, r5
 8000ae8:	4628      	mov	r0, r5
 8000aea:	e70b      	b.n	8000904 <__udivmoddi4+0xa0>
 8000aec:	4606      	mov	r6, r0
 8000aee:	e6e9      	b.n	80008c4 <__udivmoddi4+0x60>
 8000af0:	4618      	mov	r0, r3
 8000af2:	e6fd      	b.n	80008f0 <__udivmoddi4+0x8c>
 8000af4:	4543      	cmp	r3, r8
 8000af6:	d2e5      	bcs.n	8000ac4 <__udivmoddi4+0x260>
 8000af8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000afc:	eb69 0104 	sbc.w	r1, r9, r4
 8000b00:	3801      	subs	r0, #1
 8000b02:	e7df      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b04:	4608      	mov	r0, r1
 8000b06:	e7d2      	b.n	8000aae <__udivmoddi4+0x24a>
 8000b08:	4660      	mov	r0, ip
 8000b0a:	e78d      	b.n	8000a28 <__udivmoddi4+0x1c4>
 8000b0c:	4681      	mov	r9, r0
 8000b0e:	e7b9      	b.n	8000a84 <__udivmoddi4+0x220>
 8000b10:	4666      	mov	r6, ip
 8000b12:	e775      	b.n	8000a00 <__udivmoddi4+0x19c>
 8000b14:	4630      	mov	r0, r6
 8000b16:	e74a      	b.n	80009ae <__udivmoddi4+0x14a>
 8000b18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b1c:	4439      	add	r1, r7
 8000b1e:	e713      	b.n	8000948 <__udivmoddi4+0xe4>
 8000b20:	3802      	subs	r0, #2
 8000b22:	443c      	add	r4, r7
 8000b24:	e724      	b.n	8000970 <__udivmoddi4+0x10c>
 8000b26:	bf00      	nop

08000b28 <__aeabi_idiv0>:
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	0000      	movs	r0, r0
	...

08000b30 <getTemp>:
static int16_t raw_humid_data;
static float temp_c;
static float temp_f;
static float humidity;

float getTemp() {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af02      	add	r7, sp, #8
	//Temperature

	  buf[0] = temperature_command;
 8000b36:	22e3      	movs	r2, #227	; 0xe3
 8000b38:	4b45      	ldr	r3, [pc, #276]	; (8000c50 <getTemp+0x120>)
 8000b3a:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, device_address, buf, 1, 50);
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	b299      	uxth	r1, r3
 8000b40:	2332      	movs	r3, #50	; 0x32
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2301      	movs	r3, #1
 8000b46:	4a42      	ldr	r2, [pc, #264]	; (8000c50 <getTemp+0x120>)
 8000b48:	4842      	ldr	r0, [pc, #264]	; (8000c54 <getTemp+0x124>)
 8000b4a:	f000 ff6b 	bl	8001a24 <HAL_I2C_Master_Transmit>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b41      	ldr	r3, [pc, #260]	; (8000c58 <getTemp+0x128>)
 8000b54:	701a      	strb	r2, [r3, #0]
	  if (ret != HAL_OK) {
 8000b56:	4b40      	ldr	r3, [pc, #256]	; (8000c58 <getTemp+0x128>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d008      	beq.n	8000b70 <getTemp+0x40>
		  strcpy((char*)buf, "Error Tx\r\n");
 8000b5e:	4b3c      	ldr	r3, [pc, #240]	; (8000c50 <getTemp+0x120>)
 8000b60:	4a3e      	ldr	r2, [pc, #248]	; (8000c5c <getTemp+0x12c>)
 8000b62:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b64:	c303      	stmia	r3!, {r0, r1}
 8000b66:	801a      	strh	r2, [r3, #0]
 8000b68:	3302      	adds	r3, #2
 8000b6a:	0c12      	lsrs	r2, r2, #16
 8000b6c:	701a      	strb	r2, [r3, #0]
 8000b6e:	e05c      	b.n	8000c2a <getTemp+0xfa>
	  } else {
		  ret = HAL_I2C_Master_Receive(&hi2c1, device_address, buf, 2, 50);
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	b299      	uxth	r1, r3
 8000b74:	2332      	movs	r3, #50	; 0x32
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2302      	movs	r3, #2
 8000b7a:	4a35      	ldr	r2, [pc, #212]	; (8000c50 <getTemp+0x120>)
 8000b7c:	4835      	ldr	r0, [pc, #212]	; (8000c54 <getTemp+0x124>)
 8000b7e:	f001 f845 	bl	8001c0c <HAL_I2C_Master_Receive>
 8000b82:	4603      	mov	r3, r0
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b34      	ldr	r3, [pc, #208]	; (8000c58 <getTemp+0x128>)
 8000b88:	701a      	strb	r2, [r3, #0]
		  if (ret != HAL_OK) {
 8000b8a:	4b33      	ldr	r3, [pc, #204]	; (8000c58 <getTemp+0x128>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d008      	beq.n	8000ba4 <getTemp+0x74>
			  strcpy((char*)buf, "Error Rx\r\n");
 8000b92:	4b2f      	ldr	r3, [pc, #188]	; (8000c50 <getTemp+0x120>)
 8000b94:	4a32      	ldr	r2, [pc, #200]	; (8000c60 <getTemp+0x130>)
 8000b96:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b98:	c303      	stmia	r3!, {r0, r1}
 8000b9a:	801a      	strh	r2, [r3, #0]
 8000b9c:	3302      	adds	r3, #2
 8000b9e:	0c12      	lsrs	r2, r2, #16
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	e042      	b.n	8000c2a <getTemp+0xfa>
		  } else{
			  //combine the bytes to construct our 14-bit or 12 bit or 8 bit value
			  raw_temp_data = ((int16_t)buf[0] << 8) | buf[1] >> 0;
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <getTemp+0x120>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <getTemp+0x120>)
 8000bae:	785b      	ldrb	r3, [r3, #1]
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	b21a      	sxth	r2, r3
 8000bb6:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <getTemp+0x134>)
 8000bb8:	801a      	strh	r2, [r3, #0]

			  //conversions
			  temp_c = -46.85 + 175.72*((float)raw_temp_data / (65536));
 8000bba:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <getTemp+0x134>)
 8000bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc0:	ee07 3a90 	vmov	s15, r3
 8000bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bc8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000c68 <getTemp+0x138>
 8000bcc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000bd0:	ee16 0a90 	vmov	r0, s13
 8000bd4:	f7ff fd86 	bl	80006e4 <__aeabi_f2d>
 8000bd8:	a319      	add	r3, pc, #100	; (adr r3, 8000c40 <getTemp+0x110>)
 8000bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bde:	f7ff faf3 	bl	80001c8 <__aeabi_dmul>
 8000be2:	4602      	mov	r2, r0
 8000be4:	460b      	mov	r3, r1
 8000be6:	4610      	mov	r0, r2
 8000be8:	4619      	mov	r1, r3
 8000bea:	a317      	add	r3, pc, #92	; (adr r3, 8000c48 <getTemp+0x118>)
 8000bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf0:	f7ff fc18 	bl	8000424 <__aeabi_dsub>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f7ff fdca 	bl	8000794 <__aeabi_d2f>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4a1a      	ldr	r2, [pc, #104]	; (8000c6c <getTemp+0x13c>)
 8000c04:	6013      	str	r3, [r2, #0]
			  temp_f = (temp_c * 9 / 5 ) + 32;
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <getTemp+0x13c>)
 8000c08:	edd3 7a00 	vldr	s15, [r3]
 8000c0c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000c10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c14:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000c18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c1c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000c70 <getTemp+0x140>
 8000c20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <getTemp+0x144>)
 8000c26:	edc3 7a00 	vstr	s15, [r3]
		  }
	  }
	  return temp_f;
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <getTemp+0x144>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	ee07 3a90 	vmov	s15, r3
}
 8000c32:	eeb0 0a67 	vmov.f32	s0, s15
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	f3af 8000 	nop.w
 8000c40:	3d70a3d7 	.word	0x3d70a3d7
 8000c44:	4065f70a 	.word	0x4065f70a
 8000c48:	cccccccd 	.word	0xcccccccd
 8000c4c:	40476ccc 	.word	0x40476ccc
 8000c50:	20000028 	.word	0x20000028
 8000c54:	20000044 	.word	0x20000044
 8000c58:	20000090 	.word	0x20000090
 8000c5c:	080043b0 	.word	0x080043b0
 8000c60:	080043bc 	.word	0x080043bc
 8000c64:	20000034 	.word	0x20000034
 8000c68:	47800000 	.word	0x47800000
 8000c6c:	20000038 	.word	0x20000038
 8000c70:	42000000 	.word	0x42000000
 8000c74:	2000003c 	.word	0x2000003c

08000c78 <getHumid>:

float getHumid() {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af02      	add	r7, sp, #8
	//humidity

    buf[0] = humidity_command;
 8000c7e:	22e5      	movs	r2, #229	; 0xe5
 8000c80:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <getHumid+0xc8>)
 8000c82:	701a      	strb	r2, [r3, #0]
    ret = HAL_I2C_Master_Transmit(&hi2c1, device_address, buf, 1, 50);
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	b299      	uxth	r1, r3
 8000c88:	2332      	movs	r3, #50	; 0x32
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	4a2c      	ldr	r2, [pc, #176]	; (8000d40 <getHumid+0xc8>)
 8000c90:	482c      	ldr	r0, [pc, #176]	; (8000d44 <getHumid+0xcc>)
 8000c92:	f000 fec7 	bl	8001a24 <HAL_I2C_Master_Transmit>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <getHumid+0xd0>)
 8000c9c:	701a      	strb	r2, [r3, #0]
    if (ret != HAL_OK) {
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <getHumid+0xd0>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d008      	beq.n	8000cb8 <getHumid+0x40>
      strcpy((char*)buf, "Error Tx\r\n");
 8000ca6:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <getHumid+0xc8>)
 8000ca8:	4a28      	ldr	r2, [pc, #160]	; (8000d4c <getHumid+0xd4>)
 8000caa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cac:	c303      	stmia	r3!, {r0, r1}
 8000cae:	801a      	strh	r2, [r3, #0]
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	0c12      	lsrs	r2, r2, #16
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	e03a      	b.n	8000d2e <getHumid+0xb6>
    } else {
      ret = HAL_I2C_Master_Receive(&hi2c1, device_address, buf, 2, 50);
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	b299      	uxth	r1, r3
 8000cbc:	2332      	movs	r3, #50	; 0x32
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	4a1f      	ldr	r2, [pc, #124]	; (8000d40 <getHumid+0xc8>)
 8000cc4:	481f      	ldr	r0, [pc, #124]	; (8000d44 <getHumid+0xcc>)
 8000cc6:	f000 ffa1 	bl	8001c0c <HAL_I2C_Master_Receive>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <getHumid+0xd0>)
 8000cd0:	701a      	strb	r2, [r3, #0]
      if (ret != HAL_OK) {
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <getHumid+0xd0>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d008      	beq.n	8000cec <getHumid+0x74>
        strcpy((char*)buf, "Error Rx\r\n");
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <getHumid+0xc8>)
 8000cdc:	4a1c      	ldr	r2, [pc, #112]	; (8000d50 <getHumid+0xd8>)
 8000cde:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ce0:	c303      	stmia	r3!, {r0, r1}
 8000ce2:	801a      	strh	r2, [r3, #0]
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	0c12      	lsrs	r2, r2, #16
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	e020      	b.n	8000d2e <getHumid+0xb6>
      } else{
        //combine the bytes to construct our 14-bit or 12 bit or 8 bit value
        raw_humid_data = ((int16_t)buf[0] << 8) | buf[1] >> 0;
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <getHumid+0xc8>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	021b      	lsls	r3, r3, #8
 8000cf2:	b21a      	sxth	r2, r3
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <getHumid+0xc8>)
 8000cf6:	785b      	ldrb	r3, [r3, #1]
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b21a      	sxth	r2, r3
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <getHumid+0xdc>)
 8000d00:	801a      	strh	r2, [r3, #0]

        //conversions
        humidity = -6 + 125*((float)raw_humid_data / (65536)); 
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <getHumid+0xdc>)
 8000d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d08:	ee07 3a90 	vmov	s15, r3
 8000d0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d10:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000d58 <getHumid+0xe0>
 8000d14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d18:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000d5c <getHumid+0xe4>
 8000d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d20:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000d24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d28:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <getHumid+0xe8>)
 8000d2a:	edc3 7a00 	vstr	s15, [r3]
      }
    }
    return humidity;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <getHumid+0xe8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	ee07 3a90 	vmov	s15, r3
}
 8000d36:	eeb0 0a67 	vmov.f32	s0, s15
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000028 	.word	0x20000028
 8000d44:	20000044 	.word	0x20000044
 8000d48:	20000090 	.word	0x20000090
 8000d4c:	080043b0 	.word	0x080043b0
 8000d50:	080043bc 	.word	0x080043bc
 8000d54:	20000036 	.word	0x20000036
 8000d58:	47800000 	.word	0x47800000
 8000d5c:	42fa0000 	.word	0x42fa0000
 8000d60:	20000040 	.word	0x20000040

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d68:	f000 fa84 	bl	8001274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6c:	f000 f92a 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d70:	f000 f9ea 	bl	8001148 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d74:	f000 f9b8 	bl	80010e8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d78:	f000 f976 	bl	8001068 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  getTemp();
 8000d7c:	f7ff fed8 	bl	8000b30 <getTemp>
	  getHumid();
 8000d80:	f7ff ff7a 	bl	8000c78 <getHumid>
	  HAL_Delay(500);
 8000d84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d88:	f000 faf0 	bl	800136c <HAL_Delay>
	  getTemp();
 8000d8c:	e7f6      	b.n	8000d7c <main+0x18>
	...

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_MspInit+0x44>)
 8000d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <HAL_MspInit+0x44>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6613      	str	r3, [r2, #96]	; 0x60
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_MspInit+0x44>)
 8000da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_MspInit+0x44>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_MspInit+0x44>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_MspInit+0x44>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0ac      	sub	sp, #176	; 0xb0
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2288      	movs	r2, #136	; 0x88
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 fac5 	bl	8004388 <memset>
  if(hi2c->Instance==I2C1)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a21      	ldr	r2, [pc, #132]	; (8000e88 <HAL_I2C_MspInit+0xb0>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d13b      	bne.n	8000e80 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e08:	2340      	movs	r3, #64	; 0x40
 8000e0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 f94f 	bl	80030b8 <HAL_RCCEx_PeriphCLKConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e20:	f000 f9f8 	bl	8001214 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <HAL_I2C_MspInit+0xb4>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e28:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <HAL_I2C_MspInit+0xb4>)
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <HAL_I2C_MspInit+0xb4>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e44:	2312      	movs	r3, #18
 8000e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e56:	2304      	movs	r3, #4
 8000e58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e60:	4619      	mov	r1, r3
 8000e62:	480b      	ldr	r0, [pc, #44]	; (8000e90 <HAL_I2C_MspInit+0xb8>)
 8000e64:	f000 fb8c 	bl	8001580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_I2C_MspInit+0xb4>)
 8000e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_I2C_MspInit+0xb4>)
 8000e6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e72:	6593      	str	r3, [r2, #88]	; 0x58
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <HAL_I2C_MspInit+0xb4>)
 8000e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e80:	bf00      	nop
 8000e82:	37b0      	adds	r7, #176	; 0xb0
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40005400 	.word	0x40005400
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	48000400 	.word	0x48000400

08000e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0ac      	sub	sp, #176	; 0xb0
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2288      	movs	r2, #136	; 0x88
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f003 fa67 	bl	8004388 <memset>
  if(huart->Instance==USART2)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a21      	ldr	r2, [pc, #132]	; (8000f44 <HAL_UART_MspInit+0xb0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d13b      	bne.n	8000f3c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f002 f8f1 	bl	80030b8 <HAL_RCCEx_PeriphCLKConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000edc:	f000 f99a 	bl	8001214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_UART_MspInit+0xb4>)
 8000ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee4:	4a18      	ldr	r2, [pc, #96]	; (8000f48 <HAL_UART_MspInit+0xb4>)
 8000ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eea:	6593      	str	r3, [r2, #88]	; 0x58
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <HAL_UART_MspInit+0xb4>)
 8000eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <HAL_UART_MspInit+0xb4>)
 8000efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efc:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <HAL_UART_MspInit+0xb4>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <HAL_UART_MspInit+0xb4>)
 8000f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f10:	230c      	movs	r3, #12
 8000f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f28:	2307      	movs	r3, #7
 8000f2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f38:	f000 fb22 	bl	8001580 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f3c:	bf00      	nop
 8000f3e:	37b0      	adds	r7, #176	; 0xb0
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40004400 	.word	0x40004400
 8000f48:	40021000 	.word	0x40021000

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <NMI_Handler+0x4>

08000f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <MemManage_Handler+0x4>

08000f5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f98:	f000 f9c8 	bl	800132c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b096      	sub	sp, #88	; 0x58
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2244      	movs	r2, #68	; 0x44
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 f9d8 	bl	8004388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fe6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fea:	f001 fa23 	bl	8002434 <HAL_PWREx_ControlVoltageScaling>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ff4:	f000 f90e 	bl	8001214 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001000:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001002:	2310      	movs	r3, #16
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001006:	2302      	movs	r3, #2
 8001008:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800100a:	2302      	movs	r3, #2
 800100c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800100e:	2301      	movs	r3, #1
 8001010:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001012:	230a      	movs	r3, #10
 8001014:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001016:	2307      	movs	r3, #7
 8001018:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800101a:	2302      	movs	r3, #2
 800101c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800101e:	2302      	movs	r3, #2
 8001020:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4618      	mov	r0, r3
 8001028:	f001 fa5a 	bl	80024e0 <HAL_RCC_OscConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001032:	f000 f8ef 	bl	8001214 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001036:	230f      	movs	r3, #15
 8001038:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103a:	2303      	movs	r3, #3
 800103c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800104a:	463b      	mov	r3, r7
 800104c:	2104      	movs	r1, #4
 800104e:	4618      	mov	r0, r3
 8001050:	f001 fe2c 	bl	8002cac <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800105a:	f000 f8db 	bl	8001214 <Error_Handler>
  }
}
 800105e:	bf00      	nop
 8001060:	3758      	adds	r7, #88	; 0x58
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <MX_I2C1_Init+0x74>)
 800106e:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <MX_I2C1_Init+0x78>)
 8001070:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_I2C1_Init+0x74>)
 8001074:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <MX_I2C1_Init+0x7c>)
 8001076:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <MX_I2C1_Init+0x74>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <MX_I2C1_Init+0x74>)
 8001080:	2201      	movs	r2, #1
 8001082:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <MX_I2C1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MX_I2C1_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_I2C1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_I2C1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a2:	480e      	ldr	r0, [pc, #56]	; (80010dc <MX_I2C1_Init+0x74>)
 80010a4:	f000 fc2e 	bl	8001904 <HAL_I2C_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ae:	f000 f8b1 	bl	8001214 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4809      	ldr	r0, [pc, #36]	; (80010dc <MX_I2C1_Init+0x74>)
 80010b6:	f001 f917 	bl	80022e8 <HAL_I2CEx_ConfigAnalogFilter>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010c0:	f000 f8a8 	bl	8001214 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010c4:	2100      	movs	r1, #0
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_I2C1_Init+0x74>)
 80010c8:	f001 f959 	bl	800237e <HAL_I2CEx_ConfigDigitalFilter>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010d2:	f000 f89f 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000044 	.word	0x20000044
 80010e0:	40005400 	.word	0x40005400
 80010e4:	10909cec 	.word	0x10909cec

080010e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_USART2_UART_Init+0x58>)
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <MX_USART2_UART_Init+0x5c>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_USART2_UART_Init+0x58>)
 80010f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_USART2_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_USART2_UART_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_USART2_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <MX_USART2_UART_Init+0x58>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <MX_USART2_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <MX_USART2_UART_Init+0x58>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <MX_USART2_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <MX_USART2_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_USART2_UART_Init+0x58>)
 800112c:	f002 fc80 	bl	8003a30 <HAL_UART_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001136:	f000 f86d 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000094 	.word	0x20000094
 8001144:	40004400 	.word	0x40004400

08001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	4b2b      	ldr	r3, [pc, #172]	; (800120c <MX_GPIO_Init+0xc4>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	4a2a      	ldr	r2, [pc, #168]	; (800120c <MX_GPIO_Init+0xc4>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116a:	4b28      	ldr	r3, [pc, #160]	; (800120c <MX_GPIO_Init+0xc4>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001176:	4b25      	ldr	r3, [pc, #148]	; (800120c <MX_GPIO_Init+0xc4>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	4a24      	ldr	r2, [pc, #144]	; (800120c <MX_GPIO_Init+0xc4>)
 800117c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <MX_GPIO_Init+0xc4>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <MX_GPIO_Init+0xc4>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	4a1e      	ldr	r2, [pc, #120]	; (800120c <MX_GPIO_Init+0xc4>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <MX_GPIO_Init+0xc4>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <MX_GPIO_Init+0xc4>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	4a18      	ldr	r2, [pc, #96]	; (800120c <MX_GPIO_Init+0xc4>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <MX_GPIO_Init+0xc4>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2120      	movs	r1, #32
 80011c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c6:	f000 fb85 	bl	80018d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <MX_GPIO_Init+0xc8>)
 80011e2:	f000 f9cd 	bl	8001580 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011e6:	2320      	movs	r3, #32
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001200:	f000 f9be 	bl	8001580 <HAL_GPIO_Init>

}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40021000 	.word	0x40021000
 8001210:	48000800 	.word	0x48000800

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	e7fe      	b.n	800121c <Error_Handler+0x8>
	...

08001220 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001258 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001224:	f7ff febc 	bl	8000fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001228:	480c      	ldr	r0, [pc, #48]	; (800125c <LoopForever+0x6>)
  ldr r1, =_edata
 800122a:	490d      	ldr	r1, [pc, #52]	; (8001260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800122c:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <LoopForever+0xe>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001240:	4c0a      	ldr	r4, [pc, #40]	; (800126c <LoopForever+0x16>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800124e:	f003 f877 	bl	8004340 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001252:	f7ff fd87 	bl	8000d64 <main>

08001256 <LoopForever>:

LoopForever:
    b LoopForever
 8001256:	e7fe      	b.n	8001256 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001258:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800125c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001260:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001264:	08004420 	.word	0x08004420
  ldr r2, =_sbss
 8001268:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800126c:	2000011c 	.word	0x2000011c

08001270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001270:	e7fe      	b.n	8001270 <ADC1_2_IRQHandler>
	...

08001274 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <HAL_Init+0x3c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <HAL_Init+0x3c>)
 8001284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001288:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128a:	2003      	movs	r0, #3
 800128c:	f000 f944 	bl	8001518 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001290:	2000      	movs	r0, #0
 8001292:	f000 f80f 	bl	80012b4 <HAL_InitTick>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	71fb      	strb	r3, [r7, #7]
 80012a0:	e001      	b.n	80012a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012a2:	f7ff fd75 	bl	8000d90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012a6:	79fb      	ldrb	r3, [r7, #7]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40022000 	.word	0x40022000

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <HAL_InitTick+0x6c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d023      	beq.n	8001310 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012c8:	4b16      	ldr	r3, [pc, #88]	; (8001324 <HAL_InitTick+0x70>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <HAL_InitTick+0x6c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f941 	bl	8001566 <HAL_SYSTICK_Config>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10f      	bne.n	800130a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	d809      	bhi.n	8001304 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f0:	2200      	movs	r2, #0
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f000 f919 	bl	800152e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012fc:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <HAL_InitTick+0x74>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e007      	b.n	8001314 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e004      	b.n	8001314 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	e001      	b.n	8001314 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001314:	7bfb      	ldrb	r3, [r7, #15]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000008 	.word	0x20000008
 8001324:	20000000 	.word	0x20000000
 8001328:	20000004 	.word	0x20000004

0800132c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x20>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_IncTick+0x24>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4413      	add	r3, r2
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <HAL_IncTick+0x24>)
 800133e:	6013      	str	r3, [r2, #0]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000008 	.word	0x20000008
 8001350:	20000118 	.word	0x20000118

08001354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return uwTick;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <HAL_GetTick+0x14>)
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000118 	.word	0x20000118

0800136c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff ffee 	bl	8001354 <HAL_GetTick>
 8001378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001384:	d005      	beq.n	8001392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_Delay+0x44>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001392:	bf00      	nop
 8001394:	f7ff ffde 	bl	8001354 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d8f7      	bhi.n	8001394 <HAL_Delay+0x28>
  {
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000008 	.word	0x20000008

080013b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
         );
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e4:	d301      	bcc.n	80014ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00f      	b.n	800150a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <SysTick_Config+0x40>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f2:	210f      	movs	r1, #15
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f7ff ff8e 	bl	8001418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <SysTick_Config+0x40>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001502:	4b04      	ldr	r3, [pc, #16]	; (8001514 <SysTick_Config+0x40>)
 8001504:	2207      	movs	r2, #7
 8001506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	e000e010 	.word	0xe000e010

08001518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ff47 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001540:	f7ff ff5c 	bl	80013fc <__NVIC_GetPriorityGrouping>
 8001544:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	6978      	ldr	r0, [r7, #20]
 800154c:	f7ff ff8e 	bl	800146c <NVIC_EncodePriority>
 8001550:	4602      	mov	r2, r0
 8001552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff5d 	bl	8001418 <__NVIC_SetPriority>
}
 800155e:	bf00      	nop
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffb0 	bl	80014d4 <SysTick_Config>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158e:	e17f      	b.n	8001890 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2101      	movs	r1, #1
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	4013      	ands	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8171 	beq.w	800188a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d005      	beq.n	80015c0 <HAL_GPIO_Init+0x40>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d130      	bne.n	8001622 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015f6:	2201      	movs	r2, #1
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	f003 0201 	and.w	r2, r3, #1
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	2b03      	cmp	r3, #3
 800162c:	d118      	bne.n	8001660 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001632:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001634:	2201      	movs	r2, #1
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	08db      	lsrs	r3, r3, #3
 800164a:	f003 0201 	and.w	r2, r3, #1
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b03      	cmp	r3, #3
 800166a:	d017      	beq.n	800169c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d123      	bne.n	80016f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	08da      	lsrs	r2, r3, #3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3208      	adds	r2, #8
 80016b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	220f      	movs	r2, #15
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	08da      	lsrs	r2, r3, #3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3208      	adds	r2, #8
 80016ea:	6939      	ldr	r1, [r7, #16]
 80016ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	2203      	movs	r2, #3
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0203 	and.w	r2, r3, #3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 80ac 	beq.w	800188a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001732:	4b5f      	ldr	r3, [pc, #380]	; (80018b0 <HAL_GPIO_Init+0x330>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001736:	4a5e      	ldr	r2, [pc, #376]	; (80018b0 <HAL_GPIO_Init+0x330>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6613      	str	r3, [r2, #96]	; 0x60
 800173e:	4b5c      	ldr	r3, [pc, #368]	; (80018b0 <HAL_GPIO_Init+0x330>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <HAL_GPIO_Init+0x334>)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001774:	d025      	beq.n	80017c2 <HAL_GPIO_Init+0x242>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4f      	ldr	r2, [pc, #316]	; (80018b8 <HAL_GPIO_Init+0x338>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d01f      	beq.n	80017be <HAL_GPIO_Init+0x23e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4e      	ldr	r2, [pc, #312]	; (80018bc <HAL_GPIO_Init+0x33c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d019      	beq.n	80017ba <HAL_GPIO_Init+0x23a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4d      	ldr	r2, [pc, #308]	; (80018c0 <HAL_GPIO_Init+0x340>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d013      	beq.n	80017b6 <HAL_GPIO_Init+0x236>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4c      	ldr	r2, [pc, #304]	; (80018c4 <HAL_GPIO_Init+0x344>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d00d      	beq.n	80017b2 <HAL_GPIO_Init+0x232>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4b      	ldr	r2, [pc, #300]	; (80018c8 <HAL_GPIO_Init+0x348>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d007      	beq.n	80017ae <HAL_GPIO_Init+0x22e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4a      	ldr	r2, [pc, #296]	; (80018cc <HAL_GPIO_Init+0x34c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d101      	bne.n	80017aa <HAL_GPIO_Init+0x22a>
 80017a6:	2306      	movs	r3, #6
 80017a8:	e00c      	b.n	80017c4 <HAL_GPIO_Init+0x244>
 80017aa:	2307      	movs	r3, #7
 80017ac:	e00a      	b.n	80017c4 <HAL_GPIO_Init+0x244>
 80017ae:	2305      	movs	r3, #5
 80017b0:	e008      	b.n	80017c4 <HAL_GPIO_Init+0x244>
 80017b2:	2304      	movs	r3, #4
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x244>
 80017b6:	2303      	movs	r3, #3
 80017b8:	e004      	b.n	80017c4 <HAL_GPIO_Init+0x244>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e002      	b.n	80017c4 <HAL_GPIO_Init+0x244>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_GPIO_Init+0x244>
 80017c2:	2300      	movs	r3, #0
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	f002 0203 	and.w	r2, r2, #3
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	4093      	lsls	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017d4:	4937      	ldr	r1, [pc, #220]	; (80018b4 <HAL_GPIO_Init+0x334>)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3302      	adds	r3, #2
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <HAL_GPIO_Init+0x350>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001806:	4a32      	ldr	r2, [pc, #200]	; (80018d0 <HAL_GPIO_Init+0x350>)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800180c:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <HAL_GPIO_Init+0x350>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001830:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <HAL_GPIO_Init+0x350>)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001836:	4b26      	ldr	r3, [pc, #152]	; (80018d0 <HAL_GPIO_Init+0x350>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800185a:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_GPIO_Init+0x350>)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <HAL_GPIO_Init+0x350>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001884:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <HAL_GPIO_Init+0x350>)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa22 f303 	lsr.w	r3, r2, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	f47f ae78 	bne.w	8001590 <HAL_GPIO_Init+0x10>
  }
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010000 	.word	0x40010000
 80018b8:	48000400 	.word	0x48000400
 80018bc:	48000800 	.word	0x48000800
 80018c0:	48000c00 	.word	0x48000c00
 80018c4:	48001000 	.word	0x48001000
 80018c8:	48001400 	.word	0x48001400
 80018cc:	48001800 	.word	0x48001800
 80018d0:	40010400 	.word	0x40010400

080018d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
 80018e0:	4613      	mov	r3, r2
 80018e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e4:	787b      	ldrb	r3, [r7, #1]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018f0:	e002      	b.n	80018f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018f2:	887a      	ldrh	r2, [r7, #2]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e081      	b.n	8001a1a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff fa54 	bl	8000dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2224      	movs	r2, #36	; 0x24
 8001934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001954:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001964:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d107      	bne.n	800197e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	e006      	b.n	800198c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800198a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d104      	bne.n	800199e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800199c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69d9      	ldr	r1, [r3, #28]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1a      	ldr	r2, [r3, #32]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2220      	movs	r2, #32
 8001a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	460b      	mov	r3, r1
 8001a32:	817b      	strh	r3, [r7, #10]
 8001a34:	4613      	mov	r3, r2
 8001a36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	f040 80da 	bne.w	8001bfa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_I2C_Master_Transmit+0x30>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e0d3      	b.n	8001bfc <HAL_I2C_Master_Transmit+0x1d8>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a5c:	f7ff fc7a 	bl	8001354 <HAL_GetTick>
 8001a60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	2319      	movs	r3, #25
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 f9e6 	bl	8001e40 <I2C_WaitOnFlagUntilTimeout>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e0be      	b.n	8001bfc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2221      	movs	r2, #33	; 0x21
 8001a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2210      	movs	r2, #16
 8001a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	893a      	ldrh	r2, [r7, #8]
 8001a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	2bff      	cmp	r3, #255	; 0xff
 8001aae:	d90e      	bls.n	8001ace <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	22ff      	movs	r2, #255	; 0xff
 8001ab4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	8979      	ldrh	r1, [r7, #10]
 8001abe:	4b51      	ldr	r3, [pc, #324]	; (8001c04 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 fbdc 	bl	8002284 <I2C_TransferConfig>
 8001acc:	e06c      	b.n	8001ba8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	8979      	ldrh	r1, [r7, #10]
 8001ae0:	4b48      	ldr	r3, [pc, #288]	; (8001c04 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 fbcb 	bl	8002284 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001aee:	e05b      	b.n	8001ba8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	6a39      	ldr	r1, [r7, #32]
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 f9e3 	bl	8001ec0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e07b      	b.n	8001bfc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d034      	beq.n	8001ba8 <HAL_I2C_Master_Transmit+0x184>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d130      	bne.n	8001ba8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2180      	movs	r1, #128	; 0x80
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 f975 	bl	8001e40 <I2C_WaitOnFlagUntilTimeout>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e04d      	b.n	8001bfc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	2bff      	cmp	r3, #255	; 0xff
 8001b68:	d90e      	bls.n	8001b88 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	22ff      	movs	r2, #255	; 0xff
 8001b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	8979      	ldrh	r1, [r7, #10]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 fb7f 	bl	8002284 <I2C_TransferConfig>
 8001b86:	e00f      	b.n	8001ba8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	8979      	ldrh	r1, [r7, #10]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fb6e 	bl	8002284 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d19e      	bne.n	8001af0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	6a39      	ldr	r1, [r7, #32]
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 f9c2 	bl	8001f40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e01a      	b.n	8001bfc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_I2C_Master_Transmit+0x1e4>)
 8001bda:	400b      	ands	r3, r1
 8001bdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2220      	movs	r2, #32
 8001be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001bfa:	2302      	movs	r3, #2
  }
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	80002000 	.word	0x80002000
 8001c08:	fe00e800 	.word	0xfe00e800

08001c0c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	461a      	mov	r2, r3
 8001c18:	460b      	mov	r3, r1
 8001c1a:	817b      	strh	r3, [r7, #10]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b20      	cmp	r3, #32
 8001c2a:	f040 80db 	bne.w	8001de4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_I2C_Master_Receive+0x30>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e0d4      	b.n	8001de6 <HAL_I2C_Master_Receive+0x1da>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c44:	f7ff fb86 	bl	8001354 <HAL_GetTick>
 8001c48:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2319      	movs	r3, #25
 8001c50:	2201      	movs	r2, #1
 8001c52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 f8f2 	bl	8001e40 <I2C_WaitOnFlagUntilTimeout>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0bf      	b.n	8001de6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2222      	movs	r2, #34	; 0x22
 8001c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2210      	movs	r2, #16
 8001c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	893a      	ldrh	r2, [r7, #8]
 8001c86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2bff      	cmp	r3, #255	; 0xff
 8001c96:	d90e      	bls.n	8001cb6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	22ff      	movs	r2, #255	; 0xff
 8001c9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	8979      	ldrh	r1, [r7, #10]
 8001ca6:	4b52      	ldr	r3, [pc, #328]	; (8001df0 <HAL_I2C_Master_Receive+0x1e4>)
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 fae8 	bl	8002284 <I2C_TransferConfig>
 8001cb4:	e06d      	b.n	8001d92 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	8979      	ldrh	r1, [r7, #10]
 8001cc8:	4b49      	ldr	r3, [pc, #292]	; (8001df0 <HAL_I2C_Master_Receive+0x1e4>)
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 fad7 	bl	8002284 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001cd6:	e05c      	b.n	8001d92 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	6a39      	ldr	r1, [r7, #32]
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f96b 	bl	8001fb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e07c      	b.n	8001de6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d034      	beq.n	8001d92 <HAL_I2C_Master_Receive+0x186>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d130      	bne.n	8001d92 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	2200      	movs	r2, #0
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f880 	bl	8001e40 <I2C_WaitOnFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e04d      	b.n	8001de6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	2bff      	cmp	r3, #255	; 0xff
 8001d52:	d90e      	bls.n	8001d72 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	22ff      	movs	r2, #255	; 0xff
 8001d58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	8979      	ldrh	r1, [r7, #10]
 8001d62:	2300      	movs	r3, #0
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 fa8a 	bl	8002284 <I2C_TransferConfig>
 8001d70:	e00f      	b.n	8001d92 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	8979      	ldrh	r1, [r7, #10]
 8001d84:	2300      	movs	r3, #0
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 fa79 	bl	8002284 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d19d      	bne.n	8001cd8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	6a39      	ldr	r1, [r7, #32]
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 f8cd 	bl	8001f40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e01a      	b.n	8001de6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2220      	movs	r2, #32
 8001db6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6859      	ldr	r1, [r3, #4]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_I2C_Master_Receive+0x1e8>)
 8001dc4:	400b      	ands	r3, r1
 8001dc6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	e000      	b.n	8001de6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001de4:	2302      	movs	r3, #2
  }
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	80002400 	.word	0x80002400
 8001df4:	fe00e800 	.word	0xfe00e800

08001df8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d103      	bne.n	8001e16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2200      	movs	r2, #0
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d007      	beq.n	8001e34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	619a      	str	r2, [r3, #24]
  }
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e50:	e022      	b.n	8001e98 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d01e      	beq.n	8001e98 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e5a:	f7ff fa7b 	bl	8001354 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d302      	bcc.n	8001e70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d113      	bne.n	8001e98 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	f043 0220 	orr.w	r2, r3, #32
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e00f      	b.n	8001eb8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d0cd      	beq.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ecc:	e02c      	b.n	8001f28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 f8ea 	bl	80020ac <I2C_IsErrorOccurred>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e02a      	b.n	8001f38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d01e      	beq.n	8001f28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eea:	f7ff fa33 	bl	8001354 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d302      	bcc.n	8001f00 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d113      	bne.n	8001f28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	f043 0220 	orr.w	r2, r3, #32
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e007      	b.n	8001f38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d1cb      	bne.n	8001ece <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f4c:	e028      	b.n	8001fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f8aa 	bl	80020ac <I2C_IsErrorOccurred>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e026      	b.n	8001fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f62:	f7ff f9f7 	bl	8001354 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d302      	bcc.n	8001f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d113      	bne.n	8001fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7c:	f043 0220 	orr.w	r2, r3, #32
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e007      	b.n	8001fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	d1cf      	bne.n	8001f4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fc4:	e064      	b.n	8002090 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 f86e 	bl	80020ac <I2C_IsErrorOccurred>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e062      	b.n	80020a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	d138      	bne.n	800205a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d105      	bne.n	8002002 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e04e      	b.n	80020a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b10      	cmp	r3, #16
 800200e:	d107      	bne.n	8002020 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2210      	movs	r2, #16
 8002016:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2204      	movs	r2, #4
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
 800201e:	e002      	b.n	8002026 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2220      	movs	r2, #32
 800202c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800203a:	400b      	ands	r3, r1
 800203c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e022      	b.n	80020a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205a:	f7ff f97b 	bl	8001354 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	429a      	cmp	r2, r3
 8002068:	d302      	bcc.n	8002070 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10f      	bne.n	8002090 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	f043 0220 	orr.w	r2, r3, #32
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e007      	b.n	80020a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b04      	cmp	r3, #4
 800209c:	d193      	bne.n	8001fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	fe00e800 	.word	0xfe00e800

080020ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d075      	beq.n	80021c4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2210      	movs	r2, #16
 80020de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020e0:	e056      	b.n	8002190 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d052      	beq.n	8002190 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020ea:	f7ff f933 	bl	8001354 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d302      	bcc.n	8002100 <I2C_IsErrorOccurred+0x54>
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d147      	bne.n	8002190 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002112:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800211e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002122:	d12e      	bne.n	8002182 <I2C_IsErrorOccurred+0xd6>
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800212a:	d02a      	beq.n	8002182 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	2b20      	cmp	r3, #32
 8002130:	d027      	beq.n	8002182 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002140:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002142:	f7ff f907 	bl	8001354 <HAL_GetTick>
 8002146:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002148:	e01b      	b.n	8002182 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800214a:	f7ff f903 	bl	8001354 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b19      	cmp	r3, #25
 8002156:	d914      	bls.n	8002182 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	f043 0220 	orr.w	r2, r3, #32
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2220      	movs	r2, #32
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b20      	cmp	r3, #32
 800218e:	d1dc      	bne.n	800214a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b20      	cmp	r3, #32
 800219c:	d003      	beq.n	80021a6 <I2C_IsErrorOccurred+0xfa>
 800219e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d09d      	beq.n	80020e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2220      	movs	r2, #32
 80021b4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00b      	beq.n	8002210 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	f043 0308 	orr.w	r3, r3, #8
 80021fe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002208:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800222a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002236:	2b00      	cmp	r3, #0
 8002238:	d01c      	beq.n	8002274 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f7ff fddc 	bl	8001df8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6859      	ldr	r1, [r3, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <I2C_IsErrorOccurred+0x1d4>)
 800224c:	400b      	ands	r3, r1
 800224e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	431a      	orrs	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002278:	4618      	mov	r0, r3
 800227a:	3728      	adds	r7, #40	; 0x28
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	fe00e800 	.word	0xfe00e800

08002284 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	460b      	mov	r3, r1
 8002290:	817b      	strh	r3, [r7, #10]
 8002292:	4613      	mov	r3, r2
 8002294:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002296:	897b      	ldrh	r3, [r7, #10]
 8002298:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800229c:	7a7b      	ldrb	r3, [r7, #9]
 800229e:	041b      	lsls	r3, r3, #16
 80022a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022a4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022b2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	0d5b      	lsrs	r3, r3, #21
 80022be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <I2C_TransferConfig+0x60>)
 80022c4:	430b      	orrs	r3, r1
 80022c6:	43db      	mvns	r3, r3
 80022c8:	ea02 0103 	and.w	r1, r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022d6:	bf00      	nop
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	03ff63ff 	.word	0x03ff63ff

080022e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b20      	cmp	r3, #32
 80022fc:	d138      	bne.n	8002370 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002308:	2302      	movs	r3, #2
 800230a:	e032      	b.n	8002372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2224      	movs	r2, #36	; 0x24
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800233a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6819      	ldr	r1, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	e000      	b.n	8002372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
  }
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b20      	cmp	r3, #32
 8002392:	d139      	bne.n	8002408 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800239e:	2302      	movs	r3, #2
 80023a0:	e033      	b.n	800240a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2224      	movs	r2, #36	; 0x24
 80023ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0201 	bic.w	r2, r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	e000      	b.n	800240a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002408:	2302      	movs	r3, #2
  }
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <HAL_PWREx_GetVoltageRange+0x18>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40007000 	.word	0x40007000

08002434 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002442:	d130      	bne.n	80024a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002444:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800244c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002450:	d038      	beq.n	80024c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002452:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800245a:	4a1e      	ldr	r2, [pc, #120]	; (80024d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800245c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002460:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2232      	movs	r2, #50	; 0x32
 8002468:	fb02 f303 	mul.w	r3, r2, r3
 800246c:	4a1b      	ldr	r2, [pc, #108]	; (80024dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	0c9b      	lsrs	r3, r3, #18
 8002474:	3301      	adds	r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002478:	e002      	b.n	8002480 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3b01      	subs	r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002480:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800248c:	d102      	bne.n	8002494 <HAL_PWREx_ControlVoltageScaling+0x60>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f2      	bne.n	800247a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a0:	d110      	bne.n	80024c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e00f      	b.n	80024c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b2:	d007      	beq.n	80024c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024bc:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40007000 	.word	0x40007000
 80024d8:	20000000 	.word	0x20000000
 80024dc:	431bde83 	.word	0x431bde83

080024e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e3d4      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f2:	4ba1      	ldr	r3, [pc, #644]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024fc:	4b9e      	ldr	r3, [pc, #632]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 80e4 	beq.w	80026dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <HAL_RCC_OscConfig+0x4a>
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	2b0c      	cmp	r3, #12
 800251e:	f040 808b 	bne.w	8002638 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b01      	cmp	r3, #1
 8002526:	f040 8087 	bne.w	8002638 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800252a:	4b93      	ldr	r3, [pc, #588]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_RCC_OscConfig+0x62>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e3ac      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1a      	ldr	r2, [r3, #32]
 8002546:	4b8c      	ldr	r3, [pc, #560]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d004      	beq.n	800255c <HAL_RCC_OscConfig+0x7c>
 8002552:	4b89      	ldr	r3, [pc, #548]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800255a:	e005      	b.n	8002568 <HAL_RCC_OscConfig+0x88>
 800255c:	4b86      	ldr	r3, [pc, #536]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 800255e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002562:	091b      	lsrs	r3, r3, #4
 8002564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002568:	4293      	cmp	r3, r2
 800256a:	d223      	bcs.n	80025b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fd41 	bl	8002ff8 <RCC_SetFlashLatencyFromMSIRange>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e38d      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002580:	4b7d      	ldr	r3, [pc, #500]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a7c      	ldr	r2, [pc, #496]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002586:	f043 0308 	orr.w	r3, r3, #8
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	4b7a      	ldr	r3, [pc, #488]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4977      	ldr	r1, [pc, #476]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800259e:	4b76      	ldr	r3, [pc, #472]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	4972      	ldr	r1, [pc, #456]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
 80025b2:	e025      	b.n	8002600 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b4:	4b70      	ldr	r3, [pc, #448]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a6f      	ldr	r2, [pc, #444]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 80025ba:	f043 0308 	orr.w	r3, r3, #8
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4b6d      	ldr	r3, [pc, #436]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	496a      	ldr	r1, [pc, #424]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d2:	4b69      	ldr	r3, [pc, #420]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	4965      	ldr	r1, [pc, #404]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d109      	bne.n	8002600 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 fd01 	bl	8002ff8 <RCC_SetFlashLatencyFromMSIRange>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e34d      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002600:	f000 fc36 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 8002604:	4602      	mov	r2, r0
 8002606:	4b5c      	ldr	r3, [pc, #368]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	f003 030f 	and.w	r3, r3, #15
 8002610:	495a      	ldr	r1, [pc, #360]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002612:	5ccb      	ldrb	r3, [r1, r3]
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
 800261c:	4a58      	ldr	r2, [pc, #352]	; (8002780 <HAL_RCC_OscConfig+0x2a0>)
 800261e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002620:	4b58      	ldr	r3, [pc, #352]	; (8002784 <HAL_RCC_OscConfig+0x2a4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe fe45 	bl	80012b4 <HAL_InitTick>
 800262a:	4603      	mov	r3, r0
 800262c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d052      	beq.n	80026da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	e331      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d032      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002640:	4b4d      	ldr	r3, [pc, #308]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a4c      	ldr	r2, [pc, #304]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800264c:	f7fe fe82 	bl	8001354 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002654:	f7fe fe7e 	bl	8001354 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e31a      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002666:	4b44      	ldr	r3, [pc, #272]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002672:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a40      	ldr	r2, [pc, #256]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002678:	f043 0308 	orr.w	r3, r3, #8
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b3e      	ldr	r3, [pc, #248]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	493b      	ldr	r1, [pc, #236]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002690:	4b39      	ldr	r3, [pc, #228]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	4936      	ldr	r1, [pc, #216]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
 80026a4:	e01a      	b.n	80026dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026a6:	4b34      	ldr	r3, [pc, #208]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a33      	ldr	r2, [pc, #204]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026b2:	f7fe fe4f 	bl	8001354 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ba:	f7fe fe4b 	bl	8001354 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e2e7      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026cc:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f0      	bne.n	80026ba <HAL_RCC_OscConfig+0x1da>
 80026d8:	e000      	b.n	80026dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d074      	beq.n	80027d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d005      	beq.n	80026fa <HAL_RCC_OscConfig+0x21a>
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	d10e      	bne.n	8002712 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d10b      	bne.n	8002712 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fa:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d064      	beq.n	80027d0 <HAL_RCC_OscConfig+0x2f0>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d160      	bne.n	80027d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e2c4      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271a:	d106      	bne.n	800272a <HAL_RCC_OscConfig+0x24a>
 800271c:	4b16      	ldr	r3, [pc, #88]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a15      	ldr	r2, [pc, #84]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	e01d      	b.n	8002766 <HAL_RCC_OscConfig+0x286>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002732:	d10c      	bne.n	800274e <HAL_RCC_OscConfig+0x26e>
 8002734:	4b10      	ldr	r3, [pc, #64]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0f      	ldr	r2, [pc, #60]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 800273a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0c      	ldr	r2, [pc, #48]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	e00b      	b.n	8002766 <HAL_RCC_OscConfig+0x286>
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a06      	ldr	r2, [pc, #24]	; (8002778 <HAL_RCC_OscConfig+0x298>)
 8002760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002764:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d01c      	beq.n	80027a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7fe fdf1 	bl	8001354 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002774:	e011      	b.n	800279a <HAL_RCC_OscConfig+0x2ba>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	080043c8 	.word	0x080043c8
 8002780:	20000000 	.word	0x20000000
 8002784:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002788:	f7fe fde4 	bl	8001354 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e280      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279a:	4baf      	ldr	r3, [pc, #700]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x2a8>
 80027a6:	e014      	b.n	80027d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7fe fdd4 	bl	8001354 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b0:	f7fe fdd0 	bl	8001354 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e26c      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027c2:	4ba5      	ldr	r3, [pc, #660]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x2d0>
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d060      	beq.n	80028a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_OscConfig+0x310>
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2b0c      	cmp	r3, #12
 80027e8:	d119      	bne.n	800281e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d116      	bne.n	800281e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f0:	4b99      	ldr	r3, [pc, #612]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_OscConfig+0x328>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e249      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4b93      	ldr	r3, [pc, #588]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	061b      	lsls	r3, r3, #24
 8002816:	4990      	ldr	r1, [pc, #576]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800281c:	e040      	b.n	80028a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d023      	beq.n	800286e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002826:	4b8c      	ldr	r3, [pc, #560]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a8b      	ldr	r2, [pc, #556]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 800282c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7fe fd8f 	bl	8001354 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283a:	f7fe fd8b 	bl	8001354 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e227      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800284c:	4b82      	ldr	r3, [pc, #520]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002858:	4b7f      	ldr	r3, [pc, #508]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	061b      	lsls	r3, r3, #24
 8002866:	497c      	ldr	r1, [pc, #496]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
 800286c:	e018      	b.n	80028a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286e:	4b7a      	ldr	r3, [pc, #488]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a79      	ldr	r2, [pc, #484]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287a:	f7fe fd6b 	bl	8001354 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002882:	f7fe fd67 	bl	8001354 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e203      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002894:	4b70      	ldr	r3, [pc, #448]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f0      	bne.n	8002882 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d03c      	beq.n	8002926 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01c      	beq.n	80028ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b4:	4b68      	ldr	r3, [pc, #416]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80028b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ba:	4a67      	ldr	r2, [pc, #412]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c4:	f7fe fd46 	bl	8001354 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028cc:	f7fe fd42 	bl	8001354 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e1de      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028de:	4b5e      	ldr	r3, [pc, #376]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80028e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0ef      	beq.n	80028cc <HAL_RCC_OscConfig+0x3ec>
 80028ec:	e01b      	b.n	8002926 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ee:	4b5a      	ldr	r3, [pc, #360]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80028f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f4:	4a58      	ldr	r2, [pc, #352]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80028f6:	f023 0301 	bic.w	r3, r3, #1
 80028fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fe:	f7fe fd29 	bl	8001354 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002906:	f7fe fd25 	bl	8001354 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e1c1      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002918:	4b4f      	ldr	r3, [pc, #316]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 800291a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1ef      	bne.n	8002906 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 80a6 	beq.w	8002a80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002934:	2300      	movs	r3, #0
 8002936:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002938:	4b47      	ldr	r3, [pc, #284]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10d      	bne.n	8002960 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002944:	4b44      	ldr	r3, [pc, #272]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	4a43      	ldr	r2, [pc, #268]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 800294a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294e:	6593      	str	r3, [r2, #88]	; 0x58
 8002950:	4b41      	ldr	r3, [pc, #260]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295c:	2301      	movs	r3, #1
 800295e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002960:	4b3e      	ldr	r3, [pc, #248]	; (8002a5c <HAL_RCC_OscConfig+0x57c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d118      	bne.n	800299e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800296c:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <HAL_RCC_OscConfig+0x57c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a3a      	ldr	r2, [pc, #232]	; (8002a5c <HAL_RCC_OscConfig+0x57c>)
 8002972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002976:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002978:	f7fe fcec 	bl	8001354 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002980:	f7fe fce8 	bl	8001354 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e184      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002992:	4b32      	ldr	r3, [pc, #200]	; (8002a5c <HAL_RCC_OscConfig+0x57c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d108      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4d8>
 80029a6:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80029a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ac:	4a2a      	ldr	r2, [pc, #168]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029b6:	e024      	b.n	8002a02 <HAL_RCC_OscConfig+0x522>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b05      	cmp	r3, #5
 80029be:	d110      	bne.n	80029e2 <HAL_RCC_OscConfig+0x502>
 80029c0:	4b25      	ldr	r3, [pc, #148]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c6:	4a24      	ldr	r2, [pc, #144]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80029c8:	f043 0304 	orr.w	r3, r3, #4
 80029cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029d0:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d6:	4a20      	ldr	r2, [pc, #128]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029e0:	e00f      	b.n	8002a02 <HAL_RCC_OscConfig+0x522>
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e8:	4a1b      	ldr	r2, [pc, #108]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80029ea:	f023 0301 	bic.w	r3, r3, #1
 80029ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029f2:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f8:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80029fa:	f023 0304 	bic.w	r3, r3, #4
 80029fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d016      	beq.n	8002a38 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fca3 	bl	8001354 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a10:	e00a      	b.n	8002a28 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a12:	f7fe fc9f 	bl	8001354 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e139      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0ed      	beq.n	8002a12 <HAL_RCC_OscConfig+0x532>
 8002a36:	e01a      	b.n	8002a6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a38:	f7fe fc8c 	bl	8001354 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a3e:	e00f      	b.n	8002a60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a40:	f7fe fc88 	bl	8001354 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d906      	bls.n	8002a60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e122      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a60:	4b90      	ldr	r3, [pc, #576]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1e8      	bne.n	8002a40 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a6e:	7ffb      	ldrb	r3, [r7, #31]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d105      	bne.n	8002a80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a74:	4b8b      	ldr	r3, [pc, #556]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	4a8a      	ldr	r2, [pc, #552]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 8108 	beq.w	8002c9a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	f040 80d0 	bne.w	8002c34 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a94:	4b83      	ldr	r3, [pc, #524]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0203 	and.w	r2, r3, #3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d130      	bne.n	8002b0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d127      	bne.n	8002b0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d11f      	bne.n	8002b0a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ad4:	2a07      	cmp	r2, #7
 8002ad6:	bf14      	ite	ne
 8002ad8:	2201      	movne	r2, #1
 8002ada:	2200      	moveq	r2, #0
 8002adc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d113      	bne.n	8002b0a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aec:	085b      	lsrs	r3, r3, #1
 8002aee:	3b01      	subs	r3, #1
 8002af0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d109      	bne.n	8002b0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	085b      	lsrs	r3, r3, #1
 8002b02:	3b01      	subs	r3, #1
 8002b04:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d06e      	beq.n	8002be8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	d069      	beq.n	8002be4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b10:	4b64      	ldr	r3, [pc, #400]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d105      	bne.n	8002b28 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b1c:	4b61      	ldr	r3, [pc, #388]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0b7      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b2c:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a5c      	ldr	r2, [pc, #368]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b36:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b38:	f7fe fc0c 	bl	8001354 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b40:	f7fe fc08 	bl	8001354 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e0a4      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b52:	4b54      	ldr	r3, [pc, #336]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b5e:	4b51      	ldr	r3, [pc, #324]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	4b51      	ldr	r3, [pc, #324]	; (8002ca8 <HAL_RCC_OscConfig+0x7c8>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b6e:	3a01      	subs	r2, #1
 8002b70:	0112      	lsls	r2, r2, #4
 8002b72:	4311      	orrs	r1, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b78:	0212      	lsls	r2, r2, #8
 8002b7a:	4311      	orrs	r1, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b80:	0852      	lsrs	r2, r2, #1
 8002b82:	3a01      	subs	r2, #1
 8002b84:	0552      	lsls	r2, r2, #21
 8002b86:	4311      	orrs	r1, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b8c:	0852      	lsrs	r2, r2, #1
 8002b8e:	3a01      	subs	r2, #1
 8002b90:	0652      	lsls	r2, r2, #25
 8002b92:	4311      	orrs	r1, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b98:	0912      	lsrs	r2, r2, #4
 8002b9a:	0452      	lsls	r2, r2, #17
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	4941      	ldr	r1, [pc, #260]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ba4:	4b3f      	ldr	r3, [pc, #252]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a3e      	ldr	r2, [pc, #248]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bb0:	4b3c      	ldr	r3, [pc, #240]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4a3b      	ldr	r2, [pc, #236]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bbc:	f7fe fbca 	bl	8001354 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7fe fbc6 	bl	8001354 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e062      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd6:	4b33      	ldr	r3, [pc, #204]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002be2:	e05a      	b.n	8002c9a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e059      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be8:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d152      	bne.n	8002c9a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bf4:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a2a      	ldr	r2, [pc, #168]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bfe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c00:	4b28      	ldr	r3, [pc, #160]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a27      	ldr	r2, [pc, #156]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c0c:	f7fe fba2 	bl	8001354 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fb9e 	bl	8001354 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e03a      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c26:	4b1f      	ldr	r3, [pc, #124]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x734>
 8002c32:	e032      	b.n	8002c9a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2b0c      	cmp	r3, #12
 8002c38:	d02d      	beq.n	8002c96 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a19      	ldr	r2, [pc, #100]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002c40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c44:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c46:	4b17      	ldr	r3, [pc, #92]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d105      	bne.n	8002c5e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c52:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002c58:	f023 0303 	bic.w	r3, r3, #3
 8002c5c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	4a10      	ldr	r2, [pc, #64]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002c64:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6e:	f7fe fb71 	bl	8001354 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c76:	f7fe fb6d 	bl	8001354 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e009      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_RCC_OscConfig+0x7c4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <HAL_RCC_OscConfig+0x796>
 8002c94:	e001      	b.n	8002c9a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3720      	adds	r7, #32
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	f99d808c 	.word	0xf99d808c

08002cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0c8      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b66      	ldr	r3, [pc, #408]	; (8002e5c <HAL_RCC_ClockConfig+0x1b0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d910      	bls.n	8002cf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b63      	ldr	r3, [pc, #396]	; (8002e5c <HAL_RCC_ClockConfig+0x1b0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 0207 	bic.w	r2, r3, #7
 8002cd6:	4961      	ldr	r1, [pc, #388]	; (8002e5c <HAL_RCC_ClockConfig+0x1b0>)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b5f      	ldr	r3, [pc, #380]	; (8002e5c <HAL_RCC_ClockConfig+0x1b0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0b0      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d04c      	beq.n	8002d96 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d04:	4b56      	ldr	r3, [pc, #344]	; (8002e60 <HAL_RCC_ClockConfig+0x1b4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d121      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e09e      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d107      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d1c:	4b50      	ldr	r3, [pc, #320]	; (8002e60 <HAL_RCC_ClockConfig+0x1b4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d115      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e092      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d34:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <HAL_RCC_ClockConfig+0x1b4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d109      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e086      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d44:	4b46      	ldr	r3, [pc, #280]	; (8002e60 <HAL_RCC_ClockConfig+0x1b4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e07e      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d54:	4b42      	ldr	r3, [pc, #264]	; (8002e60 <HAL_RCC_ClockConfig+0x1b4>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 0203 	bic.w	r2, r3, #3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	493f      	ldr	r1, [pc, #252]	; (8002e60 <HAL_RCC_ClockConfig+0x1b4>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d66:	f7fe faf5 	bl	8001354 <HAL_GetTick>
 8002d6a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6c:	e00a      	b.n	8002d84 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6e:	f7fe faf1 	bl	8001354 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e066      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d84:	4b36      	ldr	r3, [pc, #216]	; (8002e60 <HAL_RCC_ClockConfig+0x1b4>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 020c 	and.w	r2, r3, #12
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d1eb      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da2:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <HAL_RCC_ClockConfig+0x1b4>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	492c      	ldr	r1, [pc, #176]	; (8002e60 <HAL_RCC_ClockConfig+0x1b4>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db4:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <HAL_RCC_ClockConfig+0x1b0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d210      	bcs.n	8002de4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b26      	ldr	r3, [pc, #152]	; (8002e5c <HAL_RCC_ClockConfig+0x1b0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 0207 	bic.w	r2, r3, #7
 8002dca:	4924      	ldr	r1, [pc, #144]	; (8002e5c <HAL_RCC_ClockConfig+0x1b0>)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <HAL_RCC_ClockConfig+0x1b0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e036      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_RCC_ClockConfig+0x1b4>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4918      	ldr	r1, [pc, #96]	; (8002e60 <HAL_RCC_ClockConfig+0x1b4>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d009      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <HAL_RCC_ClockConfig+0x1b4>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4910      	ldr	r1, [pc, #64]	; (8002e60 <HAL_RCC_ClockConfig+0x1b4>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e22:	f000 f825 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 8002e26:	4602      	mov	r2, r0
 8002e28:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <HAL_RCC_ClockConfig+0x1b4>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	490c      	ldr	r1, [pc, #48]	; (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002e34:	5ccb      	ldrb	r3, [r1, r3]
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe fa34 	bl	80012b4 <HAL_InitTick>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e50:	7afb      	ldrb	r3, [r7, #11]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40022000 	.word	0x40022000
 8002e60:	40021000 	.word	0x40021000
 8002e64:	080043c8 	.word	0x080043c8
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	20000004 	.word	0x20000004

08002e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b089      	sub	sp, #36	; 0x24
 8002e74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e7e:	4b3e      	ldr	r3, [pc, #248]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e88:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	2b0c      	cmp	r3, #12
 8002e9c:	d121      	bne.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d11e      	bne.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ea4:	4b34      	ldr	r3, [pc, #208]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d107      	bne.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002eb0:	4b31      	ldr	r3, [pc, #196]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	e005      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ec0:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ecc:	4a2b      	ldr	r2, [pc, #172]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10d      	bne.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d102      	bne.n	8002eee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ee8:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eea:	61bb      	str	r3, [r7, #24]
 8002eec:	e004      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ef4:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ef6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d134      	bne.n	8002f68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002efe:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d003      	beq.n	8002f16 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d003      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0xac>
 8002f14:	e005      	b.n	8002f22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f16:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f18:	617b      	str	r3, [r7, #20]
      break;
 8002f1a:	e005      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f1e:	617b      	str	r3, [r7, #20]
      break;
 8002f20:	e002      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	617b      	str	r3, [r7, #20]
      break;
 8002f26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f28:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	3301      	adds	r3, #1
 8002f34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	fb02 f203 	mul.w	r2, r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	0e5b      	lsrs	r3, r3, #25
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	3301      	adds	r3, #1
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f68:	69bb      	ldr	r3, [r7, #24]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3724      	adds	r7, #36	; 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	080043e0 	.word	0x080043e0
 8002f80:	00f42400 	.word	0x00f42400
 8002f84:	007a1200 	.word	0x007a1200

08002f88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	20000000 	.word	0x20000000

08002fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fa4:	f7ff fff0 	bl	8002f88 <HAL_RCC_GetHCLKFreq>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	4904      	ldr	r1, [pc, #16]	; (8002fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fb6:	5ccb      	ldrb	r3, [r1, r3]
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	080043d8 	.word	0x080043d8

08002fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fd0:	f7ff ffda 	bl	8002f88 <HAL_RCC_GetHCLKFreq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	0adb      	lsrs	r3, r3, #11
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	4904      	ldr	r1, [pc, #16]	; (8002ff4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fe2:	5ccb      	ldrb	r3, [r1, r3]
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	080043d8 	.word	0x080043d8

08002ff8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003004:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003010:	f7ff fa02 	bl	8002418 <HAL_PWREx_GetVoltageRange>
 8003014:	6178      	str	r0, [r7, #20]
 8003016:	e014      	b.n	8003042 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003018:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	4a24      	ldr	r2, [pc, #144]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800301e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003022:	6593      	str	r3, [r2, #88]	; 0x58
 8003024:	4b22      	ldr	r3, [pc, #136]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003030:	f7ff f9f2 	bl	8002418 <HAL_PWREx_GetVoltageRange>
 8003034:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003036:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800303c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003040:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003048:	d10b      	bne.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b80      	cmp	r3, #128	; 0x80
 800304e:	d919      	bls.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2ba0      	cmp	r3, #160	; 0xa0
 8003054:	d902      	bls.n	800305c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003056:	2302      	movs	r3, #2
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	e013      	b.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800305c:	2301      	movs	r3, #1
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	e010      	b.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d902      	bls.n	800306e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003068:	2303      	movs	r3, #3
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	e00a      	b.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b80      	cmp	r3, #128	; 0x80
 8003072:	d102      	bne.n	800307a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003074:	2302      	movs	r3, #2
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	e004      	b.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b70      	cmp	r3, #112	; 0x70
 800307e:	d101      	bne.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003080:	2301      	movs	r3, #1
 8003082:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f023 0207 	bic.w	r2, r3, #7
 800308c:	4909      	ldr	r1, [pc, #36]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d001      	beq.n	80030a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40022000 	.word	0x40022000

080030b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030c0:	2300      	movs	r3, #0
 80030c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030c4:	2300      	movs	r3, #0
 80030c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d041      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030dc:	d02a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030e2:	d824      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030e8:	d008      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030ee:	d81e      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f8:	d010      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030fa:	e018      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030fc:	4b86      	ldr	r3, [pc, #536]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4a85      	ldr	r2, [pc, #532]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003106:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003108:	e015      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3304      	adds	r3, #4
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fabb 	bl	800368c <RCCEx_PLLSAI1_Config>
 8003116:	4603      	mov	r3, r0
 8003118:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800311a:	e00c      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3320      	adds	r3, #32
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fba6 	bl	8003874 <RCCEx_PLLSAI2_Config>
 8003128:	4603      	mov	r3, r0
 800312a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800312c:	e003      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	74fb      	strb	r3, [r7, #19]
      break;
 8003132:	e000      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003136:	7cfb      	ldrb	r3, [r7, #19]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10b      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800313c:	4b76      	ldr	r3, [pc, #472]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003142:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800314a:	4973      	ldr	r1, [pc, #460]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003152:	e001      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003154:	7cfb      	ldrb	r3, [r7, #19]
 8003156:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d041      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003168:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800316c:	d02a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800316e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003172:	d824      	bhi.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003178:	d008      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800317a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800317e:	d81e      	bhi.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003188:	d010      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800318a:	e018      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800318c:	4b62      	ldr	r3, [pc, #392]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a61      	ldr	r2, [pc, #388]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003196:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003198:	e015      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3304      	adds	r3, #4
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fa73 	bl	800368c <RCCEx_PLLSAI1_Config>
 80031a6:	4603      	mov	r3, r0
 80031a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031aa:	e00c      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3320      	adds	r3, #32
 80031b0:	2100      	movs	r1, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fb5e 	bl	8003874 <RCCEx_PLLSAI2_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031bc:	e003      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	74fb      	strb	r3, [r7, #19]
      break;
 80031c2:	e000      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80031c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c6:	7cfb      	ldrb	r3, [r7, #19]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10b      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031cc:	4b52      	ldr	r3, [pc, #328]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031da:	494f      	ldr	r1, [pc, #316]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031e2:	e001      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e4:	7cfb      	ldrb	r3, [r7, #19]
 80031e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80a0 	beq.w	8003336 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f6:	2300      	movs	r3, #0
 80031f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031fa:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800320a:	2300      	movs	r3, #0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00d      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003210:	4b41      	ldr	r3, [pc, #260]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	4a40      	ldr	r2, [pc, #256]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321a:	6593      	str	r3, [r2, #88]	; 0x58
 800321c:	4b3e      	ldr	r3, [pc, #248]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003228:	2301      	movs	r3, #1
 800322a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800322c:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a3a      	ldr	r2, [pc, #232]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003236:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003238:	f7fe f88c 	bl	8001354 <HAL_GetTick>
 800323c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800323e:	e009      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003240:	f7fe f888 	bl	8001354 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d902      	bls.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	74fb      	strb	r3, [r7, #19]
        break;
 8003252:	e005      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003254:	4b31      	ldr	r3, [pc, #196]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0ef      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003260:	7cfb      	ldrb	r3, [r7, #19]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d15c      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003266:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003270:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01f      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	429a      	cmp	r2, r3
 8003282:	d019      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003284:	4b24      	ldr	r3, [pc, #144]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800328e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003290:	4b21      	ldr	r3, [pc, #132]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	4a20      	ldr	r2, [pc, #128]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a6:	4a1c      	ldr	r2, [pc, #112]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032b0:	4a19      	ldr	r2, [pc, #100]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fe f847 	bl	8001354 <HAL_GetTick>
 80032c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c8:	e00b      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fe f843 	bl	8001354 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d902      	bls.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	74fb      	strb	r3, [r7, #19]
            break;
 80032e0:	e006      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e2:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0ec      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10c      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003306:	4904      	ldr	r1, [pc, #16]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800330e:	e009      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	74bb      	strb	r3, [r7, #18]
 8003314:	e006      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003320:	7cfb      	ldrb	r3, [r7, #19]
 8003322:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003324:	7c7b      	ldrb	r3, [r7, #17]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d105      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332a:	4b9e      	ldr	r3, [pc, #632]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332e:	4a9d      	ldr	r2, [pc, #628]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003334:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003342:	4b98      	ldr	r3, [pc, #608]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003348:	f023 0203 	bic.w	r2, r3, #3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	4994      	ldr	r1, [pc, #592]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003364:	4b8f      	ldr	r3, [pc, #572]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f023 020c 	bic.w	r2, r3, #12
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003372:	498c      	ldr	r1, [pc, #560]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003386:	4b87      	ldr	r3, [pc, #540]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	4983      	ldr	r1, [pc, #524]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033a8:	4b7e      	ldr	r3, [pc, #504]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	497b      	ldr	r1, [pc, #492]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033ca:	4b76      	ldr	r3, [pc, #472]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d8:	4972      	ldr	r1, [pc, #456]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033ec:	4b6d      	ldr	r3, [pc, #436]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fa:	496a      	ldr	r1, [pc, #424]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800340e:	4b65      	ldr	r3, [pc, #404]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003414:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	4961      	ldr	r1, [pc, #388]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003430:	4b5c      	ldr	r3, [pc, #368]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343e:	4959      	ldr	r1, [pc, #356]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003452:	4b54      	ldr	r3, [pc, #336]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003460:	4950      	ldr	r1, [pc, #320]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003474:	4b4b      	ldr	r3, [pc, #300]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003482:	4948      	ldr	r1, [pc, #288]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003496:	4b43      	ldr	r3, [pc, #268]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	493f      	ldr	r1, [pc, #252]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d028      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034b8:	4b3a      	ldr	r3, [pc, #232]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034c6:	4937      	ldr	r1, [pc, #220]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034d6:	d106      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d8:	4b32      	ldr	r3, [pc, #200]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4a31      	ldr	r2, [pc, #196]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e2:	60d3      	str	r3, [r2, #12]
 80034e4:	e011      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034ee:	d10c      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3304      	adds	r3, #4
 80034f4:	2101      	movs	r1, #1
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f8c8 	bl	800368c <RCCEx_PLLSAI1_Config>
 80034fc:	4603      	mov	r3, r0
 80034fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003506:	7cfb      	ldrb	r3, [r7, #19]
 8003508:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d028      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003516:	4b23      	ldr	r3, [pc, #140]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	491f      	ldr	r1, [pc, #124]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003534:	d106      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003536:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	4a1a      	ldr	r2, [pc, #104]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003540:	60d3      	str	r3, [r2, #12]
 8003542:	e011      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800354c:	d10c      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3304      	adds	r3, #4
 8003552:	2101      	movs	r1, #1
 8003554:	4618      	mov	r0, r3
 8003556:	f000 f899 	bl	800368c <RCCEx_PLLSAI1_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d02b      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003574:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003582:	4908      	ldr	r1, [pc, #32]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003592:	d109      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003594:	4b03      	ldr	r3, [pc, #12]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a02      	ldr	r2, [pc, #8]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800359e:	60d3      	str	r3, [r2, #12]
 80035a0:	e014      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035b0:	d10c      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3304      	adds	r3, #4
 80035b6:	2101      	movs	r1, #1
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 f867 	bl	800368c <RCCEx_PLLSAI1_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035c2:	7cfb      	ldrb	r3, [r7, #19]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035c8:	7cfb      	ldrb	r3, [r7, #19]
 80035ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d02f      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035d8:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035e6:	4928      	ldr	r1, [pc, #160]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035f6:	d10d      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3304      	adds	r3, #4
 80035fc:	2102      	movs	r1, #2
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 f844 	bl	800368c <RCCEx_PLLSAI1_Config>
 8003604:	4603      	mov	r3, r0
 8003606:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003608:	7cfb      	ldrb	r3, [r7, #19]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d014      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800360e:	7cfb      	ldrb	r3, [r7, #19]
 8003610:	74bb      	strb	r3, [r7, #18]
 8003612:	e011      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800361c:	d10c      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3320      	adds	r3, #32
 8003622:	2102      	movs	r1, #2
 8003624:	4618      	mov	r0, r3
 8003626:	f000 f925 	bl	8003874 <RCCEx_PLLSAI2_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800362e:	7cfb      	ldrb	r3, [r7, #19]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003644:	4b10      	ldr	r3, [pc, #64]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003652:	490d      	ldr	r1, [pc, #52]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003666:	4b08      	ldr	r3, [pc, #32]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003676:	4904      	ldr	r1, [pc, #16]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800367e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000

0800368c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800369a:	4b75      	ldr	r3, [pc, #468]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d018      	beq.n	80036d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036a6:	4b72      	ldr	r3, [pc, #456]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0203 	and.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d10d      	bne.n	80036d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
       ||
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036be:	4b6c      	ldr	r3, [pc, #432]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
       ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d047      	beq.n	8003762 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
 80036d6:	e044      	b.n	8003762 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d018      	beq.n	8003712 <RCCEx_PLLSAI1_Config+0x86>
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d825      	bhi.n	8003730 <RCCEx_PLLSAI1_Config+0xa4>
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d002      	beq.n	80036ee <RCCEx_PLLSAI1_Config+0x62>
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d009      	beq.n	8003700 <RCCEx_PLLSAI1_Config+0x74>
 80036ec:	e020      	b.n	8003730 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036ee:	4b60      	ldr	r3, [pc, #384]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d11d      	bne.n	8003736 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036fe:	e01a      	b.n	8003736 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003700:	4b5b      	ldr	r3, [pc, #364]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003708:	2b00      	cmp	r3, #0
 800370a:	d116      	bne.n	800373a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003710:	e013      	b.n	800373a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003712:	4b57      	ldr	r3, [pc, #348]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10f      	bne.n	800373e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800371e:	4b54      	ldr	r3, [pc, #336]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800372e:	e006      	b.n	800373e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
      break;
 8003734:	e004      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003736:	bf00      	nop
 8003738:	e002      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800373a:	bf00      	nop
 800373c:	e000      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800373e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10d      	bne.n	8003762 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003746:	4b4a      	ldr	r3, [pc, #296]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6819      	ldr	r1, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	3b01      	subs	r3, #1
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	430b      	orrs	r3, r1
 800375c:	4944      	ldr	r1, [pc, #272]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375e:	4313      	orrs	r3, r2
 8003760:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d17d      	bne.n	8003864 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003768:	4b41      	ldr	r3, [pc, #260]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a40      	ldr	r2, [pc, #256]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003774:	f7fd fdee 	bl	8001354 <HAL_GetTick>
 8003778:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800377a:	e009      	b.n	8003790 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800377c:	f7fd fdea 	bl	8001354 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d902      	bls.n	8003790 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	73fb      	strb	r3, [r7, #15]
        break;
 800378e:	e005      	b.n	800379c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003790:	4b37      	ldr	r3, [pc, #220]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1ef      	bne.n	800377c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d160      	bne.n	8003864 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d111      	bne.n	80037cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037a8:	4b31      	ldr	r3, [pc, #196]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6892      	ldr	r2, [r2, #8]
 80037b8:	0211      	lsls	r1, r2, #8
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68d2      	ldr	r2, [r2, #12]
 80037be:	0912      	lsrs	r2, r2, #4
 80037c0:	0452      	lsls	r2, r2, #17
 80037c2:	430a      	orrs	r2, r1
 80037c4:	492a      	ldr	r1, [pc, #168]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	610b      	str	r3, [r1, #16]
 80037ca:	e027      	b.n	800381c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d112      	bne.n	80037f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037d2:	4b27      	ldr	r3, [pc, #156]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6892      	ldr	r2, [r2, #8]
 80037e2:	0211      	lsls	r1, r2, #8
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6912      	ldr	r2, [r2, #16]
 80037e8:	0852      	lsrs	r2, r2, #1
 80037ea:	3a01      	subs	r2, #1
 80037ec:	0552      	lsls	r2, r2, #21
 80037ee:	430a      	orrs	r2, r1
 80037f0:	491f      	ldr	r1, [pc, #124]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	610b      	str	r3, [r1, #16]
 80037f6:	e011      	b.n	800381c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037f8:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003800:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6892      	ldr	r2, [r2, #8]
 8003808:	0211      	lsls	r1, r2, #8
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6952      	ldr	r2, [r2, #20]
 800380e:	0852      	lsrs	r2, r2, #1
 8003810:	3a01      	subs	r2, #1
 8003812:	0652      	lsls	r2, r2, #25
 8003814:	430a      	orrs	r2, r1
 8003816:	4916      	ldr	r1, [pc, #88]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003818:	4313      	orrs	r3, r2
 800381a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800381c:	4b14      	ldr	r3, [pc, #80]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a13      	ldr	r2, [pc, #76]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003822:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003826:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003828:	f7fd fd94 	bl	8001354 <HAL_GetTick>
 800382c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800382e:	e009      	b.n	8003844 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003830:	f7fd fd90 	bl	8001354 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d902      	bls.n	8003844 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	73fb      	strb	r3, [r7, #15]
          break;
 8003842:	e005      	b.n	8003850 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0ef      	beq.n	8003830 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	4904      	ldr	r1, [pc, #16]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003860:	4313      	orrs	r3, r2
 8003862:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000

08003874 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003882:	4b6a      	ldr	r3, [pc, #424]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d018      	beq.n	80038c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800388e:	4b67      	ldr	r3, [pc, #412]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f003 0203 	and.w	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d10d      	bne.n	80038ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
       ||
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038a6:	4b61      	ldr	r3, [pc, #388]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
       ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d047      	beq.n	800394a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	73fb      	strb	r3, [r7, #15]
 80038be:	e044      	b.n	800394a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d018      	beq.n	80038fa <RCCEx_PLLSAI2_Config+0x86>
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d825      	bhi.n	8003918 <RCCEx_PLLSAI2_Config+0xa4>
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d002      	beq.n	80038d6 <RCCEx_PLLSAI2_Config+0x62>
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d009      	beq.n	80038e8 <RCCEx_PLLSAI2_Config+0x74>
 80038d4:	e020      	b.n	8003918 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038d6:	4b55      	ldr	r3, [pc, #340]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d11d      	bne.n	800391e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e6:	e01a      	b.n	800391e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038e8:	4b50      	ldr	r3, [pc, #320]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d116      	bne.n	8003922 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f8:	e013      	b.n	8003922 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038fa:	4b4c      	ldr	r3, [pc, #304]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10f      	bne.n	8003926 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003906:	4b49      	ldr	r3, [pc, #292]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003916:	e006      	b.n	8003926 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
      break;
 800391c:	e004      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800391e:	bf00      	nop
 8003920:	e002      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003922:	bf00      	nop
 8003924:	e000      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003926:	bf00      	nop
    }

    if(status == HAL_OK)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10d      	bne.n	800394a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800392e:	4b3f      	ldr	r3, [pc, #252]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6819      	ldr	r1, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	3b01      	subs	r3, #1
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	430b      	orrs	r3, r1
 8003944:	4939      	ldr	r1, [pc, #228]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003946:	4313      	orrs	r3, r2
 8003948:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d167      	bne.n	8003a20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003950:	4b36      	ldr	r3, [pc, #216]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a35      	ldr	r2, [pc, #212]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800395a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800395c:	f7fd fcfa 	bl	8001354 <HAL_GetTick>
 8003960:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003962:	e009      	b.n	8003978 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003964:	f7fd fcf6 	bl	8001354 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d902      	bls.n	8003978 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	73fb      	strb	r3, [r7, #15]
        break;
 8003976:	e005      	b.n	8003984 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003978:	4b2c      	ldr	r3, [pc, #176]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1ef      	bne.n	8003964 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d14a      	bne.n	8003a20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d111      	bne.n	80039b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003990:	4b26      	ldr	r3, [pc, #152]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6892      	ldr	r2, [r2, #8]
 80039a0:	0211      	lsls	r1, r2, #8
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68d2      	ldr	r2, [r2, #12]
 80039a6:	0912      	lsrs	r2, r2, #4
 80039a8:	0452      	lsls	r2, r2, #17
 80039aa:	430a      	orrs	r2, r1
 80039ac:	491f      	ldr	r1, [pc, #124]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	614b      	str	r3, [r1, #20]
 80039b2:	e011      	b.n	80039d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6892      	ldr	r2, [r2, #8]
 80039c4:	0211      	lsls	r1, r2, #8
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6912      	ldr	r2, [r2, #16]
 80039ca:	0852      	lsrs	r2, r2, #1
 80039cc:	3a01      	subs	r2, #1
 80039ce:	0652      	lsls	r2, r2, #25
 80039d0:	430a      	orrs	r2, r1
 80039d2:	4916      	ldr	r1, [pc, #88]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039d8:	4b14      	ldr	r3, [pc, #80]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a13      	ldr	r2, [pc, #76]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e4:	f7fd fcb6 	bl	8001354 <HAL_GetTick>
 80039e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039ea:	e009      	b.n	8003a00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039ec:	f7fd fcb2 	bl	8001354 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d902      	bls.n	8003a00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	73fb      	strb	r3, [r7, #15]
          break;
 80039fe:	e005      	b.n	8003a0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a00:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0ef      	beq.n	80039ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a12:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	4904      	ldr	r1, [pc, #16]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000

08003a30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e040      	b.n	8003ac4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fd fa1e 	bl	8000e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2224      	movs	r2, #36	; 0x24
 8003a5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f82c 	bl	8003acc <UART_SetConfig>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e022      	b.n	8003ac4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 faaa 	bl	8003fe0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fb31 	bl	8004124 <UART_CheckIdleState>
 8003ac2:	4603      	mov	r3, r0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003acc:	b5b0      	push	{r4, r5, r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4bad      	ldr	r3, [pc, #692]	; (8003dac <UART_SetConfig+0x2e0>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	69f9      	ldr	r1, [r7, #28]
 8003b00:	430b      	orrs	r3, r1
 8003b02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4aa2      	ldr	r2, [pc, #648]	; (8003db0 <UART_SetConfig+0x2e4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d004      	beq.n	8003b34 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a99      	ldr	r2, [pc, #612]	; (8003db4 <UART_SetConfig+0x2e8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d121      	bne.n	8003b96 <UART_SetConfig+0xca>
 8003b52:	4b99      	ldr	r3, [pc, #612]	; (8003db8 <UART_SetConfig+0x2ec>)
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d817      	bhi.n	8003b90 <UART_SetConfig+0xc4>
 8003b60:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <UART_SetConfig+0x9c>)
 8003b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b66:	bf00      	nop
 8003b68:	08003b79 	.word	0x08003b79
 8003b6c:	08003b85 	.word	0x08003b85
 8003b70:	08003b7f 	.word	0x08003b7f
 8003b74:	08003b8b 	.word	0x08003b8b
 8003b78:	2301      	movs	r3, #1
 8003b7a:	76fb      	strb	r3, [r7, #27]
 8003b7c:	e0e7      	b.n	8003d4e <UART_SetConfig+0x282>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	76fb      	strb	r3, [r7, #27]
 8003b82:	e0e4      	b.n	8003d4e <UART_SetConfig+0x282>
 8003b84:	2304      	movs	r3, #4
 8003b86:	76fb      	strb	r3, [r7, #27]
 8003b88:	e0e1      	b.n	8003d4e <UART_SetConfig+0x282>
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	76fb      	strb	r3, [r7, #27]
 8003b8e:	e0de      	b.n	8003d4e <UART_SetConfig+0x282>
 8003b90:	2310      	movs	r3, #16
 8003b92:	76fb      	strb	r3, [r7, #27]
 8003b94:	e0db      	b.n	8003d4e <UART_SetConfig+0x282>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a88      	ldr	r2, [pc, #544]	; (8003dbc <UART_SetConfig+0x2f0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d132      	bne.n	8003c06 <UART_SetConfig+0x13a>
 8003ba0:	4b85      	ldr	r3, [pc, #532]	; (8003db8 <UART_SetConfig+0x2ec>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b0c      	cmp	r3, #12
 8003bac:	d828      	bhi.n	8003c00 <UART_SetConfig+0x134>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <UART_SetConfig+0xe8>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003be9 	.word	0x08003be9
 8003bb8:	08003c01 	.word	0x08003c01
 8003bbc:	08003c01 	.word	0x08003c01
 8003bc0:	08003c01 	.word	0x08003c01
 8003bc4:	08003bf5 	.word	0x08003bf5
 8003bc8:	08003c01 	.word	0x08003c01
 8003bcc:	08003c01 	.word	0x08003c01
 8003bd0:	08003c01 	.word	0x08003c01
 8003bd4:	08003bef 	.word	0x08003bef
 8003bd8:	08003c01 	.word	0x08003c01
 8003bdc:	08003c01 	.word	0x08003c01
 8003be0:	08003c01 	.word	0x08003c01
 8003be4:	08003bfb 	.word	0x08003bfb
 8003be8:	2300      	movs	r3, #0
 8003bea:	76fb      	strb	r3, [r7, #27]
 8003bec:	e0af      	b.n	8003d4e <UART_SetConfig+0x282>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	76fb      	strb	r3, [r7, #27]
 8003bf2:	e0ac      	b.n	8003d4e <UART_SetConfig+0x282>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	76fb      	strb	r3, [r7, #27]
 8003bf8:	e0a9      	b.n	8003d4e <UART_SetConfig+0x282>
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	76fb      	strb	r3, [r7, #27]
 8003bfe:	e0a6      	b.n	8003d4e <UART_SetConfig+0x282>
 8003c00:	2310      	movs	r3, #16
 8003c02:	76fb      	strb	r3, [r7, #27]
 8003c04:	e0a3      	b.n	8003d4e <UART_SetConfig+0x282>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a6d      	ldr	r2, [pc, #436]	; (8003dc0 <UART_SetConfig+0x2f4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d120      	bne.n	8003c52 <UART_SetConfig+0x186>
 8003c10:	4b69      	ldr	r3, [pc, #420]	; (8003db8 <UART_SetConfig+0x2ec>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c1a:	2b30      	cmp	r3, #48	; 0x30
 8003c1c:	d013      	beq.n	8003c46 <UART_SetConfig+0x17a>
 8003c1e:	2b30      	cmp	r3, #48	; 0x30
 8003c20:	d814      	bhi.n	8003c4c <UART_SetConfig+0x180>
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d009      	beq.n	8003c3a <UART_SetConfig+0x16e>
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d810      	bhi.n	8003c4c <UART_SetConfig+0x180>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <UART_SetConfig+0x168>
 8003c2e:	2b10      	cmp	r3, #16
 8003c30:	d006      	beq.n	8003c40 <UART_SetConfig+0x174>
 8003c32:	e00b      	b.n	8003c4c <UART_SetConfig+0x180>
 8003c34:	2300      	movs	r3, #0
 8003c36:	76fb      	strb	r3, [r7, #27]
 8003c38:	e089      	b.n	8003d4e <UART_SetConfig+0x282>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	76fb      	strb	r3, [r7, #27]
 8003c3e:	e086      	b.n	8003d4e <UART_SetConfig+0x282>
 8003c40:	2304      	movs	r3, #4
 8003c42:	76fb      	strb	r3, [r7, #27]
 8003c44:	e083      	b.n	8003d4e <UART_SetConfig+0x282>
 8003c46:	2308      	movs	r3, #8
 8003c48:	76fb      	strb	r3, [r7, #27]
 8003c4a:	e080      	b.n	8003d4e <UART_SetConfig+0x282>
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	76fb      	strb	r3, [r7, #27]
 8003c50:	e07d      	b.n	8003d4e <UART_SetConfig+0x282>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a5b      	ldr	r2, [pc, #364]	; (8003dc4 <UART_SetConfig+0x2f8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d120      	bne.n	8003c9e <UART_SetConfig+0x1d2>
 8003c5c:	4b56      	ldr	r3, [pc, #344]	; (8003db8 <UART_SetConfig+0x2ec>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c66:	2bc0      	cmp	r3, #192	; 0xc0
 8003c68:	d013      	beq.n	8003c92 <UART_SetConfig+0x1c6>
 8003c6a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c6c:	d814      	bhi.n	8003c98 <UART_SetConfig+0x1cc>
 8003c6e:	2b80      	cmp	r3, #128	; 0x80
 8003c70:	d009      	beq.n	8003c86 <UART_SetConfig+0x1ba>
 8003c72:	2b80      	cmp	r3, #128	; 0x80
 8003c74:	d810      	bhi.n	8003c98 <UART_SetConfig+0x1cc>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <UART_SetConfig+0x1b4>
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d006      	beq.n	8003c8c <UART_SetConfig+0x1c0>
 8003c7e:	e00b      	b.n	8003c98 <UART_SetConfig+0x1cc>
 8003c80:	2300      	movs	r3, #0
 8003c82:	76fb      	strb	r3, [r7, #27]
 8003c84:	e063      	b.n	8003d4e <UART_SetConfig+0x282>
 8003c86:	2302      	movs	r3, #2
 8003c88:	76fb      	strb	r3, [r7, #27]
 8003c8a:	e060      	b.n	8003d4e <UART_SetConfig+0x282>
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	76fb      	strb	r3, [r7, #27]
 8003c90:	e05d      	b.n	8003d4e <UART_SetConfig+0x282>
 8003c92:	2308      	movs	r3, #8
 8003c94:	76fb      	strb	r3, [r7, #27]
 8003c96:	e05a      	b.n	8003d4e <UART_SetConfig+0x282>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	76fb      	strb	r3, [r7, #27]
 8003c9c:	e057      	b.n	8003d4e <UART_SetConfig+0x282>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a49      	ldr	r2, [pc, #292]	; (8003dc8 <UART_SetConfig+0x2fc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d125      	bne.n	8003cf4 <UART_SetConfig+0x228>
 8003ca8:	4b43      	ldr	r3, [pc, #268]	; (8003db8 <UART_SetConfig+0x2ec>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cb6:	d017      	beq.n	8003ce8 <UART_SetConfig+0x21c>
 8003cb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cbc:	d817      	bhi.n	8003cee <UART_SetConfig+0x222>
 8003cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc2:	d00b      	beq.n	8003cdc <UART_SetConfig+0x210>
 8003cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc8:	d811      	bhi.n	8003cee <UART_SetConfig+0x222>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <UART_SetConfig+0x20a>
 8003cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd2:	d006      	beq.n	8003ce2 <UART_SetConfig+0x216>
 8003cd4:	e00b      	b.n	8003cee <UART_SetConfig+0x222>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	76fb      	strb	r3, [r7, #27]
 8003cda:	e038      	b.n	8003d4e <UART_SetConfig+0x282>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	76fb      	strb	r3, [r7, #27]
 8003ce0:	e035      	b.n	8003d4e <UART_SetConfig+0x282>
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	76fb      	strb	r3, [r7, #27]
 8003ce6:	e032      	b.n	8003d4e <UART_SetConfig+0x282>
 8003ce8:	2308      	movs	r3, #8
 8003cea:	76fb      	strb	r3, [r7, #27]
 8003cec:	e02f      	b.n	8003d4e <UART_SetConfig+0x282>
 8003cee:	2310      	movs	r3, #16
 8003cf0:	76fb      	strb	r3, [r7, #27]
 8003cf2:	e02c      	b.n	8003d4e <UART_SetConfig+0x282>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a2d      	ldr	r2, [pc, #180]	; (8003db0 <UART_SetConfig+0x2e4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d125      	bne.n	8003d4a <UART_SetConfig+0x27e>
 8003cfe:	4b2e      	ldr	r3, [pc, #184]	; (8003db8 <UART_SetConfig+0x2ec>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d0c:	d017      	beq.n	8003d3e <UART_SetConfig+0x272>
 8003d0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d12:	d817      	bhi.n	8003d44 <UART_SetConfig+0x278>
 8003d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d18:	d00b      	beq.n	8003d32 <UART_SetConfig+0x266>
 8003d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d1e:	d811      	bhi.n	8003d44 <UART_SetConfig+0x278>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <UART_SetConfig+0x260>
 8003d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d28:	d006      	beq.n	8003d38 <UART_SetConfig+0x26c>
 8003d2a:	e00b      	b.n	8003d44 <UART_SetConfig+0x278>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	76fb      	strb	r3, [r7, #27]
 8003d30:	e00d      	b.n	8003d4e <UART_SetConfig+0x282>
 8003d32:	2302      	movs	r3, #2
 8003d34:	76fb      	strb	r3, [r7, #27]
 8003d36:	e00a      	b.n	8003d4e <UART_SetConfig+0x282>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	76fb      	strb	r3, [r7, #27]
 8003d3c:	e007      	b.n	8003d4e <UART_SetConfig+0x282>
 8003d3e:	2308      	movs	r3, #8
 8003d40:	76fb      	strb	r3, [r7, #27]
 8003d42:	e004      	b.n	8003d4e <UART_SetConfig+0x282>
 8003d44:	2310      	movs	r3, #16
 8003d46:	76fb      	strb	r3, [r7, #27]
 8003d48:	e001      	b.n	8003d4e <UART_SetConfig+0x282>
 8003d4a:	2310      	movs	r3, #16
 8003d4c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a17      	ldr	r2, [pc, #92]	; (8003db0 <UART_SetConfig+0x2e4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	f040 8087 	bne.w	8003e68 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d5a:	7efb      	ldrb	r3, [r7, #27]
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d837      	bhi.n	8003dd0 <UART_SetConfig+0x304>
 8003d60:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <UART_SetConfig+0x29c>)
 8003d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d66:	bf00      	nop
 8003d68:	08003d8d 	.word	0x08003d8d
 8003d6c:	08003dd1 	.word	0x08003dd1
 8003d70:	08003d95 	.word	0x08003d95
 8003d74:	08003dd1 	.word	0x08003dd1
 8003d78:	08003d9b 	.word	0x08003d9b
 8003d7c:	08003dd1 	.word	0x08003dd1
 8003d80:	08003dd1 	.word	0x08003dd1
 8003d84:	08003dd1 	.word	0x08003dd1
 8003d88:	08003da3 	.word	0x08003da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d8c:	f7ff f908 	bl	8002fa0 <HAL_RCC_GetPCLK1Freq>
 8003d90:	6178      	str	r0, [r7, #20]
        break;
 8003d92:	e022      	b.n	8003dda <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d94:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <UART_SetConfig+0x300>)
 8003d96:	617b      	str	r3, [r7, #20]
        break;
 8003d98:	e01f      	b.n	8003dda <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9a:	f7ff f869 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 8003d9e:	6178      	str	r0, [r7, #20]
        break;
 8003da0:	e01b      	b.n	8003dda <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da6:	617b      	str	r3, [r7, #20]
        break;
 8003da8:	e017      	b.n	8003dda <UART_SetConfig+0x30e>
 8003daa:	bf00      	nop
 8003dac:	efff69f3 	.word	0xefff69f3
 8003db0:	40008000 	.word	0x40008000
 8003db4:	40013800 	.word	0x40013800
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40004400 	.word	0x40004400
 8003dc0:	40004800 	.word	0x40004800
 8003dc4:	40004c00 	.word	0x40004c00
 8003dc8:	40005000 	.word	0x40005000
 8003dcc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	76bb      	strb	r3, [r7, #26]
        break;
 8003dd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80f1 	beq.w	8003fc4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	4413      	add	r3, r2
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d305      	bcc.n	8003dfe <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d902      	bls.n	8003e04 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	76bb      	strb	r3, [r7, #26]
 8003e02:	e0df      	b.n	8003fc4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f04f 0100 	mov.w	r1, #0
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	020b      	lsls	r3, r1, #8
 8003e16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e1a:	0202      	lsls	r2, r0, #8
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	6849      	ldr	r1, [r1, #4]
 8003e20:	0849      	lsrs	r1, r1, #1
 8003e22:	4608      	mov	r0, r1
 8003e24:	f04f 0100 	mov.w	r1, #0
 8003e28:	1814      	adds	r4, r2, r0
 8003e2a:	eb43 0501 	adc.w	r5, r3, r1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	4620      	mov	r0, r4
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	f7fc fcfa 	bl	8000834 <__aeabi_uldivmod>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4613      	mov	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e4e:	d308      	bcc.n	8003e62 <UART_SetConfig+0x396>
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e56:	d204      	bcs.n	8003e62 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	60da      	str	r2, [r3, #12]
 8003e60:	e0b0      	b.n	8003fc4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	76bb      	strb	r3, [r7, #26]
 8003e66:	e0ad      	b.n	8003fc4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e70:	d15b      	bne.n	8003f2a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003e72:	7efb      	ldrb	r3, [r7, #27]
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d828      	bhi.n	8003eca <UART_SetConfig+0x3fe>
 8003e78:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <UART_SetConfig+0x3b4>)
 8003e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7e:	bf00      	nop
 8003e80:	08003ea5 	.word	0x08003ea5
 8003e84:	08003ead 	.word	0x08003ead
 8003e88:	08003eb5 	.word	0x08003eb5
 8003e8c:	08003ecb 	.word	0x08003ecb
 8003e90:	08003ebb 	.word	0x08003ebb
 8003e94:	08003ecb 	.word	0x08003ecb
 8003e98:	08003ecb 	.word	0x08003ecb
 8003e9c:	08003ecb 	.word	0x08003ecb
 8003ea0:	08003ec3 	.word	0x08003ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ea4:	f7ff f87c 	bl	8002fa0 <HAL_RCC_GetPCLK1Freq>
 8003ea8:	6178      	str	r0, [r7, #20]
        break;
 8003eaa:	e013      	b.n	8003ed4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eac:	f7ff f88e 	bl	8002fcc <HAL_RCC_GetPCLK2Freq>
 8003eb0:	6178      	str	r0, [r7, #20]
        break;
 8003eb2:	e00f      	b.n	8003ed4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eb4:	4b49      	ldr	r3, [pc, #292]	; (8003fdc <UART_SetConfig+0x510>)
 8003eb6:	617b      	str	r3, [r7, #20]
        break;
 8003eb8:	e00c      	b.n	8003ed4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eba:	f7fe ffd9 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 8003ebe:	6178      	str	r0, [r7, #20]
        break;
 8003ec0:	e008      	b.n	8003ed4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ec6:	617b      	str	r3, [r7, #20]
        break;
 8003ec8:	e004      	b.n	8003ed4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	76bb      	strb	r3, [r7, #26]
        break;
 8003ed2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d074      	beq.n	8003fc4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	005a      	lsls	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	085b      	lsrs	r3, r3, #1
 8003ee4:	441a      	add	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b0f      	cmp	r3, #15
 8003ef4:	d916      	bls.n	8003f24 <UART_SetConfig+0x458>
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efc:	d212      	bcs.n	8003f24 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	f023 030f 	bic.w	r3, r3, #15
 8003f06:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	085b      	lsrs	r3, r3, #1
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	89fb      	ldrh	r3, [r7, #14]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	89fa      	ldrh	r2, [r7, #14]
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	e04f      	b.n	8003fc4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	76bb      	strb	r3, [r7, #26]
 8003f28:	e04c      	b.n	8003fc4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f2a:	7efb      	ldrb	r3, [r7, #27]
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d828      	bhi.n	8003f82 <UART_SetConfig+0x4b6>
 8003f30:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <UART_SetConfig+0x46c>)
 8003f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f36:	bf00      	nop
 8003f38:	08003f5d 	.word	0x08003f5d
 8003f3c:	08003f65 	.word	0x08003f65
 8003f40:	08003f6d 	.word	0x08003f6d
 8003f44:	08003f83 	.word	0x08003f83
 8003f48:	08003f73 	.word	0x08003f73
 8003f4c:	08003f83 	.word	0x08003f83
 8003f50:	08003f83 	.word	0x08003f83
 8003f54:	08003f83 	.word	0x08003f83
 8003f58:	08003f7b 	.word	0x08003f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f5c:	f7ff f820 	bl	8002fa0 <HAL_RCC_GetPCLK1Freq>
 8003f60:	6178      	str	r0, [r7, #20]
        break;
 8003f62:	e013      	b.n	8003f8c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f64:	f7ff f832 	bl	8002fcc <HAL_RCC_GetPCLK2Freq>
 8003f68:	6178      	str	r0, [r7, #20]
        break;
 8003f6a:	e00f      	b.n	8003f8c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f6c:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <UART_SetConfig+0x510>)
 8003f6e:	617b      	str	r3, [r7, #20]
        break;
 8003f70:	e00c      	b.n	8003f8c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f72:	f7fe ff7d 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 8003f76:	6178      	str	r0, [r7, #20]
        break;
 8003f78:	e008      	b.n	8003f8c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7e:	617b      	str	r3, [r7, #20]
        break;
 8003f80:	e004      	b.n	8003f8c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	76bb      	strb	r3, [r7, #26]
        break;
 8003f8a:	bf00      	nop
    }

    if (pclk != 0U)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d018      	beq.n	8003fc4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	085a      	lsrs	r2, r3, #1
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	441a      	add	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	2b0f      	cmp	r3, #15
 8003faa:	d909      	bls.n	8003fc0 <UART_SetConfig+0x4f4>
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb2:	d205      	bcs.n	8003fc0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60da      	str	r2, [r3, #12]
 8003fbe:	e001      	b.n	8003fc4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003fd0:	7ebb      	ldrb	r3, [r7, #26]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3720      	adds	r7, #32
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	00f42400 	.word	0x00f42400

08003fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01a      	beq.n	80040f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040de:	d10a      	bne.n	80040f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	605a      	str	r2, [r3, #4]
  }
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af02      	add	r7, sp, #8
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004134:	f7fd f90e 	bl	8001354 <HAL_GetTick>
 8004138:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b08      	cmp	r3, #8
 8004146:	d10e      	bne.n	8004166 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f82d 	bl	80041b6 <UART_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e023      	b.n	80041ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b04      	cmp	r3, #4
 8004172:	d10e      	bne.n	8004192 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f817 	bl	80041b6 <UART_WaitOnFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e00d      	b.n	80041ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b09c      	sub	sp, #112	; 0x70
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	4613      	mov	r3, r2
 80041c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c6:	e0a5      	b.n	8004314 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	f000 80a1 	beq.w	8004314 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d2:	f7fd f8bf 	bl	8001354 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041de:	429a      	cmp	r2, r3
 80041e0:	d302      	bcc.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80041e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d13e      	bne.n	8004266 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041fc:	667b      	str	r3, [r7, #100]	; 0x64
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004206:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004208:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800420c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e6      	bne.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3308      	adds	r3, #8
 8004220:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800422a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	663b      	str	r3, [r7, #96]	; 0x60
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3308      	adds	r3, #8
 8004238:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800423a:	64ba      	str	r2, [r7, #72]	; 0x48
 800423c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e5      	bne.n	800421a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e067      	b.n	8004336 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d04f      	beq.n	8004314 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800427e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004282:	d147      	bne.n	8004314 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800428c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	e853 3f00 	ldrex	r3, [r3]
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
 80042ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042b4:	e841 2300 	strex	r3, r2, [r1]
 80042b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e6      	bne.n	800428e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3308      	adds	r3, #8
 80042c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	613b      	str	r3, [r7, #16]
   return(result);
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f023 0301 	bic.w	r3, r3, #1
 80042d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3308      	adds	r3, #8
 80042de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042e0:	623a      	str	r2, [r7, #32]
 80042e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	69f9      	ldr	r1, [r7, #28]
 80042e6:	6a3a      	ldr	r2, [r7, #32]
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e5      	bne.n	80042c0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2220      	movs	r2, #32
 80042f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e010      	b.n	8004336 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69da      	ldr	r2, [r3, #28]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	4013      	ands	r3, r2
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	429a      	cmp	r2, r3
 8004322:	bf0c      	ite	eq
 8004324:	2301      	moveq	r3, #1
 8004326:	2300      	movne	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	429a      	cmp	r2, r3
 8004330:	f43f af4a 	beq.w	80041c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3770      	adds	r7, #112	; 0x70
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <__libc_init_array>:
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	4d0d      	ldr	r5, [pc, #52]	; (8004378 <__libc_init_array+0x38>)
 8004344:	4c0d      	ldr	r4, [pc, #52]	; (800437c <__libc_init_array+0x3c>)
 8004346:	1b64      	subs	r4, r4, r5
 8004348:	10a4      	asrs	r4, r4, #2
 800434a:	2600      	movs	r6, #0
 800434c:	42a6      	cmp	r6, r4
 800434e:	d109      	bne.n	8004364 <__libc_init_array+0x24>
 8004350:	4d0b      	ldr	r5, [pc, #44]	; (8004380 <__libc_init_array+0x40>)
 8004352:	4c0c      	ldr	r4, [pc, #48]	; (8004384 <__libc_init_array+0x44>)
 8004354:	f000 f820 	bl	8004398 <_init>
 8004358:	1b64      	subs	r4, r4, r5
 800435a:	10a4      	asrs	r4, r4, #2
 800435c:	2600      	movs	r6, #0
 800435e:	42a6      	cmp	r6, r4
 8004360:	d105      	bne.n	800436e <__libc_init_array+0x2e>
 8004362:	bd70      	pop	{r4, r5, r6, pc}
 8004364:	f855 3b04 	ldr.w	r3, [r5], #4
 8004368:	4798      	blx	r3
 800436a:	3601      	adds	r6, #1
 800436c:	e7ee      	b.n	800434c <__libc_init_array+0xc>
 800436e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004372:	4798      	blx	r3
 8004374:	3601      	adds	r6, #1
 8004376:	e7f2      	b.n	800435e <__libc_init_array+0x1e>
 8004378:	08004418 	.word	0x08004418
 800437c:	08004418 	.word	0x08004418
 8004380:	08004418 	.word	0x08004418
 8004384:	0800441c 	.word	0x0800441c

08004388 <memset>:
 8004388:	4402      	add	r2, r0
 800438a:	4603      	mov	r3, r0
 800438c:	4293      	cmp	r3, r2
 800438e:	d100      	bne.n	8004392 <memset+0xa>
 8004390:	4770      	bx	lr
 8004392:	f803 1b01 	strb.w	r1, [r3], #1
 8004396:	e7f9      	b.n	800438c <memset+0x4>

08004398 <_init>:
 8004398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439a:	bf00      	nop
 800439c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439e:	bc08      	pop	{r3}
 80043a0:	469e      	mov	lr, r3
 80043a2:	4770      	bx	lr

080043a4 <_fini>:
 80043a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a6:	bf00      	nop
 80043a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043aa:	bc08      	pop	{r3}
 80043ac:	469e      	mov	lr, r3
 80043ae:	4770      	bx	lr
