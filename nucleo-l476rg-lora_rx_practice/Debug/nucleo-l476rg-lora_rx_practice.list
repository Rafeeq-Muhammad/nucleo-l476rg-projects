
nucleo-l476rg-lora_rx_practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ff8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005188  08005188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800528c  0800528c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800528c  0800528c  0001528c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005294  08005294  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800529c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000070  0800530c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  0800530c  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db22  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db2  00000000  00000000  0002dbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  0002f978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a98  00000000  00000000  000304c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026875  00000000  00000000  00030f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c25d  00000000  00000000  000577d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec0d2  00000000  00000000  00063a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014fb04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e0  00000000  00000000  0014fb58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005170 	.word	0x08005170

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005170 	.word	0x08005170

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000578:	b4b0      	push	{r4, r5, r7}
 800057a:	b08f      	sub	sp, #60	; 0x3c
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000580:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000584:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000586:	2307      	movs	r3, #7
 8000588:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 800058c:	2307      	movs	r3, #7
 800058e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000592:	2301      	movs	r3, #1
 8000594:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8000598:	23ff      	movs	r3, #255	; 0xff
 800059a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80005a4:	2308      	movs	r3, #8
 80005a6:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	461d      	mov	r5, r3
 80005ac:	f107 040c 	add.w	r4, r7, #12
 80005b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005b8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80005bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	373c      	adds	r7, #60	; 0x3c
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bcb0      	pop	{r4, r5, r7}
 80005c8:	4770      	bx	lr

080005ca <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6898      	ldr	r0, [r3, #8]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	899b      	ldrh	r3, [r3, #12]
 80005da:	2200      	movs	r2, #0
 80005dc:	4619      	mov	r1, r3
 80005de:	f001 fa29 	bl	8001a34 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 ff46 	bl	8001474 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6898      	ldr	r0, [r3, #8]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	899b      	ldrh	r3, [r3, #12]
 80005f0:	2201      	movs	r2, #1
 80005f2:	4619      	mov	r1, r3
 80005f4:	f001 fa1e 	bl	8001a34 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005f8:	2064      	movs	r0, #100	; 0x64
 80005fa:	f000 ff3b 	bl	8001474 <HAL_Delay>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000606:	b580      	push	{r7, lr}
 8000608:	b084      	sub	sp, #16
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000610:	2101      	movs	r1, #1
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 f99f 	bl	8000956 <LoRa_read>
 8000618:	4603      	mov	r3, r0
 800061a:	73bb      	strb	r3, [r7, #14]
	data = read;
 800061c:	7bbb      	ldrb	r3, [r7, #14]
 800061e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d107      	bne.n	8000636 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000626:	7bbb      	ldrb	r3, [r7, #14]
 8000628:	f023 0307 	bic.w	r3, r3, #7
 800062c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	61da      	str	r2, [r3, #28]
 8000634:	e03e      	b.n	80006b4 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d10c      	bne.n	8000656 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 800063c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000640:	f023 0307 	bic.w	r3, r3, #7
 8000644:	b25b      	sxtb	r3, r3
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	b25b      	sxtb	r3, r3
 800064c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2201      	movs	r2, #1
 8000652:	61da      	str	r2, [r3, #28]
 8000654:	e02e      	b.n	80006b4 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	2b03      	cmp	r3, #3
 800065a:	d10c      	bne.n	8000676 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800065c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000660:	f023 0307 	bic.w	r3, r3, #7
 8000664:	b25b      	sxtb	r3, r3
 8000666:	f043 0303 	orr.w	r3, r3, #3
 800066a:	b25b      	sxtb	r3, r3
 800066c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2203      	movs	r2, #3
 8000672:	61da      	str	r2, [r3, #28]
 8000674:	e01e      	b.n	80006b4 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	2b05      	cmp	r3, #5
 800067a:	d10c      	bne.n	8000696 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 800067c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000680:	f023 0307 	bic.w	r3, r3, #7
 8000684:	b25b      	sxtb	r3, r3
 8000686:	f043 0305 	orr.w	r3, r3, #5
 800068a:	b25b      	sxtb	r3, r3
 800068c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2205      	movs	r2, #5
 8000692:	61da      	str	r2, [r3, #28]
 8000694:	e00e      	b.n	80006b4 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b06      	cmp	r3, #6
 800069a:	d10b      	bne.n	80006b4 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 800069c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006a0:	f023 0307 	bic.w	r3, r3, #7
 80006a4:	b25b      	sxtb	r3, r3
 80006a6:	f043 0306 	orr.w	r3, r3, #6
 80006aa:	b25b      	sxtb	r3, r3
 80006ac:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2206      	movs	r2, #6
 80006b2:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	461a      	mov	r2, r3
 80006b8:	2101      	movs	r1, #1
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f000 f965 	bl	800098a <LoRa_write>
	//HAL_Delay(10);
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4613      	mov	r3, r2
 80006d6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	889b      	ldrh	r3, [r3, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	4619      	mov	r1, r3
 80006e4:	f001 f9a6 	bl	8001a34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	6998      	ldr	r0, [r3, #24]
 80006ec:	88fa      	ldrh	r2, [r7, #6]
 80006ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006f2:	68b9      	ldr	r1, [r7, #8]
 80006f4:	f002 fd7d 	bl	80031f2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006f8:	bf00      	nop
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fa28 	bl	8003b54 <HAL_SPI_GetState>
 8000704:	4603      	mov	r3, r0
 8000706:	2b01      	cmp	r3, #1
 8000708:	d1f7      	bne.n	80006fa <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	6998      	ldr	r0, [r3, #24]
 800070e:	8b3a      	ldrh	r2, [r7, #24]
 8000710:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000714:	6839      	ldr	r1, [r7, #0]
 8000716:	f002 feda 	bl	80034ce <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800071a:	bf00      	nop
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4618      	mov	r0, r3
 8000722:	f003 fa17 	bl	8003b54 <HAL_SPI_GetState>
 8000726:	4603      	mov	r3, r0
 8000728:	2b01      	cmp	r3, #1
 800072a:	d1f7      	bne.n	800071c <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	889b      	ldrh	r3, [r3, #4]
 8000734:	2201      	movs	r2, #1
 8000736:	4619      	mov	r1, r3
 8000738:	f001 f97c 	bl	8001a34 <HAL_GPIO_WritePin>
}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	4613      	mov	r3, r2
 8000752:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	6818      	ldr	r0, [r3, #0]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	889b      	ldrh	r3, [r3, #4]
 800075c:	2200      	movs	r2, #0
 800075e:	4619      	mov	r1, r3
 8000760:	f001 f968 	bl	8001a34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	6998      	ldr	r0, [r3, #24]
 8000768:	88fa      	ldrh	r2, [r7, #6]
 800076a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800076e:	68b9      	ldr	r1, [r7, #8]
 8000770:	f002 fd3f 	bl	80031f2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000774:	bf00      	nop
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4618      	mov	r0, r3
 800077c:	f003 f9ea 	bl	8003b54 <HAL_SPI_GetState>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d1f7      	bne.n	8000776 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	6998      	ldr	r0, [r3, #24]
 800078a:	8b3a      	ldrh	r2, [r7, #24]
 800078c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000790:	6839      	ldr	r1, [r7, #0]
 8000792:	f002 fd2e 	bl	80031f2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000796:	bf00      	nop
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4618      	mov	r0, r3
 800079e:	f003 f9d9 	bl	8003b54 <HAL_SPI_GetState>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d1f7      	bne.n	8000798 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	6818      	ldr	r0, [r3, #0]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	889b      	ldrh	r3, [r3, #4]
 80007b0:	2201      	movs	r2, #1
 80007b2:	4619      	mov	r1, r3
 80007b4:	f001 f93e 	bl	8001a34 <HAL_GPIO_WritePin>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	04db      	lsls	r3, r3, #19
 80007ce:	115b      	asrs	r3, r3, #5
 80007d0:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	0c1b      	lsrs	r3, r3, #16
 80007d6:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	461a      	mov	r2, r3
 80007dc:	2106      	movs	r1, #6
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f000 f8d3 	bl	800098a <LoRa_write>
	HAL_Delay(5);
 80007e4:	2005      	movs	r0, #5
 80007e6:	f000 fe45 	bl	8001474 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	0a1b      	lsrs	r3, r3, #8
 80007ee:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80007f0:	7afb      	ldrb	r3, [r7, #11]
 80007f2:	461a      	mov	r2, r3
 80007f4:	2107      	movs	r1, #7
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f000 f8c7 	bl	800098a <LoRa_write>
	HAL_Delay(5);
 80007fc:	2005      	movs	r0, #5
 80007fe:	f000 fe39 	bl	8001474 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000806:	7afb      	ldrb	r3, [r7, #11]
 8000808:	461a      	mov	r2, r3
 800080a:	2108      	movs	r1, #8
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 f8bc 	bl	800098a <LoRa_write>
	HAL_Delay(5);
 8000812:	2005      	movs	r0, #5
 8000814:	f000 fe2e 	bl	8001474 <HAL_Delay>
}
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	2b0c      	cmp	r3, #12
 800082e:	dd01      	ble.n	8000834 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000830:	230c      	movs	r3, #12
 8000832:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	2b06      	cmp	r3, #6
 8000838:	dc01      	bgt.n	800083e <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800083a:	2307      	movs	r3, #7
 800083c:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800083e:	211e      	movs	r1, #30
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 f888 	bl	8000956 <LoRa_read>
 8000846:	4603      	mov	r3, r0
 8000848:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800084a:	200a      	movs	r0, #10
 800084c:	f000 fe12 	bl	8001474 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	011b      	lsls	r3, r3, #4
 8000856:	b2da      	uxtb	r2, r3
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4413      	add	r3, r2
 8000862:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000864:	7bbb      	ldrb	r3, [r7, #14]
 8000866:	461a      	mov	r2, r3
 8000868:	211e      	movs	r1, #30
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f000 f88d 	bl	800098a <LoRa_write>
	HAL_Delay(10);
 8000870:	200a      	movs	r0, #10
 8000872:	f000 fdff 	bl	8001474 <HAL_Delay>
}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	460b      	mov	r3, r1
 8000888:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800088a:	78fb      	ldrb	r3, [r7, #3]
 800088c:	461a      	mov	r2, r3
 800088e:	2109      	movs	r1, #9
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f000 f87a 	bl	800098a <LoRa_write>
	HAL_Delay(10);
 8000896:	200a      	movs	r0, #10
 8000898:	f000 fdec 	bl	8001474 <HAL_Delay>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	2b2c      	cmp	r3, #44	; 0x2c
 80008b8:	d801      	bhi.n	80008be <LoRa_setOCP+0x1a>
		current = 45;
 80008ba:	232d      	movs	r3, #45	; 0x2d
 80008bc:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	2bf0      	cmp	r3, #240	; 0xf0
 80008c2:	d901      	bls.n	80008c8 <LoRa_setOCP+0x24>
		current = 240;
 80008c4:	23f0      	movs	r3, #240	; 0xf0
 80008c6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	2b78      	cmp	r3, #120	; 0x78
 80008cc:	d809      	bhi.n	80008e2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	3b2d      	subs	r3, #45	; 0x2d
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <LoRa_setOCP+0x78>)
 80008d4:	fb82 1203 	smull	r1, r2, r2, r3
 80008d8:	1052      	asrs	r2, r2, #1
 80008da:	17db      	asrs	r3, r3, #31
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	73fb      	strb	r3, [r7, #15]
 80008e0:	e00b      	b.n	80008fa <LoRa_setOCP+0x56>
	else if(current <= 240)
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	2bf0      	cmp	r3, #240	; 0xf0
 80008e6:	d808      	bhi.n	80008fa <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	331e      	adds	r3, #30
 80008ec:	4a0b      	ldr	r2, [pc, #44]	; (800091c <LoRa_setOCP+0x78>)
 80008ee:	fb82 1203 	smull	r1, r2, r2, r3
 80008f2:	1092      	asrs	r2, r2, #2
 80008f4:	17db      	asrs	r3, r3, #31
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	3320      	adds	r3, #32
 80008fe:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	461a      	mov	r2, r3
 8000904:	210b      	movs	r1, #11
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f000 f83f 	bl	800098a <LoRa_write>
	HAL_Delay(10);
 800090c:	200a      	movs	r0, #10
 800090e:	f000 fdb1 	bl	8001474 <HAL_Delay>
}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	66666667 	.word	0x66666667

08000920 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000928:	211e      	movs	r1, #30
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f000 f813 	bl	8000956 <LoRa_read>
 8000930:	4603      	mov	r3, r0
 8000932:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	f043 0307 	orr.w	r3, r3, #7
 800093a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	461a      	mov	r2, r3
 8000940:	211e      	movs	r1, #30
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 f821 	bl	800098a <LoRa_write>
	HAL_Delay(10);
 8000948:	200a      	movs	r0, #10
 800094a:	f000 fd93 	bl	8001474 <HAL_Delay>
}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af02      	add	r7, sp, #8
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	460b      	mov	r3, r1
 8000960:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000962:	78fb      	ldrb	r3, [r7, #3]
 8000964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000968:	b2db      	uxtb	r3, r3
 800096a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800096c:	f107 030f 	add.w	r3, r7, #15
 8000970:	f107 010e 	add.w	r1, r7, #14
 8000974:	2201      	movs	r2, #1
 8000976:	9200      	str	r2, [sp, #0]
 8000978:	2201      	movs	r2, #1
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff fea4 	bl	80006c8 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000980:	7bfb      	ldrb	r3, [r7, #15]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af02      	add	r7, sp, #8
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	460b      	mov	r3, r1
 8000994:	70fb      	strb	r3, [r7, #3]
 8000996:	4613      	mov	r3, r2
 8000998:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	73bb      	strb	r3, [r7, #14]
	data = value;
 80009a4:	78bb      	ldrb	r3, [r7, #2]
 80009a6:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80009a8:	f107 030f 	add.w	r3, r7, #15
 80009ac:	f107 010e 	add.w	r1, r7, #14
 80009b0:	2201      	movs	r2, #1
 80009b2:	9200      	str	r2, [sp, #0]
 80009b4:	2201      	movs	r2, #1
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff fec4 	bl	8000744 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

	return 1;
 80009cc:	2301      	movs	r3, #1
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80009e2:	2105      	movs	r1, #5
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff fe0e 	bl	8000606 <LoRa_gotoMode>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80009f2:	b590      	push	{r4, r7, lr}
 80009f4:	b089      	sub	sp, #36	; 0x24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	4613      	mov	r3, r2
 80009fe:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
 8000a08:	e007      	b.n	8000a1a <LoRa_receive+0x28>
		data[i]=0;
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	4413      	add	r3, r2
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	3301      	adds	r3, #1
 8000a18:	61bb      	str	r3, [r7, #24]
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	dbf3      	blt.n	8000a0a <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000a22:	2101      	movs	r1, #1
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f7ff fdee 	bl	8000606 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000a2a:	2112      	movs	r1, #18
 8000a2c:	68f8      	ldr	r0, [r7, #12]
 8000a2e:	f7ff ff92 	bl	8000956 <LoRa_read>
 8000a32:	4603      	mov	r3, r0
 8000a34:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000a36:	7cfb      	ldrb	r3, [r7, #19]
 8000a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d02f      	beq.n	8000aa0 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000a40:	22ff      	movs	r2, #255	; 0xff
 8000a42:	2112      	movs	r1, #18
 8000a44:	68f8      	ldr	r0, [r7, #12]
 8000a46:	f7ff ffa0 	bl	800098a <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000a4a:	2113      	movs	r1, #19
 8000a4c:	68f8      	ldr	r0, [r7, #12]
 8000a4e:	f7ff ff82 	bl	8000956 <LoRa_read>
 8000a52:	4603      	mov	r3, r0
 8000a54:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000a56:	2110      	movs	r1, #16
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f7ff ff7c 	bl	8000956 <LoRa_read>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000a62:	7cfb      	ldrb	r3, [r7, #19]
 8000a64:	461a      	mov	r2, r3
 8000a66:	210d      	movs	r1, #13
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	f7ff ff8e 	bl	800098a <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000a6e:	7cba      	ldrb	r2, [r7, #18]
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	4293      	cmp	r3, r2
 8000a74:	bf28      	it	cs
 8000a76:	4613      	movcs	r3, r2
 8000a78:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	e00b      	b.n	8000a98 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	18d4      	adds	r4, r2, r3
 8000a86:	2100      	movs	r1, #0
 8000a88:	68f8      	ldr	r0, [r7, #12]
 8000a8a:	f7ff ff64 	bl	8000956 <LoRa_read>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	7ffb      	ldrb	r3, [r7, #31]
 8000a9a:	697a      	ldr	r2, [r7, #20]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbef      	blt.n	8000a80 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000aa0:	2105      	movs	r1, #5
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f7ff fdaf 	bl	8000606 <LoRa_gotoMode>
    return min;
 8000aa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3724      	adds	r7, #36	; 0x24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd90      	pop	{r4, r7, pc}

08000ab2 <LoRa_getRSSI>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Returns the RSSI value of last received packet.
\* ----------------------------------------------------------------------------- */
int LoRa_getRSSI(LoRa* _LoRa){
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b084      	sub	sp, #16
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	uint8_t read;
	read = LoRa_read(_LoRa, RegPktRssiValue);
 8000aba:	211a      	movs	r1, #26
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ff4a 	bl	8000956 <LoRa_read>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	73fb      	strb	r3, [r7, #15]
	return -164 + read;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	3ba4      	subs	r3, #164	; 0xa4
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b084      	sub	sp, #16
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff ff72 	bl	80009c4 <LoRa_isvalid>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 8093 	beq.w	8000c0e <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff fd8b 	bl	8000606 <LoRa_gotoMode>
			HAL_Delay(10);
 8000af0:	200a      	movs	r0, #10
 8000af2:	f000 fcbf 	bl	8001474 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000af6:	2101      	movs	r1, #1
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ff2c 	bl	8000956 <LoRa_read>
 8000afe:	4603      	mov	r3, r0
 8000b00:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000b02:	200a      	movs	r0, #10
 8000b04:	f000 fcb6 	bl	8001474 <HAL_Delay>
			data = read | 0x80;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b0e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000b10:	7bbb      	ldrb	r3, [r7, #14]
 8000b12:	461a      	mov	r2, r3
 8000b14:	2101      	movs	r1, #1
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ff37 	bl	800098a <LoRa_write>
			HAL_Delay(100);
 8000b1c:	2064      	movs	r0, #100	; 0x64
 8000b1e:	f000 fca9 	bl	8001474 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6a1b      	ldr	r3, [r3, #32]
 8000b26:	4619      	mov	r1, r3
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff fe49 	bl	80007c0 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000b34:	4619      	mov	r1, r3
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff fea1 	bl	800087e <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000b42:	4619      	mov	r1, r3
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff fead 	bl	80008a4 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000b4a:	2223      	movs	r2, #35	; 0x23
 8000b4c:	210c      	movs	r1, #12
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ff1b 	bl	800098a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff fee3 	bl	8000920 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff fe5c 	bl	8000820 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000b68:	22ff      	movs	r2, #255	; 0xff
 8000b6a:	211f      	movs	r1, #31
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff0c 	bl	800098a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b7c:	011b      	lsls	r3, r3, #4
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	461a      	mov	r2, r3
 8000b92:	211d      	movs	r1, #29
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff fef8 	bl	800098a <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b9e:	0a1b      	lsrs	r3, r3, #8
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	2120      	movs	r1, #32
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff feee 	bl	800098a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	2121      	movs	r1, #33	; 0x21
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff fee6 	bl	800098a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff fec8 	bl	8000956 <LoRa_read>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000bd0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000bd2:	7bbb      	ldrb	r3, [r7, #14]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	2140      	movs	r1, #64	; 0x40
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff fed6 	bl	800098a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000bde:	2101      	movs	r1, #1
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff fd10 	bl	8000606 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2201      	movs	r2, #1
 8000bea:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000bec:	200a      	movs	r0, #10
 8000bee:	f000 fc41 	bl	8001474 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000bf2:	2142      	movs	r1, #66	; 0x42
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff feae 	bl	8000956 <LoRa_read>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	2b12      	cmp	r3, #18
 8000c02:	d101      	bne.n	8000c08 <LoRa_init+0x136>
				return LORA_OK;
 8000c04:	23c8      	movs	r3, #200	; 0xc8
 8000c06:	e004      	b.n	8000c12 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000c08:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000c0c:	e001      	b.n	8000c12 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000c0e:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b5b0      	push	{r4, r5, r7, lr}
 8000c1e:	b0be      	sub	sp, #248	; 0xf8
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c22:	f000 fbab 	bl	800137c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c26:	f000 f86f 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2a:	f000 f92d 	bl	8000e88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c2e:	f000 f8fb 	bl	8000e28 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000c32:	f000 f8bb 	bl	8000dac <MX_SPI1_Init>
  /*
  The following initializes a character buffer called message of size 200.
  It is used for the welcome message. Transmit this welcome message.
  */
  char   message[200]; //
  snprintf(message,sizeof(message),"Starting up CDH-CAPE4 Remote Node-------------------------------------- \n\r");
 8000c36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c3a:	4a2e      	ldr	r2, [pc, #184]	; (8000cf4 <main+0xd8>)
 8000c3c:	21c8      	movs	r1, #200	; 0xc8
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 fe54 	bl	80048ec <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 200);
 8000c44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fac1 	bl	80001d0 <strlen>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000c56:	23c8      	movs	r3, #200	; 0xc8
 8000c58:	4827      	ldr	r0, [pc, #156]	; (8000cf8 <main+0xdc>)
 8000c5a:	f003 f98f 	bl	8003f7c <HAL_UART_Transmit>

  /* MODULE SETTINGS */
  myLoRa = newLoRa();
 8000c5e:	4c27      	ldr	r4, [pc, #156]	; (8000cfc <main+0xe0>)
 8000c60:	463b      	mov	r3, r7
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fc88 	bl	8000578 <newLoRa>
 8000c68:	4625      	mov	r5, r4
 8000c6a:	463c      	mov	r4, r7
 8000c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c74:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000c78:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.hSPIx                 = &hspi1;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <main+0xe0>)
 8000c7e:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <main+0xe4>)
 8000c80:	619a      	str	r2, [r3, #24]
  myLoRa.CS_port               = GPIOB;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <main+0xe0>)
 8000c84:	4a1f      	ldr	r2, [pc, #124]	; (8000d04 <main+0xe8>)
 8000c86:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin                = CS_Pin;
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <main+0xe0>)
 8000c8a:	2240      	movs	r2, #64	; 0x40
 8000c8c:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port            = GPIOB;
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <main+0xe0>)
 8000c90:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <main+0xe8>)
 8000c92:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin             = reset_Pin;
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <main+0xe0>)
 8000c96:	2210      	movs	r2, #16
 8000c98:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port                         = dio0_GPIO_Port;
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <main+0xe0>)
 8000c9c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ca0:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin                             = dio0_Pin;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <main+0xe0>)
 8000ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca8:	829a      	strh	r2, [r3, #20]

  myLoRa.frequency             = 433;                              // default = 433 MHz
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <main+0xe0>)
 8000cac:	f240 12b1 	movw	r2, #433	; 0x1b1
 8000cb0:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;                            // default = SF_7
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <main+0xe0>)
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  myLoRa.bandWidth                   = BW_62_5KHz;                  // default = BW_125KHz
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <main+0xe0>)
 8000cbc:	2206      	movs	r2, #6
 8000cbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  myLoRa.crcRate                       = CR_4_5;                        // default = CR_4_5
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <main+0xe0>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  myLoRa.power                           = POWER_20db;                // default = 20db
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <main+0xe0>)
 8000ccc:	22ff      	movs	r2, #255	; 0xff
 8000cce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  myLoRa.overCurrentProtection = 120;                             // default = 100 mA
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <main+0xe0>)
 8000cd4:	2278      	movs	r2, #120	; 0x78
 8000cd6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa.preamble                       = 10;                              // default = 8;
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <main+0xe0>)
 8000cdc:	220a      	movs	r2, #10
 8000cde:	851a      	strh	r2, [r3, #40]	; 0x28

  LoRa_reset(&myLoRa);
 8000ce0:	4806      	ldr	r0, [pc, #24]	; (8000cfc <main+0xe0>)
 8000ce2:	f7ff fc72 	bl	80005ca <LoRa_reset>
  LoRa_init(&myLoRa);
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <main+0xe0>)
 8000ce8:	f7ff fef3 	bl	8000ad2 <LoRa_init>

  /* START CONTINUOUS RECEIVING */
  LoRa_startReceiving(&myLoRa);
 8000cec:	4803      	ldr	r0, [pc, #12]	; (8000cfc <main+0xe0>)
 8000cee:	f7ff fe74 	bl	80009da <LoRa_startReceiving>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <main+0xd6>
 8000cf4:	08005188 	.word	0x08005188
 8000cf8:	20000200 	.word	0x20000200
 8000cfc:	20000284 	.word	0x20000284
 8000d00:	2000019c 	.word	0x2000019c
 8000d04:	48000400 	.word	0x48000400

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b096      	sub	sp, #88	; 0x58
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	2244      	movs	r2, #68	; 0x44
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 fde0 	bl	80048dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d2e:	f000 febf 	bl	8001ab0 <HAL_PWREx_ControlVoltageScaling>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d38:	f000 f990 	bl	800105c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d44:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d46:	2310      	movs	r3, #16
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d52:	2301      	movs	r3, #1
 8000d54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d56:	230a      	movs	r3, #10
 8000d58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d5a:	2307      	movs	r3, #7
 8000d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d62:	2302      	movs	r3, #2
 8000d64:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 fef6 	bl	8001b5c <HAL_RCC_OscConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d76:	f000 f971 	bl	800105c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2104      	movs	r1, #4
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fac8 	bl	8002328 <HAL_RCC_ClockConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d9e:	f000 f95d 	bl	800105c <Error_Handler>
  }
}
 8000da2:	bf00      	nop
 8000da4:	3758      	adds	r7, #88	; 0x58
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000db2:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <MX_SPI1_Init+0x78>)
 8000db4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000db8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000dc6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dde:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000de2:	2238      	movs	r2, #56	; 0x38
 8000de4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000dfa:	2207      	movs	r2, #7
 8000dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000e06:	2208      	movs	r2, #8
 8000e08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000e0c:	f002 f94e 	bl	80030ac <HAL_SPI_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e16:	f000 f921 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000019c 	.word	0x2000019c
 8000e24:	40013000 	.word	0x40013000

08000e28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e2e:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <MX_USART2_UART_Init+0x5c>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e6c:	f003 f838 	bl	8003ee0 <HAL_UART_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e76:	f000 f8f1 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000200 	.word	0x20000200
 8000e84:	40004400 	.word	0x40004400

08000e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	4b35      	ldr	r3, [pc, #212]	; (8000f74 <MX_GPIO_Init+0xec>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	4a34      	ldr	r2, [pc, #208]	; (8000f74 <MX_GPIO_Init+0xec>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eaa:	4b32      	ldr	r3, [pc, #200]	; (8000f74 <MX_GPIO_Init+0xec>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb6:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <MX_GPIO_Init+0xec>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4a2e      	ldr	r2, [pc, #184]	; (8000f74 <MX_GPIO_Init+0xec>)
 8000ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <MX_GPIO_Init+0xec>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <MX_GPIO_Init+0xec>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	4a28      	ldr	r2, [pc, #160]	; (8000f74 <MX_GPIO_Init+0xec>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <MX_GPIO_Init+0xec>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <MX_GPIO_Init+0xec>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a22      	ldr	r2, [pc, #136]	; (8000f74 <MX_GPIO_Init+0xec>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <MX_GPIO_Init+0xec>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, reset_Pin|CS_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2150      	movs	r1, #80	; 0x50
 8000f02:	481d      	ldr	r0, [pc, #116]	; (8000f78 <MX_GPIO_Init+0xf0>)
 8000f04:	f000 fd96 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_GPIO_Init+0xf4>)
 8000f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4818      	ldr	r0, [pc, #96]	; (8000f80 <MX_GPIO_Init+0xf8>)
 8000f1e:	f000 fbdf 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : dio0_Pin */
  GPIO_InitStruct.Pin = dio0_Pin;
 8000f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_GPIO_Init+0xfc>)
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(dio0_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3a:	f000 fbd1 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : reset_Pin CS_Pin */
  GPIO_InitStruct.Pin = reset_Pin|CS_Pin;
 8000f3e:	2350      	movs	r3, #80	; 0x50
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4808      	ldr	r0, [pc, #32]	; (8000f78 <MX_GPIO_Init+0xf0>)
 8000f56:	f000 fbc3 	bl	80016e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2028      	movs	r0, #40	; 0x28
 8000f60:	f000 fb87 	bl	8001672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f64:	2028      	movs	r0, #40	; 0x28
 8000f66:	f000 fba0 	bl	80016aa <HAL_NVIC_EnableIRQ>

}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000
 8000f78:	48000400 	.word	0x48000400
 8000f7c:	10210000 	.word	0x10210000
 8000f80:	48000800 	.word	0x48000800
 8000f84:	10110000 	.word	0x10110000

08000f88 <HAL_GPIO_EXTI_Callback>:
/*
When the radio receives a package, the DIO pin, the interrupt pin, gets a signal. Execute this function at that time.
This function gets called any time the radio receives a transmission from another node.
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0bc      	sub	sp, #240	; 0xf0
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
  So we're on the receiver board. Running our while loop code, doing our thing.
  Then our receiver receives a signal of the DIO pin. This interrupt occurs. This function runs.
  */

    uint8_t message[100]; //Local buffer used for displaying general messages.
    int rssi = LoRa_getRSSI(&myLoRa); //Local variable for the "Received Signal Strength Indicator"
 8000f92:	482d      	ldr	r0, [pc, #180]	; (8001048 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000f94:	f7ff fd8d 	bl	8000ab2 <LoRa_getRSSI>
 8000f98:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

    char* received_data[30]; //Initialize/create a pointer to a character buffer called received_data of size 30.
    memset(received_data,0,30); //Copies 0 to all 30 cells of my reveived_data buffer. Clear the data everytime I get new data. 
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	221e      	movs	r2, #30
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 fc99 	bl	80048dc <memset>
    /*
    Initialization of the variable packet-size.
    Setting it equal to the size of the data that was received.
    And call the function LoRa_receive.
    */
    uint8_t packet_size = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
    packet_size = LoRa_receive(&myLoRa, received_data, 30);
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	221e      	movs	r2, #30
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4823      	ldr	r0, [pc, #140]	; (8001048 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000fba:	f7ff fd1a 	bl	80009f2 <LoRa_receive>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb

    /*
    Transmit the value of the Received Signal Strength Indicator.
    */
    snprintf(message,sizeof(message),"RSSI value: %d\n\r",rssi);
 8000fc4:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8000fc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000fcc:	4a1f      	ldr	r2, [pc, #124]	; (800104c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000fce:	2164      	movs	r1, #100	; 0x64
 8000fd0:	f003 fc8c 	bl	80048ec <sniprintf>
    HAL_UART_Transmit(&huart2, message, strlen(message), 200);
 8000fd4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff f8f9 	bl	80001d0 <strlen>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000fe6:	23c8      	movs	r3, #200	; 0xc8
 8000fe8:	4819      	ldr	r0, [pc, #100]	; (8001050 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000fea:	f002 ffc7 	bl	8003f7c <HAL_UART_Transmit>

    /*
    Transmit the received data.
    */
    snprintf(message,sizeof(message),"%s\n\r",received_data);
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000ff8:	2164      	movs	r1, #100	; 0x64
 8000ffa:	f003 fc77 	bl	80048ec <sniprintf>
    HAL_UART_Transmit(&huart2, message, strlen(message), 200);
 8000ffe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff f8e4 	bl	80001d0 <strlen>
 8001008:	4603      	mov	r3, r0
 800100a:	b29a      	uxth	r2, r3
 800100c:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001010:	23c8      	movs	r3, #200	; 0xc8
 8001012:	480f      	ldr	r0, [pc, #60]	; (8001050 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001014:	f002 ffb2 	bl	8003f7c <HAL_UART_Transmit>

    /*
    Transmit that an interrupt has been executed.
    */
    snprintf(message,sizeof(message),"Interrupt has been executed.\n\r");//28 chars
 8001018:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <HAL_GPIO_EXTI_Callback+0xd0>)
 800101e:	2164      	movs	r1, #100	; 0x64
 8001020:	4618      	mov	r0, r3
 8001022:	f003 fc63 	bl	80048ec <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 200);
 8001026:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff f8d0 	bl	80001d0 <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	b29a      	uxth	r2, r3
 8001034:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001038:	23c8      	movs	r3, #200	; 0xc8
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_GPIO_EXTI_Callback+0xc8>)
 800103c:	f002 ff9e 	bl	8003f7c <HAL_UART_Transmit>

}
 8001040:	bf00      	nop
 8001042:	37f0      	adds	r7, #240	; 0xf0
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000284 	.word	0x20000284
 800104c:	080051d4 	.word	0x080051d4
 8001050:	20000200 	.word	0x20000200
 8001054:	080051e8 	.word	0x080051e8
 8001058:	080051f0 	.word	0x080051f0

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	e7fe      	b.n	8001064 <Error_Handler+0x8>
	...

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_MspInit+0x44>)
 8001070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_MspInit+0x44>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6613      	str	r3, [r2, #96]	; 0x60
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_MspInit+0x44>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_MspInit+0x44>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_MspInit+0x44>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	6593      	str	r3, [r2, #88]	; 0x58
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_MspInit+0x44>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000

080010b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_SPI_MspInit+0x7c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d128      	bne.n	8001124 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d6:	4a16      	ldr	r2, [pc, #88]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010dc:	6613      	str	r3, [r2, #96]	; 0x60
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001102:	23e0      	movs	r3, #224	; 0xe0
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001112:	2305      	movs	r3, #5
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f000 fade 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	; 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40013000 	.word	0x40013000
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b0ac      	sub	sp, #176	; 0xb0
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2288      	movs	r2, #136	; 0x88
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fbc1 	bl	80048dc <memset>
  if(huart->Instance==USART2)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <HAL_UART_MspInit+0xb0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d13b      	bne.n	80011dc <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001164:	2302      	movs	r3, #2
 8001166:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001168:	2300      	movs	r3, #0
 800116a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4618      	mov	r0, r3
 8001172:	f001 fadf 	bl	8002734 <HAL_RCCEx_PeriphCLKConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800117c:	f7ff ff6e 	bl	800105c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_UART_MspInit+0xb4>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001184:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <HAL_UART_MspInit+0xb4>)
 8001186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118a:	6593      	str	r3, [r2, #88]	; 0x58
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <HAL_UART_MspInit+0xb4>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <HAL_UART_MspInit+0xb4>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <HAL_UART_MspInit+0xb4>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <HAL_UART_MspInit+0xb4>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011b0:	230c      	movs	r3, #12
 80011b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c8:	2307      	movs	r3, #7
 80011ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d2:	4619      	mov	r1, r3
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d8:	f000 fa82 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011dc:	bf00      	nop
 80011de:	37b0      	adds	r7, #176	; 0xb0
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40004400 	.word	0x40004400
 80011e8:	40021000 	.word	0x40021000

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <NMI_Handler+0x4>

080011f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <HardFault_Handler+0x4>

080011f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <MemManage_Handler+0x4>

080011fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <BusFault_Handler+0x4>

08001204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <UsageFault_Handler+0x4>

0800120a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001238:	f000 f8fc 	bl	8001434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001244:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001248:	f000 fc0c 	bl	8001a64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800124c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001250:	f000 fc08 	bl	8001a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001260:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <_sbrk+0x5c>)
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <_sbrk+0x60>)
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d102      	bne.n	800127a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <_sbrk+0x64>)
 8001276:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <_sbrk+0x68>)
 8001278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	429a      	cmp	r2, r3
 8001286:	d207      	bcs.n	8001298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001288:	f003 fafe 	bl	8004888 <__errno>
 800128c:	4603      	mov	r3, r0
 800128e:	220c      	movs	r2, #12
 8001290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	e009      	b.n	80012ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <_sbrk+0x64>)
 80012a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20018000 	.word	0x20018000
 80012b8:	00000400 	.word	0x00000400
 80012bc:	2000008c 	.word	0x2000008c
 80012c0:	200002c8 	.word	0x200002c8

080012c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <SystemInit+0x5c>)
 80012ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ce:	4a14      	ldr	r2, [pc, #80]	; (8001320 <SystemInit+0x5c>)
 80012d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <SystemInit+0x60>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a11      	ldr	r2, [pc, #68]	; (8001324 <SystemInit+0x60>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <SystemInit+0x60>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <SystemInit+0x60>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <SystemInit+0x60>)
 80012f0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012f4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <SystemInit+0x60>)
 80012fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001300:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <SystemInit+0x60>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a07      	ldr	r2, [pc, #28]	; (8001324 <SystemInit+0x60>)
 8001308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <SystemInit+0x60>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00
 8001324:	40021000 	.word	0x40021000

08001328 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001360 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800132c:	f7ff ffca 	bl	80012c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001330:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001332:	e003      	b.n	800133c <LoopCopyDataInit>

08001334 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001336:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001338:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800133a:	3104      	adds	r1, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800133c:	480a      	ldr	r0, [pc, #40]	; (8001368 <LoopForever+0xa>)
	ldr	r3, =_edata
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001340:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001342:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001344:	d3f6      	bcc.n	8001334 <CopyDataInit>
	ldr	r2, =_sbss
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001348:	e002      	b.n	8001350 <LoopFillZerobss>

0800134a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800134a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800134c:	f842 3b04 	str.w	r3, [r2], #4

08001350 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <LoopForever+0x16>)
	cmp	r2, r3
 8001352:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001354:	d3f9      	bcc.n	800134a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001356:	f003 fa9d 	bl	8004894 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800135a:	f7ff fc5f 	bl	8000c1c <main>

0800135e <LoopForever>:

LoopForever:
    b LoopForever
 800135e:	e7fe      	b.n	800135e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001360:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001364:	0800529c 	.word	0x0800529c
	ldr	r0, =_sdata
 8001368:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800136c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001370:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001374:	200002c4 	.word	0x200002c4

08001378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC1_2_IRQHandler>
	...

0800137c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_Init+0x3c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <HAL_Init+0x3c>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001390:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001392:	2003      	movs	r0, #3
 8001394:	f000 f962 	bl	800165c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001398:	2000      	movs	r0, #0
 800139a:	f000 f80f 	bl	80013bc <HAL_InitTick>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	71fb      	strb	r3, [r7, #7]
 80013a8:	e001      	b.n	80013ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013aa:	f7ff fe5d 	bl	8001068 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013ae:	79fb      	ldrb	r3, [r7, #7]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40022000 	.word	0x40022000

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <HAL_InitTick+0x6c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d023      	beq.n	8001418 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <HAL_InitTick+0x70>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_InitTick+0x6c>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f96d 	bl	80016c6 <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10f      	bne.n	8001412 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	d809      	bhi.n	800140c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f8:	2200      	movs	r2, #0
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f000 f937 	bl	8001672 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001404:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_InitTick+0x74>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e007      	b.n	800141c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	e004      	b.n	800141c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	73fb      	strb	r3, [r7, #15]
 8001416:	e001      	b.n	800141c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800141c:	7bfb      	ldrb	r3, [r7, #15]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000008 	.word	0x20000008
 800142c:	20000000 	.word	0x20000000
 8001430:	20000004 	.word	0x20000004

08001434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x20>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_IncTick+0x24>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4413      	add	r3, r2
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <HAL_IncTick+0x24>)
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000008 	.word	0x20000008
 8001458:	200002b0 	.word	0x200002b0

0800145c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return uwTick;
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_GetTick+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	200002b0 	.word	0x200002b0

08001474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff ffee 	bl	800145c <HAL_GetTick>
 8001480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	d005      	beq.n	800149a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_Delay+0x44>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4413      	add	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800149a:	bf00      	nop
 800149c:	f7ff ffde 	bl	800145c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d8f7      	bhi.n	800149c <HAL_Delay+0x28>
  {
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000008 	.word	0x20000008

080014bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60d3      	str	r3, [r2, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <__NVIC_GetPriorityGrouping+0x18>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	f003 0307 	and.w	r3, r3, #7
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	2b00      	cmp	r3, #0
 8001530:	db0b      	blt.n	800154a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	f003 021f 	and.w	r2, r3, #31
 8001538:	4907      	ldr	r1, [pc, #28]	; (8001558 <__NVIC_EnableIRQ+0x38>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	095b      	lsrs	r3, r3, #5
 8001540:	2001      	movs	r0, #1
 8001542:	fa00 f202 	lsl.w	r2, r0, r2
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000e100 	.word	0xe000e100

0800155c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db0a      	blt.n	8001586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	490c      	ldr	r1, [pc, #48]	; (80015a8 <__NVIC_SetPriority+0x4c>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	0112      	lsls	r2, r2, #4
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	440b      	add	r3, r1
 8001580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001584:	e00a      	b.n	800159c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4908      	ldr	r1, [pc, #32]	; (80015ac <__NVIC_SetPriority+0x50>)
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	3b04      	subs	r3, #4
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	440b      	add	r3, r1
 800159a:	761a      	strb	r2, [r3, #24]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000e100 	.word	0xe000e100
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b089      	sub	sp, #36	; 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f1c3 0307 	rsb	r3, r3, #7
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	bf28      	it	cs
 80015ce:	2304      	movcs	r3, #4
 80015d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3304      	adds	r3, #4
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d902      	bls.n	80015e0 <NVIC_EncodePriority+0x30>
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3b03      	subs	r3, #3
 80015de:	e000      	b.n	80015e2 <NVIC_EncodePriority+0x32>
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	f04f 32ff 	mov.w	r2, #4294967295
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43da      	mvns	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	401a      	ands	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	43d9      	mvns	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	4313      	orrs	r3, r2
         );
}
 800160a:	4618      	mov	r0, r3
 800160c:	3724      	adds	r7, #36	; 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001628:	d301      	bcc.n	800162e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162a:	2301      	movs	r3, #1
 800162c:	e00f      	b.n	800164e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <SysTick_Config+0x40>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001636:	210f      	movs	r1, #15
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f7ff ff8e 	bl	800155c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <SysTick_Config+0x40>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <SysTick_Config+0x40>)
 8001648:	2207      	movs	r2, #7
 800164a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	e000e010 	.word	0xe000e010

0800165c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff29 	bl	80014bc <__NVIC_SetPriorityGrouping>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001684:	f7ff ff3e 	bl	8001504 <__NVIC_GetPriorityGrouping>
 8001688:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	6978      	ldr	r0, [r7, #20]
 8001690:	f7ff ff8e 	bl	80015b0 <NVIC_EncodePriority>
 8001694:	4602      	mov	r2, r0
 8001696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff5d 	bl	800155c <__NVIC_SetPriority>
}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff31 	bl	8001520 <__NVIC_EnableIRQ>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffa2 	bl	8001618 <SysTick_Config>
 80016d4:	4603      	mov	r3, r0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ee:	e17f      	b.n	80019f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	4013      	ands	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 8171 	beq.w	80019ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d00b      	beq.n	8001728 <HAL_GPIO_Init+0x48>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d007      	beq.n	8001728 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800171c:	2b11      	cmp	r3, #17
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b12      	cmp	r3, #18
 8001726:	d130      	bne.n	800178a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800175e:	2201      	movs	r2, #1
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	f003 0201 	and.w	r2, r3, #1
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b03      	cmp	r3, #3
 8001794:	d118      	bne.n	80017c8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800179c:	2201      	movs	r2, #1
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	08db      	lsrs	r3, r3, #3
 80017b2:	f003 0201 	and.w	r2, r3, #1
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x128>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b12      	cmp	r3, #18
 8001806:	d123      	bne.n	8001850 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	6939      	ldr	r1, [r7, #16]
 800184c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80ac 	beq.w	80019ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	4b5f      	ldr	r3, [pc, #380]	; (8001a10 <HAL_GPIO_Init+0x330>)
 8001894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001896:	4a5e      	ldr	r2, [pc, #376]	; (8001a10 <HAL_GPIO_Init+0x330>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6613      	str	r3, [r2, #96]	; 0x60
 800189e:	4b5c      	ldr	r3, [pc, #368]	; (8001a10 <HAL_GPIO_Init+0x330>)
 80018a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018aa:	4a5a      	ldr	r2, [pc, #360]	; (8001a14 <HAL_GPIO_Init+0x334>)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	220f      	movs	r2, #15
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018d4:	d025      	beq.n	8001922 <HAL_GPIO_Init+0x242>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a4f      	ldr	r2, [pc, #316]	; (8001a18 <HAL_GPIO_Init+0x338>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d01f      	beq.n	800191e <HAL_GPIO_Init+0x23e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a4e      	ldr	r2, [pc, #312]	; (8001a1c <HAL_GPIO_Init+0x33c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d019      	beq.n	800191a <HAL_GPIO_Init+0x23a>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4d      	ldr	r2, [pc, #308]	; (8001a20 <HAL_GPIO_Init+0x340>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d013      	beq.n	8001916 <HAL_GPIO_Init+0x236>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4c      	ldr	r2, [pc, #304]	; (8001a24 <HAL_GPIO_Init+0x344>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00d      	beq.n	8001912 <HAL_GPIO_Init+0x232>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4b      	ldr	r2, [pc, #300]	; (8001a28 <HAL_GPIO_Init+0x348>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d007      	beq.n	800190e <HAL_GPIO_Init+0x22e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4a      	ldr	r2, [pc, #296]	; (8001a2c <HAL_GPIO_Init+0x34c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d101      	bne.n	800190a <HAL_GPIO_Init+0x22a>
 8001906:	2306      	movs	r3, #6
 8001908:	e00c      	b.n	8001924 <HAL_GPIO_Init+0x244>
 800190a:	2307      	movs	r3, #7
 800190c:	e00a      	b.n	8001924 <HAL_GPIO_Init+0x244>
 800190e:	2305      	movs	r3, #5
 8001910:	e008      	b.n	8001924 <HAL_GPIO_Init+0x244>
 8001912:	2304      	movs	r3, #4
 8001914:	e006      	b.n	8001924 <HAL_GPIO_Init+0x244>
 8001916:	2303      	movs	r3, #3
 8001918:	e004      	b.n	8001924 <HAL_GPIO_Init+0x244>
 800191a:	2302      	movs	r3, #2
 800191c:	e002      	b.n	8001924 <HAL_GPIO_Init+0x244>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_GPIO_Init+0x244>
 8001922:	2300      	movs	r3, #0
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	f002 0203 	and.w	r2, r2, #3
 800192a:	0092      	lsls	r2, r2, #2
 800192c:	4093      	lsls	r3, r2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001934:	4937      	ldr	r1, [pc, #220]	; (8001a14 <HAL_GPIO_Init+0x334>)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	3302      	adds	r3, #2
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001942:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <HAL_GPIO_Init+0x350>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	43db      	mvns	r3, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001966:	4a32      	ldr	r2, [pc, #200]	; (8001a30 <HAL_GPIO_Init+0x350>)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800196c:	4b30      	ldr	r3, [pc, #192]	; (8001a30 <HAL_GPIO_Init+0x350>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001990:	4a27      	ldr	r2, [pc, #156]	; (8001a30 <HAL_GPIO_Init+0x350>)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001996:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <HAL_GPIO_Init+0x350>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019ba:	4a1d      	ldr	r2, [pc, #116]	; (8001a30 <HAL_GPIO_Init+0x350>)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <HAL_GPIO_Init+0x350>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019e4:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <HAL_GPIO_Init+0x350>)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa22 f303 	lsr.w	r3, r2, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f47f ae78 	bne.w	80016f0 <HAL_GPIO_Init+0x10>
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40010000 	.word	0x40010000
 8001a18:	48000400 	.word	0x48000400
 8001a1c:	48000800 	.word	0x48000800
 8001a20:	48000c00 	.word	0x48000c00
 8001a24:	48001000 	.word	0x48001000
 8001a28:	48001400 	.word	0x48001400
 8001a2c:	48001800 	.word	0x48001800
 8001a30:	40010400 	.word	0x40010400

08001a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
 8001a40:	4613      	mov	r3, r2
 8001a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a44:	787b      	ldrb	r3, [r7, #1]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a50:	e002      	b.n	8001a58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d006      	beq.n	8001a88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fa80 	bl	8000f88 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40010400 	.word	0x40010400

08001a94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <HAL_PWREx_GetVoltageRange+0x18>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40007000 	.word	0x40007000

08001ab0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001abe:	d130      	bne.n	8001b22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ac0:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001acc:	d038      	beq.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ad6:	4a1e      	ldr	r2, [pc, #120]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001adc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2232      	movs	r2, #50	; 0x32
 8001ae4:	fb02 f303 	mul.w	r3, r2, r3
 8001ae8:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001aea:	fba2 2303 	umull	r2, r3, r2, r3
 8001aee:	0c9b      	lsrs	r3, r3, #18
 8001af0:	3301      	adds	r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001af4:	e002      	b.n	8001afc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b08:	d102      	bne.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f2      	bne.n	8001af6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1c:	d110      	bne.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e00f      	b.n	8001b42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2e:	d007      	beq.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b38:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40007000 	.word	0x40007000
 8001b54:	20000000 	.word	0x20000000
 8001b58:	431bde83 	.word	0x431bde83

08001b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e3d4      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b6e:	4ba1      	ldr	r3, [pc, #644]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b78:	4b9e      	ldr	r3, [pc, #632]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80e4 	beq.w	8001d58 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x4a>
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	f040 808b 	bne.w	8001cb4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	f040 8087 	bne.w	8001cb4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ba6:	4b93      	ldr	r3, [pc, #588]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_RCC_OscConfig+0x62>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e3ac      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1a      	ldr	r2, [r3, #32]
 8001bc2:	4b8c      	ldr	r3, [pc, #560]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d004      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x7c>
 8001bce:	4b89      	ldr	r3, [pc, #548]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bd6:	e005      	b.n	8001be4 <HAL_RCC_OscConfig+0x88>
 8001bd8:	4b86      	ldr	r3, [pc, #536]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d223      	bcs.n	8001c30 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fd41 	bl	8002674 <RCC_SetFlashLatencyFromMSIRange>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e38d      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bfc:	4b7d      	ldr	r3, [pc, #500]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a7c      	ldr	r2, [pc, #496]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001c02:	f043 0308 	orr.w	r3, r3, #8
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b7a      	ldr	r3, [pc, #488]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4977      	ldr	r1, [pc, #476]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c1a:	4b76      	ldr	r3, [pc, #472]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	4972      	ldr	r1, [pc, #456]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
 8001c2e:	e025      	b.n	8001c7c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c30:	4b70      	ldr	r3, [pc, #448]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a6f      	ldr	r2, [pc, #444]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b6d      	ldr	r3, [pc, #436]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	496a      	ldr	r1, [pc, #424]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c4e:	4b69      	ldr	r3, [pc, #420]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	4965      	ldr	r1, [pc, #404]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d109      	bne.n	8001c7c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 fd01 	bl	8002674 <RCC_SetFlashLatencyFromMSIRange>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e34d      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c7c:	f000 fc36 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b5c      	ldr	r3, [pc, #368]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	495a      	ldr	r1, [pc, #360]	; (8001df8 <HAL_RCC_OscConfig+0x29c>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
 8001c98:	4a58      	ldr	r2, [pc, #352]	; (8001dfc <HAL_RCC_OscConfig+0x2a0>)
 8001c9a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c9c:	4b58      	ldr	r3, [pc, #352]	; (8001e00 <HAL_RCC_OscConfig+0x2a4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fb8b 	bl	80013bc <HAL_InitTick>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d052      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	e331      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d032      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cbc:	4b4d      	ldr	r3, [pc, #308]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a4c      	ldr	r2, [pc, #304]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fbc8 	bl	800145c <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fbc4 	bl	800145c <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e31a      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ce2:	4b44      	ldr	r3, [pc, #272]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cee:	4b41      	ldr	r3, [pc, #260]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a40      	ldr	r2, [pc, #256]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b3e      	ldr	r3, [pc, #248]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	493b      	ldr	r1, [pc, #236]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d0c:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	4936      	ldr	r1, [pc, #216]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
 8001d20:	e01a      	b.n	8001d58 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d22:	4b34      	ldr	r3, [pc, #208]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a33      	ldr	r2, [pc, #204]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d2e:	f7ff fb95 	bl	800145c <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d36:	f7ff fb91 	bl	800145c <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e2e7      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d48:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f0      	bne.n	8001d36 <HAL_RCC_OscConfig+0x1da>
 8001d54:	e000      	b.n	8001d58 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d56:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d074      	beq.n	8001e4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d005      	beq.n	8001d76 <HAL_RCC_OscConfig+0x21a>
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b0c      	cmp	r3, #12
 8001d6e:	d10e      	bne.n	8001d8e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d10b      	bne.n	8001d8e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d064      	beq.n	8001e4c <HAL_RCC_OscConfig+0x2f0>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d160      	bne.n	8001e4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e2c4      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x24a>
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a15      	ldr	r2, [pc, #84]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	e01d      	b.n	8001de2 <HAL_RCC_OscConfig+0x286>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dae:	d10c      	bne.n	8001dca <HAL_RCC_OscConfig+0x26e>
 8001db0:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0f      	ldr	r2, [pc, #60]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001db6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0c      	ldr	r2, [pc, #48]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	e00b      	b.n	8001de2 <HAL_RCC_OscConfig+0x286>
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a09      	ldr	r2, [pc, #36]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <HAL_RCC_OscConfig+0x298>)
 8001ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d01c      	beq.n	8001e24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff fb37 	bl	800145c <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df0:	e011      	b.n	8001e16 <HAL_RCC_OscConfig+0x2ba>
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	08005210 	.word	0x08005210
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff fb2a 	bl	800145c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e280      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e16:	4baf      	ldr	r3, [pc, #700]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x2a8>
 8001e22:	e014      	b.n	8001e4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7ff fb1a 	bl	800145c <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff fb16 	bl	800145c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e26c      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e3e:	4ba5      	ldr	r3, [pc, #660]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x2d0>
 8001e4a:	e000      	b.n	8001e4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d060      	beq.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_OscConfig+0x310>
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	2b0c      	cmp	r3, #12
 8001e64:	d119      	bne.n	8001e9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d116      	bne.n	8001e9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e6c:	4b99      	ldr	r3, [pc, #612]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_OscConfig+0x328>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e249      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e84:	4b93      	ldr	r3, [pc, #588]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	061b      	lsls	r3, r3, #24
 8001e92:	4990      	ldr	r1, [pc, #576]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e98:	e040      	b.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d023      	beq.n	8001eea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea2:	4b8c      	ldr	r3, [pc, #560]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a8b      	ldr	r2, [pc, #556]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7ff fad5 	bl	800145c <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb6:	f7ff fad1 	bl	800145c <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e227      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec8:	4b82      	ldr	r3, [pc, #520]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed4:	4b7f      	ldr	r3, [pc, #508]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	497c      	ldr	r1, [pc, #496]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
 8001ee8:	e018      	b.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eea:	4b7a      	ldr	r3, [pc, #488]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a79      	ldr	r2, [pc, #484]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef6:	f7ff fab1 	bl	800145c <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efe:	f7ff faad 	bl	800145c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e203      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f10:	4b70      	ldr	r3, [pc, #448]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f0      	bne.n	8001efe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d03c      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01c      	beq.n	8001f6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f30:	4b68      	ldr	r3, [pc, #416]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f36:	4a67      	ldr	r2, [pc, #412]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f40:	f7ff fa8c 	bl	800145c <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f48:	f7ff fa88 	bl	800145c <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1de      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f5a:	4b5e      	ldr	r3, [pc, #376]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0ef      	beq.n	8001f48 <HAL_RCC_OscConfig+0x3ec>
 8001f68:	e01b      	b.n	8001fa2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6a:	4b5a      	ldr	r3, [pc, #360]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f70:	4a58      	ldr	r2, [pc, #352]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001f72:	f023 0301 	bic.w	r3, r3, #1
 8001f76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7a:	f7ff fa6f 	bl	800145c <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f82:	f7ff fa6b 	bl	800145c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e1c1      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f94:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1ef      	bne.n	8001f82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80a6 	beq.w	80020fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fb4:	4b47      	ldr	r3, [pc, #284]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10d      	bne.n	8001fdc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc0:	4b44      	ldr	r3, [pc, #272]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	4a43      	ldr	r2, [pc, #268]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fca:	6593      	str	r3, [r2, #88]	; 0x58
 8001fcc:	4b41      	ldr	r3, [pc, #260]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fdc:	4b3e      	ldr	r3, [pc, #248]	; (80020d8 <HAL_RCC_OscConfig+0x57c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d118      	bne.n	800201a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fe8:	4b3b      	ldr	r3, [pc, #236]	; (80020d8 <HAL_RCC_OscConfig+0x57c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a3a      	ldr	r2, [pc, #232]	; (80020d8 <HAL_RCC_OscConfig+0x57c>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff4:	f7ff fa32 	bl	800145c <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffc:	f7ff fa2e 	bl	800145c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e184      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200e:	4b32      	ldr	r3, [pc, #200]	; (80020d8 <HAL_RCC_OscConfig+0x57c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d108      	bne.n	8002034 <HAL_RCC_OscConfig+0x4d8>
 8002022:	4b2c      	ldr	r3, [pc, #176]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002028:	4a2a      	ldr	r2, [pc, #168]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002032:	e024      	b.n	800207e <HAL_RCC_OscConfig+0x522>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b05      	cmp	r3, #5
 800203a:	d110      	bne.n	800205e <HAL_RCC_OscConfig+0x502>
 800203c:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002042:	4a24      	ldr	r2, [pc, #144]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800204c:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	4a20      	ldr	r2, [pc, #128]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800205c:	e00f      	b.n	800207e <HAL_RCC_OscConfig+0x522>
 800205e:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002064:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8002066:	f023 0301 	bic.w	r3, r3, #1
 800206a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800206e:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002074:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 8002076:	f023 0304 	bic.w	r3, r3, #4
 800207a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d016      	beq.n	80020b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002086:	f7ff f9e9 	bl	800145c <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208c:	e00a      	b.n	80020a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7ff f9e5 	bl	800145c <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	; 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e139      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_RCC_OscConfig+0x578>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0ed      	beq.n	800208e <HAL_RCC_OscConfig+0x532>
 80020b2:	e01a      	b.n	80020ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b4:	f7ff f9d2 	bl	800145c <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ba:	e00f      	b.n	80020dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020bc:	f7ff f9ce 	bl	800145c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d906      	bls.n	80020dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e122      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020dc:	4b90      	ldr	r3, [pc, #576]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1e8      	bne.n	80020bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ea:	7ffb      	ldrb	r3, [r7, #31]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d105      	bne.n	80020fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f0:	4b8b      	ldr	r3, [pc, #556]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	4a8a      	ldr	r2, [pc, #552]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 80020f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 8108 	beq.w	8002316 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	2b02      	cmp	r3, #2
 800210c:	f040 80d0 	bne.w	80022b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002110:	4b83      	ldr	r3, [pc, #524]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f003 0203 	and.w	r2, r3, #3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	429a      	cmp	r2, r3
 8002122:	d130      	bne.n	8002186 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	3b01      	subs	r3, #1
 8002130:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	429a      	cmp	r2, r3
 8002134:	d127      	bne.n	8002186 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002140:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d11f      	bne.n	8002186 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002150:	2a07      	cmp	r2, #7
 8002152:	bf14      	ite	ne
 8002154:	2201      	movne	r2, #1
 8002156:	2200      	moveq	r2, #0
 8002158:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800215a:	4293      	cmp	r3, r2
 800215c:	d113      	bne.n	8002186 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002168:	085b      	lsrs	r3, r3, #1
 800216a:	3b01      	subs	r3, #1
 800216c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d109      	bne.n	8002186 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	085b      	lsrs	r3, r3, #1
 800217e:	3b01      	subs	r3, #1
 8002180:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d06e      	beq.n	8002264 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b0c      	cmp	r3, #12
 800218a:	d069      	beq.n	8002260 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800218c:	4b64      	ldr	r3, [pc, #400]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d105      	bne.n	80021a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002198:	4b61      	ldr	r3, [pc, #388]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0b7      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021a8:	4b5d      	ldr	r3, [pc, #372]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a5c      	ldr	r2, [pc, #368]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 80021ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021b4:	f7ff f952 	bl	800145c <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021bc:	f7ff f94e 	bl	800145c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e0a4      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ce:	4b54      	ldr	r3, [pc, #336]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021da:	4b51      	ldr	r3, [pc, #324]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	4b51      	ldr	r3, [pc, #324]	; (8002324 <HAL_RCC_OscConfig+0x7c8>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021ea:	3a01      	subs	r2, #1
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	4311      	orrs	r1, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021f4:	0212      	lsls	r2, r2, #8
 80021f6:	4311      	orrs	r1, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021fc:	0852      	lsrs	r2, r2, #1
 80021fe:	3a01      	subs	r2, #1
 8002200:	0552      	lsls	r2, r2, #21
 8002202:	4311      	orrs	r1, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002208:	0852      	lsrs	r2, r2, #1
 800220a:	3a01      	subs	r2, #1
 800220c:	0652      	lsls	r2, r2, #25
 800220e:	4311      	orrs	r1, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002214:	0912      	lsrs	r2, r2, #4
 8002216:	0452      	lsls	r2, r2, #17
 8002218:	430a      	orrs	r2, r1
 800221a:	4941      	ldr	r1, [pc, #260]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 800221c:	4313      	orrs	r3, r2
 800221e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002220:	4b3f      	ldr	r3, [pc, #252]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a3e      	ldr	r2, [pc, #248]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 8002226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800222a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800222c:	4b3c      	ldr	r3, [pc, #240]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a3b      	ldr	r2, [pc, #236]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 8002232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002236:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002238:	f7ff f910 	bl	800145c <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7ff f90c 	bl	800145c <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e062      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002252:	4b33      	ldr	r3, [pc, #204]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800225e:	e05a      	b.n	8002316 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e059      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002264:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d152      	bne.n	8002316 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002270:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a2a      	ldr	r2, [pc, #168]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 8002276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800227a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800227c:	4b28      	ldr	r3, [pc, #160]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a27      	ldr	r2, [pc, #156]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 8002282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002286:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002288:	f7ff f8e8 	bl	800145c <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7ff f8e4 	bl	800145c <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e03a      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a2:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x734>
 80022ae:	e032      	b.n	8002316 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	d02d      	beq.n	8002312 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a19      	ldr	r2, [pc, #100]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 80022bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022ce:	4b14      	ldr	r3, [pc, #80]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	4a13      	ldr	r2, [pc, #76]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 80022d4:	f023 0303 	bic.w	r3, r3, #3
 80022d8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	4a10      	ldr	r2, [pc, #64]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 80022e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7ff f8b7 	bl	800145c <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f2:	f7ff f8b3 	bl	800145c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e009      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_OscConfig+0x7c4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f0      	bne.n	80022f2 <HAL_RCC_OscConfig+0x796>
 8002310:	e001      	b.n	8002316 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	f99d808c 	.word	0xf99d808c

08002328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0c8      	b.n	80024ce <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800233c:	4b66      	ldr	r3, [pc, #408]	; (80024d8 <HAL_RCC_ClockConfig+0x1b0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d910      	bls.n	800236c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <HAL_RCC_ClockConfig+0x1b0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 0207 	bic.w	r2, r3, #7
 8002352:	4961      	ldr	r1, [pc, #388]	; (80024d8 <HAL_RCC_ClockConfig+0x1b0>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b5f      	ldr	r3, [pc, #380]	; (80024d8 <HAL_RCC_ClockConfig+0x1b0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0b0      	b.n	80024ce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	d04c      	beq.n	8002412 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d107      	bne.n	8002390 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002380:	4b56      	ldr	r3, [pc, #344]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d121      	bne.n	80023d0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e09e      	b.n	80024ce <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002398:	4b50      	ldr	r3, [pc, #320]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d115      	bne.n	80023d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e092      	b.n	80024ce <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d107      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b0:	4b4a      	ldr	r3, [pc, #296]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d109      	bne.n	80023d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e086      	b.n	80024ce <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c0:	4b46      	ldr	r3, [pc, #280]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e07e      	b.n	80024ce <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023d0:	4b42      	ldr	r3, [pc, #264]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 0203 	bic.w	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	493f      	ldr	r1, [pc, #252]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e2:	f7ff f83b 	bl	800145c <HAL_GetTick>
 80023e6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ea:	f7ff f837 	bl	800145c <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e066      	b.n	80024ce <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002400:	4b36      	ldr	r3, [pc, #216]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 020c 	and.w	r2, r3, #12
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	429a      	cmp	r2, r3
 8002410:	d1eb      	bne.n	80023ea <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241e:	4b2f      	ldr	r3, [pc, #188]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	492c      	ldr	r1, [pc, #176]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 800242c:	4313      	orrs	r3, r2
 800242e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002430:	4b29      	ldr	r3, [pc, #164]	; (80024d8 <HAL_RCC_ClockConfig+0x1b0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d210      	bcs.n	8002460 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <HAL_RCC_ClockConfig+0x1b0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 0207 	bic.w	r2, r3, #7
 8002446:	4924      	ldr	r1, [pc, #144]	; (80024d8 <HAL_RCC_ClockConfig+0x1b0>)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <HAL_RCC_ClockConfig+0x1b0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e036      	b.n	80024ce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800246c:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4918      	ldr	r1, [pc, #96]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4910      	ldr	r1, [pc, #64]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800249e:	f000 f825 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 80024a2:	4602      	mov	r2, r0
 80024a4:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	490c      	ldr	r1, [pc, #48]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	5ccb      	ldrb	r3, [r1, r3]
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe ff7a 	bl	80013bc <HAL_InitTick>
 80024c8:	4603      	mov	r3, r0
 80024ca:	72fb      	strb	r3, [r7, #11]

  return status;
 80024cc:	7afb      	ldrb	r3, [r7, #11]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40022000 	.word	0x40022000
 80024dc:	40021000 	.word	0x40021000
 80024e0:	08005210 	.word	0x08005210
 80024e4:	20000000 	.word	0x20000000
 80024e8:	20000004 	.word	0x20000004

080024ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fa:	4b3e      	ldr	r3, [pc, #248]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002504:	4b3b      	ldr	r3, [pc, #236]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x34>
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	2b0c      	cmp	r3, #12
 8002518:	d121      	bne.n	800255e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d11e      	bne.n	800255e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002520:	4b34      	ldr	r3, [pc, #208]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d107      	bne.n	800253c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800252c:	4b31      	ldr	r3, [pc, #196]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800252e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002532:	0a1b      	lsrs	r3, r3, #8
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	e005      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800253c:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002548:	4a2b      	ldr	r2, [pc, #172]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002550:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10d      	bne.n	8002574 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b04      	cmp	r3, #4
 8002562:	d102      	bne.n	800256a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002564:	4b25      	ldr	r3, [pc, #148]	; (80025fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	e004      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b08      	cmp	r3, #8
 800256e:	d101      	bne.n	8002574 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002570:	4b23      	ldr	r3, [pc, #140]	; (8002600 <HAL_RCC_GetSysClockFreq+0x114>)
 8002572:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	2b0c      	cmp	r3, #12
 8002578:	d134      	bne.n	80025e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d003      	beq.n	8002592 <HAL_RCC_GetSysClockFreq+0xa6>
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b03      	cmp	r3, #3
 800258e:	d003      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0xac>
 8002590:	e005      	b.n	800259e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002592:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002594:	617b      	str	r3, [r7, #20]
      break;
 8002596:	e005      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002598:	4b19      	ldr	r3, [pc, #100]	; (8002600 <HAL_RCC_GetSysClockFreq+0x114>)
 800259a:	617b      	str	r3, [r7, #20]
      break;
 800259c:	e002      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	617b      	str	r3, [r7, #20]
      break;
 80025a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	3301      	adds	r3, #1
 80025b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	fb02 f203 	mul.w	r2, r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	0e5b      	lsrs	r3, r3, #25
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	3301      	adds	r3, #1
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025e4:	69bb      	ldr	r3, [r7, #24]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3724      	adds	r7, #36	; 0x24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000
 80025f8:	08005228 	.word	0x08005228
 80025fc:	00f42400 	.word	0x00f42400
 8002600:	007a1200 	.word	0x007a1200

08002604 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_RCC_GetHCLKFreq+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000000 	.word	0x20000000

0800261c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002620:	f7ff fff0 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8002624:	4602      	mov	r2, r0
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	4904      	ldr	r1, [pc, #16]	; (8002644 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002632:	5ccb      	ldrb	r3, [r1, r3]
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40021000 	.word	0x40021000
 8002644:	08005220 	.word	0x08005220

08002648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800264c:	f7ff ffda 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8002650:	4602      	mov	r2, r0
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	0adb      	lsrs	r3, r3, #11
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	4904      	ldr	r1, [pc, #16]	; (8002670 <HAL_RCC_GetPCLK2Freq+0x28>)
 800265e:	5ccb      	ldrb	r3, [r1, r3]
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002668:	4618      	mov	r0, r3
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	08005220 	.word	0x08005220

08002674 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800267c:	2300      	movs	r3, #0
 800267e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002680:	4b2a      	ldr	r3, [pc, #168]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800268c:	f7ff fa02 	bl	8001a94 <HAL_PWREx_GetVoltageRange>
 8002690:	6178      	str	r0, [r7, #20]
 8002692:	e014      	b.n	80026be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002698:	4a24      	ldr	r2, [pc, #144]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269e:	6593      	str	r3, [r2, #88]	; 0x58
 80026a0:	4b22      	ldr	r3, [pc, #136]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026ac:	f7ff f9f2 	bl	8001a94 <HAL_PWREx_GetVoltageRange>
 80026b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	4a1d      	ldr	r2, [pc, #116]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c4:	d10b      	bne.n	80026de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b80      	cmp	r3, #128	; 0x80
 80026ca:	d919      	bls.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2ba0      	cmp	r3, #160	; 0xa0
 80026d0:	d902      	bls.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026d2:	2302      	movs	r3, #2
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	e013      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026d8:	2301      	movs	r3, #1
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	e010      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b80      	cmp	r3, #128	; 0x80
 80026e2:	d902      	bls.n	80026ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026e4:	2303      	movs	r3, #3
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	e00a      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b80      	cmp	r3, #128	; 0x80
 80026ee:	d102      	bne.n	80026f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026f0:	2302      	movs	r3, #2
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	e004      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b70      	cmp	r3, #112	; 0x70
 80026fa:	d101      	bne.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026fc:	2301      	movs	r3, #1
 80026fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 0207 	bic.w	r2, r3, #7
 8002708:	4909      	ldr	r1, [pc, #36]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002710:	4b07      	ldr	r3, [pc, #28]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	429a      	cmp	r2, r3
 800271c:	d001      	beq.n	8002722 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000
 8002730:	40022000 	.word	0x40022000

08002734 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800273c:	2300      	movs	r3, #0
 800273e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002740:	2300      	movs	r3, #0
 8002742:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800274c:	2b00      	cmp	r3, #0
 800274e:	d041      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002754:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002758:	d02a      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800275a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800275e:	d824      	bhi.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002760:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002764:	d008      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002766:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800276a:	d81e      	bhi.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002774:	d010      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002776:	e018      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002778:	4b86      	ldr	r3, [pc, #536]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4a85      	ldr	r2, [pc, #532]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002782:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002784:	e015      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3304      	adds	r3, #4
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fabb 	bl	8002d08 <RCCEx_PLLSAI1_Config>
 8002792:	4603      	mov	r3, r0
 8002794:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002796:	e00c      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3320      	adds	r3, #32
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fba6 	bl	8002ef0 <RCCEx_PLLSAI2_Config>
 80027a4:	4603      	mov	r3, r0
 80027a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027a8:	e003      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	74fb      	strb	r3, [r7, #19]
      break;
 80027ae:	e000      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027b2:	7cfb      	ldrb	r3, [r7, #19]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10b      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027b8:	4b76      	ldr	r3, [pc, #472]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027c6:	4973      	ldr	r1, [pc, #460]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027ce:	e001      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d0:	7cfb      	ldrb	r3, [r7, #19]
 80027d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d041      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027e8:	d02a      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80027ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027ee:	d824      	bhi.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027f4:	d008      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027fa:	d81e      	bhi.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002804:	d010      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002806:	e018      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002808:	4b62      	ldr	r3, [pc, #392]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4a61      	ldr	r2, [pc, #388]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002812:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002814:	e015      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3304      	adds	r3, #4
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f000 fa73 	bl	8002d08 <RCCEx_PLLSAI1_Config>
 8002822:	4603      	mov	r3, r0
 8002824:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002826:	e00c      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3320      	adds	r3, #32
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fb5e 	bl	8002ef0 <RCCEx_PLLSAI2_Config>
 8002834:	4603      	mov	r3, r0
 8002836:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002838:	e003      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	74fb      	strb	r3, [r7, #19]
      break;
 800283e:	e000      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002842:	7cfb      	ldrb	r3, [r7, #19]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10b      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002848:	4b52      	ldr	r3, [pc, #328]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002856:	494f      	ldr	r1, [pc, #316]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800285e:	e001      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002860:	7cfb      	ldrb	r3, [r7, #19]
 8002862:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80a0 	beq.w	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002876:	4b47      	ldr	r3, [pc, #284]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002886:	2300      	movs	r3, #0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00d      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288c:	4b41      	ldr	r3, [pc, #260]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	4a40      	ldr	r2, [pc, #256]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002896:	6593      	str	r3, [r2, #88]	; 0x58
 8002898:	4b3e      	ldr	r3, [pc, #248]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a4:	2301      	movs	r3, #1
 80028a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028a8:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a3a      	ldr	r2, [pc, #232]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028b4:	f7fe fdd2 	bl	800145c <HAL_GetTick>
 80028b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028ba:	e009      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028bc:	f7fe fdce 	bl	800145c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d902      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	74fb      	strb	r3, [r7, #19]
        break;
 80028ce:	e005      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028d0:	4b31      	ldr	r3, [pc, #196]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0ef      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d15c      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028e2:	4b2c      	ldr	r3, [pc, #176]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01f      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d019      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002900:	4b24      	ldr	r3, [pc, #144]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800290c:	4b21      	ldr	r3, [pc, #132]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002912:	4a20      	ldr	r2, [pc, #128]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002922:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800292c:	4a19      	ldr	r2, [pc, #100]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d016      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7fe fd8d 	bl	800145c <HAL_GetTick>
 8002942:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002944:	e00b      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7fe fd89 	bl	800145c <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f241 3288 	movw	r2, #5000	; 0x1388
 8002954:	4293      	cmp	r3, r2
 8002956:	d902      	bls.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	74fb      	strb	r3, [r7, #19]
            break;
 800295c:	e006      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800295e:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0ec      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10c      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002982:	4904      	ldr	r1, [pc, #16]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800298a:	e009      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800298c:	7cfb      	ldrb	r3, [r7, #19]
 800298e:	74bb      	strb	r3, [r7, #18]
 8002990:	e006      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299c:	7cfb      	ldrb	r3, [r7, #19]
 800299e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029a0:	7c7b      	ldrb	r3, [r7, #17]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d105      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a6:	4b9e      	ldr	r3, [pc, #632]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029aa:	4a9d      	ldr	r2, [pc, #628]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029be:	4b98      	ldr	r3, [pc, #608]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c4:	f023 0203 	bic.w	r2, r3, #3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029cc:	4994      	ldr	r1, [pc, #592]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029e0:	4b8f      	ldr	r3, [pc, #572]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	f023 020c 	bic.w	r2, r3, #12
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ee:	498c      	ldr	r1, [pc, #560]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a02:	4b87      	ldr	r3, [pc, #540]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	4983      	ldr	r1, [pc, #524]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a24:	4b7e      	ldr	r3, [pc, #504]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	497b      	ldr	r1, [pc, #492]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a46:	4b76      	ldr	r3, [pc, #472]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a54:	4972      	ldr	r1, [pc, #456]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a68:	4b6d      	ldr	r3, [pc, #436]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a76:	496a      	ldr	r1, [pc, #424]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a8a:	4b65      	ldr	r3, [pc, #404]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a98:	4961      	ldr	r1, [pc, #388]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002aac:	4b5c      	ldr	r3, [pc, #368]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aba:	4959      	ldr	r1, [pc, #356]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ace:	4b54      	ldr	r3, [pc, #336]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002adc:	4950      	ldr	r1, [pc, #320]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002af0:	4b4b      	ldr	r3, [pc, #300]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	4948      	ldr	r1, [pc, #288]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b12:	4b43      	ldr	r3, [pc, #268]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	493f      	ldr	r1, [pc, #252]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d028      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b34:	4b3a      	ldr	r3, [pc, #232]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b42:	4937      	ldr	r1, [pc, #220]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b52:	d106      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b54:	4b32      	ldr	r3, [pc, #200]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a31      	ldr	r2, [pc, #196]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b5e:	60d3      	str	r3, [r2, #12]
 8002b60:	e011      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b6a:	d10c      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3304      	adds	r3, #4
 8002b70:	2101      	movs	r1, #1
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 f8c8 	bl	8002d08 <RCCEx_PLLSAI1_Config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b82:	7cfb      	ldrb	r3, [r7, #19]
 8002b84:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d028      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b92:	4b23      	ldr	r3, [pc, #140]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	491f      	ldr	r1, [pc, #124]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bb0:	d106      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	4a1a      	ldr	r2, [pc, #104]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bbc:	60d3      	str	r3, [r2, #12]
 8002bbe:	e011      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	2101      	movs	r1, #1
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 f899 	bl	8002d08 <RCCEx_PLLSAI1_Config>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bda:	7cfb      	ldrb	r3, [r7, #19]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d02b      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfe:	4908      	ldr	r1, [pc, #32]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c0e:	d109      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c10:	4b03      	ldr	r3, [pc, #12]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4a02      	ldr	r2, [pc, #8]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c1a:	60d3      	str	r3, [r2, #12]
 8002c1c:	e014      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c1e:	bf00      	nop
 8002c20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3304      	adds	r3, #4
 8002c32:	2101      	movs	r1, #1
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 f867 	bl	8002d08 <RCCEx_PLLSAI1_Config>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c3e:	7cfb      	ldrb	r3, [r7, #19]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c44:	7cfb      	ldrb	r3, [r7, #19]
 8002c46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d02f      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c54:	4b2b      	ldr	r3, [pc, #172]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c62:	4928      	ldr	r1, [pc, #160]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c72:	d10d      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3304      	adds	r3, #4
 8002c78:	2102      	movs	r1, #2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 f844 	bl	8002d08 <RCCEx_PLLSAI1_Config>
 8002c80:	4603      	mov	r3, r0
 8002c82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c84:	7cfb      	ldrb	r3, [r7, #19]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d014      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c8a:	7cfb      	ldrb	r3, [r7, #19]
 8002c8c:	74bb      	strb	r3, [r7, #18]
 8002c8e:	e011      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3320      	adds	r3, #32
 8002c9e:	2102      	movs	r1, #2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 f925 	bl	8002ef0 <RCCEx_PLLSAI2_Config>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002caa:	7cfb      	ldrb	r3, [r7, #19]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cb0:	7cfb      	ldrb	r3, [r7, #19]
 8002cb2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002cc0:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cce:	490d      	ldr	r1, [pc, #52]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf2:	4904      	ldr	r1, [pc, #16]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cfa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000

08002d08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d16:	4b75      	ldr	r3, [pc, #468]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d018      	beq.n	8002d54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d22:	4b72      	ldr	r3, [pc, #456]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0203 	and.w	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d10d      	bne.n	8002d4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
       ||
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d3a:	4b6c      	ldr	r3, [pc, #432]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	091b      	lsrs	r3, r3, #4
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
       ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d047      	beq.n	8002dde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
 8002d52:	e044      	b.n	8002dde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d018      	beq.n	8002d8e <RCCEx_PLLSAI1_Config+0x86>
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d825      	bhi.n	8002dac <RCCEx_PLLSAI1_Config+0xa4>
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d002      	beq.n	8002d6a <RCCEx_PLLSAI1_Config+0x62>
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d009      	beq.n	8002d7c <RCCEx_PLLSAI1_Config+0x74>
 8002d68:	e020      	b.n	8002dac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d6a:	4b60      	ldr	r3, [pc, #384]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d11d      	bne.n	8002db2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d7a:	e01a      	b.n	8002db2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d7c:	4b5b      	ldr	r3, [pc, #364]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d116      	bne.n	8002db6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8c:	e013      	b.n	8002db6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d8e:	4b57      	ldr	r3, [pc, #348]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10f      	bne.n	8002dba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d9a:	4b54      	ldr	r3, [pc, #336]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002daa:	e006      	b.n	8002dba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      break;
 8002db0:	e004      	b.n	8002dbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002db2:	bf00      	nop
 8002db4:	e002      	b.n	8002dbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002db6:	bf00      	nop
 8002db8:	e000      	b.n	8002dbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dba:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10d      	bne.n	8002dde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dc2:	4b4a      	ldr	r3, [pc, #296]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6819      	ldr	r1, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	4944      	ldr	r1, [pc, #272]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d17d      	bne.n	8002ee0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002de4:	4b41      	ldr	r3, [pc, #260]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a40      	ldr	r2, [pc, #256]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df0:	f7fe fb34 	bl	800145c <HAL_GetTick>
 8002df4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002df6:	e009      	b.n	8002e0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002df8:	f7fe fb30 	bl	800145c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d902      	bls.n	8002e0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	73fb      	strb	r3, [r7, #15]
        break;
 8002e0a:	e005      	b.n	8002e18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e0c:	4b37      	ldr	r3, [pc, #220]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1ef      	bne.n	8002df8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d160      	bne.n	8002ee0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d111      	bne.n	8002e48 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e24:	4b31      	ldr	r3, [pc, #196]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6892      	ldr	r2, [r2, #8]
 8002e34:	0211      	lsls	r1, r2, #8
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68d2      	ldr	r2, [r2, #12]
 8002e3a:	0912      	lsrs	r2, r2, #4
 8002e3c:	0452      	lsls	r2, r2, #17
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	492a      	ldr	r1, [pc, #168]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	610b      	str	r3, [r1, #16]
 8002e46:	e027      	b.n	8002e98 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d112      	bne.n	8002e74 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e4e:	4b27      	ldr	r3, [pc, #156]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6892      	ldr	r2, [r2, #8]
 8002e5e:	0211      	lsls	r1, r2, #8
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6912      	ldr	r2, [r2, #16]
 8002e64:	0852      	lsrs	r2, r2, #1
 8002e66:	3a01      	subs	r2, #1
 8002e68:	0552      	lsls	r2, r2, #21
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	491f      	ldr	r1, [pc, #124]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	610b      	str	r3, [r1, #16]
 8002e72:	e011      	b.n	8002e98 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e74:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6892      	ldr	r2, [r2, #8]
 8002e84:	0211      	lsls	r1, r2, #8
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6952      	ldr	r2, [r2, #20]
 8002e8a:	0852      	lsrs	r2, r2, #1
 8002e8c:	3a01      	subs	r2, #1
 8002e8e:	0652      	lsls	r2, r2, #25
 8002e90:	430a      	orrs	r2, r1
 8002e92:	4916      	ldr	r1, [pc, #88]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e98:	4b14      	ldr	r3, [pc, #80]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a13      	ldr	r2, [pc, #76]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ea2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fada 	bl	800145c <HAL_GetTick>
 8002ea8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eaa:	e009      	b.n	8002ec0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eac:	f7fe fad6 	bl	800145c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d902      	bls.n	8002ec0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	73fb      	strb	r3, [r7, #15]
          break;
 8002ebe:	e005      	b.n	8002ecc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0ef      	beq.n	8002eac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d106      	bne.n	8002ee0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	4904      	ldr	r1, [pc, #16]	; (8002eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000

08002ef0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002efe:	4b6a      	ldr	r3, [pc, #424]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d018      	beq.n	8002f3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f0a:	4b67      	ldr	r3, [pc, #412]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 0203 	and.w	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d10d      	bne.n	8002f36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f22:	4b61      	ldr	r3, [pc, #388]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	091b      	lsrs	r3, r3, #4
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
       ||
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d047      	beq.n	8002fc6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
 8002f3a:	e044      	b.n	8002fc6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d018      	beq.n	8002f76 <RCCEx_PLLSAI2_Config+0x86>
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d825      	bhi.n	8002f94 <RCCEx_PLLSAI2_Config+0xa4>
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d002      	beq.n	8002f52 <RCCEx_PLLSAI2_Config+0x62>
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d009      	beq.n	8002f64 <RCCEx_PLLSAI2_Config+0x74>
 8002f50:	e020      	b.n	8002f94 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f52:	4b55      	ldr	r3, [pc, #340]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d11d      	bne.n	8002f9a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f62:	e01a      	b.n	8002f9a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f64:	4b50      	ldr	r3, [pc, #320]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d116      	bne.n	8002f9e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f74:	e013      	b.n	8002f9e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f76:	4b4c      	ldr	r3, [pc, #304]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10f      	bne.n	8002fa2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f82:	4b49      	ldr	r3, [pc, #292]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f92:	e006      	b.n	8002fa2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
      break;
 8002f98:	e004      	b.n	8002fa4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e002      	b.n	8002fa4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e000      	b.n	8002fa4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fa2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10d      	bne.n	8002fc6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002faa:	4b3f      	ldr	r3, [pc, #252]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6819      	ldr	r1, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	430b      	orrs	r3, r1
 8002fc0:	4939      	ldr	r1, [pc, #228]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d167      	bne.n	800309c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fcc:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a35      	ldr	r2, [pc, #212]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd8:	f7fe fa40 	bl	800145c <HAL_GetTick>
 8002fdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fde:	e009      	b.n	8002ff4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fe0:	f7fe fa3c 	bl	800145c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d902      	bls.n	8002ff4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ff2:	e005      	b.n	8003000 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ff4:	4b2c      	ldr	r3, [pc, #176]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1ef      	bne.n	8002fe0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d14a      	bne.n	800309c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d111      	bne.n	8003030 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800300c:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6892      	ldr	r2, [r2, #8]
 800301c:	0211      	lsls	r1, r2, #8
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68d2      	ldr	r2, [r2, #12]
 8003022:	0912      	lsrs	r2, r2, #4
 8003024:	0452      	lsls	r2, r2, #17
 8003026:	430a      	orrs	r2, r1
 8003028:	491f      	ldr	r1, [pc, #124]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800302a:	4313      	orrs	r3, r2
 800302c:	614b      	str	r3, [r1, #20]
 800302e:	e011      	b.n	8003054 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003030:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003038:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6892      	ldr	r2, [r2, #8]
 8003040:	0211      	lsls	r1, r2, #8
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6912      	ldr	r2, [r2, #16]
 8003046:	0852      	lsrs	r2, r2, #1
 8003048:	3a01      	subs	r2, #1
 800304a:	0652      	lsls	r2, r2, #25
 800304c:	430a      	orrs	r2, r1
 800304e:	4916      	ldr	r1, [pc, #88]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003050:	4313      	orrs	r3, r2
 8003052:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003054:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a13      	ldr	r2, [pc, #76]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003060:	f7fe f9fc 	bl	800145c <HAL_GetTick>
 8003064:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003066:	e009      	b.n	800307c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003068:	f7fe f9f8 	bl	800145c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d902      	bls.n	800307c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	73fb      	strb	r3, [r7, #15]
          break;
 800307a:	e005      	b.n	8003088 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800307c:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0ef      	beq.n	8003068 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800308e:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	4904      	ldr	r1, [pc, #16]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003098:	4313      	orrs	r3, r2
 800309a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800309c:	7bfb      	ldrb	r3, [r7, #15]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000

080030ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e095      	b.n	80031ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d108      	bne.n	80030d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ce:	d009      	beq.n	80030e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	61da      	str	r2, [r3, #28]
 80030d6:	e005      	b.n	80030e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fd ffd6 	bl	80010b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800311a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003124:	d902      	bls.n	800312c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	e002      	b.n	8003132 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800312c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003130:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800313a:	d007      	beq.n	800314c <HAL_SPI_Init+0xa0>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003144:	d002      	beq.n	800314c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318e:	ea42 0103 	orr.w	r1, r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	0c1b      	lsrs	r3, r3, #16
 80031a8:	f003 0204 	and.w	r2, r3, #4
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80031c8:	ea42 0103 	orr.w	r1, r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b088      	sub	sp, #32
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	603b      	str	r3, [r7, #0]
 80031fe:	4613      	mov	r3, r2
 8003200:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_SPI_Transmit+0x22>
 8003210:	2302      	movs	r3, #2
 8003212:	e158      	b.n	80034c6 <HAL_SPI_Transmit+0x2d4>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800321c:	f7fe f91e 	bl	800145c <HAL_GetTick>
 8003220:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	d002      	beq.n	8003238 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003232:	2302      	movs	r3, #2
 8003234:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003236:	e13d      	b.n	80034b4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_SPI_Transmit+0x52>
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d102      	bne.n	800324a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003248:	e134      	b.n	80034b4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2203      	movs	r2, #3
 800324e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	88fa      	ldrh	r2, [r7, #6]
 8003262:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	88fa      	ldrh	r2, [r7, #6]
 8003268:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003294:	d10f      	bne.n	80032b6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c0:	2b40      	cmp	r3, #64	; 0x40
 80032c2:	d007      	beq.n	80032d4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032dc:	d94b      	bls.n	8003376 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_SPI_Transmit+0xfa>
 80032e6:	8afb      	ldrh	r3, [r7, #22]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d13e      	bne.n	800336a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	881a      	ldrh	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	1c9a      	adds	r2, r3, #2
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003310:	e02b      	b.n	800336a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b02      	cmp	r3, #2
 800331e:	d112      	bne.n	8003346 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	881a      	ldrh	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	1c9a      	adds	r2, r3, #2
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003344:	e011      	b.n	800336a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003346:	f7fe f889 	bl	800145c <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d803      	bhi.n	800335e <HAL_SPI_Transmit+0x16c>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d102      	bne.n	8003364 <HAL_SPI_Transmit+0x172>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d102      	bne.n	800336a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003368:	e0a4      	b.n	80034b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ce      	bne.n	8003312 <HAL_SPI_Transmit+0x120>
 8003374:	e07c      	b.n	8003470 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <HAL_SPI_Transmit+0x192>
 800337e:	8afb      	ldrh	r3, [r7, #22]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d170      	bne.n	8003466 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b01      	cmp	r3, #1
 800338c:	d912      	bls.n	80033b4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	881a      	ldrh	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	1c9a      	adds	r2, r3, #2
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b02      	subs	r3, #2
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033b2:	e058      	b.n	8003466 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	330c      	adds	r3, #12
 80033be:	7812      	ldrb	r2, [r2, #0]
 80033c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80033da:	e044      	b.n	8003466 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d12b      	bne.n	8003442 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d912      	bls.n	800341a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f8:	881a      	ldrh	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	1c9a      	adds	r2, r3, #2
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b02      	subs	r3, #2
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003418:	e025      	b.n	8003466 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	330c      	adds	r3, #12
 8003424:	7812      	ldrb	r2, [r2, #0]
 8003426:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003440:	e011      	b.n	8003466 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003442:	f7fe f80b 	bl	800145c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d803      	bhi.n	800345a <HAL_SPI_Transmit+0x268>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d102      	bne.n	8003460 <HAL_SPI_Transmit+0x26e>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003464:	e026      	b.n	80034b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1b5      	bne.n	80033dc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	6839      	ldr	r1, [r7, #0]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fced 	bl	8003e54 <SPI_EndRxTxTransaction>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	77fb      	strb	r3, [r7, #31]
 80034b0:	e000      	b.n	80034b4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80034b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80034c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b088      	sub	sp, #32
 80034d2:	af02      	add	r7, sp, #8
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	4613      	mov	r3, r2
 80034dc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ea:	d112      	bne.n	8003512 <HAL_SPI_Receive+0x44>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10e      	bne.n	8003512 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2204      	movs	r2, #4
 80034f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034fc:	88fa      	ldrh	r2, [r7, #6]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f910 	bl	800372e <HAL_SPI_TransmitReceive>
 800350e:	4603      	mov	r3, r0
 8003510:	e109      	b.n	8003726 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_SPI_Receive+0x52>
 800351c:	2302      	movs	r3, #2
 800351e:	e102      	b.n	8003726 <HAL_SPI_Receive+0x258>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003528:	f7fd ff98 	bl	800145c <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b01      	cmp	r3, #1
 8003538:	d002      	beq.n	8003540 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800353a:	2302      	movs	r3, #2
 800353c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800353e:	e0e9      	b.n	8003714 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_SPI_Receive+0x7e>
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d102      	bne.n	8003552 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003550:	e0e0      	b.n	8003714 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2204      	movs	r2, #4
 8003556:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	88fa      	ldrh	r2, [r7, #6]
 800356a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	88fa      	ldrh	r2, [r7, #6]
 8003572:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800359c:	d908      	bls.n	80035b0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	e007      	b.n	80035c0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035be:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c8:	d10f      	bne.n	80035ea <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b40      	cmp	r3, #64	; 0x40
 80035f6:	d007      	beq.n	8003608 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003606:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003610:	d867      	bhi.n	80036e2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003612:	e030      	b.n	8003676 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d117      	bne.n	8003652 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f103 020c 	add.w	r2, r3, #12
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	7812      	ldrb	r2, [r2, #0]
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003650:	e011      	b.n	8003676 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003652:	f7fd ff03 	bl	800145c <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d803      	bhi.n	800366a <HAL_SPI_Receive+0x19c>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d102      	bne.n	8003670 <HAL_SPI_Receive+0x1a2>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d102      	bne.n	8003676 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003674:	e04e      	b.n	8003714 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1c8      	bne.n	8003614 <HAL_SPI_Receive+0x146>
 8003682:	e034      	b.n	80036ee <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b01      	cmp	r3, #1
 8003690:	d115      	bne.n	80036be <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	b292      	uxth	r2, r2
 800369e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	1c9a      	adds	r2, r3, #2
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80036bc:	e011      	b.n	80036e2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036be:	f7fd fecd 	bl	800145c <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d803      	bhi.n	80036d6 <HAL_SPI_Receive+0x208>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d102      	bne.n	80036dc <HAL_SPI_Receive+0x20e>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036e0:	e018      	b.n	8003714 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1ca      	bne.n	8003684 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	6839      	ldr	r1, [r7, #0]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 fb56 	bl	8003da4 <SPI_EndRxTransaction>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2220      	movs	r2, #32
 8003702:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	75fb      	strb	r3, [r7, #23]
 8003710:	e000      	b.n	8003714 <HAL_SPI_Receive+0x246>
  }

error :
 8003712:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003724:	7dfb      	ldrb	r3, [r7, #23]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b08a      	sub	sp, #40	; 0x28
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800373c:	2301      	movs	r3, #1
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_SPI_TransmitReceive+0x26>
 8003750:	2302      	movs	r3, #2
 8003752:	e1fb      	b.n	8003b4c <HAL_SPI_TransmitReceive+0x41e>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800375c:	f7fd fe7e 	bl	800145c <HAL_GetTick>
 8003760:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003768:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003770:	887b      	ldrh	r3, [r7, #2]
 8003772:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003774:	887b      	ldrh	r3, [r7, #2]
 8003776:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003778:	7efb      	ldrb	r3, [r7, #27]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d00e      	beq.n	800379c <HAL_SPI_TransmitReceive+0x6e>
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003784:	d106      	bne.n	8003794 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d102      	bne.n	8003794 <HAL_SPI_TransmitReceive+0x66>
 800378e:	7efb      	ldrb	r3, [r7, #27]
 8003790:	2b04      	cmp	r3, #4
 8003792:	d003      	beq.n	800379c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003794:	2302      	movs	r3, #2
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800379a:	e1cd      	b.n	8003b38 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_SPI_TransmitReceive+0x80>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <HAL_SPI_TransmitReceive+0x80>
 80037a8:	887b      	ldrh	r3, [r7, #2]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d103      	bne.n	80037b6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80037b4:	e1c0      	b.n	8003b38 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d003      	beq.n	80037ca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2205      	movs	r2, #5
 80037c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	887a      	ldrh	r2, [r7, #2]
 80037da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	887a      	ldrh	r2, [r7, #2]
 80037e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	887a      	ldrh	r2, [r7, #2]
 80037f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	887a      	ldrh	r2, [r7, #2]
 80037f6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800380c:	d802      	bhi.n	8003814 <HAL_SPI_TransmitReceive+0xe6>
 800380e:	8a3b      	ldrh	r3, [r7, #16]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d908      	bls.n	8003826 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003822:	605a      	str	r2, [r3, #4]
 8003824:	e007      	b.n	8003836 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003834:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003840:	2b40      	cmp	r3, #64	; 0x40
 8003842:	d007      	beq.n	8003854 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003852:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800385c:	d97c      	bls.n	8003958 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_SPI_TransmitReceive+0x13e>
 8003866:	8a7b      	ldrh	r3, [r7, #18]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d169      	bne.n	8003940 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003870:	881a      	ldrh	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	1c9a      	adds	r2, r3, #2
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003890:	e056      	b.n	8003940 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b02      	cmp	r3, #2
 800389e:	d11b      	bne.n	80038d8 <HAL_SPI_TransmitReceive+0x1aa>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d016      	beq.n	80038d8 <HAL_SPI_TransmitReceive+0x1aa>
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d113      	bne.n	80038d8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	881a      	ldrh	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	1c9a      	adds	r2, r3, #2
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d11c      	bne.n	8003920 <HAL_SPI_TransmitReceive+0x1f2>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d016      	beq.n	8003920 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	b292      	uxth	r2, r2
 80038fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	1c9a      	adds	r2, r3, #2
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800391c:	2301      	movs	r3, #1
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003920:	f7fd fd9c 	bl	800145c <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800392c:	429a      	cmp	r2, r3
 800392e:	d807      	bhi.n	8003940 <HAL_SPI_TransmitReceive+0x212>
 8003930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003936:	d003      	beq.n	8003940 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800393e:	e0fb      	b.n	8003b38 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1a3      	bne.n	8003892 <HAL_SPI_TransmitReceive+0x164>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d19d      	bne.n	8003892 <HAL_SPI_TransmitReceive+0x164>
 8003956:	e0df      	b.n	8003b18 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_SPI_TransmitReceive+0x23a>
 8003960:	8a7b      	ldrh	r3, [r7, #18]
 8003962:	2b01      	cmp	r3, #1
 8003964:	f040 80cb 	bne.w	8003afe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b01      	cmp	r3, #1
 8003970:	d912      	bls.n	8003998 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	881a      	ldrh	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	1c9a      	adds	r2, r3, #2
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b02      	subs	r3, #2
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003996:	e0b2      	b.n	8003afe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	330c      	adds	r3, #12
 80039a2:	7812      	ldrb	r2, [r2, #0]
 80039a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039be:	e09e      	b.n	8003afe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d134      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x30a>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d02f      	beq.n	8003a38 <HAL_SPI_TransmitReceive+0x30a>
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d12c      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d912      	bls.n	8003a0e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	881a      	ldrh	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	1c9a      	adds	r2, r3, #2
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b02      	subs	r3, #2
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a0c:	e012      	b.n	8003a34 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	330c      	adds	r3, #12
 8003a18:	7812      	ldrb	r2, [r2, #0]
 8003a1a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d148      	bne.n	8003ad8 <HAL_SPI_TransmitReceive+0x3aa>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d042      	beq.n	8003ad8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d923      	bls.n	8003aa6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	b292      	uxth	r2, r2
 8003a6a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	1c9a      	adds	r2, r3, #2
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b02      	subs	r3, #2
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d81f      	bhi.n	8003ad4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003aa2:	605a      	str	r2, [r3, #4]
 8003aa4:	e016      	b.n	8003ad4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f103 020c 	add.w	r2, r3, #12
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	7812      	ldrb	r2, [r2, #0]
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ad8:	f7fd fcc0 	bl	800145c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d803      	bhi.n	8003af0 <HAL_SPI_TransmitReceive+0x3c2>
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d102      	bne.n	8003af6 <HAL_SPI_TransmitReceive+0x3c8>
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d103      	bne.n	8003afe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003afc:	e01c      	b.n	8003b38 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f47f af5b 	bne.w	80039c0 <HAL_SPI_TransmitReceive+0x292>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f47f af54 	bne.w	80039c0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b18:	69fa      	ldr	r2, [r7, #28]
 8003b1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f999 	bl	8003e54 <SPI_EndRxTxTransaction>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d006      	beq.n	8003b36 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	661a      	str	r2, [r3, #96]	; 0x60
 8003b34:	e000      	b.n	8003b38 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003b36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3728      	adds	r7, #40	; 0x28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b62:	b2db      	uxtb	r3, r3
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b80:	f7fd fc6c 	bl	800145c <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b90:	f7fd fc64 	bl	800145c <HAL_GetTick>
 8003b94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b96:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	015b      	lsls	r3, r3, #5
 8003b9c:	0d1b      	lsrs	r3, r3, #20
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	fb02 f303 	mul.w	r3, r2, r3
 8003ba4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ba6:	e054      	b.n	8003c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d050      	beq.n	8003c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bb0:	f7fd fc54 	bl	800145c <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d902      	bls.n	8003bc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d13d      	bne.n	8003c42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bde:	d111      	bne.n	8003c04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be8:	d004      	beq.n	8003bf4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf2:	d107      	bne.n	8003c04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c0c:	d10f      	bne.n	8003c2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e017      	b.n	8003c72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	bf0c      	ite	eq
 8003c62:	2301      	moveq	r3, #1
 8003c64:	2300      	movne	r3, #0
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d19b      	bne.n	8003ba8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000000 	.word	0x20000000

08003c80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c8e:	f7fd fbe5 	bl	800145c <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c9e:	f7fd fbdd 	bl	800145c <HAL_GetTick>
 8003ca2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ca4:	4b3e      	ldr	r3, [pc, #248]	; (8003da0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	00da      	lsls	r2, r3, #3
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	0d1b      	lsrs	r3, r3, #20
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
 8003cba:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003cbc:	e062      	b.n	8003d84 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003cc4:	d109      	bne.n	8003cda <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d106      	bne.n	8003cda <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003cd8:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d050      	beq.n	8003d84 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ce2:	f7fd fbbb 	bl	800145c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d902      	bls.n	8003cf8 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d13d      	bne.n	8003d74 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d10:	d111      	bne.n	8003d36 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d1a:	d004      	beq.n	8003d26 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d24:	d107      	bne.n	8003d36 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d3e:	d10f      	bne.n	8003d60 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e010      	b.n	8003d96 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d194      	bne.n	8003cbe <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000000 	.word	0x20000000

08003da4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db8:	d111      	bne.n	8003dde <SPI_EndRxTransaction+0x3a>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc2:	d004      	beq.n	8003dce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dcc:	d107      	bne.n	8003dde <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ddc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2200      	movs	r2, #0
 8003de6:	2180      	movs	r1, #128	; 0x80
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f7ff fec1 	bl	8003b70 <SPI_WaitFlagStateUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df8:	f043 0220 	orr.w	r2, r3, #32
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e023      	b.n	8003e4c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e0c:	d11d      	bne.n	8003e4a <SPI_EndRxTransaction+0xa6>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e16:	d004      	beq.n	8003e22 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e20:	d113      	bne.n	8003e4a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff ff26 	bl	8003c80 <SPI_WaitFifoStateUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d007      	beq.n	8003e4a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3e:	f043 0220 	orr.w	r2, r3, #32
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e000      	b.n	8003e4c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7ff ff07 	bl	8003c80 <SPI_WaitFifoStateUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d007      	beq.n	8003e88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7c:	f043 0220 	orr.w	r2, r3, #32
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e027      	b.n	8003ed8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2180      	movs	r1, #128	; 0x80
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f7ff fe6c 	bl	8003b70 <SPI_WaitFlagStateUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d007      	beq.n	8003eae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea2:	f043 0220 	orr.w	r2, r3, #32
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e014      	b.n	8003ed8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f7ff fee0 	bl	8003c80 <SPI_WaitFifoStateUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eca:	f043 0220 	orr.w	r2, r3, #32
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e000      	b.n	8003ed8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e040      	b.n	8003f74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fd f916 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2224      	movs	r2, #36	; 0x24
 8003f0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0201 	bic.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f8c0 	bl	80040a4 <UART_SetConfig>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e022      	b.n	8003f74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fb3e 	bl	80045b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fbc5 	bl	80046fc <UART_CheckIdleState>
 8003f72:	4603      	mov	r3, r0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	; 0x28
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	f040 8082 	bne.w	800409a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_UART_Transmit+0x26>
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e07a      	b.n	800409c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_UART_Transmit+0x38>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e073      	b.n	800409c <HAL_UART_Transmit+0x120>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2221      	movs	r2, #33	; 0x21
 8003fc8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fca:	f7fd fa47 	bl	800145c <HAL_GetTick>
 8003fce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	88fa      	ldrh	r2, [r7, #6]
 8003fd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	88fa      	ldrh	r2, [r7, #6]
 8003fdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe8:	d108      	bne.n	8003ffc <HAL_UART_Transmit+0x80>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d104      	bne.n	8003ffc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	e003      	b.n	8004004 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004000:	2300      	movs	r3, #0
 8004002:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800400c:	e02d      	b.n	800406a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2200      	movs	r2, #0
 8004016:	2180      	movs	r1, #128	; 0x80
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 fbb8 	bl	800478e <UART_WaitOnFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e039      	b.n	800409c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	881a      	ldrh	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800403a:	b292      	uxth	r2, r2
 800403c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	3302      	adds	r3, #2
 8004042:	61bb      	str	r3, [r7, #24]
 8004044:	e008      	b.n	8004058 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	781a      	ldrb	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	b292      	uxth	r2, r2
 8004050:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3301      	adds	r3, #1
 8004056:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1cb      	bne.n	800400e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2200      	movs	r2, #0
 800407e:	2140      	movs	r1, #64	; 0x40
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 fb84 	bl	800478e <UART_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e005      	b.n	800409c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	e000      	b.n	800409c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800409a:	2302      	movs	r3, #2
  }
}
 800409c:	4618      	mov	r0, r3
 800409e:	3720      	adds	r7, #32
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a4:	b5b0      	push	{r4, r5, r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4bad      	ldr	r3, [pc, #692]	; (8004384 <UART_SetConfig+0x2e0>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	69f9      	ldr	r1, [r7, #28]
 80040d8:	430b      	orrs	r3, r1
 80040da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4aa2      	ldr	r2, [pc, #648]	; (8004388 <UART_SetConfig+0x2e4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d004      	beq.n	800410c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	4313      	orrs	r3, r2
 800410a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	430a      	orrs	r2, r1
 800411e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a99      	ldr	r2, [pc, #612]	; (800438c <UART_SetConfig+0x2e8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d121      	bne.n	800416e <UART_SetConfig+0xca>
 800412a:	4b99      	ldr	r3, [pc, #612]	; (8004390 <UART_SetConfig+0x2ec>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	2b03      	cmp	r3, #3
 8004136:	d817      	bhi.n	8004168 <UART_SetConfig+0xc4>
 8004138:	a201      	add	r2, pc, #4	; (adr r2, 8004140 <UART_SetConfig+0x9c>)
 800413a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413e:	bf00      	nop
 8004140:	08004151 	.word	0x08004151
 8004144:	0800415d 	.word	0x0800415d
 8004148:	08004157 	.word	0x08004157
 800414c:	08004163 	.word	0x08004163
 8004150:	2301      	movs	r3, #1
 8004152:	76fb      	strb	r3, [r7, #27]
 8004154:	e0e7      	b.n	8004326 <UART_SetConfig+0x282>
 8004156:	2302      	movs	r3, #2
 8004158:	76fb      	strb	r3, [r7, #27]
 800415a:	e0e4      	b.n	8004326 <UART_SetConfig+0x282>
 800415c:	2304      	movs	r3, #4
 800415e:	76fb      	strb	r3, [r7, #27]
 8004160:	e0e1      	b.n	8004326 <UART_SetConfig+0x282>
 8004162:	2308      	movs	r3, #8
 8004164:	76fb      	strb	r3, [r7, #27]
 8004166:	e0de      	b.n	8004326 <UART_SetConfig+0x282>
 8004168:	2310      	movs	r3, #16
 800416a:	76fb      	strb	r3, [r7, #27]
 800416c:	e0db      	b.n	8004326 <UART_SetConfig+0x282>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a88      	ldr	r2, [pc, #544]	; (8004394 <UART_SetConfig+0x2f0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d132      	bne.n	80041de <UART_SetConfig+0x13a>
 8004178:	4b85      	ldr	r3, [pc, #532]	; (8004390 <UART_SetConfig+0x2ec>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b0c      	cmp	r3, #12
 8004184:	d828      	bhi.n	80041d8 <UART_SetConfig+0x134>
 8004186:	a201      	add	r2, pc, #4	; (adr r2, 800418c <UART_SetConfig+0xe8>)
 8004188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418c:	080041c1 	.word	0x080041c1
 8004190:	080041d9 	.word	0x080041d9
 8004194:	080041d9 	.word	0x080041d9
 8004198:	080041d9 	.word	0x080041d9
 800419c:	080041cd 	.word	0x080041cd
 80041a0:	080041d9 	.word	0x080041d9
 80041a4:	080041d9 	.word	0x080041d9
 80041a8:	080041d9 	.word	0x080041d9
 80041ac:	080041c7 	.word	0x080041c7
 80041b0:	080041d9 	.word	0x080041d9
 80041b4:	080041d9 	.word	0x080041d9
 80041b8:	080041d9 	.word	0x080041d9
 80041bc:	080041d3 	.word	0x080041d3
 80041c0:	2300      	movs	r3, #0
 80041c2:	76fb      	strb	r3, [r7, #27]
 80041c4:	e0af      	b.n	8004326 <UART_SetConfig+0x282>
 80041c6:	2302      	movs	r3, #2
 80041c8:	76fb      	strb	r3, [r7, #27]
 80041ca:	e0ac      	b.n	8004326 <UART_SetConfig+0x282>
 80041cc:	2304      	movs	r3, #4
 80041ce:	76fb      	strb	r3, [r7, #27]
 80041d0:	e0a9      	b.n	8004326 <UART_SetConfig+0x282>
 80041d2:	2308      	movs	r3, #8
 80041d4:	76fb      	strb	r3, [r7, #27]
 80041d6:	e0a6      	b.n	8004326 <UART_SetConfig+0x282>
 80041d8:	2310      	movs	r3, #16
 80041da:	76fb      	strb	r3, [r7, #27]
 80041dc:	e0a3      	b.n	8004326 <UART_SetConfig+0x282>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a6d      	ldr	r2, [pc, #436]	; (8004398 <UART_SetConfig+0x2f4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d120      	bne.n	800422a <UART_SetConfig+0x186>
 80041e8:	4b69      	ldr	r3, [pc, #420]	; (8004390 <UART_SetConfig+0x2ec>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041f2:	2b30      	cmp	r3, #48	; 0x30
 80041f4:	d013      	beq.n	800421e <UART_SetConfig+0x17a>
 80041f6:	2b30      	cmp	r3, #48	; 0x30
 80041f8:	d814      	bhi.n	8004224 <UART_SetConfig+0x180>
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d009      	beq.n	8004212 <UART_SetConfig+0x16e>
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d810      	bhi.n	8004224 <UART_SetConfig+0x180>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <UART_SetConfig+0x168>
 8004206:	2b10      	cmp	r3, #16
 8004208:	d006      	beq.n	8004218 <UART_SetConfig+0x174>
 800420a:	e00b      	b.n	8004224 <UART_SetConfig+0x180>
 800420c:	2300      	movs	r3, #0
 800420e:	76fb      	strb	r3, [r7, #27]
 8004210:	e089      	b.n	8004326 <UART_SetConfig+0x282>
 8004212:	2302      	movs	r3, #2
 8004214:	76fb      	strb	r3, [r7, #27]
 8004216:	e086      	b.n	8004326 <UART_SetConfig+0x282>
 8004218:	2304      	movs	r3, #4
 800421a:	76fb      	strb	r3, [r7, #27]
 800421c:	e083      	b.n	8004326 <UART_SetConfig+0x282>
 800421e:	2308      	movs	r3, #8
 8004220:	76fb      	strb	r3, [r7, #27]
 8004222:	e080      	b.n	8004326 <UART_SetConfig+0x282>
 8004224:	2310      	movs	r3, #16
 8004226:	76fb      	strb	r3, [r7, #27]
 8004228:	e07d      	b.n	8004326 <UART_SetConfig+0x282>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a5b      	ldr	r2, [pc, #364]	; (800439c <UART_SetConfig+0x2f8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d120      	bne.n	8004276 <UART_SetConfig+0x1d2>
 8004234:	4b56      	ldr	r3, [pc, #344]	; (8004390 <UART_SetConfig+0x2ec>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800423e:	2bc0      	cmp	r3, #192	; 0xc0
 8004240:	d013      	beq.n	800426a <UART_SetConfig+0x1c6>
 8004242:	2bc0      	cmp	r3, #192	; 0xc0
 8004244:	d814      	bhi.n	8004270 <UART_SetConfig+0x1cc>
 8004246:	2b80      	cmp	r3, #128	; 0x80
 8004248:	d009      	beq.n	800425e <UART_SetConfig+0x1ba>
 800424a:	2b80      	cmp	r3, #128	; 0x80
 800424c:	d810      	bhi.n	8004270 <UART_SetConfig+0x1cc>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <UART_SetConfig+0x1b4>
 8004252:	2b40      	cmp	r3, #64	; 0x40
 8004254:	d006      	beq.n	8004264 <UART_SetConfig+0x1c0>
 8004256:	e00b      	b.n	8004270 <UART_SetConfig+0x1cc>
 8004258:	2300      	movs	r3, #0
 800425a:	76fb      	strb	r3, [r7, #27]
 800425c:	e063      	b.n	8004326 <UART_SetConfig+0x282>
 800425e:	2302      	movs	r3, #2
 8004260:	76fb      	strb	r3, [r7, #27]
 8004262:	e060      	b.n	8004326 <UART_SetConfig+0x282>
 8004264:	2304      	movs	r3, #4
 8004266:	76fb      	strb	r3, [r7, #27]
 8004268:	e05d      	b.n	8004326 <UART_SetConfig+0x282>
 800426a:	2308      	movs	r3, #8
 800426c:	76fb      	strb	r3, [r7, #27]
 800426e:	e05a      	b.n	8004326 <UART_SetConfig+0x282>
 8004270:	2310      	movs	r3, #16
 8004272:	76fb      	strb	r3, [r7, #27]
 8004274:	e057      	b.n	8004326 <UART_SetConfig+0x282>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a49      	ldr	r2, [pc, #292]	; (80043a0 <UART_SetConfig+0x2fc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d125      	bne.n	80042cc <UART_SetConfig+0x228>
 8004280:	4b43      	ldr	r3, [pc, #268]	; (8004390 <UART_SetConfig+0x2ec>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800428e:	d017      	beq.n	80042c0 <UART_SetConfig+0x21c>
 8004290:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004294:	d817      	bhi.n	80042c6 <UART_SetConfig+0x222>
 8004296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800429a:	d00b      	beq.n	80042b4 <UART_SetConfig+0x210>
 800429c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a0:	d811      	bhi.n	80042c6 <UART_SetConfig+0x222>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <UART_SetConfig+0x20a>
 80042a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042aa:	d006      	beq.n	80042ba <UART_SetConfig+0x216>
 80042ac:	e00b      	b.n	80042c6 <UART_SetConfig+0x222>
 80042ae:	2300      	movs	r3, #0
 80042b0:	76fb      	strb	r3, [r7, #27]
 80042b2:	e038      	b.n	8004326 <UART_SetConfig+0x282>
 80042b4:	2302      	movs	r3, #2
 80042b6:	76fb      	strb	r3, [r7, #27]
 80042b8:	e035      	b.n	8004326 <UART_SetConfig+0x282>
 80042ba:	2304      	movs	r3, #4
 80042bc:	76fb      	strb	r3, [r7, #27]
 80042be:	e032      	b.n	8004326 <UART_SetConfig+0x282>
 80042c0:	2308      	movs	r3, #8
 80042c2:	76fb      	strb	r3, [r7, #27]
 80042c4:	e02f      	b.n	8004326 <UART_SetConfig+0x282>
 80042c6:	2310      	movs	r3, #16
 80042c8:	76fb      	strb	r3, [r7, #27]
 80042ca:	e02c      	b.n	8004326 <UART_SetConfig+0x282>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a2d      	ldr	r2, [pc, #180]	; (8004388 <UART_SetConfig+0x2e4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d125      	bne.n	8004322 <UART_SetConfig+0x27e>
 80042d6:	4b2e      	ldr	r3, [pc, #184]	; (8004390 <UART_SetConfig+0x2ec>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042e4:	d017      	beq.n	8004316 <UART_SetConfig+0x272>
 80042e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ea:	d817      	bhi.n	800431c <UART_SetConfig+0x278>
 80042ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f0:	d00b      	beq.n	800430a <UART_SetConfig+0x266>
 80042f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f6:	d811      	bhi.n	800431c <UART_SetConfig+0x278>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <UART_SetConfig+0x260>
 80042fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004300:	d006      	beq.n	8004310 <UART_SetConfig+0x26c>
 8004302:	e00b      	b.n	800431c <UART_SetConfig+0x278>
 8004304:	2300      	movs	r3, #0
 8004306:	76fb      	strb	r3, [r7, #27]
 8004308:	e00d      	b.n	8004326 <UART_SetConfig+0x282>
 800430a:	2302      	movs	r3, #2
 800430c:	76fb      	strb	r3, [r7, #27]
 800430e:	e00a      	b.n	8004326 <UART_SetConfig+0x282>
 8004310:	2304      	movs	r3, #4
 8004312:	76fb      	strb	r3, [r7, #27]
 8004314:	e007      	b.n	8004326 <UART_SetConfig+0x282>
 8004316:	2308      	movs	r3, #8
 8004318:	76fb      	strb	r3, [r7, #27]
 800431a:	e004      	b.n	8004326 <UART_SetConfig+0x282>
 800431c:	2310      	movs	r3, #16
 800431e:	76fb      	strb	r3, [r7, #27]
 8004320:	e001      	b.n	8004326 <UART_SetConfig+0x282>
 8004322:	2310      	movs	r3, #16
 8004324:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a17      	ldr	r2, [pc, #92]	; (8004388 <UART_SetConfig+0x2e4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	f040 8087 	bne.w	8004440 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004332:	7efb      	ldrb	r3, [r7, #27]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d837      	bhi.n	80043a8 <UART_SetConfig+0x304>
 8004338:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <UART_SetConfig+0x29c>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	08004365 	.word	0x08004365
 8004344:	080043a9 	.word	0x080043a9
 8004348:	0800436d 	.word	0x0800436d
 800434c:	080043a9 	.word	0x080043a9
 8004350:	08004373 	.word	0x08004373
 8004354:	080043a9 	.word	0x080043a9
 8004358:	080043a9 	.word	0x080043a9
 800435c:	080043a9 	.word	0x080043a9
 8004360:	0800437b 	.word	0x0800437b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004364:	f7fe f95a 	bl	800261c <HAL_RCC_GetPCLK1Freq>
 8004368:	6178      	str	r0, [r7, #20]
        break;
 800436a:	e022      	b.n	80043b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800436c:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <UART_SetConfig+0x300>)
 800436e:	617b      	str	r3, [r7, #20]
        break;
 8004370:	e01f      	b.n	80043b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004372:	f7fe f8bb 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 8004376:	6178      	str	r0, [r7, #20]
        break;
 8004378:	e01b      	b.n	80043b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800437e:	617b      	str	r3, [r7, #20]
        break;
 8004380:	e017      	b.n	80043b2 <UART_SetConfig+0x30e>
 8004382:	bf00      	nop
 8004384:	efff69f3 	.word	0xefff69f3
 8004388:	40008000 	.word	0x40008000
 800438c:	40013800 	.word	0x40013800
 8004390:	40021000 	.word	0x40021000
 8004394:	40004400 	.word	0x40004400
 8004398:	40004800 	.word	0x40004800
 800439c:	40004c00 	.word	0x40004c00
 80043a0:	40005000 	.word	0x40005000
 80043a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	76bb      	strb	r3, [r7, #26]
        break;
 80043b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 80f1 	beq.w	800459c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4413      	add	r3, r2
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d305      	bcc.n	80043d6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d902      	bls.n	80043dc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	76bb      	strb	r3, [r7, #26]
 80043da:	e0df      	b.n	800459c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	4618      	mov	r0, r3
 80043e0:	f04f 0100 	mov.w	r1, #0
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	020b      	lsls	r3, r1, #8
 80043ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043f2:	0202      	lsls	r2, r0, #8
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	6849      	ldr	r1, [r1, #4]
 80043f8:	0849      	lsrs	r1, r1, #1
 80043fa:	4608      	mov	r0, r1
 80043fc:	f04f 0100 	mov.w	r1, #0
 8004400:	1814      	adds	r4, r2, r0
 8004402:	eb43 0501 	adc.w	r5, r3, r1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	461a      	mov	r2, r3
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	4620      	mov	r0, r4
 8004412:	4629      	mov	r1, r5
 8004414:	f7fb ff34 	bl	8000280 <__aeabi_uldivmod>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4613      	mov	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004426:	d308      	bcc.n	800443a <UART_SetConfig+0x396>
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442e:	d204      	bcs.n	800443a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	60da      	str	r2, [r3, #12]
 8004438:	e0b0      	b.n	800459c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	76bb      	strb	r3, [r7, #26]
 800443e:	e0ad      	b.n	800459c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004448:	d15c      	bne.n	8004504 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800444a:	7efb      	ldrb	r3, [r7, #27]
 800444c:	2b08      	cmp	r3, #8
 800444e:	d828      	bhi.n	80044a2 <UART_SetConfig+0x3fe>
 8004450:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <UART_SetConfig+0x3b4>)
 8004452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004456:	bf00      	nop
 8004458:	0800447d 	.word	0x0800447d
 800445c:	08004485 	.word	0x08004485
 8004460:	0800448d 	.word	0x0800448d
 8004464:	080044a3 	.word	0x080044a3
 8004468:	08004493 	.word	0x08004493
 800446c:	080044a3 	.word	0x080044a3
 8004470:	080044a3 	.word	0x080044a3
 8004474:	080044a3 	.word	0x080044a3
 8004478:	0800449b 	.word	0x0800449b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800447c:	f7fe f8ce 	bl	800261c <HAL_RCC_GetPCLK1Freq>
 8004480:	6178      	str	r0, [r7, #20]
        break;
 8004482:	e013      	b.n	80044ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004484:	f7fe f8e0 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 8004488:	6178      	str	r0, [r7, #20]
        break;
 800448a:	e00f      	b.n	80044ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800448c:	4b49      	ldr	r3, [pc, #292]	; (80045b4 <UART_SetConfig+0x510>)
 800448e:	617b      	str	r3, [r7, #20]
        break;
 8004490:	e00c      	b.n	80044ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004492:	f7fe f82b 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 8004496:	6178      	str	r0, [r7, #20]
        break;
 8004498:	e008      	b.n	80044ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800449a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800449e:	617b      	str	r3, [r7, #20]
        break;
 80044a0:	e004      	b.n	80044ac <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	76bb      	strb	r3, [r7, #26]
        break;
 80044aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d074      	beq.n	800459c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	005a      	lsls	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	441a      	add	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b0f      	cmp	r3, #15
 80044ce:	d916      	bls.n	80044fe <UART_SetConfig+0x45a>
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d6:	d212      	bcs.n	80044fe <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f023 030f 	bic.w	r3, r3, #15
 80044e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	89fb      	ldrh	r3, [r7, #14]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	89fa      	ldrh	r2, [r7, #14]
 80044fa:	60da      	str	r2, [r3, #12]
 80044fc:	e04e      	b.n	800459c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	76bb      	strb	r3, [r7, #26]
 8004502:	e04b      	b.n	800459c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004504:	7efb      	ldrb	r3, [r7, #27]
 8004506:	2b08      	cmp	r3, #8
 8004508:	d827      	bhi.n	800455a <UART_SetConfig+0x4b6>
 800450a:	a201      	add	r2, pc, #4	; (adr r2, 8004510 <UART_SetConfig+0x46c>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	08004535 	.word	0x08004535
 8004514:	0800453d 	.word	0x0800453d
 8004518:	08004545 	.word	0x08004545
 800451c:	0800455b 	.word	0x0800455b
 8004520:	0800454b 	.word	0x0800454b
 8004524:	0800455b 	.word	0x0800455b
 8004528:	0800455b 	.word	0x0800455b
 800452c:	0800455b 	.word	0x0800455b
 8004530:	08004553 	.word	0x08004553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004534:	f7fe f872 	bl	800261c <HAL_RCC_GetPCLK1Freq>
 8004538:	6178      	str	r0, [r7, #20]
        break;
 800453a:	e013      	b.n	8004564 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800453c:	f7fe f884 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 8004540:	6178      	str	r0, [r7, #20]
        break;
 8004542:	e00f      	b.n	8004564 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004544:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <UART_SetConfig+0x510>)
 8004546:	617b      	str	r3, [r7, #20]
        break;
 8004548:	e00c      	b.n	8004564 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800454a:	f7fd ffcf 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 800454e:	6178      	str	r0, [r7, #20]
        break;
 8004550:	e008      	b.n	8004564 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004556:	617b      	str	r3, [r7, #20]
        break;
 8004558:	e004      	b.n	8004564 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	76bb      	strb	r3, [r7, #26]
        break;
 8004562:	bf00      	nop
    }

    if (pclk != 0U)
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d018      	beq.n	800459c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	085a      	lsrs	r2, r3, #1
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	441a      	add	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	b29b      	uxth	r3, r3
 800457e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b0f      	cmp	r3, #15
 8004584:	d908      	bls.n	8004598 <UART_SetConfig+0x4f4>
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d204      	bcs.n	8004598 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	e001      	b.n	800459c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80045a8:	7ebb      	ldrb	r3, [r7, #26]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bdb0      	pop	{r4, r5, r7, pc}
 80045b2:	bf00      	nop
 80045b4:	00f42400 	.word	0x00f42400

080045b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01a      	beq.n	80046ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b6:	d10a      	bne.n	80046ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  }
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af02      	add	r7, sp, #8
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800470c:	f7fc fea6 	bl	800145c <HAL_GetTick>
 8004710:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b08      	cmp	r3, #8
 800471e:	d10e      	bne.n	800473e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f82d 	bl	800478e <UART_WaitOnFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e023      	b.n	8004786 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b04      	cmp	r3, #4
 800474a:	d10e      	bne.n	800476a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800474c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f817 	bl	800478e <UART_WaitOnFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e00d      	b.n	8004786 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	4613      	mov	r3, r2
 800479c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479e:	e05e      	b.n	800485e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	d05a      	beq.n	800485e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a8:	f7fc fe58 	bl	800145c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d302      	bcc.n	80047be <UART_WaitOnFlagUntilTimeout+0x30>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d11b      	bne.n	80047f6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047cc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e043      	b.n	800487e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d02c      	beq.n	800485e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004812:	d124      	bne.n	800485e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800481c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800482c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0201 	bic.w	r2, r2, #1
 800483c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2220      	movs	r2, #32
 8004842:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e00f      	b.n	800487e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4013      	ands	r3, r2
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	bf0c      	ite	eq
 800486e:	2301      	moveq	r3, #1
 8004870:	2300      	movne	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	429a      	cmp	r2, r3
 800487a:	d091      	beq.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <__errno>:
 8004888:	4b01      	ldr	r3, [pc, #4]	; (8004890 <__errno+0x8>)
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	2000000c 	.word	0x2000000c

08004894 <__libc_init_array>:
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	4d0d      	ldr	r5, [pc, #52]	; (80048cc <__libc_init_array+0x38>)
 8004898:	4c0d      	ldr	r4, [pc, #52]	; (80048d0 <__libc_init_array+0x3c>)
 800489a:	1b64      	subs	r4, r4, r5
 800489c:	10a4      	asrs	r4, r4, #2
 800489e:	2600      	movs	r6, #0
 80048a0:	42a6      	cmp	r6, r4
 80048a2:	d109      	bne.n	80048b8 <__libc_init_array+0x24>
 80048a4:	4d0b      	ldr	r5, [pc, #44]	; (80048d4 <__libc_init_array+0x40>)
 80048a6:	4c0c      	ldr	r4, [pc, #48]	; (80048d8 <__libc_init_array+0x44>)
 80048a8:	f000 fc62 	bl	8005170 <_init>
 80048ac:	1b64      	subs	r4, r4, r5
 80048ae:	10a4      	asrs	r4, r4, #2
 80048b0:	2600      	movs	r6, #0
 80048b2:	42a6      	cmp	r6, r4
 80048b4:	d105      	bne.n	80048c2 <__libc_init_array+0x2e>
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
 80048b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048bc:	4798      	blx	r3
 80048be:	3601      	adds	r6, #1
 80048c0:	e7ee      	b.n	80048a0 <__libc_init_array+0xc>
 80048c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c6:	4798      	blx	r3
 80048c8:	3601      	adds	r6, #1
 80048ca:	e7f2      	b.n	80048b2 <__libc_init_array+0x1e>
 80048cc:	08005294 	.word	0x08005294
 80048d0:	08005294 	.word	0x08005294
 80048d4:	08005294 	.word	0x08005294
 80048d8:	08005298 	.word	0x08005298

080048dc <memset>:
 80048dc:	4402      	add	r2, r0
 80048de:	4603      	mov	r3, r0
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d100      	bne.n	80048e6 <memset+0xa>
 80048e4:	4770      	bx	lr
 80048e6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ea:	e7f9      	b.n	80048e0 <memset+0x4>

080048ec <sniprintf>:
 80048ec:	b40c      	push	{r2, r3}
 80048ee:	b530      	push	{r4, r5, lr}
 80048f0:	4b17      	ldr	r3, [pc, #92]	; (8004950 <sniprintf+0x64>)
 80048f2:	1e0c      	subs	r4, r1, #0
 80048f4:	681d      	ldr	r5, [r3, #0]
 80048f6:	b09d      	sub	sp, #116	; 0x74
 80048f8:	da08      	bge.n	800490c <sniprintf+0x20>
 80048fa:	238b      	movs	r3, #139	; 0x8b
 80048fc:	602b      	str	r3, [r5, #0]
 80048fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004902:	b01d      	add	sp, #116	; 0x74
 8004904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004908:	b002      	add	sp, #8
 800490a:	4770      	bx	lr
 800490c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004910:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004914:	bf14      	ite	ne
 8004916:	f104 33ff 	addne.w	r3, r4, #4294967295
 800491a:	4623      	moveq	r3, r4
 800491c:	9304      	str	r3, [sp, #16]
 800491e:	9307      	str	r3, [sp, #28]
 8004920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004924:	9002      	str	r0, [sp, #8]
 8004926:	9006      	str	r0, [sp, #24]
 8004928:	f8ad 3016 	strh.w	r3, [sp, #22]
 800492c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800492e:	ab21      	add	r3, sp, #132	; 0x84
 8004930:	a902      	add	r1, sp, #8
 8004932:	4628      	mov	r0, r5
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	f000 f869 	bl	8004a0c <_svfiprintf_r>
 800493a:	1c43      	adds	r3, r0, #1
 800493c:	bfbc      	itt	lt
 800493e:	238b      	movlt	r3, #139	; 0x8b
 8004940:	602b      	strlt	r3, [r5, #0]
 8004942:	2c00      	cmp	r4, #0
 8004944:	d0dd      	beq.n	8004902 <sniprintf+0x16>
 8004946:	9b02      	ldr	r3, [sp, #8]
 8004948:	2200      	movs	r2, #0
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	e7d9      	b.n	8004902 <sniprintf+0x16>
 800494e:	bf00      	nop
 8004950:	2000000c 	.word	0x2000000c

08004954 <__ssputs_r>:
 8004954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004958:	688e      	ldr	r6, [r1, #8]
 800495a:	429e      	cmp	r6, r3
 800495c:	4682      	mov	sl, r0
 800495e:	460c      	mov	r4, r1
 8004960:	4690      	mov	r8, r2
 8004962:	461f      	mov	r7, r3
 8004964:	d838      	bhi.n	80049d8 <__ssputs_r+0x84>
 8004966:	898a      	ldrh	r2, [r1, #12]
 8004968:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800496c:	d032      	beq.n	80049d4 <__ssputs_r+0x80>
 800496e:	6825      	ldr	r5, [r4, #0]
 8004970:	6909      	ldr	r1, [r1, #16]
 8004972:	eba5 0901 	sub.w	r9, r5, r1
 8004976:	6965      	ldr	r5, [r4, #20]
 8004978:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800497c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004980:	3301      	adds	r3, #1
 8004982:	444b      	add	r3, r9
 8004984:	106d      	asrs	r5, r5, #1
 8004986:	429d      	cmp	r5, r3
 8004988:	bf38      	it	cc
 800498a:	461d      	movcc	r5, r3
 800498c:	0553      	lsls	r3, r2, #21
 800498e:	d531      	bpl.n	80049f4 <__ssputs_r+0xa0>
 8004990:	4629      	mov	r1, r5
 8004992:	f000 fb47 	bl	8005024 <_malloc_r>
 8004996:	4606      	mov	r6, r0
 8004998:	b950      	cbnz	r0, 80049b0 <__ssputs_r+0x5c>
 800499a:	230c      	movs	r3, #12
 800499c:	f8ca 3000 	str.w	r3, [sl]
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049a6:	81a3      	strh	r3, [r4, #12]
 80049a8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b0:	6921      	ldr	r1, [r4, #16]
 80049b2:	464a      	mov	r2, r9
 80049b4:	f000 fabe 	bl	8004f34 <memcpy>
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c2:	81a3      	strh	r3, [r4, #12]
 80049c4:	6126      	str	r6, [r4, #16]
 80049c6:	6165      	str	r5, [r4, #20]
 80049c8:	444e      	add	r6, r9
 80049ca:	eba5 0509 	sub.w	r5, r5, r9
 80049ce:	6026      	str	r6, [r4, #0]
 80049d0:	60a5      	str	r5, [r4, #8]
 80049d2:	463e      	mov	r6, r7
 80049d4:	42be      	cmp	r6, r7
 80049d6:	d900      	bls.n	80049da <__ssputs_r+0x86>
 80049d8:	463e      	mov	r6, r7
 80049da:	4632      	mov	r2, r6
 80049dc:	6820      	ldr	r0, [r4, #0]
 80049de:	4641      	mov	r1, r8
 80049e0:	f000 fab6 	bl	8004f50 <memmove>
 80049e4:	68a3      	ldr	r3, [r4, #8]
 80049e6:	6822      	ldr	r2, [r4, #0]
 80049e8:	1b9b      	subs	r3, r3, r6
 80049ea:	4432      	add	r2, r6
 80049ec:	60a3      	str	r3, [r4, #8]
 80049ee:	6022      	str	r2, [r4, #0]
 80049f0:	2000      	movs	r0, #0
 80049f2:	e7db      	b.n	80049ac <__ssputs_r+0x58>
 80049f4:	462a      	mov	r2, r5
 80049f6:	f000 fb6f 	bl	80050d8 <_realloc_r>
 80049fa:	4606      	mov	r6, r0
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d1e1      	bne.n	80049c4 <__ssputs_r+0x70>
 8004a00:	6921      	ldr	r1, [r4, #16]
 8004a02:	4650      	mov	r0, sl
 8004a04:	f000 fabe 	bl	8004f84 <_free_r>
 8004a08:	e7c7      	b.n	800499a <__ssputs_r+0x46>
	...

08004a0c <_svfiprintf_r>:
 8004a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a10:	4698      	mov	r8, r3
 8004a12:	898b      	ldrh	r3, [r1, #12]
 8004a14:	061b      	lsls	r3, r3, #24
 8004a16:	b09d      	sub	sp, #116	; 0x74
 8004a18:	4607      	mov	r7, r0
 8004a1a:	460d      	mov	r5, r1
 8004a1c:	4614      	mov	r4, r2
 8004a1e:	d50e      	bpl.n	8004a3e <_svfiprintf_r+0x32>
 8004a20:	690b      	ldr	r3, [r1, #16]
 8004a22:	b963      	cbnz	r3, 8004a3e <_svfiprintf_r+0x32>
 8004a24:	2140      	movs	r1, #64	; 0x40
 8004a26:	f000 fafd 	bl	8005024 <_malloc_r>
 8004a2a:	6028      	str	r0, [r5, #0]
 8004a2c:	6128      	str	r0, [r5, #16]
 8004a2e:	b920      	cbnz	r0, 8004a3a <_svfiprintf_r+0x2e>
 8004a30:	230c      	movs	r3, #12
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	f04f 30ff 	mov.w	r0, #4294967295
 8004a38:	e0d1      	b.n	8004bde <_svfiprintf_r+0x1d2>
 8004a3a:	2340      	movs	r3, #64	; 0x40
 8004a3c:	616b      	str	r3, [r5, #20]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	9309      	str	r3, [sp, #36]	; 0x24
 8004a42:	2320      	movs	r3, #32
 8004a44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a48:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a4c:	2330      	movs	r3, #48	; 0x30
 8004a4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004bf8 <_svfiprintf_r+0x1ec>
 8004a52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a56:	f04f 0901 	mov.w	r9, #1
 8004a5a:	4623      	mov	r3, r4
 8004a5c:	469a      	mov	sl, r3
 8004a5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a62:	b10a      	cbz	r2, 8004a68 <_svfiprintf_r+0x5c>
 8004a64:	2a25      	cmp	r2, #37	; 0x25
 8004a66:	d1f9      	bne.n	8004a5c <_svfiprintf_r+0x50>
 8004a68:	ebba 0b04 	subs.w	fp, sl, r4
 8004a6c:	d00b      	beq.n	8004a86 <_svfiprintf_r+0x7a>
 8004a6e:	465b      	mov	r3, fp
 8004a70:	4622      	mov	r2, r4
 8004a72:	4629      	mov	r1, r5
 8004a74:	4638      	mov	r0, r7
 8004a76:	f7ff ff6d 	bl	8004954 <__ssputs_r>
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	f000 80aa 	beq.w	8004bd4 <_svfiprintf_r+0x1c8>
 8004a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a82:	445a      	add	r2, fp
 8004a84:	9209      	str	r2, [sp, #36]	; 0x24
 8004a86:	f89a 3000 	ldrb.w	r3, [sl]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 80a2 	beq.w	8004bd4 <_svfiprintf_r+0x1c8>
 8004a90:	2300      	movs	r3, #0
 8004a92:	f04f 32ff 	mov.w	r2, #4294967295
 8004a96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a9a:	f10a 0a01 	add.w	sl, sl, #1
 8004a9e:	9304      	str	r3, [sp, #16]
 8004aa0:	9307      	str	r3, [sp, #28]
 8004aa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004aa6:	931a      	str	r3, [sp, #104]	; 0x68
 8004aa8:	4654      	mov	r4, sl
 8004aaa:	2205      	movs	r2, #5
 8004aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ab0:	4851      	ldr	r0, [pc, #324]	; (8004bf8 <_svfiprintf_r+0x1ec>)
 8004ab2:	f7fb fb95 	bl	80001e0 <memchr>
 8004ab6:	9a04      	ldr	r2, [sp, #16]
 8004ab8:	b9d8      	cbnz	r0, 8004af2 <_svfiprintf_r+0xe6>
 8004aba:	06d0      	lsls	r0, r2, #27
 8004abc:	bf44      	itt	mi
 8004abe:	2320      	movmi	r3, #32
 8004ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ac4:	0711      	lsls	r1, r2, #28
 8004ac6:	bf44      	itt	mi
 8004ac8:	232b      	movmi	r3, #43	; 0x2b
 8004aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ace:	f89a 3000 	ldrb.w	r3, [sl]
 8004ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ad4:	d015      	beq.n	8004b02 <_svfiprintf_r+0xf6>
 8004ad6:	9a07      	ldr	r2, [sp, #28]
 8004ad8:	4654      	mov	r4, sl
 8004ada:	2000      	movs	r0, #0
 8004adc:	f04f 0c0a 	mov.w	ip, #10
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ae6:	3b30      	subs	r3, #48	; 0x30
 8004ae8:	2b09      	cmp	r3, #9
 8004aea:	d94e      	bls.n	8004b8a <_svfiprintf_r+0x17e>
 8004aec:	b1b0      	cbz	r0, 8004b1c <_svfiprintf_r+0x110>
 8004aee:	9207      	str	r2, [sp, #28]
 8004af0:	e014      	b.n	8004b1c <_svfiprintf_r+0x110>
 8004af2:	eba0 0308 	sub.w	r3, r0, r8
 8004af6:	fa09 f303 	lsl.w	r3, r9, r3
 8004afa:	4313      	orrs	r3, r2
 8004afc:	9304      	str	r3, [sp, #16]
 8004afe:	46a2      	mov	sl, r4
 8004b00:	e7d2      	b.n	8004aa8 <_svfiprintf_r+0x9c>
 8004b02:	9b03      	ldr	r3, [sp, #12]
 8004b04:	1d19      	adds	r1, r3, #4
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	9103      	str	r1, [sp, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	bfbb      	ittet	lt
 8004b0e:	425b      	neglt	r3, r3
 8004b10:	f042 0202 	orrlt.w	r2, r2, #2
 8004b14:	9307      	strge	r3, [sp, #28]
 8004b16:	9307      	strlt	r3, [sp, #28]
 8004b18:	bfb8      	it	lt
 8004b1a:	9204      	strlt	r2, [sp, #16]
 8004b1c:	7823      	ldrb	r3, [r4, #0]
 8004b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b20:	d10c      	bne.n	8004b3c <_svfiprintf_r+0x130>
 8004b22:	7863      	ldrb	r3, [r4, #1]
 8004b24:	2b2a      	cmp	r3, #42	; 0x2a
 8004b26:	d135      	bne.n	8004b94 <_svfiprintf_r+0x188>
 8004b28:	9b03      	ldr	r3, [sp, #12]
 8004b2a:	1d1a      	adds	r2, r3, #4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	9203      	str	r2, [sp, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bfb8      	it	lt
 8004b34:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b38:	3402      	adds	r4, #2
 8004b3a:	9305      	str	r3, [sp, #20]
 8004b3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c08 <_svfiprintf_r+0x1fc>
 8004b40:	7821      	ldrb	r1, [r4, #0]
 8004b42:	2203      	movs	r2, #3
 8004b44:	4650      	mov	r0, sl
 8004b46:	f7fb fb4b 	bl	80001e0 <memchr>
 8004b4a:	b140      	cbz	r0, 8004b5e <_svfiprintf_r+0x152>
 8004b4c:	2340      	movs	r3, #64	; 0x40
 8004b4e:	eba0 000a 	sub.w	r0, r0, sl
 8004b52:	fa03 f000 	lsl.w	r0, r3, r0
 8004b56:	9b04      	ldr	r3, [sp, #16]
 8004b58:	4303      	orrs	r3, r0
 8004b5a:	3401      	adds	r4, #1
 8004b5c:	9304      	str	r3, [sp, #16]
 8004b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b62:	4826      	ldr	r0, [pc, #152]	; (8004bfc <_svfiprintf_r+0x1f0>)
 8004b64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b68:	2206      	movs	r2, #6
 8004b6a:	f7fb fb39 	bl	80001e0 <memchr>
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	d038      	beq.n	8004be4 <_svfiprintf_r+0x1d8>
 8004b72:	4b23      	ldr	r3, [pc, #140]	; (8004c00 <_svfiprintf_r+0x1f4>)
 8004b74:	bb1b      	cbnz	r3, 8004bbe <_svfiprintf_r+0x1b2>
 8004b76:	9b03      	ldr	r3, [sp, #12]
 8004b78:	3307      	adds	r3, #7
 8004b7a:	f023 0307 	bic.w	r3, r3, #7
 8004b7e:	3308      	adds	r3, #8
 8004b80:	9303      	str	r3, [sp, #12]
 8004b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b84:	4433      	add	r3, r6
 8004b86:	9309      	str	r3, [sp, #36]	; 0x24
 8004b88:	e767      	b.n	8004a5a <_svfiprintf_r+0x4e>
 8004b8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b8e:	460c      	mov	r4, r1
 8004b90:	2001      	movs	r0, #1
 8004b92:	e7a5      	b.n	8004ae0 <_svfiprintf_r+0xd4>
 8004b94:	2300      	movs	r3, #0
 8004b96:	3401      	adds	r4, #1
 8004b98:	9305      	str	r3, [sp, #20]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	f04f 0c0a 	mov.w	ip, #10
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ba6:	3a30      	subs	r2, #48	; 0x30
 8004ba8:	2a09      	cmp	r2, #9
 8004baa:	d903      	bls.n	8004bb4 <_svfiprintf_r+0x1a8>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0c5      	beq.n	8004b3c <_svfiprintf_r+0x130>
 8004bb0:	9105      	str	r1, [sp, #20]
 8004bb2:	e7c3      	b.n	8004b3c <_svfiprintf_r+0x130>
 8004bb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bb8:	4604      	mov	r4, r0
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e7f0      	b.n	8004ba0 <_svfiprintf_r+0x194>
 8004bbe:	ab03      	add	r3, sp, #12
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	462a      	mov	r2, r5
 8004bc4:	4b0f      	ldr	r3, [pc, #60]	; (8004c04 <_svfiprintf_r+0x1f8>)
 8004bc6:	a904      	add	r1, sp, #16
 8004bc8:	4638      	mov	r0, r7
 8004bca:	f3af 8000 	nop.w
 8004bce:	1c42      	adds	r2, r0, #1
 8004bd0:	4606      	mov	r6, r0
 8004bd2:	d1d6      	bne.n	8004b82 <_svfiprintf_r+0x176>
 8004bd4:	89ab      	ldrh	r3, [r5, #12]
 8004bd6:	065b      	lsls	r3, r3, #25
 8004bd8:	f53f af2c 	bmi.w	8004a34 <_svfiprintf_r+0x28>
 8004bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bde:	b01d      	add	sp, #116	; 0x74
 8004be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be4:	ab03      	add	r3, sp, #12
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	462a      	mov	r2, r5
 8004bea:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <_svfiprintf_r+0x1f8>)
 8004bec:	a904      	add	r1, sp, #16
 8004bee:	4638      	mov	r0, r7
 8004bf0:	f000 f87a 	bl	8004ce8 <_printf_i>
 8004bf4:	e7eb      	b.n	8004bce <_svfiprintf_r+0x1c2>
 8004bf6:	bf00      	nop
 8004bf8:	08005258 	.word	0x08005258
 8004bfc:	08005262 	.word	0x08005262
 8004c00:	00000000 	.word	0x00000000
 8004c04:	08004955 	.word	0x08004955
 8004c08:	0800525e 	.word	0x0800525e

08004c0c <_printf_common>:
 8004c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c10:	4616      	mov	r6, r2
 8004c12:	4699      	mov	r9, r3
 8004c14:	688a      	ldr	r2, [r1, #8]
 8004c16:	690b      	ldr	r3, [r1, #16]
 8004c18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	bfb8      	it	lt
 8004c20:	4613      	movlt	r3, r2
 8004c22:	6033      	str	r3, [r6, #0]
 8004c24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c28:	4607      	mov	r7, r0
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	b10a      	cbz	r2, 8004c32 <_printf_common+0x26>
 8004c2e:	3301      	adds	r3, #1
 8004c30:	6033      	str	r3, [r6, #0]
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	0699      	lsls	r1, r3, #26
 8004c36:	bf42      	ittt	mi
 8004c38:	6833      	ldrmi	r3, [r6, #0]
 8004c3a:	3302      	addmi	r3, #2
 8004c3c:	6033      	strmi	r3, [r6, #0]
 8004c3e:	6825      	ldr	r5, [r4, #0]
 8004c40:	f015 0506 	ands.w	r5, r5, #6
 8004c44:	d106      	bne.n	8004c54 <_printf_common+0x48>
 8004c46:	f104 0a19 	add.w	sl, r4, #25
 8004c4a:	68e3      	ldr	r3, [r4, #12]
 8004c4c:	6832      	ldr	r2, [r6, #0]
 8004c4e:	1a9b      	subs	r3, r3, r2
 8004c50:	42ab      	cmp	r3, r5
 8004c52:	dc26      	bgt.n	8004ca2 <_printf_common+0x96>
 8004c54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c58:	1e13      	subs	r3, r2, #0
 8004c5a:	6822      	ldr	r2, [r4, #0]
 8004c5c:	bf18      	it	ne
 8004c5e:	2301      	movne	r3, #1
 8004c60:	0692      	lsls	r2, r2, #26
 8004c62:	d42b      	bmi.n	8004cbc <_printf_common+0xb0>
 8004c64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c68:	4649      	mov	r1, r9
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	47c0      	blx	r8
 8004c6e:	3001      	adds	r0, #1
 8004c70:	d01e      	beq.n	8004cb0 <_printf_common+0xa4>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	68e5      	ldr	r5, [r4, #12]
 8004c76:	6832      	ldr	r2, [r6, #0]
 8004c78:	f003 0306 	and.w	r3, r3, #6
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	bf08      	it	eq
 8004c80:	1aad      	subeq	r5, r5, r2
 8004c82:	68a3      	ldr	r3, [r4, #8]
 8004c84:	6922      	ldr	r2, [r4, #16]
 8004c86:	bf0c      	ite	eq
 8004c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c8c:	2500      	movne	r5, #0
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	bfc4      	itt	gt
 8004c92:	1a9b      	subgt	r3, r3, r2
 8004c94:	18ed      	addgt	r5, r5, r3
 8004c96:	2600      	movs	r6, #0
 8004c98:	341a      	adds	r4, #26
 8004c9a:	42b5      	cmp	r5, r6
 8004c9c:	d11a      	bne.n	8004cd4 <_printf_common+0xc8>
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	e008      	b.n	8004cb4 <_printf_common+0xa8>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	4652      	mov	r2, sl
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	4638      	mov	r0, r7
 8004caa:	47c0      	blx	r8
 8004cac:	3001      	adds	r0, #1
 8004cae:	d103      	bne.n	8004cb8 <_printf_common+0xac>
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb8:	3501      	adds	r5, #1
 8004cba:	e7c6      	b.n	8004c4a <_printf_common+0x3e>
 8004cbc:	18e1      	adds	r1, r4, r3
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	2030      	movs	r0, #48	; 0x30
 8004cc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cc6:	4422      	add	r2, r4
 8004cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ccc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cd0:	3302      	adds	r3, #2
 8004cd2:	e7c7      	b.n	8004c64 <_printf_common+0x58>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	4622      	mov	r2, r4
 8004cd8:	4649      	mov	r1, r9
 8004cda:	4638      	mov	r0, r7
 8004cdc:	47c0      	blx	r8
 8004cde:	3001      	adds	r0, #1
 8004ce0:	d0e6      	beq.n	8004cb0 <_printf_common+0xa4>
 8004ce2:	3601      	adds	r6, #1
 8004ce4:	e7d9      	b.n	8004c9a <_printf_common+0x8e>
	...

08004ce8 <_printf_i>:
 8004ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cec:	460c      	mov	r4, r1
 8004cee:	4691      	mov	r9, r2
 8004cf0:	7e27      	ldrb	r7, [r4, #24]
 8004cf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004cf4:	2f78      	cmp	r7, #120	; 0x78
 8004cf6:	4680      	mov	r8, r0
 8004cf8:	469a      	mov	sl, r3
 8004cfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cfe:	d807      	bhi.n	8004d10 <_printf_i+0x28>
 8004d00:	2f62      	cmp	r7, #98	; 0x62
 8004d02:	d80a      	bhi.n	8004d1a <_printf_i+0x32>
 8004d04:	2f00      	cmp	r7, #0
 8004d06:	f000 80d8 	beq.w	8004eba <_printf_i+0x1d2>
 8004d0a:	2f58      	cmp	r7, #88	; 0x58
 8004d0c:	f000 80a3 	beq.w	8004e56 <_printf_i+0x16e>
 8004d10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d18:	e03a      	b.n	8004d90 <_printf_i+0xa8>
 8004d1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d1e:	2b15      	cmp	r3, #21
 8004d20:	d8f6      	bhi.n	8004d10 <_printf_i+0x28>
 8004d22:	a001      	add	r0, pc, #4	; (adr r0, 8004d28 <_printf_i+0x40>)
 8004d24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004d28:	08004d81 	.word	0x08004d81
 8004d2c:	08004d95 	.word	0x08004d95
 8004d30:	08004d11 	.word	0x08004d11
 8004d34:	08004d11 	.word	0x08004d11
 8004d38:	08004d11 	.word	0x08004d11
 8004d3c:	08004d11 	.word	0x08004d11
 8004d40:	08004d95 	.word	0x08004d95
 8004d44:	08004d11 	.word	0x08004d11
 8004d48:	08004d11 	.word	0x08004d11
 8004d4c:	08004d11 	.word	0x08004d11
 8004d50:	08004d11 	.word	0x08004d11
 8004d54:	08004ea1 	.word	0x08004ea1
 8004d58:	08004dc5 	.word	0x08004dc5
 8004d5c:	08004e83 	.word	0x08004e83
 8004d60:	08004d11 	.word	0x08004d11
 8004d64:	08004d11 	.word	0x08004d11
 8004d68:	08004ec3 	.word	0x08004ec3
 8004d6c:	08004d11 	.word	0x08004d11
 8004d70:	08004dc5 	.word	0x08004dc5
 8004d74:	08004d11 	.word	0x08004d11
 8004d78:	08004d11 	.word	0x08004d11
 8004d7c:	08004e8b 	.word	0x08004e8b
 8004d80:	680b      	ldr	r3, [r1, #0]
 8004d82:	1d1a      	adds	r2, r3, #4
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	600a      	str	r2, [r1, #0]
 8004d88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0a3      	b.n	8004edc <_printf_i+0x1f4>
 8004d94:	6825      	ldr	r5, [r4, #0]
 8004d96:	6808      	ldr	r0, [r1, #0]
 8004d98:	062e      	lsls	r6, r5, #24
 8004d9a:	f100 0304 	add.w	r3, r0, #4
 8004d9e:	d50a      	bpl.n	8004db6 <_printf_i+0xce>
 8004da0:	6805      	ldr	r5, [r0, #0]
 8004da2:	600b      	str	r3, [r1, #0]
 8004da4:	2d00      	cmp	r5, #0
 8004da6:	da03      	bge.n	8004db0 <_printf_i+0xc8>
 8004da8:	232d      	movs	r3, #45	; 0x2d
 8004daa:	426d      	negs	r5, r5
 8004dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004db0:	485e      	ldr	r0, [pc, #376]	; (8004f2c <_printf_i+0x244>)
 8004db2:	230a      	movs	r3, #10
 8004db4:	e019      	b.n	8004dea <_printf_i+0x102>
 8004db6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004dba:	6805      	ldr	r5, [r0, #0]
 8004dbc:	600b      	str	r3, [r1, #0]
 8004dbe:	bf18      	it	ne
 8004dc0:	b22d      	sxthne	r5, r5
 8004dc2:	e7ef      	b.n	8004da4 <_printf_i+0xbc>
 8004dc4:	680b      	ldr	r3, [r1, #0]
 8004dc6:	6825      	ldr	r5, [r4, #0]
 8004dc8:	1d18      	adds	r0, r3, #4
 8004dca:	6008      	str	r0, [r1, #0]
 8004dcc:	0628      	lsls	r0, r5, #24
 8004dce:	d501      	bpl.n	8004dd4 <_printf_i+0xec>
 8004dd0:	681d      	ldr	r5, [r3, #0]
 8004dd2:	e002      	b.n	8004dda <_printf_i+0xf2>
 8004dd4:	0669      	lsls	r1, r5, #25
 8004dd6:	d5fb      	bpl.n	8004dd0 <_printf_i+0xe8>
 8004dd8:	881d      	ldrh	r5, [r3, #0]
 8004dda:	4854      	ldr	r0, [pc, #336]	; (8004f2c <_printf_i+0x244>)
 8004ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8004dde:	bf0c      	ite	eq
 8004de0:	2308      	moveq	r3, #8
 8004de2:	230a      	movne	r3, #10
 8004de4:	2100      	movs	r1, #0
 8004de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dea:	6866      	ldr	r6, [r4, #4]
 8004dec:	60a6      	str	r6, [r4, #8]
 8004dee:	2e00      	cmp	r6, #0
 8004df0:	bfa2      	ittt	ge
 8004df2:	6821      	ldrge	r1, [r4, #0]
 8004df4:	f021 0104 	bicge.w	r1, r1, #4
 8004df8:	6021      	strge	r1, [r4, #0]
 8004dfa:	b90d      	cbnz	r5, 8004e00 <_printf_i+0x118>
 8004dfc:	2e00      	cmp	r6, #0
 8004dfe:	d04d      	beq.n	8004e9c <_printf_i+0x1b4>
 8004e00:	4616      	mov	r6, r2
 8004e02:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e06:	fb03 5711 	mls	r7, r3, r1, r5
 8004e0a:	5dc7      	ldrb	r7, [r0, r7]
 8004e0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e10:	462f      	mov	r7, r5
 8004e12:	42bb      	cmp	r3, r7
 8004e14:	460d      	mov	r5, r1
 8004e16:	d9f4      	bls.n	8004e02 <_printf_i+0x11a>
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d10b      	bne.n	8004e34 <_printf_i+0x14c>
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	07df      	lsls	r7, r3, #31
 8004e20:	d508      	bpl.n	8004e34 <_printf_i+0x14c>
 8004e22:	6923      	ldr	r3, [r4, #16]
 8004e24:	6861      	ldr	r1, [r4, #4]
 8004e26:	4299      	cmp	r1, r3
 8004e28:	bfde      	ittt	le
 8004e2a:	2330      	movle	r3, #48	; 0x30
 8004e2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e34:	1b92      	subs	r2, r2, r6
 8004e36:	6122      	str	r2, [r4, #16]
 8004e38:	f8cd a000 	str.w	sl, [sp]
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	aa03      	add	r2, sp, #12
 8004e40:	4621      	mov	r1, r4
 8004e42:	4640      	mov	r0, r8
 8004e44:	f7ff fee2 	bl	8004c0c <_printf_common>
 8004e48:	3001      	adds	r0, #1
 8004e4a:	d14c      	bne.n	8004ee6 <_printf_i+0x1fe>
 8004e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e50:	b004      	add	sp, #16
 8004e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e56:	4835      	ldr	r0, [pc, #212]	; (8004f2c <_printf_i+0x244>)
 8004e58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	680e      	ldr	r6, [r1, #0]
 8004e60:	061f      	lsls	r7, r3, #24
 8004e62:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e66:	600e      	str	r6, [r1, #0]
 8004e68:	d514      	bpl.n	8004e94 <_printf_i+0x1ac>
 8004e6a:	07d9      	lsls	r1, r3, #31
 8004e6c:	bf44      	itt	mi
 8004e6e:	f043 0320 	orrmi.w	r3, r3, #32
 8004e72:	6023      	strmi	r3, [r4, #0]
 8004e74:	b91d      	cbnz	r5, 8004e7e <_printf_i+0x196>
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	f023 0320 	bic.w	r3, r3, #32
 8004e7c:	6023      	str	r3, [r4, #0]
 8004e7e:	2310      	movs	r3, #16
 8004e80:	e7b0      	b.n	8004de4 <_printf_i+0xfc>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	f043 0320 	orr.w	r3, r3, #32
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	2378      	movs	r3, #120	; 0x78
 8004e8c:	4828      	ldr	r0, [pc, #160]	; (8004f30 <_printf_i+0x248>)
 8004e8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e92:	e7e3      	b.n	8004e5c <_printf_i+0x174>
 8004e94:	065e      	lsls	r6, r3, #25
 8004e96:	bf48      	it	mi
 8004e98:	b2ad      	uxthmi	r5, r5
 8004e9a:	e7e6      	b.n	8004e6a <_printf_i+0x182>
 8004e9c:	4616      	mov	r6, r2
 8004e9e:	e7bb      	b.n	8004e18 <_printf_i+0x130>
 8004ea0:	680b      	ldr	r3, [r1, #0]
 8004ea2:	6826      	ldr	r6, [r4, #0]
 8004ea4:	6960      	ldr	r0, [r4, #20]
 8004ea6:	1d1d      	adds	r5, r3, #4
 8004ea8:	600d      	str	r5, [r1, #0]
 8004eaa:	0635      	lsls	r5, r6, #24
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	d501      	bpl.n	8004eb4 <_printf_i+0x1cc>
 8004eb0:	6018      	str	r0, [r3, #0]
 8004eb2:	e002      	b.n	8004eba <_printf_i+0x1d2>
 8004eb4:	0671      	lsls	r1, r6, #25
 8004eb6:	d5fb      	bpl.n	8004eb0 <_printf_i+0x1c8>
 8004eb8:	8018      	strh	r0, [r3, #0]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	6123      	str	r3, [r4, #16]
 8004ebe:	4616      	mov	r6, r2
 8004ec0:	e7ba      	b.n	8004e38 <_printf_i+0x150>
 8004ec2:	680b      	ldr	r3, [r1, #0]
 8004ec4:	1d1a      	adds	r2, r3, #4
 8004ec6:	600a      	str	r2, [r1, #0]
 8004ec8:	681e      	ldr	r6, [r3, #0]
 8004eca:	6862      	ldr	r2, [r4, #4]
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4630      	mov	r0, r6
 8004ed0:	f7fb f986 	bl	80001e0 <memchr>
 8004ed4:	b108      	cbz	r0, 8004eda <_printf_i+0x1f2>
 8004ed6:	1b80      	subs	r0, r0, r6
 8004ed8:	6060      	str	r0, [r4, #4]
 8004eda:	6863      	ldr	r3, [r4, #4]
 8004edc:	6123      	str	r3, [r4, #16]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ee4:	e7a8      	b.n	8004e38 <_printf_i+0x150>
 8004ee6:	6923      	ldr	r3, [r4, #16]
 8004ee8:	4632      	mov	r2, r6
 8004eea:	4649      	mov	r1, r9
 8004eec:	4640      	mov	r0, r8
 8004eee:	47d0      	blx	sl
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d0ab      	beq.n	8004e4c <_printf_i+0x164>
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	079b      	lsls	r3, r3, #30
 8004ef8:	d413      	bmi.n	8004f22 <_printf_i+0x23a>
 8004efa:	68e0      	ldr	r0, [r4, #12]
 8004efc:	9b03      	ldr	r3, [sp, #12]
 8004efe:	4298      	cmp	r0, r3
 8004f00:	bfb8      	it	lt
 8004f02:	4618      	movlt	r0, r3
 8004f04:	e7a4      	b.n	8004e50 <_printf_i+0x168>
 8004f06:	2301      	movs	r3, #1
 8004f08:	4632      	mov	r2, r6
 8004f0a:	4649      	mov	r1, r9
 8004f0c:	4640      	mov	r0, r8
 8004f0e:	47d0      	blx	sl
 8004f10:	3001      	adds	r0, #1
 8004f12:	d09b      	beq.n	8004e4c <_printf_i+0x164>
 8004f14:	3501      	adds	r5, #1
 8004f16:	68e3      	ldr	r3, [r4, #12]
 8004f18:	9903      	ldr	r1, [sp, #12]
 8004f1a:	1a5b      	subs	r3, r3, r1
 8004f1c:	42ab      	cmp	r3, r5
 8004f1e:	dcf2      	bgt.n	8004f06 <_printf_i+0x21e>
 8004f20:	e7eb      	b.n	8004efa <_printf_i+0x212>
 8004f22:	2500      	movs	r5, #0
 8004f24:	f104 0619 	add.w	r6, r4, #25
 8004f28:	e7f5      	b.n	8004f16 <_printf_i+0x22e>
 8004f2a:	bf00      	nop
 8004f2c:	08005269 	.word	0x08005269
 8004f30:	0800527a 	.word	0x0800527a

08004f34 <memcpy>:
 8004f34:	440a      	add	r2, r1
 8004f36:	4291      	cmp	r1, r2
 8004f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f3c:	d100      	bne.n	8004f40 <memcpy+0xc>
 8004f3e:	4770      	bx	lr
 8004f40:	b510      	push	{r4, lr}
 8004f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f4a:	4291      	cmp	r1, r2
 8004f4c:	d1f9      	bne.n	8004f42 <memcpy+0xe>
 8004f4e:	bd10      	pop	{r4, pc}

08004f50 <memmove>:
 8004f50:	4288      	cmp	r0, r1
 8004f52:	b510      	push	{r4, lr}
 8004f54:	eb01 0402 	add.w	r4, r1, r2
 8004f58:	d902      	bls.n	8004f60 <memmove+0x10>
 8004f5a:	4284      	cmp	r4, r0
 8004f5c:	4623      	mov	r3, r4
 8004f5e:	d807      	bhi.n	8004f70 <memmove+0x20>
 8004f60:	1e43      	subs	r3, r0, #1
 8004f62:	42a1      	cmp	r1, r4
 8004f64:	d008      	beq.n	8004f78 <memmove+0x28>
 8004f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f6e:	e7f8      	b.n	8004f62 <memmove+0x12>
 8004f70:	4402      	add	r2, r0
 8004f72:	4601      	mov	r1, r0
 8004f74:	428a      	cmp	r2, r1
 8004f76:	d100      	bne.n	8004f7a <memmove+0x2a>
 8004f78:	bd10      	pop	{r4, pc}
 8004f7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f82:	e7f7      	b.n	8004f74 <memmove+0x24>

08004f84 <_free_r>:
 8004f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f86:	2900      	cmp	r1, #0
 8004f88:	d048      	beq.n	800501c <_free_r+0x98>
 8004f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f8e:	9001      	str	r0, [sp, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f1a1 0404 	sub.w	r4, r1, #4
 8004f96:	bfb8      	it	lt
 8004f98:	18e4      	addlt	r4, r4, r3
 8004f9a:	f000 f8d3 	bl	8005144 <__malloc_lock>
 8004f9e:	4a20      	ldr	r2, [pc, #128]	; (8005020 <_free_r+0x9c>)
 8004fa0:	9801      	ldr	r0, [sp, #4]
 8004fa2:	6813      	ldr	r3, [r2, #0]
 8004fa4:	4615      	mov	r5, r2
 8004fa6:	b933      	cbnz	r3, 8004fb6 <_free_r+0x32>
 8004fa8:	6063      	str	r3, [r4, #4]
 8004faa:	6014      	str	r4, [r2, #0]
 8004fac:	b003      	add	sp, #12
 8004fae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fb2:	f000 b8cd 	b.w	8005150 <__malloc_unlock>
 8004fb6:	42a3      	cmp	r3, r4
 8004fb8:	d90b      	bls.n	8004fd2 <_free_r+0x4e>
 8004fba:	6821      	ldr	r1, [r4, #0]
 8004fbc:	1862      	adds	r2, r4, r1
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	bf04      	itt	eq
 8004fc2:	681a      	ldreq	r2, [r3, #0]
 8004fc4:	685b      	ldreq	r3, [r3, #4]
 8004fc6:	6063      	str	r3, [r4, #4]
 8004fc8:	bf04      	itt	eq
 8004fca:	1852      	addeq	r2, r2, r1
 8004fcc:	6022      	streq	r2, [r4, #0]
 8004fce:	602c      	str	r4, [r5, #0]
 8004fd0:	e7ec      	b.n	8004fac <_free_r+0x28>
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	b10b      	cbz	r3, 8004fdc <_free_r+0x58>
 8004fd8:	42a3      	cmp	r3, r4
 8004fda:	d9fa      	bls.n	8004fd2 <_free_r+0x4e>
 8004fdc:	6811      	ldr	r1, [r2, #0]
 8004fde:	1855      	adds	r5, r2, r1
 8004fe0:	42a5      	cmp	r5, r4
 8004fe2:	d10b      	bne.n	8004ffc <_free_r+0x78>
 8004fe4:	6824      	ldr	r4, [r4, #0]
 8004fe6:	4421      	add	r1, r4
 8004fe8:	1854      	adds	r4, r2, r1
 8004fea:	42a3      	cmp	r3, r4
 8004fec:	6011      	str	r1, [r2, #0]
 8004fee:	d1dd      	bne.n	8004fac <_free_r+0x28>
 8004ff0:	681c      	ldr	r4, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	6053      	str	r3, [r2, #4]
 8004ff6:	4421      	add	r1, r4
 8004ff8:	6011      	str	r1, [r2, #0]
 8004ffa:	e7d7      	b.n	8004fac <_free_r+0x28>
 8004ffc:	d902      	bls.n	8005004 <_free_r+0x80>
 8004ffe:	230c      	movs	r3, #12
 8005000:	6003      	str	r3, [r0, #0]
 8005002:	e7d3      	b.n	8004fac <_free_r+0x28>
 8005004:	6825      	ldr	r5, [r4, #0]
 8005006:	1961      	adds	r1, r4, r5
 8005008:	428b      	cmp	r3, r1
 800500a:	bf04      	itt	eq
 800500c:	6819      	ldreq	r1, [r3, #0]
 800500e:	685b      	ldreq	r3, [r3, #4]
 8005010:	6063      	str	r3, [r4, #4]
 8005012:	bf04      	itt	eq
 8005014:	1949      	addeq	r1, r1, r5
 8005016:	6021      	streq	r1, [r4, #0]
 8005018:	6054      	str	r4, [r2, #4]
 800501a:	e7c7      	b.n	8004fac <_free_r+0x28>
 800501c:	b003      	add	sp, #12
 800501e:	bd30      	pop	{r4, r5, pc}
 8005020:	20000090 	.word	0x20000090

08005024 <_malloc_r>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	1ccd      	adds	r5, r1, #3
 8005028:	f025 0503 	bic.w	r5, r5, #3
 800502c:	3508      	adds	r5, #8
 800502e:	2d0c      	cmp	r5, #12
 8005030:	bf38      	it	cc
 8005032:	250c      	movcc	r5, #12
 8005034:	2d00      	cmp	r5, #0
 8005036:	4606      	mov	r6, r0
 8005038:	db01      	blt.n	800503e <_malloc_r+0x1a>
 800503a:	42a9      	cmp	r1, r5
 800503c:	d903      	bls.n	8005046 <_malloc_r+0x22>
 800503e:	230c      	movs	r3, #12
 8005040:	6033      	str	r3, [r6, #0]
 8005042:	2000      	movs	r0, #0
 8005044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005046:	f000 f87d 	bl	8005144 <__malloc_lock>
 800504a:	4921      	ldr	r1, [pc, #132]	; (80050d0 <_malloc_r+0xac>)
 800504c:	680a      	ldr	r2, [r1, #0]
 800504e:	4614      	mov	r4, r2
 8005050:	b99c      	cbnz	r4, 800507a <_malloc_r+0x56>
 8005052:	4f20      	ldr	r7, [pc, #128]	; (80050d4 <_malloc_r+0xb0>)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	b923      	cbnz	r3, 8005062 <_malloc_r+0x3e>
 8005058:	4621      	mov	r1, r4
 800505a:	4630      	mov	r0, r6
 800505c:	f000 f862 	bl	8005124 <_sbrk_r>
 8005060:	6038      	str	r0, [r7, #0]
 8005062:	4629      	mov	r1, r5
 8005064:	4630      	mov	r0, r6
 8005066:	f000 f85d 	bl	8005124 <_sbrk_r>
 800506a:	1c43      	adds	r3, r0, #1
 800506c:	d123      	bne.n	80050b6 <_malloc_r+0x92>
 800506e:	230c      	movs	r3, #12
 8005070:	6033      	str	r3, [r6, #0]
 8005072:	4630      	mov	r0, r6
 8005074:	f000 f86c 	bl	8005150 <__malloc_unlock>
 8005078:	e7e3      	b.n	8005042 <_malloc_r+0x1e>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	1b5b      	subs	r3, r3, r5
 800507e:	d417      	bmi.n	80050b0 <_malloc_r+0x8c>
 8005080:	2b0b      	cmp	r3, #11
 8005082:	d903      	bls.n	800508c <_malloc_r+0x68>
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	441c      	add	r4, r3
 8005088:	6025      	str	r5, [r4, #0]
 800508a:	e004      	b.n	8005096 <_malloc_r+0x72>
 800508c:	6863      	ldr	r3, [r4, #4]
 800508e:	42a2      	cmp	r2, r4
 8005090:	bf0c      	ite	eq
 8005092:	600b      	streq	r3, [r1, #0]
 8005094:	6053      	strne	r3, [r2, #4]
 8005096:	4630      	mov	r0, r6
 8005098:	f000 f85a 	bl	8005150 <__malloc_unlock>
 800509c:	f104 000b 	add.w	r0, r4, #11
 80050a0:	1d23      	adds	r3, r4, #4
 80050a2:	f020 0007 	bic.w	r0, r0, #7
 80050a6:	1ac2      	subs	r2, r0, r3
 80050a8:	d0cc      	beq.n	8005044 <_malloc_r+0x20>
 80050aa:	1a1b      	subs	r3, r3, r0
 80050ac:	50a3      	str	r3, [r4, r2]
 80050ae:	e7c9      	b.n	8005044 <_malloc_r+0x20>
 80050b0:	4622      	mov	r2, r4
 80050b2:	6864      	ldr	r4, [r4, #4]
 80050b4:	e7cc      	b.n	8005050 <_malloc_r+0x2c>
 80050b6:	1cc4      	adds	r4, r0, #3
 80050b8:	f024 0403 	bic.w	r4, r4, #3
 80050bc:	42a0      	cmp	r0, r4
 80050be:	d0e3      	beq.n	8005088 <_malloc_r+0x64>
 80050c0:	1a21      	subs	r1, r4, r0
 80050c2:	4630      	mov	r0, r6
 80050c4:	f000 f82e 	bl	8005124 <_sbrk_r>
 80050c8:	3001      	adds	r0, #1
 80050ca:	d1dd      	bne.n	8005088 <_malloc_r+0x64>
 80050cc:	e7cf      	b.n	800506e <_malloc_r+0x4a>
 80050ce:	bf00      	nop
 80050d0:	20000090 	.word	0x20000090
 80050d4:	20000094 	.word	0x20000094

080050d8 <_realloc_r>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	4607      	mov	r7, r0
 80050dc:	4614      	mov	r4, r2
 80050de:	460e      	mov	r6, r1
 80050e0:	b921      	cbnz	r1, 80050ec <_realloc_r+0x14>
 80050e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050e6:	4611      	mov	r1, r2
 80050e8:	f7ff bf9c 	b.w	8005024 <_malloc_r>
 80050ec:	b922      	cbnz	r2, 80050f8 <_realloc_r+0x20>
 80050ee:	f7ff ff49 	bl	8004f84 <_free_r>
 80050f2:	4625      	mov	r5, r4
 80050f4:	4628      	mov	r0, r5
 80050f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050f8:	f000 f830 	bl	800515c <_malloc_usable_size_r>
 80050fc:	42a0      	cmp	r0, r4
 80050fe:	d20f      	bcs.n	8005120 <_realloc_r+0x48>
 8005100:	4621      	mov	r1, r4
 8005102:	4638      	mov	r0, r7
 8005104:	f7ff ff8e 	bl	8005024 <_malloc_r>
 8005108:	4605      	mov	r5, r0
 800510a:	2800      	cmp	r0, #0
 800510c:	d0f2      	beq.n	80050f4 <_realloc_r+0x1c>
 800510e:	4631      	mov	r1, r6
 8005110:	4622      	mov	r2, r4
 8005112:	f7ff ff0f 	bl	8004f34 <memcpy>
 8005116:	4631      	mov	r1, r6
 8005118:	4638      	mov	r0, r7
 800511a:	f7ff ff33 	bl	8004f84 <_free_r>
 800511e:	e7e9      	b.n	80050f4 <_realloc_r+0x1c>
 8005120:	4635      	mov	r5, r6
 8005122:	e7e7      	b.n	80050f4 <_realloc_r+0x1c>

08005124 <_sbrk_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4d06      	ldr	r5, [pc, #24]	; (8005140 <_sbrk_r+0x1c>)
 8005128:	2300      	movs	r3, #0
 800512a:	4604      	mov	r4, r0
 800512c:	4608      	mov	r0, r1
 800512e:	602b      	str	r3, [r5, #0]
 8005130:	f7fc f892 	bl	8001258 <_sbrk>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d102      	bne.n	800513e <_sbrk_r+0x1a>
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	b103      	cbz	r3, 800513e <_sbrk_r+0x1a>
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	bd38      	pop	{r3, r4, r5, pc}
 8005140:	200002b4 	.word	0x200002b4

08005144 <__malloc_lock>:
 8005144:	4801      	ldr	r0, [pc, #4]	; (800514c <__malloc_lock+0x8>)
 8005146:	f000 b811 	b.w	800516c <__retarget_lock_acquire_recursive>
 800514a:	bf00      	nop
 800514c:	200002bc 	.word	0x200002bc

08005150 <__malloc_unlock>:
 8005150:	4801      	ldr	r0, [pc, #4]	; (8005158 <__malloc_unlock+0x8>)
 8005152:	f000 b80c 	b.w	800516e <__retarget_lock_release_recursive>
 8005156:	bf00      	nop
 8005158:	200002bc 	.word	0x200002bc

0800515c <_malloc_usable_size_r>:
 800515c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005160:	1f18      	subs	r0, r3, #4
 8005162:	2b00      	cmp	r3, #0
 8005164:	bfbc      	itt	lt
 8005166:	580b      	ldrlt	r3, [r1, r0]
 8005168:	18c0      	addlt	r0, r0, r3
 800516a:	4770      	bx	lr

0800516c <__retarget_lock_acquire_recursive>:
 800516c:	4770      	bx	lr

0800516e <__retarget_lock_release_recursive>:
 800516e:	4770      	bx	lr

08005170 <_init>:
 8005170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005172:	bf00      	nop
 8005174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005176:	bc08      	pop	{r3}
 8005178:	469e      	mov	lr, r3
 800517a:	4770      	bx	lr

0800517c <_fini>:
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	bf00      	nop
 8005180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005182:	bc08      	pop	{r3}
 8005184:	469e      	mov	lr, r3
 8005186:	4770      	bx	lr
