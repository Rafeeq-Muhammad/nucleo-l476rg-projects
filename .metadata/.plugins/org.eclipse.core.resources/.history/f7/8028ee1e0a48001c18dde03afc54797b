/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */

/*
 * --//PROJECT NAME\\--
Ground Node.

 * --//PROJECT DESCRIPTION\\--
@brief
 This project will send CORRECT commands to the remote node.
 
@detailed
To accomplish @brief, this project must:

1. Complete. Have an implemented CLI program in PuTTy in which the user can type in a command, press enter,
and that command be stored in a buffer.
2. Complete. The command that is stored in a buffer must be parsed by-token, the token being a space.
3. Incomplete. Incorrect commands: tell the user such a command doesn't exist. Prompt the user to reenter their command.
4. Incomplete. The parsed command must be translated into an integer that I send to the remote note...
(the remote node will take an integer and perform a command based on an integer that it receives.)
5. Incomplete. In the event that this ground node receives a packet, do the appropriate task. Note: The only packet
that the ground node will be receiving from the remote node is the result of the arithmetic the remote
note performs. Therefore the interrupt function for this program of receving a signal should simply be a displaying
to PuTTy. "Result: Number"


* --//PROJECT STATUS\\--
Incomplete.
*
* --//TASKS AT HAND\\--
1. Implement Joseph's string-compare function.
*
* --//FUTURE TASKS. NOT THAT IMPORTANT\\--
1. While a command is being processed, do not call the next rx_cpl_callback,
aka don't let anyone type anything else until I'm ready to receive the next command.
The problem is that if I don't do this, while I'm processing code the user can still
type, and this basically starts the next command in the middle of processing. But I don't
what them to initialize another interrupt while I'm already executing the other interrupt
* 
* --//NOTES\\--
1. Notice that I am doing all the processing on the ground node and not the remote node. I think this is
better than sending an incorrect command to the remote node and letting the remote node do all the command processing.
I want the remote node to be as simple as possible. The only processing that the remote note will handle will be
arithmetic calculations.
*/

/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
#include <stdbool.h>
#include "LoRa.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
LoRa myLoRa;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t safe_buff[100]; //Global variable that holds the completed command.

uint8_t rx_buff[100]= {0}; //Global variable that holds the command as it's being entered.
uint8_t rx_char[1] = {0}; //Global variable. Passed in the calling of the hal-uart-interrupt-function.
bool rx_complete = false; //Global variable that represents whether the command has been completed or not.
int rx_count; //Integer variable. Only used in Nolan's function, so should be local?

/* Integer variable only used in the hal-uart-interrupt function for internal logic.
Should be a local variable since only using in one function.*/
int last_command_count;
/*
This buffer holds the converted command-to-integer in its first parameters, and any
necessary parameters in the subsequent parameter positions.
*/
uint8_t commandArray[100]; 


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */

/*
   * The next buffers are used for transmitting to PuTTy if I've received a command.
   * To understand what they do, go to the section of the code where they're used.
   */
  uint8_t tx_buff[1000];
  uint8_t message[100];
  uint8_t message1[100];

  /*
   * The next lines of code are used for an initial transmitting to PuTTy that the program has been run...
   * and I can start typing into the terminal.

   *As for why this message has to show up twice, I don't know why that is. I'm not transmitting it twice.
   *This is one of those "weird errors". My theory is that this has to do with the flashing.
   */
  strcpy( (char*)tx_buff, "\r\n\r\nWhen you see this message twice, you may begin typing commands.\r\n\r\n"); //
  HAL_UART_Transmit(&huart2, tx_buff, strlen((char*)tx_buff), 500); //TWO

  /*
   * This is the initialization of PuTTy receiving a character. It tells PuTTy, "hey,..
   * receive the next character I'm about to type."
   */
  HAL_UART_Receive_IT(&huart2, rx_char, 1); //Start listening for interrupts.



  //------------LORA STUFF-----------------------------------------------------

  /* MODULE SETTINGS */
  myLoRa = newLoRa();

  myLoRa.hSPIx                 = &hspi1;
  myLoRa.CS_port               = GPIOB;
  myLoRa.CS_pin                = CS_Pin;
  myLoRa.reset_port            = GPIOB;
  myLoRa.reset_pin             = reset_Pin;
  myLoRa.DIO0_port                         = dio0_GPIO_Port;
  myLoRa.DIO0_pin                             = dio0_Pin;

  myLoRa.frequency             = 433;                              // default = 433 MHz
  myLoRa.spredingFactor        = SF_7;                            // default = SF_7
  myLoRa.bandWidth                   = BW_62_5KHz;                  // default = BW_125KHz
  myLoRa.crcRate                       = CR_4_5;                        // default = CR_4_5
  myLoRa.power                           = POWER_20db;                // default = 20db
  myLoRa.overCurrentProtection = 120;                             // default = 100 mA
  myLoRa.preamble                       = 10;                              // default = 8;

  LoRa_reset(&myLoRa);
  LoRa_init(&myLoRa);



  /*The following buffer holds the number of transmissions that were attempted.*/
  uint8_t tx_num = 0;

  /* START CONTINUOUS RECEIVING */
  LoRa_startReceiving(&myLoRa);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /*
     * The following lines of commented code are just for reference. How to use snprintf and strcpy.
     * Btw, sprintf is just strcpy but with formatting like %d and %s and %c and shit like that.
     */
    //snprintf((char*)tx_buff, sizeof(tx_buff), "Test print.\r\n");//Copies a value to the buffer. String casted integer.
    //strcpy( (char*)tx_buff, "HI!\r\n");
    //HAL_UART_Transmit(&huart2, tx_buff, strlen((char*)tx_buff), 500);


    /*
     * If I get a enter key, rx_complete is true
     * Move the cursor down, aka transmit \r\n; print the contents of safe_buff. This is my command.
     * ;move the cursor to the next spot.
     * Set rx_complete to false to reset the debounce.
     */
    if (rx_complete)
    {

      uint16_t LoRa_status = LoRa_init(&myLoRa); //Get LoRa status at the beginning of each complete command.

      memset(commandArray, 0, sizeof(rx_buff)); //Each time the user enters a new command, clear the old one. I'm sending
      //this to the remote node.

      /* LORA_OK just means the radio object exists and transmission is good to go. */
      if (LoRa_status==LORA_OK){

        /*
         * The following code displays to PuTTy what the command was.
         */
        strcpy( (char*)message, "\r\n");
        strcpy( (char*)message1, "----------------------------------");
        snprintf(
            (char*)tx_buff,
            sizeof(tx_buff),
            "\r\n%s%sThe command is was: %s%s%s",
            message1, message, safe_buff, message, message
            );
        HAL_UART_Transmit(&huart2, tx_buff, strlen((char*)tx_buff), 500);


        /*
         * The following code tests that I can in fact parse a command. And that I can
         * in fact display parsed tokens to PuTTy.
         *
         */

         //char str[80] = "This is - www.tutorialspoint.com - website";
         const char s[2] = " ";
         char *token;

         /* get the first token */
         token = strtok((char*)safe_buff, s);

         /* walk through other tokens */
         while( token != NULL ) {


          /*
          Process if the command was involving an led
          */
           char commandCompareArray[50]; //This array holds what I'm comparing the token too.
           strcpy( (char*)commandCompareArray, "led");
           int stringsAreEqual = strcmp((const char*)token, (const char*)commandCompareArray);
           if (stringsAreEqual == 0)
           {
             snprintf(
             (char*)tx_buff,
             sizeof(tx_buff),
             "The first token was: led\r\n\r\n"
             );
             HAL_UART_Transmit(&huart2, tx_buff, strlen((char*)tx_buff), 500);


             /*
              * Get the next token
              */
             token = strtok(NULL, s);
             strcpy( (char*)commandCompareArray, "toggle");
             int stringsAreEqual = strcmp((const char*)token, (const char*)commandCompareArray);

             if (stringsAreEqual == 0)
             {
               snprintf(
               (char*)tx_buff,
               sizeof(tx_buff),
               "The second token was: toggle\r\n\r\n"
               );
               HAL_UART_Transmit(&huart2, tx_buff, strlen((char*)tx_buff), 500);

               commandArray[0] = 1; //This integer that I'm going to send to the remote node means toggle led.

               //Transmit to LoRa radio--------------------------------
                /*
                The next line 1. attempts to transmit data AND 2. The result of this attempt is stored in tx_res.
                1 means successful transmission.
                0 means unsuccesssful transmission.
                */
                uint8_t tx_res = LoRa_transmit(&myLoRa, (uint8_t*)commandArray, 120, 1000);

                /*
                The following buffer is used to print "Tx Result:..." followed by the result of the tx_res buffer.
                */
                uint8_t result_string[128] = {0};
                sprintf(result_string, "Tx Result: %u\r\n", tx_res);
                HAL_UART_Transmit(&huart2, result_string, strlen(result_string), 1000);



               /*
                * Get the next token
                */
               token = strtok(NULL, s);
               break;
             }
             
             /*End of Led Processing*/


           }


           /*
            * IMPORTANT. VERIFIED: leave the following line here at the end of the loop through string
            * using strtok function.
            *
            * The way the strtok function works, even in the case that
            * I don't have a compare match because the user didn't put in a correct command,
            * I'm still going to want to loop through the rest of the string.
            * Otherwise I think for the next command string, there's residue from
            * the previous string.
            */
          token = strtok(NULL, s);
         }
     }




      /*
       * IMPORTANT. Reset rx_complete. Otherwise the rx complete code will run all the time.
       */
      rx_complete = false;
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, reset_Pin|CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : dio0_Pin */
  GPIO_InitStruct.Pin = dio0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(dio0_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : reset_Pin CS_Pin */
  GPIO_InitStruct.Pin = reset_Pin|CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == huart2.Instance)
        {
            switch (*rx_char)
            {
                // if we receive a carriage return, newline, or null terminator, then we have received a complete command
                case '\r':
                case '\n':
                case '\0':
                {
                    //The C library function void *memcpy(void *dest, const void *src, size_t n) copies n characters from memory area src to memory area dest.
                    memcpy(safe_buff, rx_buff, rx_count + 1);
                    last_command_count = rx_count;

                    memset(rx_buff, 0, sizeof(rx_buff));
                    rx_count = 0;

    #ifdef ECHO_RECEIVED_CHARACTERS
                    uint8_t new_line[2] = {'\r', '\n'};
                    HAL_UART_Transmit(&huart2, new_line, 2, 100);        // transmit CRLF
    #endif

                    rx_complete = true;
                    break;
                }
                /*
                 * FIXME: When user back spaces, the data may reflect that the user backspaced, but when the user sends the command,
                 * the command comes back as unrecognized. Probably because there is some interfering data being left into the incoming_command buffer.
                 *
                 * To replicate error: type in a command, hit back space, then fill out the rest of the command, then hit enter. You will get an unrecognized command error
                 * even though you typed it in correctly.
                 */
                // if we have received a backspace character, then delete the last received character
                case '\b':
                {
                    // set current buffer position to 0; if we are not already at index 0 then move back one index and set that value to 0 as well
                    if (rx_count)
                    {
                        rx_buff[rx_count] = 0;
                        rx_count --;
    #ifdef ECHO_RECEIVED_CHARACTERS
                    uint8_t tx_char = ' ';
                    HAL_UART_Transmit(&huart2, &rx_char, 1, 100);        // transmit backspace character to move our cursor back once on the terminal
                    HAL_UART_Transmit(&huart2, &tx_char, 1, 100);        // transmit space character to clear the character that was there
                    HAL_UART_Transmit(&huart2, &rx_char, 1, 100);        // transmit backspace character to once again move back a space
    #endif
                    }
                    rx_buff[rx_count] = 0;



                    break;
                }

                // we have received some other character, store it to the array
                default:
                {
                    rx_buff[rx_count] = *rx_char;
                    rx_count ++;

    #ifdef ECHO_RECEIVED_CHARACTERS
                    HAL_UART_Transmit(&huart2, &rx_char, 1, 100);        // echo the received character to the terminal
    #endif
                    //Show the input being entered by user on the terminal
                    uint8_t show_input[50];
                    strcpy ( (char*)show_input, (char*)rx_char);
                    HAL_UART_Transmit(&huart2, show_input, strlen((char*)show_input),1000);
                    break;
                }
            }

            *rx_char = 0; //In the switch statement, one of the cases is a 0, so I assume this is necessary.

            /*
             * Leave the following line in the function. If I remove it, the user will only
             * be able to call a single interrupt, thus only be able to type a single
             * character into putty.
             */
            HAL_UART_Receive_IT(&huart2, rx_char, 1);

        }
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
