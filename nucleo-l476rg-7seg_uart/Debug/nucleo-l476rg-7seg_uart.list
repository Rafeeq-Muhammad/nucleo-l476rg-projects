
nucleo-l476rg-7seg_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800525c  0800525c  0001525c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005410  08005410  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005418  08005418  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005418  08005418  00015418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000090  080054b0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080054b0  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013472  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000256e  00000000  00000000  00033532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00035aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00036708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027046  00000000  00000000  00037288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa9d  00000000  00000000  0005e2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec88c  00000000  00000000  0006dd6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015a5f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035dc  00000000  00000000  0015a64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005244 	.word	0x08005244

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08005244 	.word	0x08005244

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <gpioSetReset>:
{0x79, 0x03} brings cursor back to fourth digit place
*/
uint8_t digit_cmd_array[4][2] = { {0x79, 0x00} , {0x79, 0x01} , {0x79, 0x02}, {0x79, 0x03} };
int timeout = 50;

static void gpioSetReset() {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <gpioSetReset+0x1c>)
 8000582:	f000 fffd 	bl	8001580 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2140      	movs	r1, #64	; 0x40
 800058a:	4802      	ldr	r0, [pc, #8]	; (8000594 <gpioSetReset+0x1c>)
 800058c:	f000 fff8 	bl	8001580 <HAL_GPIO_WritePin>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	48000400 	.word	0x48000400

08000598 <clearDisplay>:

void clearDisplay() {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	HAL_SPI_Transmit(&hspi1, clear_display_cmd, sizeof(clear_display_cmd), timeout);
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <clearDisplay+0x1c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2201      	movs	r2, #1
 80005a2:	4905      	ldr	r1, [pc, #20]	; (80005b8 <clearDisplay+0x20>)
 80005a4:	4805      	ldr	r0, [pc, #20]	; (80005bc <clearDisplay+0x24>)
 80005a6:	f002 fbb2 	bl	8002d0e <HAL_SPI_Transmit>
	gpioSetReset();
 80005aa:	f7ff ffe5 	bl	8000578 <gpioSetReset>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000000c 	.word	0x2000000c
 80005b8:	20000000 	.word	0x20000000
 80005bc:	200000c0 	.word	0x200000c0

080005c0 <moveCursor>:

void moveCursor(int position) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit(&hspi1, digit_cmd_array[position], sizeof(digit_cmd_array[position]), timeout);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <moveCursor+0x28>)
 80005ce:	1899      	adds	r1, r3, r2
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <moveCursor+0x2c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2202      	movs	r2, #2
 80005d6:	4806      	ldr	r0, [pc, #24]	; (80005f0 <moveCursor+0x30>)
 80005d8:	f002 fb99 	bl	8002d0e <HAL_SPI_Transmit>
	gpioSetReset();
 80005dc:	f7ff ffcc 	bl	8000578 <gpioSetReset>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000004 	.word	0x20000004
 80005ec:	2000000c 	.word	0x2000000c
 80005f0:	200000c0 	.word	0x200000c0

080005f4 <writeToDigit>:

/*
Write to the digit that the cursor is currently pointing to.
*/
void writeToDigit(uint8_t data) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &data, sizeof(data), timeout);
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <writeToDigit+0x24>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	1df9      	adds	r1, r7, #7
 8000604:	2201      	movs	r2, #1
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <writeToDigit+0x28>)
 8000608:	f002 fb81 	bl	8002d0e <HAL_SPI_Transmit>
	gpioSetReset();
 800060c:	f7ff ffb4 	bl	8000578 <gpioSetReset>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000000c 	.word	0x2000000c
 800061c:	200000c0 	.word	0x200000c0

08000620 <writeToDisplay>:

/*
Write to all 4 digits at once.
*/
void writeToDisplay(char* data) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

	uint8_t data_buff_1 = (uint8_t)data[0];
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	74fb      	strb	r3, [r7, #19]
	uint8_t data_buff_2 = (uint8_t)data[1];
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3301      	adds	r3, #1
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	74bb      	strb	r3, [r7, #18]
	uint8_t data_buff_3 = (uint8_t)data[2];
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3302      	adds	r3, #2
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	747b      	strb	r3, [r7, #17]
	uint8_t data_buff_4 = (uint8_t)data[3];
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	3303      	adds	r3, #3
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	743b      	strb	r3, [r7, #16]
	uint8_t data_array[4] = {data_buff_1, data_buff_2, data_buff_3, data_buff_4};
 8000646:	7cfb      	ldrb	r3, [r7, #19]
 8000648:	733b      	strb	r3, [r7, #12]
 800064a:	7cbb      	ldrb	r3, [r7, #18]
 800064c:	737b      	strb	r3, [r7, #13]
 800064e:	7c7b      	ldrb	r3, [r7, #17]
 8000650:	73bb      	strb	r3, [r7, #14]
 8000652:	7c3b      	ldrb	r3, [r7, #16]
 8000654:	73fb      	strb	r3, [r7, #15]

	clearDisplay();
 8000656:	f7ff ff9f 	bl	8000598 <clearDisplay>


	for (int j = 0; j < 4; j++) {
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	e014      	b.n	800068a <writeToDisplay+0x6a>
		if (data_array[j]) {
 8000660:	f107 020c 	add.w	r2, r7, #12
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	4413      	add	r3, r2
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d00a      	beq.n	8000684 <writeToDisplay+0x64>
			//move cursor
			moveCursor(j);
 800066e:	6978      	ldr	r0, [r7, #20]
 8000670:	f7ff ffa6 	bl	80005c0 <moveCursor>
			//write to display
			writeToDigit(data_array[j]);
 8000674:	f107 020c 	add.w	r2, r7, #12
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	4413      	add	r3, r2
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffb8 	bl	80005f4 <writeToDigit>
	for (int j = 0; j < 4; j++) {
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	3301      	adds	r3, #1
 8000688:	617b      	str	r3, [r7, #20]
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	2b03      	cmp	r3, #3
 800068e:	dde7      	ble.n	8000660 <writeToDisplay+0x40>
		}
    }
}
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069e:	f000 fbb9 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a2:	f000 f809 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a6:	f000 f8c7 	bl	8000838 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006aa:	f000 f895 	bl	80007d8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80006ae:	f000 f855 	bl	800075c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  initializeCLI();
 80006b2:	f000 fb2b 	bl	8000d0c <initializeCLI>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <main+0x1c>

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b096      	sub	sp, #88	; 0x58
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2244      	movs	r2, #68	; 0x44
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 f96a 	bl	80049a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	463b      	mov	r3, r7
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006de:	f000 ff75 	bl	80015cc <HAL_PWREx_ControlVoltageScaling>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006e8:	f000 f90c 	bl	8000904 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f6:	2310      	movs	r3, #16
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fe:	2302      	movs	r3, #2
 8000700:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000702:	2301      	movs	r3, #1
 8000704:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000706:	230a      	movs	r3, #10
 8000708:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800070a:	2307      	movs	r3, #7
 800070c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4618      	mov	r0, r3
 800071c:	f000 ffac 	bl	8001678 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000726:	f000 f8ed 	bl	8000904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2303      	movs	r3, #3
 8000730:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800073e:	463b      	mov	r3, r7
 8000740:	2104      	movs	r1, #4
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fb7e 	bl	8001e44 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800074e:	f000 f8d9 	bl	8000904 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3758      	adds	r7, #88	; 0x58
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_SPI1_Init+0x74>)
 8000762:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <MX_SPI1_Init+0x78>)
 8000764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_SPI1_Init+0x74>)
 8000768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800076c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_SPI1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_SPI1_Init+0x74>)
 8000776:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800077a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_SPI1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_SPI1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_SPI1_Init+0x74>)
 800078a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_SPI1_Init+0x74>)
 8000792:	2238      	movs	r2, #56	; 0x38
 8000794:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_SPI1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_SPI1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_SPI1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_SPI1_Init+0x74>)
 80007aa:	2207      	movs	r2, #7
 80007ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_SPI1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_SPI1_Init+0x74>)
 80007b6:	2208      	movs	r2, #8
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_SPI1_Init+0x74>)
 80007bc:	f002 fa04 	bl	8002bc8 <HAL_SPI_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007c6:	f000 f89d 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000c0 	.word	0x200000c0
 80007d4:	40013000 	.word	0x40013000

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MX_USART2_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART2_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART2_UART_Init+0x58>)
 800081c:	f002 fd4a 	bl	80032b4 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 f86d 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000124 	.word	0x20000124
 8000834:	40004400 	.word	0x40004400

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a29      	ldr	r2, [pc, #164]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <MX_GPIO_Init+0xc0>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a23      	ldr	r2, [pc, #140]	; (80008f8 <MX_GPIO_Init+0xc0>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_GPIO_Init+0xc0>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <MX_GPIO_Init+0xc0>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_GPIO_Init+0xc0>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2140      	movs	r1, #64	; 0x40
 80008b2:	4812      	ldr	r0, [pc, #72]	; (80008fc <MX_GPIO_Init+0xc4>)
 80008b4:	f000 fe64 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008be:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	480c      	ldr	r0, [pc, #48]	; (8000900 <MX_GPIO_Init+0xc8>)
 80008d0:	f000 fcac 	bl	800122c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80008d4:	2340      	movs	r3, #64	; 0x40
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_GPIO_Init+0xc4>)
 80008ec:	f000 fc9e 	bl	800122c <HAL_GPIO_Init>

}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000400 	.word	0x48000400
 8000900:	48000800 	.word	0x48000800

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <HAL_MspInit+0x44>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091a:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <HAL_MspInit+0x44>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6613      	str	r3, [r2, #96]	; 0x60
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <HAL_MspInit+0x44>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_MspInit+0x44>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_MspInit+0x44>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6593      	str	r3, [r2, #88]	; 0x58
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_MspInit+0x44>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_SPI_MspInit+0x7c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d128      	bne.n	80009cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	4a16      	ldr	r2, [pc, #88]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 8000980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000984:	6613      	str	r3, [r2, #96]	; 0x60
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009aa:	23e0      	movs	r3, #224	; 0xe0
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009ba:	2305      	movs	r3, #5
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f000 fc30 	bl	800122c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	; 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40013000 	.word	0x40013000
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0ac      	sub	sp, #176	; 0xb0
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2288      	movs	r2, #136	; 0x88
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f003 ffcf 	bl	80049a0 <memset>
  if(huart->Instance==USART2)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a25      	ldr	r2, [pc, #148]	; (8000a9c <HAL_UART_MspInit+0xc0>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d143      	bne.n	8000a94 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fc19 	bl	8002250 <HAL_RCCEx_PeriphCLKConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a24:	f7ff ff6e 	bl	8000904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <HAL_UART_MspInit+0xc4>)
 8000a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2c:	4a1c      	ldr	r2, [pc, #112]	; (8000aa0 <HAL_UART_MspInit+0xc4>)
 8000a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a32:	6593      	str	r3, [r2, #88]	; 0x58
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <HAL_UART_MspInit+0xc4>)
 8000a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_UART_MspInit+0xc4>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a44:	4a16      	ldr	r2, [pc, #88]	; (8000aa0 <HAL_UART_MspInit+0xc4>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_UART_MspInit+0xc4>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a70:	2307      	movs	r3, #7
 8000a72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f000 fbd4 	bl	800122c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	2026      	movs	r0, #38	; 0x26
 8000a8a:	f000 fb1a 	bl	80010c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a8e:	2026      	movs	r0, #38	; 0x26
 8000a90:	f000 fb33 	bl	80010fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a94:	bf00      	nop
 8000a96:	37b0      	adds	r7, #176	; 0xb0
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40004400 	.word	0x40004400
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 f9ec 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <USART2_IRQHandler+0x10>)
 8000afe:	f002 fd11 	bl	8003524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000124 	.word	0x20000124

08000b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b14:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <_sbrk+0x5c>)
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <_sbrk+0x60>)
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <_sbrk+0x64>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <_sbrk+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d207      	bcs.n	8000b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b3c:	f003 ff06 	bl	800494c <__errno>
 8000b40:	4603      	mov	r3, r0
 8000b42:	220c      	movs	r2, #12
 8000b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	e009      	b.n	8000b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <_sbrk+0x64>)
 8000b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20018000 	.word	0x20018000
 8000b6c:	00000400 	.word	0x00000400
 8000b70:	200000ac 	.word	0x200000ac
 8000b74:	20000200 	.word	0x20000200

08000b78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <Transmit>:
 * Author: Rafeeq Muhammad
 *
 * Description: Accepts an array of characters and transmits that array through uart. The array
 * of characters can be passed in the form of a buffer or a raw string.
 */
void Transmit(char *message) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff fb13 	bl	80001d0 <strlen>
 8000baa:	4603      	mov	r3, r0
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <Transmit+0x28>)
 8000bb6:	f002 fbcb 	bl	8003350 <HAL_UART_Transmit>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000124 	.word	0x20000124

08000bc8 <cleanTransmitWithIcon>:
 *
 * Author: Rafeeq Muhammad
 *
 * Description: cleanTransmit() but with a newline and a token.
 */
void cleanTransmitWithIcon(char *message) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000bce:	af02      	add	r7, sp, #8
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	6018      	str	r0, [r3, #0]
	char cleanTransmit_buf[500];
	snprintf(cleanTransmit_buf, sizeof(cleanTransmit_buf), "\r\n\r\n%s\r\n\r\n%s ", message, icon);
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	f107 000c 	add.w	r0, r7, #12
 8000bda:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <cleanTransmitWithIcon+0x48>)
 8000bdc:	9200      	str	r2, [sp, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <cleanTransmitWithIcon+0x4c>)
 8000be2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000be6:	f003 fee3 	bl	80049b0 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)cleanTransmit_buf, strlen(cleanTransmit_buf), HAL_MAX_DELAY);
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff faee 	bl	80001d0 <strlen>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	f107 010c 	add.w	r1, r7, #12
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <cleanTransmitWithIcon+0x50>)
 8000c02:	f002 fba5 	bl	8003350 <HAL_UART_Transmit>
}
 8000c06:	bf00      	nop
 8000c08:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000014 	.word	0x20000014
 8000c14:	08005268 	.word	0x08005268
 8000c18:	20000124 	.word	0x20000124

08000c1c <HAL_UART_RxCpltCallback>:
 *
 * Authors: Nolan, Rafeeq Muhammad
 *
 * Description: This is an interrupt function. It is called everytime the user inputs a key into PuTTy.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)  {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

    if (huart->Instance == huart2.Instance) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b31      	ldr	r3, [pc, #196]	; (8000cf0 <HAL_UART_RxCpltCallback+0xd4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d15b      	bne.n	8000ce8 <HAL_UART_RxCpltCallback+0xcc>

		switch (*rx_char) {
 8000c30:	4b30      	ldr	r3, [pc, #192]	; (8000cf4 <HAL_UART_RxCpltCallback+0xd8>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b0d      	cmp	r3, #13
 8000c36:	dc10      	bgt.n	8000c5a <HAL_UART_RxCpltCallback+0x3e>
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db3a      	blt.n	8000cb2 <HAL_UART_RxCpltCallback+0x96>
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	2301      	movs	r3, #1
 8000c40:	fa03 f202 	lsl.w	r2, r3, r2
 8000c44:	f242 4301 	movw	r3, #9217	; 0x2401
 8000c48:	4013      	ands	r3, r2
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	bf14      	ite	ne
 8000c4e:	2301      	movne	r3, #1
 8000c50:	2300      	moveq	r3, #0
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d103      	bne.n	8000c60 <HAL_UART_RxCpltCallback+0x44>
 8000c58:	e02b      	b.n	8000cb2 <HAL_UART_RxCpltCallback+0x96>
 8000c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c5c:	d017      	beq.n	8000c8e <HAL_UART_RxCpltCallback+0x72>
 8000c5e:	e028      	b.n	8000cb2 <HAL_UART_RxCpltCallback+0x96>
			//Enter
			case '\r':
			case '\n':
			case '\0':
			{
				if (rx_count){
 8000c60:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <HAL_UART_RxCpltCallback+0xdc>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00f      	beq.n	8000c88 <HAL_UART_RxCpltCallback+0x6c>
					strcpy((char*)safe_buff, (char*)rx_buff);
 8000c68:	4924      	ldr	r1, [pc, #144]	; (8000cfc <HAL_UART_RxCpltCallback+0xe0>)
 8000c6a:	4825      	ldr	r0, [pc, #148]	; (8000d00 <HAL_UART_RxCpltCallback+0xe4>)
 8000c6c:	f003 fed4 	bl	8004a18 <strcpy>
					memset(rx_buff, 0, sizeof(rx_buff));
 8000c70:	221e      	movs	r2, #30
 8000c72:	2100      	movs	r1, #0
 8000c74:	4821      	ldr	r0, [pc, #132]	; (8000cfc <HAL_UART_RxCpltCallback+0xe0>)
 8000c76:	f003 fe93 	bl	80049a0 <memset>
					rx_count = 0;
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <HAL_UART_RxCpltCallback+0xdc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
					rx_complete = 1;
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <HAL_UART_RxCpltCallback+0xe8>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
					break;
 8000c86:	e024      	b.n	8000cd2 <HAL_UART_RxCpltCallback+0xb6>
				}
				else {
					cleanTransmitWithIcon("No command was entered.");
 8000c88:	481f      	ldr	r0, [pc, #124]	; (8000d08 <HAL_UART_RxCpltCallback+0xec>)
 8000c8a:	f7ff ff9d 	bl	8000bc8 <cleanTransmitWithIcon>
			}

			//Backspace
			case 127:
			{
				if (rx_count)
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <HAL_UART_RxCpltCallback+0xdc>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d01c      	beq.n	8000cd0 <HAL_UART_RxCpltCallback+0xb4>
				{
					rx_count --;
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <HAL_UART_RxCpltCallback+0xdc>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	4a16      	ldr	r2, [pc, #88]	; (8000cf8 <HAL_UART_RxCpltCallback+0xdc>)
 8000c9e:	6013      	str	r3, [r2, #0]
					rx_buff[rx_count] = 0;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_UART_RxCpltCallback+0xdc>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <HAL_UART_RxCpltCallback+0xe0>)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	54d1      	strb	r1, [r2, r3]
					Transmit((char*)rx_char);
 8000caa:	4812      	ldr	r0, [pc, #72]	; (8000cf4 <HAL_UART_RxCpltCallback+0xd8>)
 8000cac:	f7ff ff76 	bl	8000b9c <Transmit>
				}
				break;
 8000cb0:	e00e      	b.n	8000cd0 <HAL_UART_RxCpltCallback+0xb4>
			}

			//Any other character
			default:
			{
				rx_buff[rx_count] = *rx_char;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_UART_RxCpltCallback+0xdc>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <HAL_UART_RxCpltCallback+0xd8>)
 8000cb8:	7811      	ldrb	r1, [r2, #0]
 8000cba:	4a10      	ldr	r2, [pc, #64]	; (8000cfc <HAL_UART_RxCpltCallback+0xe0>)
 8000cbc:	54d1      	strb	r1, [r2, r3]
				rx_count ++;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_UART_RxCpltCallback+0xdc>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	4a0c      	ldr	r2, [pc, #48]	; (8000cf8 <HAL_UART_RxCpltCallback+0xdc>)
 8000cc6:	6013      	str	r3, [r2, #0]
				Transmit((char*)rx_char);
 8000cc8:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <HAL_UART_RxCpltCallback+0xd8>)
 8000cca:	f7ff ff67 	bl	8000b9c <Transmit>
				break;
 8000cce:	e000      	b.n	8000cd2 <HAL_UART_RxCpltCallback+0xb6>
				break;
 8000cd0:	bf00      	nop
			}
		}

		if (rx_complete == 1) {
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <HAL_UART_RxCpltCallback+0xe8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d101      	bne.n	8000cde <HAL_UART_RxCpltCallback+0xc2>
			commandComplete();
 8000cda:	f000 f857 	bl	8000d8c <commandComplete>
		}

		HAL_UART_Receive_IT(&huart2, rx_char, 1);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4904      	ldr	r1, [pc, #16]	; (8000cf4 <HAL_UART_RxCpltCallback+0xd8>)
 8000ce2:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <HAL_UART_RxCpltCallback+0xd4>)
 8000ce4:	f002 fbc8 	bl	8003478 <HAL_UART_Receive_IT>
	}
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000124 	.word	0x20000124
 8000cf4:	200001e8 	.word	0x200001e8
 8000cf8:	200000b4 	.word	0x200000b4
 8000cfc:	200001a8 	.word	0x200001a8
 8000d00:	200001c8 	.word	0x200001c8
 8000d04:	200000b0 	.word	0x200000b0
 8000d08:	08005278 	.word	0x08005278

08000d0c <initializeCLI>:
 *
 * Author: Rafeeq Muhammad
 *
 * Description: Initializes the CLI with the name of the project, version, and copyright.
 */
void initializeCLI() {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b09a      	sub	sp, #104	; 0x68
 8000d10:	af00      	add	r7, sp, #0
	char initializeCLI_buf[100];
	snprintf(initializeCLI_buf, sizeof(initializeCLI_buf), "STM32 CapeShell. [Version %s]\r\n", VERSION);
 8000d12:	1d38      	adds	r0, r7, #4
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <initializeCLI+0x3c>)
 8000d16:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <initializeCLI+0x40>)
 8000d18:	2164      	movs	r1, #100	; 0x64
 8000d1a:	f003 fe49 	bl	80049b0 <sniprintf>
	Transmit(initializeCLI_buf);
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff3b 	bl	8000b9c <Transmit>
	Transmit("(c) Cajun Advanced Pico-Satellite Experiment. All rights reserved. ~\r\n\r\n");
 8000d26:	480a      	ldr	r0, [pc, #40]	; (8000d50 <initializeCLI+0x44>)
 8000d28:	f7ff ff38 	bl	8000b9c <Transmit>
	Transmit("Type, press enter, and look at the 7-segment display. Type a space to leave a blank.\r\n");
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <initializeCLI+0x48>)
 8000d2e:	f7ff ff35 	bl	8000b9c <Transmit>
	newlineCLI();
 8000d32:	f000 f815 	bl	8000d60 <newlineCLI>
	HAL_UART_Receive_IT(&huart2, rx_char, 1);
 8000d36:	2201      	movs	r2, #1
 8000d38:	4907      	ldr	r1, [pc, #28]	; (8000d58 <initializeCLI+0x4c>)
 8000d3a:	4808      	ldr	r0, [pc, #32]	; (8000d5c <initializeCLI+0x50>)
 8000d3c:	f002 fb9c 	bl	8003478 <HAL_UART_Receive_IT>
}
 8000d40:	bf00      	nop
 8000d42:	3768      	adds	r7, #104	; 0x68
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000018 	.word	0x20000018
 8000d4c:	08005290 	.word	0x08005290
 8000d50:	080052b0 	.word	0x080052b0
 8000d54:	080052fc 	.word	0x080052fc
 8000d58:	200001e8 	.word	0x200001e8
 8000d5c:	20000124 	.word	0x20000124

08000d60 <newlineCLI>:
 *
 * Author: Rafeeq Muhammad
 *
 * Description: Transmits a new line and a token-starter line.
 */
void newlineCLI() {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b09a      	sub	sp, #104	; 0x68
 8000d64:	af00      	add	r7, sp, #0
	char CLI_buf[100];
	snprintf(CLI_buf, sizeof(CLI_buf), "\r\n%s " , icon);
 8000d66:	1d38      	adds	r0, r7, #4
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <newlineCLI+0x24>)
 8000d6a:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <newlineCLI+0x28>)
 8000d6c:	2164      	movs	r1, #100	; 0x64
 8000d6e:	f003 fe1f 	bl	80049b0 <sniprintf>
	Transmit(CLI_buf);
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff11 	bl	8000b9c <Transmit>
}
 8000d7a:	bf00      	nop
 8000d7c:	3768      	adds	r7, #104	; 0x68
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000014 	.word	0x20000014
 8000d88:	08005354 	.word	0x08005354

08000d8c <commandComplete>:
 *
 * Author: Rafeeq Muhammad
 *
 * Description: Called when the user presses enter and completes their command.
 */
void commandComplete() {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	processCommands();
 8000d90:	f000 f808 	bl	8000da4 <processCommands>
	rx_complete = 0;
 8000d94:	4b02      	ldr	r3, [pc, #8]	; (8000da0 <commandComplete+0x14>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200000b0 	.word	0x200000b0

08000da4 <processCommands>:
 *
 * Description: Called to process the command the user inputted.
 * Checks and displays if the command exists.
 * Processes correctly inputted commands.
 */
void processCommands() {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0

	writeToDisplay(safe_buff);
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <processCommands+0x14>)
 8000daa:	f7ff fc39 	bl	8000620 <writeToDisplay>
	cleanTransmitWithIcon("Wrote to display.");
 8000dae:	4803      	ldr	r0, [pc, #12]	; (8000dbc <processCommands+0x18>)
 8000db0:	f7ff ff0a 	bl	8000bc8 <cleanTransmitWithIcon>
//		}
//	}
//	else {
//		unrecognizedCommand();
//	}
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200001c8 	.word	0x200001c8
 8000dbc:	08005380 	.word	0x08005380

08000dc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc4:	f7ff fed8 	bl	8000b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc8:	480c      	ldr	r0, [pc, #48]	; (8000dfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000dca:	490d      	ldr	r1, [pc, #52]	; (8000e00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <LoopForever+0xe>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de0:	4c0a      	ldr	r4, [pc, #40]	; (8000e0c <LoopForever+0x16>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dee:	f003 fdb3 	bl	8004958 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000df2:	f7ff fc52 	bl	800069a <main>

08000df6 <LoopForever>:

LoopForever:
    b LoopForever
 8000df6:	e7fe      	b.n	8000df6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000df8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e04:	08005420 	.word	0x08005420
  ldr r2, =_sbss
 8000e08:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e0c:	20000200 	.word	0x20000200

08000e10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC1_2_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <HAL_Init+0x3c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <HAL_Init+0x3c>)
 8000e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e28:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	f000 f93e 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e30:	2000      	movs	r0, #0
 8000e32:	f000 f80f 	bl	8000e54 <HAL_InitTick>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d002      	beq.n	8000e42 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	71fb      	strb	r3, [r7, #7]
 8000e40:	e001      	b.n	8000e46 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e42:	f7ff fd65 	bl	8000910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e46:	79fb      	ldrb	r3, [r7, #7]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40022000 	.word	0x40022000

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_InitTick+0x6c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d023      	beq.n	8000eb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <HAL_InitTick+0x70>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_InitTick+0x6c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f949 	bl	8001116 <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10f      	bne.n	8000eaa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b0f      	cmp	r3, #15
 8000e8e:	d809      	bhi.n	8000ea4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e90:	2200      	movs	r2, #0
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f000 f913 	bl	80010c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_InitTick+0x74>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e007      	b.n	8000eb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e004      	b.n	8000eb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	73fb      	strb	r3, [r7, #15]
 8000eae:	e001      	b.n	8000eb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000028 	.word	0x20000028
 8000ec4:	20000010 	.word	0x20000010
 8000ec8:	20000024 	.word	0x20000024

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000028 	.word	0x20000028
 8000ef0:	200001ec 	.word	0x200001ec

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200001ec 	.word	0x200001ec

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4907      	ldr	r1, [pc, #28]	; (8000fa8 <__NVIC_EnableIRQ+0x38>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff8e 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff29 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010d4:	f7ff ff3e 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 80010d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	6978      	ldr	r0, [r7, #20]
 80010e0:	f7ff ff8e 	bl	8001000 <NVIC_EncodePriority>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5d 	bl	8000fac <__NVIC_SetPriority>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff31 	bl	8000f70 <__NVIC_EnableIRQ>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ffa2 	bl	8001068 <SysTick_Config>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800112e:	b480      	push	{r7}
 8001130:	b085      	sub	sp, #20
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d008      	beq.n	8001158 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2204      	movs	r2, #4
 800114a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e022      	b.n	800119e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 020e 	bic.w	r2, r2, #14
 8001166:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0201 	bic.w	r2, r2, #1
 8001176:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117c:	f003 021c 	and.w	r2, r3, #28
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	2101      	movs	r1, #1
 8001186:	fa01 f202 	lsl.w	r2, r1, r2
 800118a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d005      	beq.n	80011ce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2204      	movs	r2, #4
 80011c6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e029      	b.n	8001222 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 020e 	bic.w	r2, r2, #14
 80011dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0201 	bic.w	r2, r2, #1
 80011ec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f003 021c 	and.w	r2, r3, #28
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	2101      	movs	r1, #1
 80011fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001200:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	4798      	blx	r3
    }
  }
  return status;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800122c:	b480      	push	{r7}
 800122e:	b087      	sub	sp, #28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123a:	e17f      	b.n	800153c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2101      	movs	r1, #1
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	4013      	ands	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 8171 	beq.w	8001536 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b01      	cmp	r3, #1
 800125e:	d005      	beq.n	800126c <HAL_GPIO_Init+0x40>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d130      	bne.n	80012ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012a2:	2201      	movs	r2, #1
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	f003 0201 	and.w	r2, r3, #1
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d118      	bne.n	800130c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012e0:	2201      	movs	r2, #1
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	08db      	lsrs	r3, r3, #3
 80012f6:	f003 0201 	and.w	r2, r3, #1
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b03      	cmp	r3, #3
 8001316:	d017      	beq.n	8001348 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d123      	bne.n	800139c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3208      	adds	r2, #8
 800135c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	220f      	movs	r2, #15
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	6939      	ldr	r1, [r7, #16]
 8001398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0203 	and.w	r2, r3, #3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80ac 	beq.w	8001536 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	4b5f      	ldr	r3, [pc, #380]	; (800155c <HAL_GPIO_Init+0x330>)
 80013e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e2:	4a5e      	ldr	r2, [pc, #376]	; (800155c <HAL_GPIO_Init+0x330>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6613      	str	r3, [r2, #96]	; 0x60
 80013ea:	4b5c      	ldr	r3, [pc, #368]	; (800155c <HAL_GPIO_Init+0x330>)
 80013ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013f6:	4a5a      	ldr	r2, [pc, #360]	; (8001560 <HAL_GPIO_Init+0x334>)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001420:	d025      	beq.n	800146e <HAL_GPIO_Init+0x242>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4f      	ldr	r2, [pc, #316]	; (8001564 <HAL_GPIO_Init+0x338>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d01f      	beq.n	800146a <HAL_GPIO_Init+0x23e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4e      	ldr	r2, [pc, #312]	; (8001568 <HAL_GPIO_Init+0x33c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d019      	beq.n	8001466 <HAL_GPIO_Init+0x23a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4d      	ldr	r2, [pc, #308]	; (800156c <HAL_GPIO_Init+0x340>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d013      	beq.n	8001462 <HAL_GPIO_Init+0x236>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4c      	ldr	r2, [pc, #304]	; (8001570 <HAL_GPIO_Init+0x344>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d00d      	beq.n	800145e <HAL_GPIO_Init+0x232>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4b      	ldr	r2, [pc, #300]	; (8001574 <HAL_GPIO_Init+0x348>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d007      	beq.n	800145a <HAL_GPIO_Init+0x22e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4a      	ldr	r2, [pc, #296]	; (8001578 <HAL_GPIO_Init+0x34c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d101      	bne.n	8001456 <HAL_GPIO_Init+0x22a>
 8001452:	2306      	movs	r3, #6
 8001454:	e00c      	b.n	8001470 <HAL_GPIO_Init+0x244>
 8001456:	2307      	movs	r3, #7
 8001458:	e00a      	b.n	8001470 <HAL_GPIO_Init+0x244>
 800145a:	2305      	movs	r3, #5
 800145c:	e008      	b.n	8001470 <HAL_GPIO_Init+0x244>
 800145e:	2304      	movs	r3, #4
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x244>
 8001462:	2303      	movs	r3, #3
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x244>
 8001466:	2302      	movs	r3, #2
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x244>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x244>
 800146e:	2300      	movs	r3, #0
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	f002 0203 	and.w	r2, r2, #3
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	4093      	lsls	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001480:	4937      	ldr	r1, [pc, #220]	; (8001560 <HAL_GPIO_Init+0x334>)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800148e:	4b3b      	ldr	r3, [pc, #236]	; (800157c <HAL_GPIO_Init+0x350>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014b2:	4a32      	ldr	r2, [pc, #200]	; (800157c <HAL_GPIO_Init+0x350>)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014b8:	4b30      	ldr	r3, [pc, #192]	; (800157c <HAL_GPIO_Init+0x350>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014dc:	4a27      	ldr	r2, [pc, #156]	; (800157c <HAL_GPIO_Init+0x350>)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_GPIO_Init+0x350>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001506:	4a1d      	ldr	r2, [pc, #116]	; (800157c <HAL_GPIO_Init+0x350>)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_GPIO_Init+0x350>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43db      	mvns	r3, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001530:	4a12      	ldr	r2, [pc, #72]	; (800157c <HAL_GPIO_Init+0x350>)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa22 f303 	lsr.w	r3, r2, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	f47f ae78 	bne.w	800123c <HAL_GPIO_Init+0x10>
  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000
 8001560:	40010000 	.word	0x40010000
 8001564:	48000400 	.word	0x48000400
 8001568:	48000800 	.word	0x48000800
 800156c:	48000c00 	.word	0x48000c00
 8001570:	48001000 	.word	0x48001000
 8001574:	48001400 	.word	0x48001400
 8001578:	48001800 	.word	0x48001800
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40007000 	.word	0x40007000

080015cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015da:	d130      	bne.n	800163e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015dc:	4b23      	ldr	r3, [pc, #140]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e8:	d038      	beq.n	800165c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015f2:	4a1e      	ldr	r2, [pc, #120]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2232      	movs	r2, #50	; 0x32
 8001600:	fb02 f303 	mul.w	r3, r2, r3
 8001604:	4a1b      	ldr	r2, [pc, #108]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	0c9b      	lsrs	r3, r3, #18
 800160c:	3301      	adds	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001610:	e002      	b.n	8001618 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3b01      	subs	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001624:	d102      	bne.n	800162c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f2      	bne.n	8001612 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001638:	d110      	bne.n	800165c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e00f      	b.n	800165e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800164a:	d007      	beq.n	800165c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001654:	4a05      	ldr	r2, [pc, #20]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40007000 	.word	0x40007000
 8001670:	20000010 	.word	0x20000010
 8001674:	431bde83 	.word	0x431bde83

08001678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e3d4      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800168a:	4ba1      	ldr	r3, [pc, #644]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001694:	4b9e      	ldr	r3, [pc, #632]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 80e4 	beq.w	8001874 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d007      	beq.n	80016c2 <HAL_RCC_OscConfig+0x4a>
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2b0c      	cmp	r3, #12
 80016b6:	f040 808b 	bne.w	80017d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	f040 8087 	bne.w	80017d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016c2:	4b93      	ldr	r3, [pc, #588]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <HAL_RCC_OscConfig+0x62>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e3ac      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1a      	ldr	r2, [r3, #32]
 80016de:	4b8c      	ldr	r3, [pc, #560]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d004      	beq.n	80016f4 <HAL_RCC_OscConfig+0x7c>
 80016ea:	4b89      	ldr	r3, [pc, #548]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016f2:	e005      	b.n	8001700 <HAL_RCC_OscConfig+0x88>
 80016f4:	4b86      	ldr	r3, [pc, #536]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 80016f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fa:	091b      	lsrs	r3, r3, #4
 80016fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001700:	4293      	cmp	r3, r2
 8001702:	d223      	bcs.n	800174c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4618      	mov	r0, r3
 800170a:	f000 fd41 	bl	8002190 <RCC_SetFlashLatencyFromMSIRange>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e38d      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001718:	4b7d      	ldr	r3, [pc, #500]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a7c      	ldr	r2, [pc, #496]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 800171e:	f043 0308 	orr.w	r3, r3, #8
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b7a      	ldr	r3, [pc, #488]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4977      	ldr	r1, [pc, #476]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 8001732:	4313      	orrs	r3, r2
 8001734:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001736:	4b76      	ldr	r3, [pc, #472]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	4972      	ldr	r1, [pc, #456]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 8001746:	4313      	orrs	r3, r2
 8001748:	604b      	str	r3, [r1, #4]
 800174a:	e025      	b.n	8001798 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800174c:	4b70      	ldr	r3, [pc, #448]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a6f      	ldr	r2, [pc, #444]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b6d      	ldr	r3, [pc, #436]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	496a      	ldr	r1, [pc, #424]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800176a:	4b69      	ldr	r3, [pc, #420]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	4965      	ldr	r1, [pc, #404]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 800177a:	4313      	orrs	r3, r2
 800177c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d109      	bne.n	8001798 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4618      	mov	r0, r3
 800178a:	f000 fd01 	bl	8002190 <RCC_SetFlashLatencyFromMSIRange>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e34d      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001798:	f000 fc36 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 800179c:	4602      	mov	r2, r0
 800179e:	4b5c      	ldr	r3, [pc, #368]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	495a      	ldr	r1, [pc, #360]	; (8001914 <HAL_RCC_OscConfig+0x29c>)
 80017aa:	5ccb      	ldrb	r3, [r1, r3]
 80017ac:	f003 031f 	and.w	r3, r3, #31
 80017b0:	fa22 f303 	lsr.w	r3, r2, r3
 80017b4:	4a58      	ldr	r2, [pc, #352]	; (8001918 <HAL_RCC_OscConfig+0x2a0>)
 80017b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017b8:	4b58      	ldr	r3, [pc, #352]	; (800191c <HAL_RCC_OscConfig+0x2a4>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fb49 	bl	8000e54 <HAL_InitTick>
 80017c2:	4603      	mov	r3, r0
 80017c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d052      	beq.n	8001872 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	e331      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d032      	beq.n	800183e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017d8:	4b4d      	ldr	r3, [pc, #308]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a4c      	ldr	r2, [pc, #304]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fb86 	bl	8000ef4 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017ec:	f7ff fb82 	bl	8000ef4 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e31a      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017fe:	4b44      	ldr	r3, [pc, #272]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800180a:	4b41      	ldr	r3, [pc, #260]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a40      	ldr	r2, [pc, #256]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 8001810:	f043 0308 	orr.w	r3, r3, #8
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b3e      	ldr	r3, [pc, #248]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	493b      	ldr	r1, [pc, #236]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001828:	4b39      	ldr	r3, [pc, #228]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	4936      	ldr	r1, [pc, #216]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
 800183c:	e01a      	b.n	8001874 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800183e:	4b34      	ldr	r3, [pc, #208]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a33      	ldr	r2, [pc, #204]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800184a:	f7ff fb53 	bl	8000ef4 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001852:	f7ff fb4f 	bl	8000ef4 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e2e7      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001864:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f0      	bne.n	8001852 <HAL_RCC_OscConfig+0x1da>
 8001870:	e000      	b.n	8001874 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001872:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d074      	beq.n	800196a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2b08      	cmp	r3, #8
 8001884:	d005      	beq.n	8001892 <HAL_RCC_OscConfig+0x21a>
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	2b0c      	cmp	r3, #12
 800188a:	d10e      	bne.n	80018aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d10b      	bne.n	80018aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001892:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d064      	beq.n	8001968 <HAL_RCC_OscConfig+0x2f0>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d160      	bne.n	8001968 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e2c4      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b2:	d106      	bne.n	80018c2 <HAL_RCC_OscConfig+0x24a>
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a15      	ldr	r2, [pc, #84]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 80018ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	e01d      	b.n	80018fe <HAL_RCC_OscConfig+0x286>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ca:	d10c      	bne.n	80018e6 <HAL_RCC_OscConfig+0x26e>
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 80018d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0c      	ldr	r2, [pc, #48]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 80018de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	e00b      	b.n	80018fe <HAL_RCC_OscConfig+0x286>
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 80018ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a06      	ldr	r2, [pc, #24]	; (8001910 <HAL_RCC_OscConfig+0x298>)
 80018f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d01c      	beq.n	8001940 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001906:	f7ff faf5 	bl	8000ef4 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800190c:	e011      	b.n	8001932 <HAL_RCC_OscConfig+0x2ba>
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000
 8001914:	08005394 	.word	0x08005394
 8001918:	20000010 	.word	0x20000010
 800191c:	20000024 	.word	0x20000024
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff fae8 	bl	8000ef4 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	; 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e280      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001932:	4baf      	ldr	r3, [pc, #700]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x2a8>
 800193e:	e014      	b.n	800196a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff fad8 	bl	8000ef4 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff fad4 	bl	8000ef4 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e26c      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800195a:	4ba5      	ldr	r3, [pc, #660]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x2d0>
 8001966:	e000      	b.n	800196a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d060      	beq.n	8001a38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	2b04      	cmp	r3, #4
 800197a:	d005      	beq.n	8001988 <HAL_RCC_OscConfig+0x310>
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2b0c      	cmp	r3, #12
 8001980:	d119      	bne.n	80019b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d116      	bne.n	80019b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001988:	4b99      	ldr	r3, [pc, #612]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_OscConfig+0x328>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e249      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a0:	4b93      	ldr	r3, [pc, #588]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	4990      	ldr	r1, [pc, #576]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b4:	e040      	b.n	8001a38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d023      	beq.n	8001a06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019be:	4b8c      	ldr	r3, [pc, #560]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a8b      	ldr	r2, [pc, #556]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 80019c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ca:	f7ff fa93 	bl	8000ef4 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff fa8f 	bl	8000ef4 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e227      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e4:	4b82      	ldr	r3, [pc, #520]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f0:	4b7f      	ldr	r3, [pc, #508]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	061b      	lsls	r3, r3, #24
 80019fe:	497c      	ldr	r1, [pc, #496]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
 8001a04:	e018      	b.n	8001a38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a06:	4b7a      	ldr	r3, [pc, #488]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a79      	ldr	r2, [pc, #484]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff fa6f 	bl	8000ef4 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fa6b 	bl	8000ef4 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e203      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a2c:	4b70      	ldr	r3, [pc, #448]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f0      	bne.n	8001a1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d03c      	beq.n	8001abe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d01c      	beq.n	8001a86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a4c:	4b68      	ldr	r3, [pc, #416]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a52:	4a67      	ldr	r2, [pc, #412]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fa4a 	bl	8000ef4 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a64:	f7ff fa46 	bl	8000ef4 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e1de      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a76:	4b5e      	ldr	r3, [pc, #376]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0ef      	beq.n	8001a64 <HAL_RCC_OscConfig+0x3ec>
 8001a84:	e01b      	b.n	8001abe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a86:	4b5a      	ldr	r3, [pc, #360]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8c:	4a58      	ldr	r2, [pc, #352]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a96:	f7ff fa2d 	bl	8000ef4 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9e:	f7ff fa29 	bl	8000ef4 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e1c1      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab0:	4b4f      	ldr	r3, [pc, #316]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ef      	bne.n	8001a9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 80a6 	beq.w	8001c18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ad0:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10d      	bne.n	8001af8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001adc:	4b44      	ldr	r3, [pc, #272]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae0:	4a43      	ldr	r2, [pc, #268]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae8:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af4:	2301      	movs	r3, #1
 8001af6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af8:	4b3e      	ldr	r3, [pc, #248]	; (8001bf4 <HAL_RCC_OscConfig+0x57c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d118      	bne.n	8001b36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b04:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <HAL_RCC_OscConfig+0x57c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a3a      	ldr	r2, [pc, #232]	; (8001bf4 <HAL_RCC_OscConfig+0x57c>)
 8001b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b10:	f7ff f9f0 	bl	8000ef4 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b18:	f7ff f9ec 	bl	8000ef4 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e184      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2a:	4b32      	ldr	r3, [pc, #200]	; (8001bf4 <HAL_RCC_OscConfig+0x57c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d108      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4d8>
 8001b3e:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b44:	4a2a      	ldr	r2, [pc, #168]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b4e:	e024      	b.n	8001b9a <HAL_RCC_OscConfig+0x522>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b05      	cmp	r3, #5
 8001b56:	d110      	bne.n	8001b7a <HAL_RCC_OscConfig+0x502>
 8001b58:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5e:	4a24      	ldr	r2, [pc, #144]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b68:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6e:	4a20      	ldr	r2, [pc, #128]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b78:	e00f      	b.n	8001b9a <HAL_RCC_OscConfig+0x522>
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b80:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001b82:	f023 0301 	bic.w	r3, r3, #1
 8001b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b90:	4a17      	ldr	r2, [pc, #92]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001b92:	f023 0304 	bic.w	r3, r3, #4
 8001b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d016      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba2:	f7ff f9a7 	bl	8000ef4 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7ff f9a3 	bl	8000ef4 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e139      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCC_OscConfig+0x578>)
 8001bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0ed      	beq.n	8001baa <HAL_RCC_OscConfig+0x532>
 8001bce:	e01a      	b.n	8001c06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7ff f990 	bl	8000ef4 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd6:	e00f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd8:	f7ff f98c 	bl	8000ef4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d906      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e122      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf8:	4b90      	ldr	r3, [pc, #576]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1e8      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c06:	7ffb      	ldrb	r3, [r7, #31]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d105      	bne.n	8001c18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0c:	4b8b      	ldr	r3, [pc, #556]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	4a8a      	ldr	r2, [pc, #552]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 8108 	beq.w	8001e32 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	f040 80d0 	bne.w	8001dcc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c2c:	4b83      	ldr	r3, [pc, #524]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d130      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d127      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d11f      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c6c:	2a07      	cmp	r2, #7
 8001c6e:	bf14      	ite	ne
 8001c70:	2201      	movne	r2, #1
 8001c72:	2200      	moveq	r2, #0
 8001c74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d113      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c84:	085b      	lsrs	r3, r3, #1
 8001c86:	3b01      	subs	r3, #1
 8001c88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d109      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	085b      	lsrs	r3, r3, #1
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d06e      	beq.n	8001d80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	2b0c      	cmp	r3, #12
 8001ca6:	d069      	beq.n	8001d7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ca8:	4b64      	ldr	r3, [pc, #400]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cb4:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0b7      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cc4:	4b5d      	ldr	r3, [pc, #372]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a5c      	ldr	r2, [pc, #368]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cd0:	f7ff f910 	bl	8000ef4 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7ff f90c 	bl	8000ef4 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e0a4      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cea:	4b54      	ldr	r3, [pc, #336]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf6:	4b51      	ldr	r3, [pc, #324]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	4b51      	ldr	r3, [pc, #324]	; (8001e40 <HAL_RCC_OscConfig+0x7c8>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d06:	3a01      	subs	r2, #1
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	4311      	orrs	r1, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d10:	0212      	lsls	r2, r2, #8
 8001d12:	4311      	orrs	r1, r2
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d18:	0852      	lsrs	r2, r2, #1
 8001d1a:	3a01      	subs	r2, #1
 8001d1c:	0552      	lsls	r2, r2, #21
 8001d1e:	4311      	orrs	r1, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d24:	0852      	lsrs	r2, r2, #1
 8001d26:	3a01      	subs	r2, #1
 8001d28:	0652      	lsls	r2, r2, #25
 8001d2a:	4311      	orrs	r1, r2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d30:	0912      	lsrs	r2, r2, #4
 8001d32:	0452      	lsls	r2, r2, #17
 8001d34:	430a      	orrs	r2, r1
 8001d36:	4941      	ldr	r1, [pc, #260]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d3c:	4b3f      	ldr	r3, [pc, #252]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a3e      	ldr	r2, [pc, #248]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d48:	4b3c      	ldr	r3, [pc, #240]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4a3b      	ldr	r2, [pc, #236]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d54:	f7ff f8ce 	bl	8000ef4 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7ff f8ca 	bl	8000ef4 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e062      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6e:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d7a:	e05a      	b.n	8001e32 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e059      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d80:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d152      	bne.n	8001e32 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a2a      	ldr	r2, [pc, #168]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d98:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4a27      	ldr	r2, [pc, #156]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001da4:	f7ff f8a6 	bl	8000ef4 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff f8a2 	bl	8000ef4 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e03a      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x734>
 8001dca:	e032      	b.n	8001e32 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2b0c      	cmp	r3, #12
 8001dd0:	d02d      	beq.n	8001e2e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a19      	ldr	r2, [pc, #100]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001dd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ddc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001dde:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d105      	bne.n	8001df6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001dea:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	4a13      	ldr	r2, [pc, #76]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001df0:	f023 0303 	bic.w	r3, r3, #3
 8001df4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	4a10      	ldr	r2, [pc, #64]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001dfc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e04:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff f875 	bl	8000ef4 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7ff f871 	bl	8000ef4 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e009      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_RCC_OscConfig+0x7c4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_RCC_OscConfig+0x796>
 8001e2c:	e001      	b.n	8001e32 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	f99d808c 	.word	0xf99d808c

08001e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0c8      	b.n	8001fea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e58:	4b66      	ldr	r3, [pc, #408]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d910      	bls.n	8001e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b63      	ldr	r3, [pc, #396]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 0207 	bic.w	r2, r3, #7
 8001e6e:	4961      	ldr	r1, [pc, #388]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b5f      	ldr	r3, [pc, #380]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0b0      	b.n	8001fea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d04c      	beq.n	8001f2e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d107      	bne.n	8001eac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9c:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d121      	bne.n	8001eec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e09e      	b.n	8001fea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d107      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eb4:	4b50      	ldr	r3, [pc, #320]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d115      	bne.n	8001eec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e092      	b.n	8001fea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d107      	bne.n	8001edc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ecc:	4b4a      	ldr	r3, [pc, #296]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d109      	bne.n	8001eec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e086      	b.n	8001fea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001edc:	4b46      	ldr	r3, [pc, #280]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e07e      	b.n	8001fea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eec:	4b42      	ldr	r3, [pc, #264]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f023 0203 	bic.w	r2, r3, #3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	493f      	ldr	r1, [pc, #252]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001efe:	f7fe fff9 	bl	8000ef4 <HAL_GetTick>
 8001f02:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f06:	f7fe fff5 	bl	8000ef4 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e066      	b.n	8001fea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 020c 	and.w	r2, r3, #12
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d1eb      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d008      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	492c      	ldr	r1, [pc, #176]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d210      	bcs.n	8001f7c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 0207 	bic.w	r2, r3, #7
 8001f62:	4924      	ldr	r1, [pc, #144]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6a:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e036      	b.n	8001fea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4918      	ldr	r1, [pc, #96]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d009      	beq.n	8001fba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4910      	ldr	r1, [pc, #64]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fba:	f000 f825 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	490c      	ldr	r1, [pc, #48]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001fcc:	5ccb      	ldrb	r3, [r1, r3]
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe ff38 	bl	8000e54 <HAL_InitTick>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fe8:	7afb      	ldrb	r3, [r7, #11]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40022000 	.word	0x40022000
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	08005394 	.word	0x08005394
 8002000:	20000010 	.word	0x20000010
 8002004:	20000024 	.word	0x20000024

08002008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002016:	4b3e      	ldr	r3, [pc, #248]	; (8002110 <HAL_RCC_GetSysClockFreq+0x108>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002020:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <HAL_RCC_GetSysClockFreq+0x108>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0x34>
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	2b0c      	cmp	r3, #12
 8002034:	d121      	bne.n	800207a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d11e      	bne.n	800207a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800203c:	4b34      	ldr	r3, [pc, #208]	; (8002110 <HAL_RCC_GetSysClockFreq+0x108>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d107      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002048:	4b31      	ldr	r3, [pc, #196]	; (8002110 <HAL_RCC_GetSysClockFreq+0x108>)
 800204a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	f003 030f 	and.w	r3, r3, #15
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	e005      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002058:	4b2d      	ldr	r3, [pc, #180]	; (8002110 <HAL_RCC_GetSysClockFreq+0x108>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002064:	4a2b      	ldr	r2, [pc, #172]	; (8002114 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10d      	bne.n	8002090 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	2b04      	cmp	r3, #4
 800207e:	d102      	bne.n	8002086 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002080:	4b25      	ldr	r3, [pc, #148]	; (8002118 <HAL_RCC_GetSysClockFreq+0x110>)
 8002082:	61bb      	str	r3, [r7, #24]
 8002084:	e004      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	2b08      	cmp	r3, #8
 800208a:	d101      	bne.n	8002090 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800208c:	4b23      	ldr	r3, [pc, #140]	; (800211c <HAL_RCC_GetSysClockFreq+0x114>)
 800208e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	2b0c      	cmp	r3, #12
 8002094:	d134      	bne.n	8002100 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <HAL_RCC_GetSysClockFreq+0x108>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d003      	beq.n	80020ae <HAL_RCC_GetSysClockFreq+0xa6>
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d003      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0xac>
 80020ac:	e005      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020ae:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <HAL_RCC_GetSysClockFreq+0x110>)
 80020b0:	617b      	str	r3, [r7, #20]
      break;
 80020b2:	e005      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_RCC_GetSysClockFreq+0x114>)
 80020b6:	617b      	str	r3, [r7, #20]
      break;
 80020b8:	e002      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	617b      	str	r3, [r7, #20]
      break;
 80020be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	3301      	adds	r3, #1
 80020cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	0a1b      	lsrs	r3, r3, #8
 80020d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	fb02 f203 	mul.w	r2, r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	0e5b      	lsrs	r3, r3, #25
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	3301      	adds	r3, #1
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002100:	69bb      	ldr	r3, [r7, #24]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3724      	adds	r7, #36	; 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40021000 	.word	0x40021000
 8002114:	080053ac 	.word	0x080053ac
 8002118:	00f42400 	.word	0x00f42400
 800211c:	007a1200 	.word	0x007a1200

08002120 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_RCC_GetHCLKFreq+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000010 	.word	0x20000010

08002138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800213c:	f7ff fff0 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 8002140:	4602      	mov	r2, r0
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	4904      	ldr	r1, [pc, #16]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x28>)
 800214e:	5ccb      	ldrb	r3, [r1, r3]
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	080053a4 	.word	0x080053a4

08002164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002168:	f7ff ffda 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 800216c:	4602      	mov	r2, r0
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	0adb      	lsrs	r3, r3, #11
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	4904      	ldr	r1, [pc, #16]	; (800218c <HAL_RCC_GetPCLK2Freq+0x28>)
 800217a:	5ccb      	ldrb	r3, [r1, r3]
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	080053a4 	.word	0x080053a4

08002190 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800219c:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800219e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021a8:	f7ff fa02 	bl	80015b0 <HAL_PWREx_GetVoltageRange>
 80021ac:	6178      	str	r0, [r7, #20]
 80021ae:	e014      	b.n	80021da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021b0:	4b25      	ldr	r3, [pc, #148]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	4a24      	ldr	r2, [pc, #144]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ba:	6593      	str	r3, [r2, #88]	; 0x58
 80021bc:	4b22      	ldr	r3, [pc, #136]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021c8:	f7ff f9f2 	bl	80015b0 <HAL_PWREx_GetVoltageRange>
 80021cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d2:	4a1d      	ldr	r2, [pc, #116]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e0:	d10b      	bne.n	80021fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b80      	cmp	r3, #128	; 0x80
 80021e6:	d919      	bls.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2ba0      	cmp	r3, #160	; 0xa0
 80021ec:	d902      	bls.n	80021f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021ee:	2302      	movs	r3, #2
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	e013      	b.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021f4:	2301      	movs	r3, #1
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	e010      	b.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b80      	cmp	r3, #128	; 0x80
 80021fe:	d902      	bls.n	8002206 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002200:	2303      	movs	r3, #3
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	e00a      	b.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b80      	cmp	r3, #128	; 0x80
 800220a:	d102      	bne.n	8002212 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800220c:	2302      	movs	r3, #2
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	e004      	b.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b70      	cmp	r3, #112	; 0x70
 8002216:	d101      	bne.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002218:	2301      	movs	r3, #1
 800221a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f023 0207 	bic.w	r2, r3, #7
 8002224:	4909      	ldr	r1, [pc, #36]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	429a      	cmp	r2, r3
 8002238:	d001      	beq.n	800223e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000
 800224c:	40022000 	.word	0x40022000

08002250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002258:	2300      	movs	r3, #0
 800225a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800225c:	2300      	movs	r3, #0
 800225e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002268:	2b00      	cmp	r3, #0
 800226a:	d041      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002270:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002274:	d02a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002276:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800227a:	d824      	bhi.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800227c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002280:	d008      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002282:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002286:	d81e      	bhi.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800228c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002290:	d010      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002292:	e018      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002294:	4b86      	ldr	r3, [pc, #536]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4a85      	ldr	r2, [pc, #532]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022a0:	e015      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3304      	adds	r3, #4
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fabb 	bl	8002824 <RCCEx_PLLSAI1_Config>
 80022ae:	4603      	mov	r3, r0
 80022b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022b2:	e00c      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3320      	adds	r3, #32
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fba6 	bl	8002a0c <RCCEx_PLLSAI2_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022c4:	e003      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	74fb      	strb	r3, [r7, #19]
      break;
 80022ca:	e000      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ce:	7cfb      	ldrb	r3, [r7, #19]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10b      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022d4:	4b76      	ldr	r3, [pc, #472]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022e2:	4973      	ldr	r1, [pc, #460]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022ea:	e001      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d041      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002300:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002304:	d02a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002306:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800230a:	d824      	bhi.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800230c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002310:	d008      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002312:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002316:	d81e      	bhi.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800231c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002320:	d010      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002322:	e018      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002324:	4b62      	ldr	r3, [pc, #392]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4a61      	ldr	r2, [pc, #388]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002330:	e015      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3304      	adds	r3, #4
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fa73 	bl	8002824 <RCCEx_PLLSAI1_Config>
 800233e:	4603      	mov	r3, r0
 8002340:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002342:	e00c      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3320      	adds	r3, #32
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f000 fb5e 	bl	8002a0c <RCCEx_PLLSAI2_Config>
 8002350:	4603      	mov	r3, r0
 8002352:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002354:	e003      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	74fb      	strb	r3, [r7, #19]
      break;
 800235a:	e000      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800235c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800235e:	7cfb      	ldrb	r3, [r7, #19]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10b      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002364:	4b52      	ldr	r3, [pc, #328]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002372:	494f      	ldr	r1, [pc, #316]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800237a:	e001      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80a0 	beq.w	80024ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238e:	2300      	movs	r3, #0
 8002390:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002392:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023a2:	2300      	movs	r3, #0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00d      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a8:	4b41      	ldr	r3, [pc, #260]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	4a40      	ldr	r2, [pc, #256]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b2:	6593      	str	r3, [r2, #88]	; 0x58
 80023b4:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c0:	2301      	movs	r3, #1
 80023c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c4:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a3a      	ldr	r2, [pc, #232]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023d0:	f7fe fd90 	bl	8000ef4 <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023d6:	e009      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d8:	f7fe fd8c 	bl	8000ef4 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d902      	bls.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	74fb      	strb	r3, [r7, #19]
        break;
 80023ea:	e005      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023ec:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0ef      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d15c      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002408:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d01f      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	d019      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002426:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002428:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	4a20      	ldr	r2, [pc, #128]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002438:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002448:	4a19      	ldr	r2, [pc, #100]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d016      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7fe fd4b 	bl	8000ef4 <HAL_GetTick>
 800245e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002460:	e00b      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe fd47 	bl	8000ef4 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d902      	bls.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	74fb      	strb	r3, [r7, #19]
            break;
 8002478:	e006      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0ec      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10c      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800249e:	4904      	ldr	r1, [pc, #16]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024a6:	e009      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	74bb      	strb	r3, [r7, #18]
 80024ac:	e006      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024bc:	7c7b      	ldrb	r3, [r7, #17]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d105      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c2:	4b9e      	ldr	r3, [pc, #632]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	4a9d      	ldr	r2, [pc, #628]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024da:	4b98      	ldr	r3, [pc, #608]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e0:	f023 0203 	bic.w	r2, r3, #3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e8:	4994      	ldr	r1, [pc, #592]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024fc:	4b8f      	ldr	r3, [pc, #572]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	f023 020c 	bic.w	r2, r3, #12
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250a:	498c      	ldr	r1, [pc, #560]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800251e:	4b87      	ldr	r3, [pc, #540]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002524:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	4983      	ldr	r1, [pc, #524]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002540:	4b7e      	ldr	r3, [pc, #504]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	497b      	ldr	r1, [pc, #492]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002562:	4b76      	ldr	r3, [pc, #472]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002570:	4972      	ldr	r1, [pc, #456]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002584:	4b6d      	ldr	r3, [pc, #436]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	496a      	ldr	r1, [pc, #424]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025a6:	4b65      	ldr	r3, [pc, #404]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b4:	4961      	ldr	r1, [pc, #388]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025c8:	4b5c      	ldr	r3, [pc, #368]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d6:	4959      	ldr	r1, [pc, #356]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025ea:	4b54      	ldr	r3, [pc, #336]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f8:	4950      	ldr	r1, [pc, #320]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800260c:	4b4b      	ldr	r3, [pc, #300]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	4948      	ldr	r1, [pc, #288]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800262e:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002634:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	493f      	ldr	r1, [pc, #252]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d028      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002650:	4b3a      	ldr	r3, [pc, #232]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800265e:	4937      	ldr	r1, [pc, #220]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800266a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800266e:	d106      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002670:	4b32      	ldr	r3, [pc, #200]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4a31      	ldr	r2, [pc, #196]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800267a:	60d3      	str	r3, [r2, #12]
 800267c:	e011      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002682:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002686:	d10c      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3304      	adds	r3, #4
 800268c:	2101      	movs	r1, #1
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f8c8 	bl	8002824 <RCCEx_PLLSAI1_Config>
 8002694:	4603      	mov	r3, r0
 8002696:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002698:	7cfb      	ldrb	r3, [r7, #19]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800269e:	7cfb      	ldrb	r3, [r7, #19]
 80026a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d028      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026ae:	4b23      	ldr	r3, [pc, #140]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	491f      	ldr	r1, [pc, #124]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026cc:	d106      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ce:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	4a1a      	ldr	r2, [pc, #104]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d8:	60d3      	str	r3, [r2, #12]
 80026da:	e011      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026e4:	d10c      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2101      	movs	r1, #1
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 f899 	bl	8002824 <RCCEx_PLLSAI1_Config>
 80026f2:	4603      	mov	r3, r0
 80026f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d02b      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271a:	4908      	ldr	r1, [pc, #32]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800272a:	d109      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4a02      	ldr	r2, [pc, #8]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002736:	60d3      	str	r3, [r2, #12]
 8002738:	e014      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002748:	d10c      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3304      	adds	r3, #4
 800274e:	2101      	movs	r1, #1
 8002750:	4618      	mov	r0, r3
 8002752:	f000 f867 	bl	8002824 <RCCEx_PLLSAI1_Config>
 8002756:	4603      	mov	r3, r0
 8002758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800275a:	7cfb      	ldrb	r3, [r7, #19]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d02f      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002770:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800277e:	4928      	ldr	r1, [pc, #160]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800278a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800278e:	d10d      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3304      	adds	r3, #4
 8002794:	2102      	movs	r1, #2
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f844 	bl	8002824 <RCCEx_PLLSAI1_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d014      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027a6:	7cfb      	ldrb	r3, [r7, #19]
 80027a8:	74bb      	strb	r3, [r7, #18]
 80027aa:	e011      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3320      	adds	r3, #32
 80027ba:	2102      	movs	r1, #2
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 f925 	bl	8002a0c <RCCEx_PLLSAI2_Config>
 80027c2:	4603      	mov	r3, r0
 80027c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c6:	7cfb      	ldrb	r3, [r7, #19]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027ea:	490d      	ldr	r1, [pc, #52]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002804:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800280e:	4904      	ldr	r1, [pc, #16]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002816:	7cbb      	ldrb	r3, [r7, #18]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000

08002824 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002832:	4b75      	ldr	r3, [pc, #468]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d018      	beq.n	8002870 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800283e:	4b72      	ldr	r3, [pc, #456]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f003 0203 	and.w	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d10d      	bne.n	800286a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
       ||
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002856:	4b6c      	ldr	r3, [pc, #432]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
       ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d047      	beq.n	80028fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
 800286e:	e044      	b.n	80028fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b03      	cmp	r3, #3
 8002876:	d018      	beq.n	80028aa <RCCEx_PLLSAI1_Config+0x86>
 8002878:	2b03      	cmp	r3, #3
 800287a:	d825      	bhi.n	80028c8 <RCCEx_PLLSAI1_Config+0xa4>
 800287c:	2b01      	cmp	r3, #1
 800287e:	d002      	beq.n	8002886 <RCCEx_PLLSAI1_Config+0x62>
 8002880:	2b02      	cmp	r3, #2
 8002882:	d009      	beq.n	8002898 <RCCEx_PLLSAI1_Config+0x74>
 8002884:	e020      	b.n	80028c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002886:	4b60      	ldr	r3, [pc, #384]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d11d      	bne.n	80028ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002896:	e01a      	b.n	80028ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002898:	4b5b      	ldr	r3, [pc, #364]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d116      	bne.n	80028d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a8:	e013      	b.n	80028d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028aa:	4b57      	ldr	r3, [pc, #348]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10f      	bne.n	80028d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028b6:	4b54      	ldr	r3, [pc, #336]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028c6:	e006      	b.n	80028d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
      break;
 80028cc:	e004      	b.n	80028d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ce:	bf00      	nop
 80028d0:	e002      	b.n	80028d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028d2:	bf00      	nop
 80028d4:	e000      	b.n	80028d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10d      	bne.n	80028fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028de:	4b4a      	ldr	r3, [pc, #296]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6819      	ldr	r1, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	430b      	orrs	r3, r1
 80028f4:	4944      	ldr	r1, [pc, #272]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d17d      	bne.n	80029fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002900:	4b41      	ldr	r3, [pc, #260]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a40      	ldr	r2, [pc, #256]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002906:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800290a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800290c:	f7fe faf2 	bl	8000ef4 <HAL_GetTick>
 8002910:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002912:	e009      	b.n	8002928 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002914:	f7fe faee 	bl	8000ef4 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d902      	bls.n	8002928 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	73fb      	strb	r3, [r7, #15]
        break;
 8002926:	e005      	b.n	8002934 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002928:	4b37      	ldr	r3, [pc, #220]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ef      	bne.n	8002914 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d160      	bne.n	80029fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d111      	bne.n	8002964 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002940:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6892      	ldr	r2, [r2, #8]
 8002950:	0211      	lsls	r1, r2, #8
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68d2      	ldr	r2, [r2, #12]
 8002956:	0912      	lsrs	r2, r2, #4
 8002958:	0452      	lsls	r2, r2, #17
 800295a:	430a      	orrs	r2, r1
 800295c:	492a      	ldr	r1, [pc, #168]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295e:	4313      	orrs	r3, r2
 8002960:	610b      	str	r3, [r1, #16]
 8002962:	e027      	b.n	80029b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d112      	bne.n	8002990 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800296a:	4b27      	ldr	r3, [pc, #156]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002972:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6892      	ldr	r2, [r2, #8]
 800297a:	0211      	lsls	r1, r2, #8
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6912      	ldr	r2, [r2, #16]
 8002980:	0852      	lsrs	r2, r2, #1
 8002982:	3a01      	subs	r2, #1
 8002984:	0552      	lsls	r2, r2, #21
 8002986:	430a      	orrs	r2, r1
 8002988:	491f      	ldr	r1, [pc, #124]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	610b      	str	r3, [r1, #16]
 800298e:	e011      	b.n	80029b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002990:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002998:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6892      	ldr	r2, [r2, #8]
 80029a0:	0211      	lsls	r1, r2, #8
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6952      	ldr	r2, [r2, #20]
 80029a6:	0852      	lsrs	r2, r2, #1
 80029a8:	3a01      	subs	r2, #1
 80029aa:	0652      	lsls	r2, r2, #25
 80029ac:	430a      	orrs	r2, r1
 80029ae:	4916      	ldr	r1, [pc, #88]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029b4:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a13      	ldr	r2, [pc, #76]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c0:	f7fe fa98 	bl	8000ef4 <HAL_GetTick>
 80029c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029c6:	e009      	b.n	80029dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029c8:	f7fe fa94 	bl	8000ef4 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d902      	bls.n	80029dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	73fb      	strb	r3, [r7, #15]
          break;
 80029da:	e005      	b.n	80029e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029dc:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ef      	beq.n	80029c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	4904      	ldr	r1, [pc, #16]	; (8002a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000

08002a0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a1a:	4b6a      	ldr	r3, [pc, #424]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d018      	beq.n	8002a58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a26:	4b67      	ldr	r3, [pc, #412]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f003 0203 	and.w	r2, r3, #3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d10d      	bne.n	8002a52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
       ||
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a3e:	4b61      	ldr	r3, [pc, #388]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d047      	beq.n	8002ae2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
 8002a56:	e044      	b.n	8002ae2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d018      	beq.n	8002a92 <RCCEx_PLLSAI2_Config+0x86>
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d825      	bhi.n	8002ab0 <RCCEx_PLLSAI2_Config+0xa4>
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d002      	beq.n	8002a6e <RCCEx_PLLSAI2_Config+0x62>
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d009      	beq.n	8002a80 <RCCEx_PLLSAI2_Config+0x74>
 8002a6c:	e020      	b.n	8002ab0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a6e:	4b55      	ldr	r3, [pc, #340]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d11d      	bne.n	8002ab6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a7e:	e01a      	b.n	8002ab6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a80:	4b50      	ldr	r3, [pc, #320]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d116      	bne.n	8002aba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a90:	e013      	b.n	8002aba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a92:	4b4c      	ldr	r3, [pc, #304]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10f      	bne.n	8002abe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a9e:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aae:	e006      	b.n	8002abe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab4:	e004      	b.n	8002ac0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ab6:	bf00      	nop
 8002ab8:	e002      	b.n	8002ac0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aba:	bf00      	nop
 8002abc:	e000      	b.n	8002ac0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002abe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10d      	bne.n	8002ae2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ac6:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6819      	ldr	r1, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	430b      	orrs	r3, r1
 8002adc:	4939      	ldr	r1, [pc, #228]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d167      	bne.n	8002bb8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ae8:	4b36      	ldr	r3, [pc, #216]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a35      	ldr	r2, [pc, #212]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af4:	f7fe f9fe 	bl	8000ef4 <HAL_GetTick>
 8002af8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002afa:	e009      	b.n	8002b10 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002afc:	f7fe f9fa 	bl	8000ef4 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d902      	bls.n	8002b10 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b0e:	e005      	b.n	8002b1c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b10:	4b2c      	ldr	r3, [pc, #176]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1ef      	bne.n	8002afc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d14a      	bne.n	8002bb8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d111      	bne.n	8002b4c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b28:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6892      	ldr	r2, [r2, #8]
 8002b38:	0211      	lsls	r1, r2, #8
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68d2      	ldr	r2, [r2, #12]
 8002b3e:	0912      	lsrs	r2, r2, #4
 8002b40:	0452      	lsls	r2, r2, #17
 8002b42:	430a      	orrs	r2, r1
 8002b44:	491f      	ldr	r1, [pc, #124]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	614b      	str	r3, [r1, #20]
 8002b4a:	e011      	b.n	8002b70 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b4c:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6892      	ldr	r2, [r2, #8]
 8002b5c:	0211      	lsls	r1, r2, #8
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6912      	ldr	r2, [r2, #16]
 8002b62:	0852      	lsrs	r2, r2, #1
 8002b64:	3a01      	subs	r2, #1
 8002b66:	0652      	lsls	r2, r2, #25
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	4916      	ldr	r1, [pc, #88]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b70:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a13      	ldr	r2, [pc, #76]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7c:	f7fe f9ba 	bl	8000ef4 <HAL_GetTick>
 8002b80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b82:	e009      	b.n	8002b98 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b84:	f7fe f9b6 	bl	8000ef4 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d902      	bls.n	8002b98 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	73fb      	strb	r3, [r7, #15]
          break;
 8002b96:	e005      	b.n	8002ba4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b98:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0ef      	beq.n	8002b84 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002baa:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	4904      	ldr	r1, [pc, #16]	; (8002bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000

08002bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e095      	b.n	8002d06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d108      	bne.n	8002bf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bea:	d009      	beq.n	8002c00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61da      	str	r2, [r3, #28]
 8002bf2:	e005      	b.n	8002c00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fd fe9c 	bl	8000958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c40:	d902      	bls.n	8002c48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	e002      	b.n	8002c4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c56:	d007      	beq.n	8002c68 <HAL_SPI_Init+0xa0>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c60:	d002      	beq.n	8002c68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002caa:	ea42 0103 	orr.w	r1, r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	0c1b      	lsrs	r3, r3, #16
 8002cc4:	f003 0204 	and.w	r2, r3, #4
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	f003 0310 	and.w	r3, r3, #16
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002ce4:	ea42 0103 	orr.w	r1, r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b088      	sub	sp, #32
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_SPI_Transmit+0x22>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e158      	b.n	8002fe2 <HAL_SPI_Transmit+0x2d4>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d38:	f7fe f8dc 	bl	8000ef4 <HAL_GetTick>
 8002d3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d002      	beq.n	8002d54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d52:	e13d      	b.n	8002fd0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_SPI_Transmit+0x52>
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d64:	e134      	b.n	8002fd0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2203      	movs	r2, #3
 8002d6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	88fa      	ldrh	r2, [r7, #6]
 8002d7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	88fa      	ldrh	r2, [r7, #6]
 8002d84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db0:	d10f      	bne.n	8002dd2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ddc:	2b40      	cmp	r3, #64	; 0x40
 8002dde:	d007      	beq.n	8002df0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002df8:	d94b      	bls.n	8002e92 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_SPI_Transmit+0xfa>
 8002e02:	8afb      	ldrh	r3, [r7, #22]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d13e      	bne.n	8002e86 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	881a      	ldrh	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	1c9a      	adds	r2, r3, #2
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e2c:	e02b      	b.n	8002e86 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d112      	bne.n	8002e62 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	881a      	ldrh	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	1c9a      	adds	r2, r3, #2
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e60:	e011      	b.n	8002e86 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e62:	f7fe f847 	bl	8000ef4 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d803      	bhi.n	8002e7a <HAL_SPI_Transmit+0x16c>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d102      	bne.n	8002e80 <HAL_SPI_Transmit+0x172>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d102      	bne.n	8002e86 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e84:	e0a4      	b.n	8002fd0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1ce      	bne.n	8002e2e <HAL_SPI_Transmit+0x120>
 8002e90:	e07c      	b.n	8002f8c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <HAL_SPI_Transmit+0x192>
 8002e9a:	8afb      	ldrh	r3, [r7, #22]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d170      	bne.n	8002f82 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d912      	bls.n	8002ed0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	881a      	ldrh	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	1c9a      	adds	r2, r3, #2
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b02      	subs	r3, #2
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ece:	e058      	b.n	8002f82 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	330c      	adds	r3, #12
 8002eda:	7812      	ldrb	r2, [r2, #0]
 8002edc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ef6:	e044      	b.n	8002f82 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d12b      	bne.n	8002f5e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d912      	bls.n	8002f36 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	881a      	ldrh	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f20:	1c9a      	adds	r2, r3, #2
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b02      	subs	r3, #2
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f34:	e025      	b.n	8002f82 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	330c      	adds	r3, #12
 8002f40:	7812      	ldrb	r2, [r2, #0]
 8002f42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f5c:	e011      	b.n	8002f82 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f5e:	f7fd ffc9 	bl	8000ef4 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d803      	bhi.n	8002f76 <HAL_SPI_Transmit+0x268>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d102      	bne.n	8002f7c <HAL_SPI_Transmit+0x26e>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d102      	bne.n	8002f82 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f80:	e026      	b.n	8002fd0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1b5      	bne.n	8002ef8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	6839      	ldr	r1, [r7, #0]
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f949 	bl	8003228 <SPI_EndRxTxTransaction>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10a      	bne.n	8002fc0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	77fb      	strb	r3, [r7, #31]
 8002fcc:	e000      	b.n	8002fd0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002fce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002fe0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3720      	adds	r7, #32
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ffc:	f7fd ff7a 	bl	8000ef4 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	4413      	add	r3, r2
 800300a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800300c:	f7fd ff72 	bl	8000ef4 <HAL_GetTick>
 8003010:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003012:	4b39      	ldr	r3, [pc, #228]	; (80030f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	015b      	lsls	r3, r3, #5
 8003018:	0d1b      	lsrs	r3, r3, #20
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	fb02 f303 	mul.w	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003022:	e054      	b.n	80030ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d050      	beq.n	80030ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800302c:	f7fd ff62 	bl	8000ef4 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	429a      	cmp	r2, r3
 800303a:	d902      	bls.n	8003042 <SPI_WaitFlagStateUntilTimeout+0x56>
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d13d      	bne.n	80030be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003050:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800305a:	d111      	bne.n	8003080 <SPI_WaitFlagStateUntilTimeout+0x94>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003064:	d004      	beq.n	8003070 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306e:	d107      	bne.n	8003080 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800307e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003088:	d10f      	bne.n	80030aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e017      	b.n	80030ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4013      	ands	r3, r2
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	429a      	cmp	r2, r3
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d19b      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3720      	adds	r7, #32
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000010 	.word	0x20000010

080030fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800310e:	f7fd fef1 	bl	8000ef4 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	4413      	add	r3, r2
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800311e:	f7fd fee9 	bl	8000ef4 <HAL_GetTick>
 8003122:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	330c      	adds	r3, #12
 800312a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800312c:	4b3d      	ldr	r3, [pc, #244]	; (8003224 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	00da      	lsls	r2, r3, #3
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	0d1b      	lsrs	r3, r3, #20
 800313c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003144:	e060      	b.n	8003208 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800314c:	d107      	bne.n	800315e <SPI_WaitFifoStateUntilTimeout+0x62>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d104      	bne.n	800315e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800315c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d050      	beq.n	8003208 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003166:	f7fd fec5 	bl	8000ef4 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003172:	429a      	cmp	r2, r3
 8003174:	d902      	bls.n	800317c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	2b00      	cmp	r3, #0
 800317a:	d13d      	bne.n	80031f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800318a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003194:	d111      	bne.n	80031ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800319e:	d004      	beq.n	80031aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a8:	d107      	bne.n	80031ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c2:	d10f      	bne.n	80031e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e010      	b.n	800321a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	3b01      	subs	r3, #1
 8003206:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4013      	ands	r3, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	d196      	bne.n	8003146 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3728      	adds	r7, #40	; 0x28
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000010 	.word	0x20000010

08003228 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2200      	movs	r2, #0
 800323c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7ff ff5b 	bl	80030fc <SPI_WaitFifoStateUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003250:	f043 0220 	orr.w	r2, r3, #32
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e027      	b.n	80032ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2200      	movs	r2, #0
 8003264:	2180      	movs	r1, #128	; 0x80
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f7ff fec0 	bl	8002fec <SPI_WaitFlagStateUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003276:	f043 0220 	orr.w	r2, r3, #32
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e014      	b.n	80032ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2200      	movs	r2, #0
 800328a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7ff ff34 	bl	80030fc <SPI_WaitFifoStateUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329e:	f043 0220 	orr.w	r2, r3, #32
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e000      	b.n	80032ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e040      	b.n	8003348 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd fb80 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2224      	movs	r2, #36	; 0x24
 80032e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0201 	bic.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fc18 	bl	8003b28 <UART_SetConfig>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e022      	b.n	8003348 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fe96 	bl	800403c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800331e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800332e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 ff1d 	bl	8004180 <UART_CheckIdleState>
 8003346:	4603      	mov	r3, r0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003364:	2b20      	cmp	r3, #32
 8003366:	f040 8082 	bne.w	800346e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <HAL_UART_Transmit+0x26>
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e07a      	b.n	8003470 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_UART_Transmit+0x38>
 8003384:	2302      	movs	r3, #2
 8003386:	e073      	b.n	8003470 <HAL_UART_Transmit+0x120>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2221      	movs	r2, #33	; 0x21
 800339c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800339e:	f7fd fda9 	bl	8000ef4 <HAL_GetTick>
 80033a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	88fa      	ldrh	r2, [r7, #6]
 80033b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033bc:	d108      	bne.n	80033d0 <HAL_UART_Transmit+0x80>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d104      	bne.n	80033d0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	e003      	b.n	80033d8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80033e0:	e02d      	b.n	800343e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2200      	movs	r2, #0
 80033ea:	2180      	movs	r1, #128	; 0x80
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 ff10 	bl	8004212 <UART_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e039      	b.n	8003470 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10b      	bne.n	800341a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	881a      	ldrh	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800340e:	b292      	uxth	r2, r2
 8003410:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	3302      	adds	r3, #2
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	e008      	b.n	800342c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	781a      	ldrb	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	b292      	uxth	r2, r2
 8003424:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	3301      	adds	r3, #1
 800342a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1cb      	bne.n	80033e2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2200      	movs	r2, #0
 8003452:	2140      	movs	r1, #64	; 0x40
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 fedc 	bl	8004212 <UART_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e005      	b.n	8003470 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	e000      	b.n	8003470 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800346e:	2302      	movs	r3, #2
  }
}
 8003470:	4618      	mov	r0, r3
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	; 0x28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	4613      	mov	r3, r2
 8003484:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800348a:	2b20      	cmp	r3, #32
 800348c:	d142      	bne.n	8003514 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <HAL_UART_Receive_IT+0x22>
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e03b      	b.n	8003516 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_UART_Receive_IT+0x34>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e034      	b.n	8003516 <HAL_UART_Receive_IT+0x9e>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a18      	ldr	r2, [pc, #96]	; (8003520 <HAL_UART_Receive_IT+0xa8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d01f      	beq.n	8003504 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d018      	beq.n	8003504 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	e853 3f00 	ldrex	r3, [r3]
 80034de:	613b      	str	r3, [r7, #16]
   return(result);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	623b      	str	r3, [r7, #32]
 80034f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f4:	69f9      	ldr	r1, [r7, #28]
 80034f6:	6a3a      	ldr	r2, [r7, #32]
 80034f8:	e841 2300 	strex	r3, r2, [r1]
 80034fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e6      	bne.n	80034d2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	461a      	mov	r2, r3
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 ff46 	bl	800439c <UART_Start_Receive_IT>
 8003510:	4603      	mov	r3, r0
 8003512:	e000      	b.n	8003516 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003514:	2302      	movs	r3, #2
  }
}
 8003516:	4618      	mov	r0, r3
 8003518:	3728      	adds	r7, #40	; 0x28
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40008000 	.word	0x40008000

08003524 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b0ba      	sub	sp, #232	; 0xe8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800354a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800354e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003552:	4013      	ands	r3, r2
 8003554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800355c:	2b00      	cmp	r3, #0
 800355e:	d115      	bne.n	800358c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00f      	beq.n	800358c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800356c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 82a6 	beq.w	8003ace <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
      }
      return;
 800358a:	e2a0      	b.n	8003ace <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800358c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 8117 	beq.w	80037c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80035a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80035a6:	4b85      	ldr	r3, [pc, #532]	; (80037bc <HAL_UART_IRQHandler+0x298>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 810a 	beq.w	80037c4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d011      	beq.n	80035e0 <HAL_UART_IRQHandler+0xbc>
 80035bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00b      	beq.n	80035e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2201      	movs	r2, #1
 80035ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035d6:	f043 0201 	orr.w	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d011      	beq.n	8003610 <HAL_UART_IRQHandler+0xec>
 80035ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00b      	beq.n	8003610 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2202      	movs	r2, #2
 80035fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003606:	f043 0204 	orr.w	r2, r3, #4
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d011      	beq.n	8003640 <HAL_UART_IRQHandler+0x11c>
 800361c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2204      	movs	r2, #4
 800362e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003636:	f043 0202 	orr.w	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d017      	beq.n	800367c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800364c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d105      	bne.n	8003664 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800365c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00b      	beq.n	800367c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2208      	movs	r2, #8
 800366a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003672:	f043 0208 	orr.w	r2, r3, #8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800367c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003684:	2b00      	cmp	r3, #0
 8003686:	d012      	beq.n	80036ae <HAL_UART_IRQHandler+0x18a>
 8003688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800368c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00c      	beq.n	80036ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800369c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a4:	f043 0220 	orr.w	r2, r3, #32
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 820c 	beq.w	8003ad2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80036ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00d      	beq.n	80036e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d007      	beq.n	80036e2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d005      	beq.n	8003706 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003702:	2b00      	cmp	r3, #0
 8003704:	d04f      	beq.n	80037a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 ff12 	bl	8004530 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	d141      	bne.n	800379e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3308      	adds	r3, #8
 8003720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3308      	adds	r3, #8
 8003742:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003746:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800374a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003752:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003756:	e841 2300 	strex	r3, r2, [r1]
 800375a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800375e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1d9      	bne.n	800371a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	2b00      	cmp	r3, #0
 800376c:	d013      	beq.n	8003796 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <HAL_UART_IRQHandler+0x29c>)
 8003774:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd fd15 	bl	80011aa <HAL_DMA_Abort_IT>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d017      	beq.n	80037b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003790:	4610      	mov	r0, r2
 8003792:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003794:	e00f      	b.n	80037b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f9b0 	bl	8003afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379c:	e00b      	b.n	80037b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f9ac 	bl	8003afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	e007      	b.n	80037b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f9a8 	bl	8003afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80037b4:	e18d      	b.n	8003ad2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b6:	bf00      	nop
    return;
 80037b8:	e18b      	b.n	8003ad2 <HAL_UART_IRQHandler+0x5ae>
 80037ba:	bf00      	nop
 80037bc:	04000120 	.word	0x04000120
 80037c0:	080045f7 	.word	0x080045f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	f040 8146 	bne.w	8003a5a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 813f 	beq.w	8003a5a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8138 	beq.w	8003a5a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2210      	movs	r2, #16
 80037f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	f040 80b4 	bne.w	800396a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800380e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 815f 	beq.w	8003ad6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800381e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003822:	429a      	cmp	r2, r3
 8003824:	f080 8157 	bcs.w	8003ad6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800382e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	f040 8085 	bne.w	800394e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003850:	e853 3f00 	ldrex	r3, [r3]
 8003854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800385c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800386e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003872:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003876:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800387a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1da      	bne.n	8003844 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3308      	adds	r3, #8
 8003894:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800389e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3308      	adds	r3, #8
 80038ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038be:	e841 2300 	strex	r3, r2, [r1]
 80038c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1e1      	bne.n	800388e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3308      	adds	r3, #8
 80038d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3308      	adds	r3, #8
 80038ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038f6:	e841 2300 	strex	r3, r2, [r1]
 80038fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1e3      	bne.n	80038ca <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2220      	movs	r2, #32
 8003906:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003916:	e853 3f00 	ldrex	r3, [r3]
 800391a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800391c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391e:	f023 0310 	bic.w	r3, r3, #16
 8003922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003930:	65bb      	str	r3, [r7, #88]	; 0x58
 8003932:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003934:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003936:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003938:	e841 2300 	strex	r3, r2, [r1]
 800393c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800393e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1e4      	bne.n	800390e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	4618      	mov	r0, r3
 800394a:	f7fd fbf0 	bl	800112e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800395a:	b29b      	uxth	r3, r3
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	b29b      	uxth	r3, r3
 8003960:	4619      	mov	r1, r3
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f8d4 	bl	8003b10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003968:	e0b5      	b.n	8003ad6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003976:	b29b      	uxth	r3, r3
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80a7 	beq.w	8003ada <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800398c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80a2 	beq.w	8003ada <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039b8:	647b      	str	r3, [r7, #68]	; 0x44
 80039ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039c0:	e841 2300 	strex	r3, r2, [r1]
 80039c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e4      	bne.n	8003996 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3308      	adds	r3, #8
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	e853 3f00 	ldrex	r3, [r3]
 80039da:	623b      	str	r3, [r7, #32]
   return(result);
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3308      	adds	r3, #8
 80039ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039f0:	633a      	str	r2, [r7, #48]	; 0x30
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f8:	e841 2300 	strex	r3, r2, [r1]
 80039fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e3      	bne.n	80039cc <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0310 	bic.w	r3, r3, #16
 8003a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	69b9      	ldr	r1, [r7, #24]
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	617b      	str	r3, [r7, #20]
   return(result);
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e4      	bne.n	8003a16 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a50:	4619      	mov	r1, r3
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f85c 	bl	8003b10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a58:	e03f      	b.n	8003ada <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00e      	beq.n	8003a84 <HAL_UART_IRQHandler+0x560>
 8003a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 ff5a 	bl	8004936 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a82:	e02d      	b.n	8003ae0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00e      	beq.n	8003aae <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01c      	beq.n	8003ade <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
    }
    return;
 8003aac:	e017      	b.n	8003ade <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d012      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x5bc>
 8003aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00c      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fdab 	bl	8004622 <UART_EndTransmit_IT>
    return;
 8003acc:	e008      	b.n	8003ae0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003ace:	bf00      	nop
 8003ad0:	e006      	b.n	8003ae0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003ad2:	bf00      	nop
 8003ad4:	e004      	b.n	8003ae0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003ad6:	bf00      	nop
 8003ad8:	e002      	b.n	8003ae0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003ada:	bf00      	nop
 8003adc:	e000      	b.n	8003ae0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003ade:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003ae0:	37e8      	adds	r7, #232	; 0xe8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop

08003ae8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b28:	b5b0      	push	{r4, r5, r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4bad      	ldr	r3, [pc, #692]	; (8003e08 <UART_SetConfig+0x2e0>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6812      	ldr	r2, [r2, #0]
 8003b5a:	69f9      	ldr	r1, [r7, #28]
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4aa2      	ldr	r2, [pc, #648]	; (8003e0c <UART_SetConfig+0x2e4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d004      	beq.n	8003b90 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a99      	ldr	r2, [pc, #612]	; (8003e10 <UART_SetConfig+0x2e8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d121      	bne.n	8003bf2 <UART_SetConfig+0xca>
 8003bae:	4b99      	ldr	r3, [pc, #612]	; (8003e14 <UART_SetConfig+0x2ec>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d817      	bhi.n	8003bec <UART_SetConfig+0xc4>
 8003bbc:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <UART_SetConfig+0x9c>)
 8003bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc2:	bf00      	nop
 8003bc4:	08003bd5 	.word	0x08003bd5
 8003bc8:	08003be1 	.word	0x08003be1
 8003bcc:	08003bdb 	.word	0x08003bdb
 8003bd0:	08003be7 	.word	0x08003be7
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	76fb      	strb	r3, [r7, #27]
 8003bd8:	e0e7      	b.n	8003daa <UART_SetConfig+0x282>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	76fb      	strb	r3, [r7, #27]
 8003bde:	e0e4      	b.n	8003daa <UART_SetConfig+0x282>
 8003be0:	2304      	movs	r3, #4
 8003be2:	76fb      	strb	r3, [r7, #27]
 8003be4:	e0e1      	b.n	8003daa <UART_SetConfig+0x282>
 8003be6:	2308      	movs	r3, #8
 8003be8:	76fb      	strb	r3, [r7, #27]
 8003bea:	e0de      	b.n	8003daa <UART_SetConfig+0x282>
 8003bec:	2310      	movs	r3, #16
 8003bee:	76fb      	strb	r3, [r7, #27]
 8003bf0:	e0db      	b.n	8003daa <UART_SetConfig+0x282>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a88      	ldr	r2, [pc, #544]	; (8003e18 <UART_SetConfig+0x2f0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d132      	bne.n	8003c62 <UART_SetConfig+0x13a>
 8003bfc:	4b85      	ldr	r3, [pc, #532]	; (8003e14 <UART_SetConfig+0x2ec>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	f003 030c 	and.w	r3, r3, #12
 8003c06:	2b0c      	cmp	r3, #12
 8003c08:	d828      	bhi.n	8003c5c <UART_SetConfig+0x134>
 8003c0a:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <UART_SetConfig+0xe8>)
 8003c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c10:	08003c45 	.word	0x08003c45
 8003c14:	08003c5d 	.word	0x08003c5d
 8003c18:	08003c5d 	.word	0x08003c5d
 8003c1c:	08003c5d 	.word	0x08003c5d
 8003c20:	08003c51 	.word	0x08003c51
 8003c24:	08003c5d 	.word	0x08003c5d
 8003c28:	08003c5d 	.word	0x08003c5d
 8003c2c:	08003c5d 	.word	0x08003c5d
 8003c30:	08003c4b 	.word	0x08003c4b
 8003c34:	08003c5d 	.word	0x08003c5d
 8003c38:	08003c5d 	.word	0x08003c5d
 8003c3c:	08003c5d 	.word	0x08003c5d
 8003c40:	08003c57 	.word	0x08003c57
 8003c44:	2300      	movs	r3, #0
 8003c46:	76fb      	strb	r3, [r7, #27]
 8003c48:	e0af      	b.n	8003daa <UART_SetConfig+0x282>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	76fb      	strb	r3, [r7, #27]
 8003c4e:	e0ac      	b.n	8003daa <UART_SetConfig+0x282>
 8003c50:	2304      	movs	r3, #4
 8003c52:	76fb      	strb	r3, [r7, #27]
 8003c54:	e0a9      	b.n	8003daa <UART_SetConfig+0x282>
 8003c56:	2308      	movs	r3, #8
 8003c58:	76fb      	strb	r3, [r7, #27]
 8003c5a:	e0a6      	b.n	8003daa <UART_SetConfig+0x282>
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	76fb      	strb	r3, [r7, #27]
 8003c60:	e0a3      	b.n	8003daa <UART_SetConfig+0x282>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a6d      	ldr	r2, [pc, #436]	; (8003e1c <UART_SetConfig+0x2f4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d120      	bne.n	8003cae <UART_SetConfig+0x186>
 8003c6c:	4b69      	ldr	r3, [pc, #420]	; (8003e14 <UART_SetConfig+0x2ec>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c76:	2b30      	cmp	r3, #48	; 0x30
 8003c78:	d013      	beq.n	8003ca2 <UART_SetConfig+0x17a>
 8003c7a:	2b30      	cmp	r3, #48	; 0x30
 8003c7c:	d814      	bhi.n	8003ca8 <UART_SetConfig+0x180>
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d009      	beq.n	8003c96 <UART_SetConfig+0x16e>
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d810      	bhi.n	8003ca8 <UART_SetConfig+0x180>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <UART_SetConfig+0x168>
 8003c8a:	2b10      	cmp	r3, #16
 8003c8c:	d006      	beq.n	8003c9c <UART_SetConfig+0x174>
 8003c8e:	e00b      	b.n	8003ca8 <UART_SetConfig+0x180>
 8003c90:	2300      	movs	r3, #0
 8003c92:	76fb      	strb	r3, [r7, #27]
 8003c94:	e089      	b.n	8003daa <UART_SetConfig+0x282>
 8003c96:	2302      	movs	r3, #2
 8003c98:	76fb      	strb	r3, [r7, #27]
 8003c9a:	e086      	b.n	8003daa <UART_SetConfig+0x282>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	76fb      	strb	r3, [r7, #27]
 8003ca0:	e083      	b.n	8003daa <UART_SetConfig+0x282>
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	76fb      	strb	r3, [r7, #27]
 8003ca6:	e080      	b.n	8003daa <UART_SetConfig+0x282>
 8003ca8:	2310      	movs	r3, #16
 8003caa:	76fb      	strb	r3, [r7, #27]
 8003cac:	e07d      	b.n	8003daa <UART_SetConfig+0x282>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a5b      	ldr	r2, [pc, #364]	; (8003e20 <UART_SetConfig+0x2f8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d120      	bne.n	8003cfa <UART_SetConfig+0x1d2>
 8003cb8:	4b56      	ldr	r3, [pc, #344]	; (8003e14 <UART_SetConfig+0x2ec>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cc2:	2bc0      	cmp	r3, #192	; 0xc0
 8003cc4:	d013      	beq.n	8003cee <UART_SetConfig+0x1c6>
 8003cc6:	2bc0      	cmp	r3, #192	; 0xc0
 8003cc8:	d814      	bhi.n	8003cf4 <UART_SetConfig+0x1cc>
 8003cca:	2b80      	cmp	r3, #128	; 0x80
 8003ccc:	d009      	beq.n	8003ce2 <UART_SetConfig+0x1ba>
 8003cce:	2b80      	cmp	r3, #128	; 0x80
 8003cd0:	d810      	bhi.n	8003cf4 <UART_SetConfig+0x1cc>
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <UART_SetConfig+0x1b4>
 8003cd6:	2b40      	cmp	r3, #64	; 0x40
 8003cd8:	d006      	beq.n	8003ce8 <UART_SetConfig+0x1c0>
 8003cda:	e00b      	b.n	8003cf4 <UART_SetConfig+0x1cc>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	76fb      	strb	r3, [r7, #27]
 8003ce0:	e063      	b.n	8003daa <UART_SetConfig+0x282>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	76fb      	strb	r3, [r7, #27]
 8003ce6:	e060      	b.n	8003daa <UART_SetConfig+0x282>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	76fb      	strb	r3, [r7, #27]
 8003cec:	e05d      	b.n	8003daa <UART_SetConfig+0x282>
 8003cee:	2308      	movs	r3, #8
 8003cf0:	76fb      	strb	r3, [r7, #27]
 8003cf2:	e05a      	b.n	8003daa <UART_SetConfig+0x282>
 8003cf4:	2310      	movs	r3, #16
 8003cf6:	76fb      	strb	r3, [r7, #27]
 8003cf8:	e057      	b.n	8003daa <UART_SetConfig+0x282>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a49      	ldr	r2, [pc, #292]	; (8003e24 <UART_SetConfig+0x2fc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d125      	bne.n	8003d50 <UART_SetConfig+0x228>
 8003d04:	4b43      	ldr	r3, [pc, #268]	; (8003e14 <UART_SetConfig+0x2ec>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d12:	d017      	beq.n	8003d44 <UART_SetConfig+0x21c>
 8003d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d18:	d817      	bhi.n	8003d4a <UART_SetConfig+0x222>
 8003d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1e:	d00b      	beq.n	8003d38 <UART_SetConfig+0x210>
 8003d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d24:	d811      	bhi.n	8003d4a <UART_SetConfig+0x222>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <UART_SetConfig+0x20a>
 8003d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2e:	d006      	beq.n	8003d3e <UART_SetConfig+0x216>
 8003d30:	e00b      	b.n	8003d4a <UART_SetConfig+0x222>
 8003d32:	2300      	movs	r3, #0
 8003d34:	76fb      	strb	r3, [r7, #27]
 8003d36:	e038      	b.n	8003daa <UART_SetConfig+0x282>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	76fb      	strb	r3, [r7, #27]
 8003d3c:	e035      	b.n	8003daa <UART_SetConfig+0x282>
 8003d3e:	2304      	movs	r3, #4
 8003d40:	76fb      	strb	r3, [r7, #27]
 8003d42:	e032      	b.n	8003daa <UART_SetConfig+0x282>
 8003d44:	2308      	movs	r3, #8
 8003d46:	76fb      	strb	r3, [r7, #27]
 8003d48:	e02f      	b.n	8003daa <UART_SetConfig+0x282>
 8003d4a:	2310      	movs	r3, #16
 8003d4c:	76fb      	strb	r3, [r7, #27]
 8003d4e:	e02c      	b.n	8003daa <UART_SetConfig+0x282>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a2d      	ldr	r2, [pc, #180]	; (8003e0c <UART_SetConfig+0x2e4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d125      	bne.n	8003da6 <UART_SetConfig+0x27e>
 8003d5a:	4b2e      	ldr	r3, [pc, #184]	; (8003e14 <UART_SetConfig+0x2ec>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d68:	d017      	beq.n	8003d9a <UART_SetConfig+0x272>
 8003d6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d6e:	d817      	bhi.n	8003da0 <UART_SetConfig+0x278>
 8003d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d74:	d00b      	beq.n	8003d8e <UART_SetConfig+0x266>
 8003d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7a:	d811      	bhi.n	8003da0 <UART_SetConfig+0x278>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <UART_SetConfig+0x260>
 8003d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d84:	d006      	beq.n	8003d94 <UART_SetConfig+0x26c>
 8003d86:	e00b      	b.n	8003da0 <UART_SetConfig+0x278>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	76fb      	strb	r3, [r7, #27]
 8003d8c:	e00d      	b.n	8003daa <UART_SetConfig+0x282>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	76fb      	strb	r3, [r7, #27]
 8003d92:	e00a      	b.n	8003daa <UART_SetConfig+0x282>
 8003d94:	2304      	movs	r3, #4
 8003d96:	76fb      	strb	r3, [r7, #27]
 8003d98:	e007      	b.n	8003daa <UART_SetConfig+0x282>
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	76fb      	strb	r3, [r7, #27]
 8003d9e:	e004      	b.n	8003daa <UART_SetConfig+0x282>
 8003da0:	2310      	movs	r3, #16
 8003da2:	76fb      	strb	r3, [r7, #27]
 8003da4:	e001      	b.n	8003daa <UART_SetConfig+0x282>
 8003da6:	2310      	movs	r3, #16
 8003da8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a17      	ldr	r2, [pc, #92]	; (8003e0c <UART_SetConfig+0x2e4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	f040 8087 	bne.w	8003ec4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003db6:	7efb      	ldrb	r3, [r7, #27]
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d837      	bhi.n	8003e2c <UART_SetConfig+0x304>
 8003dbc:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <UART_SetConfig+0x29c>)
 8003dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc2:	bf00      	nop
 8003dc4:	08003de9 	.word	0x08003de9
 8003dc8:	08003e2d 	.word	0x08003e2d
 8003dcc:	08003df1 	.word	0x08003df1
 8003dd0:	08003e2d 	.word	0x08003e2d
 8003dd4:	08003df7 	.word	0x08003df7
 8003dd8:	08003e2d 	.word	0x08003e2d
 8003ddc:	08003e2d 	.word	0x08003e2d
 8003de0:	08003e2d 	.word	0x08003e2d
 8003de4:	08003dff 	.word	0x08003dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de8:	f7fe f9a6 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8003dec:	6178      	str	r0, [r7, #20]
        break;
 8003dee:	e022      	b.n	8003e36 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df0:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <UART_SetConfig+0x300>)
 8003df2:	617b      	str	r3, [r7, #20]
        break;
 8003df4:	e01f      	b.n	8003e36 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df6:	f7fe f907 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8003dfa:	6178      	str	r0, [r7, #20]
        break;
 8003dfc:	e01b      	b.n	8003e36 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e02:	617b      	str	r3, [r7, #20]
        break;
 8003e04:	e017      	b.n	8003e36 <UART_SetConfig+0x30e>
 8003e06:	bf00      	nop
 8003e08:	efff69f3 	.word	0xefff69f3
 8003e0c:	40008000 	.word	0x40008000
 8003e10:	40013800 	.word	0x40013800
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40004400 	.word	0x40004400
 8003e1c:	40004800 	.word	0x40004800
 8003e20:	40004c00 	.word	0x40004c00
 8003e24:	40005000 	.word	0x40005000
 8003e28:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	76bb      	strb	r3, [r7, #26]
        break;
 8003e34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 80f1 	beq.w	8004020 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	4413      	add	r3, r2
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d305      	bcc.n	8003e5a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d902      	bls.n	8003e60 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	76bb      	strb	r3, [r7, #26]
 8003e5e:	e0df      	b.n	8004020 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f04f 0100 	mov.w	r1, #0
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	020b      	lsls	r3, r1, #8
 8003e72:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e76:	0202      	lsls	r2, r0, #8
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	6849      	ldr	r1, [r1, #4]
 8003e7c:	0849      	lsrs	r1, r1, #1
 8003e7e:	4608      	mov	r0, r1
 8003e80:	f04f 0100 	mov.w	r1, #0
 8003e84:	1814      	adds	r4, r2, r0
 8003e86:	eb43 0501 	adc.w	r5, r3, r1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	4620      	mov	r0, r4
 8003e96:	4629      	mov	r1, r5
 8003e98:	f7fc f9f2 	bl	8000280 <__aeabi_uldivmod>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eaa:	d308      	bcc.n	8003ebe <UART_SetConfig+0x396>
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb2:	d204      	bcs.n	8003ebe <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	60da      	str	r2, [r3, #12]
 8003ebc:	e0b0      	b.n	8004020 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	76bb      	strb	r3, [r7, #26]
 8003ec2:	e0ad      	b.n	8004020 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ecc:	d15b      	bne.n	8003f86 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003ece:	7efb      	ldrb	r3, [r7, #27]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d828      	bhi.n	8003f26 <UART_SetConfig+0x3fe>
 8003ed4:	a201      	add	r2, pc, #4	; (adr r2, 8003edc <UART_SetConfig+0x3b4>)
 8003ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eda:	bf00      	nop
 8003edc:	08003f01 	.word	0x08003f01
 8003ee0:	08003f09 	.word	0x08003f09
 8003ee4:	08003f11 	.word	0x08003f11
 8003ee8:	08003f27 	.word	0x08003f27
 8003eec:	08003f17 	.word	0x08003f17
 8003ef0:	08003f27 	.word	0x08003f27
 8003ef4:	08003f27 	.word	0x08003f27
 8003ef8:	08003f27 	.word	0x08003f27
 8003efc:	08003f1f 	.word	0x08003f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f00:	f7fe f91a 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8003f04:	6178      	str	r0, [r7, #20]
        break;
 8003f06:	e013      	b.n	8003f30 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f08:	f7fe f92c 	bl	8002164 <HAL_RCC_GetPCLK2Freq>
 8003f0c:	6178      	str	r0, [r7, #20]
        break;
 8003f0e:	e00f      	b.n	8003f30 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f10:	4b49      	ldr	r3, [pc, #292]	; (8004038 <UART_SetConfig+0x510>)
 8003f12:	617b      	str	r3, [r7, #20]
        break;
 8003f14:	e00c      	b.n	8003f30 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f16:	f7fe f877 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8003f1a:	6178      	str	r0, [r7, #20]
        break;
 8003f1c:	e008      	b.n	8003f30 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f22:	617b      	str	r3, [r7, #20]
        break;
 8003f24:	e004      	b.n	8003f30 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	76bb      	strb	r3, [r7, #26]
        break;
 8003f2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d074      	beq.n	8004020 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	005a      	lsls	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	441a      	add	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	2b0f      	cmp	r3, #15
 8003f50:	d916      	bls.n	8003f80 <UART_SetConfig+0x458>
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d212      	bcs.n	8003f80 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	f023 030f 	bic.w	r3, r3, #15
 8003f62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	085b      	lsrs	r3, r3, #1
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	89fb      	ldrh	r3, [r7, #14]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	89fa      	ldrh	r2, [r7, #14]
 8003f7c:	60da      	str	r2, [r3, #12]
 8003f7e:	e04f      	b.n	8004020 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	76bb      	strb	r3, [r7, #26]
 8003f84:	e04c      	b.n	8004020 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f86:	7efb      	ldrb	r3, [r7, #27]
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d828      	bhi.n	8003fde <UART_SetConfig+0x4b6>
 8003f8c:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <UART_SetConfig+0x46c>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08003fb9 	.word	0x08003fb9
 8003f98:	08003fc1 	.word	0x08003fc1
 8003f9c:	08003fc9 	.word	0x08003fc9
 8003fa0:	08003fdf 	.word	0x08003fdf
 8003fa4:	08003fcf 	.word	0x08003fcf
 8003fa8:	08003fdf 	.word	0x08003fdf
 8003fac:	08003fdf 	.word	0x08003fdf
 8003fb0:	08003fdf 	.word	0x08003fdf
 8003fb4:	08003fd7 	.word	0x08003fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb8:	f7fe f8be 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8003fbc:	6178      	str	r0, [r7, #20]
        break;
 8003fbe:	e013      	b.n	8003fe8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc0:	f7fe f8d0 	bl	8002164 <HAL_RCC_GetPCLK2Freq>
 8003fc4:	6178      	str	r0, [r7, #20]
        break;
 8003fc6:	e00f      	b.n	8003fe8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <UART_SetConfig+0x510>)
 8003fca:	617b      	str	r3, [r7, #20]
        break;
 8003fcc:	e00c      	b.n	8003fe8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fce:	f7fe f81b 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8003fd2:	6178      	str	r0, [r7, #20]
        break;
 8003fd4:	e008      	b.n	8003fe8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fda:	617b      	str	r3, [r7, #20]
        break;
 8003fdc:	e004      	b.n	8003fe8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	76bb      	strb	r3, [r7, #26]
        break;
 8003fe6:	bf00      	nop
    }

    if (pclk != 0U)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d018      	beq.n	8004020 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	085a      	lsrs	r2, r3, #1
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	441a      	add	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004000:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b0f      	cmp	r3, #15
 8004006:	d909      	bls.n	800401c <UART_SetConfig+0x4f4>
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400e:	d205      	bcs.n	800401c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60da      	str	r2, [r3, #12]
 800401a:	e001      	b.n	8004020 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800402c:	7ebb      	ldrb	r3, [r7, #26]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3720      	adds	r7, #32
 8004032:	46bd      	mov	sp, r7
 8004034:	bdb0      	pop	{r4, r5, r7, pc}
 8004036:	bf00      	nop
 8004038:	00f42400 	.word	0x00f42400

0800403c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01a      	beq.n	8004152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413a:	d10a      	bne.n	8004152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	605a      	str	r2, [r3, #4]
  }
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af02      	add	r7, sp, #8
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004190:	f7fc feb0 	bl	8000ef4 <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d10e      	bne.n	80041c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f82d 	bl	8004212 <UART_WaitOnFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e023      	b.n	800420a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d10e      	bne.n	80041ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f817 	bl	8004212 <UART_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e00d      	b.n	800420a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b09c      	sub	sp, #112	; 0x70
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	4613      	mov	r3, r2
 8004220:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004222:	e0a5      	b.n	8004370 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	f000 80a1 	beq.w	8004370 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422e:	f7fc fe61 	bl	8000ef4 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800423a:	429a      	cmp	r2, r3
 800423c:	d302      	bcc.n	8004244 <UART_WaitOnFlagUntilTimeout+0x32>
 800423e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004240:	2b00      	cmp	r3, #0
 8004242:	d13e      	bne.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004254:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004258:	667b      	str	r3, [r7, #100]	; 0x64
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004262:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004264:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004268:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e6      	bne.n	8004244 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3308      	adds	r3, #8
 800427c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	663b      	str	r3, [r7, #96]	; 0x60
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3308      	adds	r3, #8
 8004294:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004296:	64ba      	str	r2, [r7, #72]	; 0x48
 8004298:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800429c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e5      	bne.n	8004276 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e067      	b.n	8004392 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d04f      	beq.n	8004370 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042de:	d147      	bne.n	8004370 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004308:	637b      	str	r3, [r7, #52]	; 0x34
 800430a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800430e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004310:	e841 2300 	strex	r3, r2, [r1]
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e6      	bne.n	80042ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3308      	adds	r3, #8
 8004322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	613b      	str	r3, [r7, #16]
   return(result);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f023 0301 	bic.w	r3, r3, #1
 8004332:	66bb      	str	r3, [r7, #104]	; 0x68
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3308      	adds	r3, #8
 800433a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800433c:	623a      	str	r2, [r7, #32]
 800433e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	69f9      	ldr	r1, [r7, #28]
 8004342:	6a3a      	ldr	r2, [r7, #32]
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	61bb      	str	r3, [r7, #24]
   return(result);
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e5      	bne.n	800431c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2220      	movs	r2, #32
 800435a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e010      	b.n	8004392 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	69da      	ldr	r2, [r3, #28]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	4013      	ands	r3, r2
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	429a      	cmp	r2, r3
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	461a      	mov	r2, r3
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	429a      	cmp	r2, r3
 800438c:	f43f af4a 	beq.w	8004224 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3770      	adds	r7, #112	; 0x70
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800439c:	b480      	push	{r7}
 800439e:	b097      	sub	sp, #92	; 0x5c
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	4613      	mov	r3, r2
 80043a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	88fa      	ldrh	r2, [r7, #6]
 80043b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	88fa      	ldrh	r2, [r7, #6]
 80043bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ce:	d10e      	bne.n	80043ee <UART_Start_Receive_IT+0x52>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d105      	bne.n	80043e4 <UART_Start_Receive_IT+0x48>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80043de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043e2:	e02d      	b.n	8004440 <UART_Start_Receive_IT+0xa4>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	22ff      	movs	r2, #255	; 0xff
 80043e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043ec:	e028      	b.n	8004440 <UART_Start_Receive_IT+0xa4>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10d      	bne.n	8004412 <UART_Start_Receive_IT+0x76>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d104      	bne.n	8004408 <UART_Start_Receive_IT+0x6c>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	22ff      	movs	r2, #255	; 0xff
 8004402:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004406:	e01b      	b.n	8004440 <UART_Start_Receive_IT+0xa4>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	227f      	movs	r2, #127	; 0x7f
 800440c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004410:	e016      	b.n	8004440 <UART_Start_Receive_IT+0xa4>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800441a:	d10d      	bne.n	8004438 <UART_Start_Receive_IT+0x9c>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d104      	bne.n	800442e <UART_Start_Receive_IT+0x92>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	227f      	movs	r2, #127	; 0x7f
 8004428:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800442c:	e008      	b.n	8004440 <UART_Start_Receive_IT+0xa4>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	223f      	movs	r2, #63	; 0x3f
 8004432:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004436:	e003      	b.n	8004440 <UART_Start_Receive_IT+0xa4>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2222      	movs	r2, #34	; 0x22
 800444c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3308      	adds	r3, #8
 8004454:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	657b      	str	r3, [r7, #84]	; 0x54
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3308      	adds	r3, #8
 800446c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800446e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004470:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004474:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800447c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e5      	bne.n	800444e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448a:	d107      	bne.n	800449c <UART_Start_Receive_IT+0x100>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d103      	bne.n	800449c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4a24      	ldr	r2, [pc, #144]	; (8004528 <UART_Start_Receive_IT+0x18c>)
 8004498:	665a      	str	r2, [r3, #100]	; 0x64
 800449a:	e002      	b.n	80044a2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4a23      	ldr	r2, [pc, #140]	; (800452c <UART_Start_Receive_IT+0x190>)
 80044a0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d019      	beq.n	80044e6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80044c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d0:	637b      	str	r3, [r7, #52]	; 0x34
 80044d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e6      	bne.n	80044b2 <UART_Start_Receive_IT+0x116>
 80044e4:	e018      	b.n	8004518 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	e853 3f00 	ldrex	r3, [r3]
 80044f2:	613b      	str	r3, [r7, #16]
   return(result);
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f043 0320 	orr.w	r3, r3, #32
 80044fa:	653b      	str	r3, [r7, #80]	; 0x50
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004504:	623b      	str	r3, [r7, #32]
 8004506:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	69f9      	ldr	r1, [r7, #28]
 800450a:	6a3a      	ldr	r2, [r7, #32]
 800450c:	e841 2300 	strex	r3, r2, [r1]
 8004510:	61bb      	str	r3, [r7, #24]
   return(result);
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e6      	bne.n	80044e6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	375c      	adds	r7, #92	; 0x5c
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	080047d7 	.word	0x080047d7
 800452c:	08004677 	.word	0x08004677

08004530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004530:	b480      	push	{r7}
 8004532:	b095      	sub	sp, #84	; 0x54
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004548:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800454c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004556:	643b      	str	r3, [r7, #64]	; 0x40
 8004558:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800455c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e6      	bne.n	8004538 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3308      	adds	r3, #8
 8004570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	61fb      	str	r3, [r7, #28]
   return(result);
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	64bb      	str	r3, [r7, #72]	; 0x48
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3308      	adds	r3, #8
 8004588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800458a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800458c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004592:	e841 2300 	strex	r3, r2, [r1]
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e5      	bne.n	800456a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d118      	bne.n	80045d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	e853 3f00 	ldrex	r3, [r3]
 80045b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f023 0310 	bic.w	r3, r3, #16
 80045ba:	647b      	str	r3, [r7, #68]	; 0x44
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c4:	61bb      	str	r3, [r7, #24]
 80045c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c8:	6979      	ldr	r1, [r7, #20]
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	e841 2300 	strex	r3, r2, [r1]
 80045d0:	613b      	str	r3, [r7, #16]
   return(result);
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1e6      	bne.n	80045a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80045ea:	bf00      	nop
 80045ec:	3754      	adds	r7, #84	; 0x54
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004602:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f7ff fa71 	bl	8003afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800461a:	bf00      	nop
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b088      	sub	sp, #32
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	60bb      	str	r3, [r7, #8]
   return(result);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6979      	ldr	r1, [r7, #20]
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	613b      	str	r3, [r7, #16]
   return(result);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e6      	bne.n	800462a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff fa3d 	bl	8003ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800466e:	bf00      	nop
 8004670:	3720      	adds	r7, #32
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b096      	sub	sp, #88	; 0x58
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004684:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800468c:	2b22      	cmp	r3, #34	; 0x22
 800468e:	f040 8094 	bne.w	80047ba <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004698:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800469c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80046a0:	b2d9      	uxtb	r1, r3
 80046a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ac:	400a      	ands	r2, r1
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d179      	bne.n	80047ce <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046ee:	653b      	str	r3, [r7, #80]	; 0x50
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f8:	647b      	str	r3, [r7, #68]	; 0x44
 80046fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e6      	bne.n	80046da <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3308      	adds	r3, #8
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	623b      	str	r3, [r7, #32]
   return(result);
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	f023 0301 	bic.w	r3, r3, #1
 8004722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3308      	adds	r3, #8
 800472a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800472c:	633a      	str	r2, [r7, #48]	; 0x30
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e5      	bne.n	800470c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004750:	2b01      	cmp	r3, #1
 8004752:	d12e      	bne.n	80047b2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	60fb      	str	r3, [r7, #12]
   return(result);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0310 	bic.w	r3, r3, #16
 800476e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	69b9      	ldr	r1, [r7, #24]
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	e841 2300 	strex	r3, r2, [r1]
 8004784:	617b      	str	r3, [r7, #20]
   return(result);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e6      	bne.n	800475a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	2b10      	cmp	r3, #16
 8004798:	d103      	bne.n	80047a2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2210      	movs	r2, #16
 80047a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047a8:	4619      	mov	r1, r3
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff f9b0 	bl	8003b10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047b0:	e00d      	b.n	80047ce <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fc fa32 	bl	8000c1c <HAL_UART_RxCpltCallback>
}
 80047b8:	e009      	b.n	80047ce <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	8b1b      	ldrh	r3, [r3, #24]
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0208 	orr.w	r2, r2, #8
 80047ca:	b292      	uxth	r2, r2
 80047cc:	831a      	strh	r2, [r3, #24]
}
 80047ce:	bf00      	nop
 80047d0:	3758      	adds	r7, #88	; 0x58
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b096      	sub	sp, #88	; 0x58
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ec:	2b22      	cmp	r3, #34	; 0x22
 80047ee:	f040 8094 	bne.w	800491a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80047f8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004800:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004802:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004806:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800480a:	4013      	ands	r3, r2
 800480c:	b29a      	uxth	r2, r3
 800480e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004810:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004816:	1c9a      	adds	r2, r3, #2
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d179      	bne.n	800492e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004842:	e853 3f00 	ldrex	r3, [r3]
 8004846:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800484e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004858:	643b      	str	r3, [r7, #64]	; 0x40
 800485a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800485e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004860:	e841 2300 	strex	r3, r2, [r1]
 8004864:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1e6      	bne.n	800483a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3308      	adds	r3, #8
 8004872:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	61fb      	str	r3, [r7, #28]
   return(result);
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f023 0301 	bic.w	r3, r3, #1
 8004882:	64bb      	str	r3, [r7, #72]	; 0x48
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3308      	adds	r3, #8
 800488a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800488c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800488e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e5      	bne.n	800486c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d12e      	bne.n	8004912 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f023 0310 	bic.w	r3, r3, #16
 80048ce:	647b      	str	r3, [r7, #68]	; 0x44
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d8:	61bb      	str	r3, [r7, #24]
 80048da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	6979      	ldr	r1, [r7, #20]
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	613b      	str	r3, [r7, #16]
   return(result);
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e6      	bne.n	80048ba <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b10      	cmp	r3, #16
 80048f8:	d103      	bne.n	8004902 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2210      	movs	r2, #16
 8004900:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004908:	4619      	mov	r1, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff f900 	bl	8003b10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004910:	e00d      	b.n	800492e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fc f982 	bl	8000c1c <HAL_UART_RxCpltCallback>
}
 8004918:	e009      	b.n	800492e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	8b1b      	ldrh	r3, [r3, #24]
 8004920:	b29a      	uxth	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0208 	orr.w	r2, r2, #8
 800492a:	b292      	uxth	r2, r2
 800492c:	831a      	strh	r2, [r3, #24]
}
 800492e:	bf00      	nop
 8004930:	3758      	adds	r7, #88	; 0x58
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <__errno>:
 800494c:	4b01      	ldr	r3, [pc, #4]	; (8004954 <__errno+0x8>)
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	2000002c 	.word	0x2000002c

08004958 <__libc_init_array>:
 8004958:	b570      	push	{r4, r5, r6, lr}
 800495a:	4d0d      	ldr	r5, [pc, #52]	; (8004990 <__libc_init_array+0x38>)
 800495c:	4c0d      	ldr	r4, [pc, #52]	; (8004994 <__libc_init_array+0x3c>)
 800495e:	1b64      	subs	r4, r4, r5
 8004960:	10a4      	asrs	r4, r4, #2
 8004962:	2600      	movs	r6, #0
 8004964:	42a6      	cmp	r6, r4
 8004966:	d109      	bne.n	800497c <__libc_init_array+0x24>
 8004968:	4d0b      	ldr	r5, [pc, #44]	; (8004998 <__libc_init_array+0x40>)
 800496a:	4c0c      	ldr	r4, [pc, #48]	; (800499c <__libc_init_array+0x44>)
 800496c:	f000 fc6a 	bl	8005244 <_init>
 8004970:	1b64      	subs	r4, r4, r5
 8004972:	10a4      	asrs	r4, r4, #2
 8004974:	2600      	movs	r6, #0
 8004976:	42a6      	cmp	r6, r4
 8004978:	d105      	bne.n	8004986 <__libc_init_array+0x2e>
 800497a:	bd70      	pop	{r4, r5, r6, pc}
 800497c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004980:	4798      	blx	r3
 8004982:	3601      	adds	r6, #1
 8004984:	e7ee      	b.n	8004964 <__libc_init_array+0xc>
 8004986:	f855 3b04 	ldr.w	r3, [r5], #4
 800498a:	4798      	blx	r3
 800498c:	3601      	adds	r6, #1
 800498e:	e7f2      	b.n	8004976 <__libc_init_array+0x1e>
 8004990:	08005418 	.word	0x08005418
 8004994:	08005418 	.word	0x08005418
 8004998:	08005418 	.word	0x08005418
 800499c:	0800541c 	.word	0x0800541c

080049a0 <memset>:
 80049a0:	4402      	add	r2, r0
 80049a2:	4603      	mov	r3, r0
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d100      	bne.n	80049aa <memset+0xa>
 80049a8:	4770      	bx	lr
 80049aa:	f803 1b01 	strb.w	r1, [r3], #1
 80049ae:	e7f9      	b.n	80049a4 <memset+0x4>

080049b0 <sniprintf>:
 80049b0:	b40c      	push	{r2, r3}
 80049b2:	b530      	push	{r4, r5, lr}
 80049b4:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <sniprintf+0x64>)
 80049b6:	1e0c      	subs	r4, r1, #0
 80049b8:	681d      	ldr	r5, [r3, #0]
 80049ba:	b09d      	sub	sp, #116	; 0x74
 80049bc:	da08      	bge.n	80049d0 <sniprintf+0x20>
 80049be:	238b      	movs	r3, #139	; 0x8b
 80049c0:	602b      	str	r3, [r5, #0]
 80049c2:	f04f 30ff 	mov.w	r0, #4294967295
 80049c6:	b01d      	add	sp, #116	; 0x74
 80049c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049cc:	b002      	add	sp, #8
 80049ce:	4770      	bx	lr
 80049d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80049d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80049d8:	bf14      	ite	ne
 80049da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80049de:	4623      	moveq	r3, r4
 80049e0:	9304      	str	r3, [sp, #16]
 80049e2:	9307      	str	r3, [sp, #28]
 80049e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049e8:	9002      	str	r0, [sp, #8]
 80049ea:	9006      	str	r0, [sp, #24]
 80049ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80049f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80049f2:	ab21      	add	r3, sp, #132	; 0x84
 80049f4:	a902      	add	r1, sp, #8
 80049f6:	4628      	mov	r0, r5
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	f000 f871 	bl	8004ae0 <_svfiprintf_r>
 80049fe:	1c43      	adds	r3, r0, #1
 8004a00:	bfbc      	itt	lt
 8004a02:	238b      	movlt	r3, #139	; 0x8b
 8004a04:	602b      	strlt	r3, [r5, #0]
 8004a06:	2c00      	cmp	r4, #0
 8004a08:	d0dd      	beq.n	80049c6 <sniprintf+0x16>
 8004a0a:	9b02      	ldr	r3, [sp, #8]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	701a      	strb	r2, [r3, #0]
 8004a10:	e7d9      	b.n	80049c6 <sniprintf+0x16>
 8004a12:	bf00      	nop
 8004a14:	2000002c 	.word	0x2000002c

08004a18 <strcpy>:
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a1e:	f803 2b01 	strb.w	r2, [r3], #1
 8004a22:	2a00      	cmp	r2, #0
 8004a24:	d1f9      	bne.n	8004a1a <strcpy+0x2>
 8004a26:	4770      	bx	lr

08004a28 <__ssputs_r>:
 8004a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a2c:	688e      	ldr	r6, [r1, #8]
 8004a2e:	429e      	cmp	r6, r3
 8004a30:	4682      	mov	sl, r0
 8004a32:	460c      	mov	r4, r1
 8004a34:	4690      	mov	r8, r2
 8004a36:	461f      	mov	r7, r3
 8004a38:	d838      	bhi.n	8004aac <__ssputs_r+0x84>
 8004a3a:	898a      	ldrh	r2, [r1, #12]
 8004a3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a40:	d032      	beq.n	8004aa8 <__ssputs_r+0x80>
 8004a42:	6825      	ldr	r5, [r4, #0]
 8004a44:	6909      	ldr	r1, [r1, #16]
 8004a46:	eba5 0901 	sub.w	r9, r5, r1
 8004a4a:	6965      	ldr	r5, [r4, #20]
 8004a4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a54:	3301      	adds	r3, #1
 8004a56:	444b      	add	r3, r9
 8004a58:	106d      	asrs	r5, r5, #1
 8004a5a:	429d      	cmp	r5, r3
 8004a5c:	bf38      	it	cc
 8004a5e:	461d      	movcc	r5, r3
 8004a60:	0553      	lsls	r3, r2, #21
 8004a62:	d531      	bpl.n	8004ac8 <__ssputs_r+0xa0>
 8004a64:	4629      	mov	r1, r5
 8004a66:	f000 fb47 	bl	80050f8 <_malloc_r>
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	b950      	cbnz	r0, 8004a84 <__ssputs_r+0x5c>
 8004a6e:	230c      	movs	r3, #12
 8004a70:	f8ca 3000 	str.w	r3, [sl]
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a7a:	81a3      	strh	r3, [r4, #12]
 8004a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a84:	6921      	ldr	r1, [r4, #16]
 8004a86:	464a      	mov	r2, r9
 8004a88:	f000 fabe 	bl	8005008 <memcpy>
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a96:	81a3      	strh	r3, [r4, #12]
 8004a98:	6126      	str	r6, [r4, #16]
 8004a9a:	6165      	str	r5, [r4, #20]
 8004a9c:	444e      	add	r6, r9
 8004a9e:	eba5 0509 	sub.w	r5, r5, r9
 8004aa2:	6026      	str	r6, [r4, #0]
 8004aa4:	60a5      	str	r5, [r4, #8]
 8004aa6:	463e      	mov	r6, r7
 8004aa8:	42be      	cmp	r6, r7
 8004aaa:	d900      	bls.n	8004aae <__ssputs_r+0x86>
 8004aac:	463e      	mov	r6, r7
 8004aae:	4632      	mov	r2, r6
 8004ab0:	6820      	ldr	r0, [r4, #0]
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	f000 fab6 	bl	8005024 <memmove>
 8004ab8:	68a3      	ldr	r3, [r4, #8]
 8004aba:	6822      	ldr	r2, [r4, #0]
 8004abc:	1b9b      	subs	r3, r3, r6
 8004abe:	4432      	add	r2, r6
 8004ac0:	60a3      	str	r3, [r4, #8]
 8004ac2:	6022      	str	r2, [r4, #0]
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	e7db      	b.n	8004a80 <__ssputs_r+0x58>
 8004ac8:	462a      	mov	r2, r5
 8004aca:	f000 fb6f 	bl	80051ac <_realloc_r>
 8004ace:	4606      	mov	r6, r0
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	d1e1      	bne.n	8004a98 <__ssputs_r+0x70>
 8004ad4:	6921      	ldr	r1, [r4, #16]
 8004ad6:	4650      	mov	r0, sl
 8004ad8:	f000 fabe 	bl	8005058 <_free_r>
 8004adc:	e7c7      	b.n	8004a6e <__ssputs_r+0x46>
	...

08004ae0 <_svfiprintf_r>:
 8004ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae4:	4698      	mov	r8, r3
 8004ae6:	898b      	ldrh	r3, [r1, #12]
 8004ae8:	061b      	lsls	r3, r3, #24
 8004aea:	b09d      	sub	sp, #116	; 0x74
 8004aec:	4607      	mov	r7, r0
 8004aee:	460d      	mov	r5, r1
 8004af0:	4614      	mov	r4, r2
 8004af2:	d50e      	bpl.n	8004b12 <_svfiprintf_r+0x32>
 8004af4:	690b      	ldr	r3, [r1, #16]
 8004af6:	b963      	cbnz	r3, 8004b12 <_svfiprintf_r+0x32>
 8004af8:	2140      	movs	r1, #64	; 0x40
 8004afa:	f000 fafd 	bl	80050f8 <_malloc_r>
 8004afe:	6028      	str	r0, [r5, #0]
 8004b00:	6128      	str	r0, [r5, #16]
 8004b02:	b920      	cbnz	r0, 8004b0e <_svfiprintf_r+0x2e>
 8004b04:	230c      	movs	r3, #12
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0c:	e0d1      	b.n	8004cb2 <_svfiprintf_r+0x1d2>
 8004b0e:	2340      	movs	r3, #64	; 0x40
 8004b10:	616b      	str	r3, [r5, #20]
 8004b12:	2300      	movs	r3, #0
 8004b14:	9309      	str	r3, [sp, #36]	; 0x24
 8004b16:	2320      	movs	r3, #32
 8004b18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b20:	2330      	movs	r3, #48	; 0x30
 8004b22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ccc <_svfiprintf_r+0x1ec>
 8004b26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b2a:	f04f 0901 	mov.w	r9, #1
 8004b2e:	4623      	mov	r3, r4
 8004b30:	469a      	mov	sl, r3
 8004b32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b36:	b10a      	cbz	r2, 8004b3c <_svfiprintf_r+0x5c>
 8004b38:	2a25      	cmp	r2, #37	; 0x25
 8004b3a:	d1f9      	bne.n	8004b30 <_svfiprintf_r+0x50>
 8004b3c:	ebba 0b04 	subs.w	fp, sl, r4
 8004b40:	d00b      	beq.n	8004b5a <_svfiprintf_r+0x7a>
 8004b42:	465b      	mov	r3, fp
 8004b44:	4622      	mov	r2, r4
 8004b46:	4629      	mov	r1, r5
 8004b48:	4638      	mov	r0, r7
 8004b4a:	f7ff ff6d 	bl	8004a28 <__ssputs_r>
 8004b4e:	3001      	adds	r0, #1
 8004b50:	f000 80aa 	beq.w	8004ca8 <_svfiprintf_r+0x1c8>
 8004b54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b56:	445a      	add	r2, fp
 8004b58:	9209      	str	r2, [sp, #36]	; 0x24
 8004b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 80a2 	beq.w	8004ca8 <_svfiprintf_r+0x1c8>
 8004b64:	2300      	movs	r3, #0
 8004b66:	f04f 32ff 	mov.w	r2, #4294967295
 8004b6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b6e:	f10a 0a01 	add.w	sl, sl, #1
 8004b72:	9304      	str	r3, [sp, #16]
 8004b74:	9307      	str	r3, [sp, #28]
 8004b76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b7a:	931a      	str	r3, [sp, #104]	; 0x68
 8004b7c:	4654      	mov	r4, sl
 8004b7e:	2205      	movs	r2, #5
 8004b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b84:	4851      	ldr	r0, [pc, #324]	; (8004ccc <_svfiprintf_r+0x1ec>)
 8004b86:	f7fb fb2b 	bl	80001e0 <memchr>
 8004b8a:	9a04      	ldr	r2, [sp, #16]
 8004b8c:	b9d8      	cbnz	r0, 8004bc6 <_svfiprintf_r+0xe6>
 8004b8e:	06d0      	lsls	r0, r2, #27
 8004b90:	bf44      	itt	mi
 8004b92:	2320      	movmi	r3, #32
 8004b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b98:	0711      	lsls	r1, r2, #28
 8004b9a:	bf44      	itt	mi
 8004b9c:	232b      	movmi	r3, #43	; 0x2b
 8004b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ba8:	d015      	beq.n	8004bd6 <_svfiprintf_r+0xf6>
 8004baa:	9a07      	ldr	r2, [sp, #28]
 8004bac:	4654      	mov	r4, sl
 8004bae:	2000      	movs	r0, #0
 8004bb0:	f04f 0c0a 	mov.w	ip, #10
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bba:	3b30      	subs	r3, #48	; 0x30
 8004bbc:	2b09      	cmp	r3, #9
 8004bbe:	d94e      	bls.n	8004c5e <_svfiprintf_r+0x17e>
 8004bc0:	b1b0      	cbz	r0, 8004bf0 <_svfiprintf_r+0x110>
 8004bc2:	9207      	str	r2, [sp, #28]
 8004bc4:	e014      	b.n	8004bf0 <_svfiprintf_r+0x110>
 8004bc6:	eba0 0308 	sub.w	r3, r0, r8
 8004bca:	fa09 f303 	lsl.w	r3, r9, r3
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	9304      	str	r3, [sp, #16]
 8004bd2:	46a2      	mov	sl, r4
 8004bd4:	e7d2      	b.n	8004b7c <_svfiprintf_r+0x9c>
 8004bd6:	9b03      	ldr	r3, [sp, #12]
 8004bd8:	1d19      	adds	r1, r3, #4
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	9103      	str	r1, [sp, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	bfbb      	ittet	lt
 8004be2:	425b      	neglt	r3, r3
 8004be4:	f042 0202 	orrlt.w	r2, r2, #2
 8004be8:	9307      	strge	r3, [sp, #28]
 8004bea:	9307      	strlt	r3, [sp, #28]
 8004bec:	bfb8      	it	lt
 8004bee:	9204      	strlt	r2, [sp, #16]
 8004bf0:	7823      	ldrb	r3, [r4, #0]
 8004bf2:	2b2e      	cmp	r3, #46	; 0x2e
 8004bf4:	d10c      	bne.n	8004c10 <_svfiprintf_r+0x130>
 8004bf6:	7863      	ldrb	r3, [r4, #1]
 8004bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8004bfa:	d135      	bne.n	8004c68 <_svfiprintf_r+0x188>
 8004bfc:	9b03      	ldr	r3, [sp, #12]
 8004bfe:	1d1a      	adds	r2, r3, #4
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	9203      	str	r2, [sp, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bfb8      	it	lt
 8004c08:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c0c:	3402      	adds	r4, #2
 8004c0e:	9305      	str	r3, [sp, #20]
 8004c10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004cdc <_svfiprintf_r+0x1fc>
 8004c14:	7821      	ldrb	r1, [r4, #0]
 8004c16:	2203      	movs	r2, #3
 8004c18:	4650      	mov	r0, sl
 8004c1a:	f7fb fae1 	bl	80001e0 <memchr>
 8004c1e:	b140      	cbz	r0, 8004c32 <_svfiprintf_r+0x152>
 8004c20:	2340      	movs	r3, #64	; 0x40
 8004c22:	eba0 000a 	sub.w	r0, r0, sl
 8004c26:	fa03 f000 	lsl.w	r0, r3, r0
 8004c2a:	9b04      	ldr	r3, [sp, #16]
 8004c2c:	4303      	orrs	r3, r0
 8004c2e:	3401      	adds	r4, #1
 8004c30:	9304      	str	r3, [sp, #16]
 8004c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c36:	4826      	ldr	r0, [pc, #152]	; (8004cd0 <_svfiprintf_r+0x1f0>)
 8004c38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c3c:	2206      	movs	r2, #6
 8004c3e:	f7fb facf 	bl	80001e0 <memchr>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d038      	beq.n	8004cb8 <_svfiprintf_r+0x1d8>
 8004c46:	4b23      	ldr	r3, [pc, #140]	; (8004cd4 <_svfiprintf_r+0x1f4>)
 8004c48:	bb1b      	cbnz	r3, 8004c92 <_svfiprintf_r+0x1b2>
 8004c4a:	9b03      	ldr	r3, [sp, #12]
 8004c4c:	3307      	adds	r3, #7
 8004c4e:	f023 0307 	bic.w	r3, r3, #7
 8004c52:	3308      	adds	r3, #8
 8004c54:	9303      	str	r3, [sp, #12]
 8004c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c58:	4433      	add	r3, r6
 8004c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c5c:	e767      	b.n	8004b2e <_svfiprintf_r+0x4e>
 8004c5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c62:	460c      	mov	r4, r1
 8004c64:	2001      	movs	r0, #1
 8004c66:	e7a5      	b.n	8004bb4 <_svfiprintf_r+0xd4>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	3401      	adds	r4, #1
 8004c6c:	9305      	str	r3, [sp, #20]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	f04f 0c0a 	mov.w	ip, #10
 8004c74:	4620      	mov	r0, r4
 8004c76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c7a:	3a30      	subs	r2, #48	; 0x30
 8004c7c:	2a09      	cmp	r2, #9
 8004c7e:	d903      	bls.n	8004c88 <_svfiprintf_r+0x1a8>
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0c5      	beq.n	8004c10 <_svfiprintf_r+0x130>
 8004c84:	9105      	str	r1, [sp, #20]
 8004c86:	e7c3      	b.n	8004c10 <_svfiprintf_r+0x130>
 8004c88:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e7f0      	b.n	8004c74 <_svfiprintf_r+0x194>
 8004c92:	ab03      	add	r3, sp, #12
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	462a      	mov	r2, r5
 8004c98:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <_svfiprintf_r+0x1f8>)
 8004c9a:	a904      	add	r1, sp, #16
 8004c9c:	4638      	mov	r0, r7
 8004c9e:	f3af 8000 	nop.w
 8004ca2:	1c42      	adds	r2, r0, #1
 8004ca4:	4606      	mov	r6, r0
 8004ca6:	d1d6      	bne.n	8004c56 <_svfiprintf_r+0x176>
 8004ca8:	89ab      	ldrh	r3, [r5, #12]
 8004caa:	065b      	lsls	r3, r3, #25
 8004cac:	f53f af2c 	bmi.w	8004b08 <_svfiprintf_r+0x28>
 8004cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cb2:	b01d      	add	sp, #116	; 0x74
 8004cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cb8:	ab03      	add	r3, sp, #12
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	462a      	mov	r2, r5
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <_svfiprintf_r+0x1f8>)
 8004cc0:	a904      	add	r1, sp, #16
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	f000 f87a 	bl	8004dbc <_printf_i>
 8004cc8:	e7eb      	b.n	8004ca2 <_svfiprintf_r+0x1c2>
 8004cca:	bf00      	nop
 8004ccc:	080053dc 	.word	0x080053dc
 8004cd0:	080053e6 	.word	0x080053e6
 8004cd4:	00000000 	.word	0x00000000
 8004cd8:	08004a29 	.word	0x08004a29
 8004cdc:	080053e2 	.word	0x080053e2

08004ce0 <_printf_common>:
 8004ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce4:	4616      	mov	r6, r2
 8004ce6:	4699      	mov	r9, r3
 8004ce8:	688a      	ldr	r2, [r1, #8]
 8004cea:	690b      	ldr	r3, [r1, #16]
 8004cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	bfb8      	it	lt
 8004cf4:	4613      	movlt	r3, r2
 8004cf6:	6033      	str	r3, [r6, #0]
 8004cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cfc:	4607      	mov	r7, r0
 8004cfe:	460c      	mov	r4, r1
 8004d00:	b10a      	cbz	r2, 8004d06 <_printf_common+0x26>
 8004d02:	3301      	adds	r3, #1
 8004d04:	6033      	str	r3, [r6, #0]
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	0699      	lsls	r1, r3, #26
 8004d0a:	bf42      	ittt	mi
 8004d0c:	6833      	ldrmi	r3, [r6, #0]
 8004d0e:	3302      	addmi	r3, #2
 8004d10:	6033      	strmi	r3, [r6, #0]
 8004d12:	6825      	ldr	r5, [r4, #0]
 8004d14:	f015 0506 	ands.w	r5, r5, #6
 8004d18:	d106      	bne.n	8004d28 <_printf_common+0x48>
 8004d1a:	f104 0a19 	add.w	sl, r4, #25
 8004d1e:	68e3      	ldr	r3, [r4, #12]
 8004d20:	6832      	ldr	r2, [r6, #0]
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	42ab      	cmp	r3, r5
 8004d26:	dc26      	bgt.n	8004d76 <_printf_common+0x96>
 8004d28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d2c:	1e13      	subs	r3, r2, #0
 8004d2e:	6822      	ldr	r2, [r4, #0]
 8004d30:	bf18      	it	ne
 8004d32:	2301      	movne	r3, #1
 8004d34:	0692      	lsls	r2, r2, #26
 8004d36:	d42b      	bmi.n	8004d90 <_printf_common+0xb0>
 8004d38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	4638      	mov	r0, r7
 8004d40:	47c0      	blx	r8
 8004d42:	3001      	adds	r0, #1
 8004d44:	d01e      	beq.n	8004d84 <_printf_common+0xa4>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	68e5      	ldr	r5, [r4, #12]
 8004d4a:	6832      	ldr	r2, [r6, #0]
 8004d4c:	f003 0306 	and.w	r3, r3, #6
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	bf08      	it	eq
 8004d54:	1aad      	subeq	r5, r5, r2
 8004d56:	68a3      	ldr	r3, [r4, #8]
 8004d58:	6922      	ldr	r2, [r4, #16]
 8004d5a:	bf0c      	ite	eq
 8004d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d60:	2500      	movne	r5, #0
 8004d62:	4293      	cmp	r3, r2
 8004d64:	bfc4      	itt	gt
 8004d66:	1a9b      	subgt	r3, r3, r2
 8004d68:	18ed      	addgt	r5, r5, r3
 8004d6a:	2600      	movs	r6, #0
 8004d6c:	341a      	adds	r4, #26
 8004d6e:	42b5      	cmp	r5, r6
 8004d70:	d11a      	bne.n	8004da8 <_printf_common+0xc8>
 8004d72:	2000      	movs	r0, #0
 8004d74:	e008      	b.n	8004d88 <_printf_common+0xa8>
 8004d76:	2301      	movs	r3, #1
 8004d78:	4652      	mov	r2, sl
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	4638      	mov	r0, r7
 8004d7e:	47c0      	blx	r8
 8004d80:	3001      	adds	r0, #1
 8004d82:	d103      	bne.n	8004d8c <_printf_common+0xac>
 8004d84:	f04f 30ff 	mov.w	r0, #4294967295
 8004d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8c:	3501      	adds	r5, #1
 8004d8e:	e7c6      	b.n	8004d1e <_printf_common+0x3e>
 8004d90:	18e1      	adds	r1, r4, r3
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	2030      	movs	r0, #48	; 0x30
 8004d96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d9a:	4422      	add	r2, r4
 8004d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004da0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004da4:	3302      	adds	r3, #2
 8004da6:	e7c7      	b.n	8004d38 <_printf_common+0x58>
 8004da8:	2301      	movs	r3, #1
 8004daa:	4622      	mov	r2, r4
 8004dac:	4649      	mov	r1, r9
 8004dae:	4638      	mov	r0, r7
 8004db0:	47c0      	blx	r8
 8004db2:	3001      	adds	r0, #1
 8004db4:	d0e6      	beq.n	8004d84 <_printf_common+0xa4>
 8004db6:	3601      	adds	r6, #1
 8004db8:	e7d9      	b.n	8004d6e <_printf_common+0x8e>
	...

08004dbc <_printf_i>:
 8004dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	4691      	mov	r9, r2
 8004dc4:	7e27      	ldrb	r7, [r4, #24]
 8004dc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004dc8:	2f78      	cmp	r7, #120	; 0x78
 8004dca:	4680      	mov	r8, r0
 8004dcc:	469a      	mov	sl, r3
 8004dce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dd2:	d807      	bhi.n	8004de4 <_printf_i+0x28>
 8004dd4:	2f62      	cmp	r7, #98	; 0x62
 8004dd6:	d80a      	bhi.n	8004dee <_printf_i+0x32>
 8004dd8:	2f00      	cmp	r7, #0
 8004dda:	f000 80d8 	beq.w	8004f8e <_printf_i+0x1d2>
 8004dde:	2f58      	cmp	r7, #88	; 0x58
 8004de0:	f000 80a3 	beq.w	8004f2a <_printf_i+0x16e>
 8004de4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004de8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dec:	e03a      	b.n	8004e64 <_printf_i+0xa8>
 8004dee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004df2:	2b15      	cmp	r3, #21
 8004df4:	d8f6      	bhi.n	8004de4 <_printf_i+0x28>
 8004df6:	a001      	add	r0, pc, #4	; (adr r0, 8004dfc <_printf_i+0x40>)
 8004df8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004dfc:	08004e55 	.word	0x08004e55
 8004e00:	08004e69 	.word	0x08004e69
 8004e04:	08004de5 	.word	0x08004de5
 8004e08:	08004de5 	.word	0x08004de5
 8004e0c:	08004de5 	.word	0x08004de5
 8004e10:	08004de5 	.word	0x08004de5
 8004e14:	08004e69 	.word	0x08004e69
 8004e18:	08004de5 	.word	0x08004de5
 8004e1c:	08004de5 	.word	0x08004de5
 8004e20:	08004de5 	.word	0x08004de5
 8004e24:	08004de5 	.word	0x08004de5
 8004e28:	08004f75 	.word	0x08004f75
 8004e2c:	08004e99 	.word	0x08004e99
 8004e30:	08004f57 	.word	0x08004f57
 8004e34:	08004de5 	.word	0x08004de5
 8004e38:	08004de5 	.word	0x08004de5
 8004e3c:	08004f97 	.word	0x08004f97
 8004e40:	08004de5 	.word	0x08004de5
 8004e44:	08004e99 	.word	0x08004e99
 8004e48:	08004de5 	.word	0x08004de5
 8004e4c:	08004de5 	.word	0x08004de5
 8004e50:	08004f5f 	.word	0x08004f5f
 8004e54:	680b      	ldr	r3, [r1, #0]
 8004e56:	1d1a      	adds	r2, r3, #4
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	600a      	str	r2, [r1, #0]
 8004e5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0a3      	b.n	8004fb0 <_printf_i+0x1f4>
 8004e68:	6825      	ldr	r5, [r4, #0]
 8004e6a:	6808      	ldr	r0, [r1, #0]
 8004e6c:	062e      	lsls	r6, r5, #24
 8004e6e:	f100 0304 	add.w	r3, r0, #4
 8004e72:	d50a      	bpl.n	8004e8a <_printf_i+0xce>
 8004e74:	6805      	ldr	r5, [r0, #0]
 8004e76:	600b      	str	r3, [r1, #0]
 8004e78:	2d00      	cmp	r5, #0
 8004e7a:	da03      	bge.n	8004e84 <_printf_i+0xc8>
 8004e7c:	232d      	movs	r3, #45	; 0x2d
 8004e7e:	426d      	negs	r5, r5
 8004e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e84:	485e      	ldr	r0, [pc, #376]	; (8005000 <_printf_i+0x244>)
 8004e86:	230a      	movs	r3, #10
 8004e88:	e019      	b.n	8004ebe <_printf_i+0x102>
 8004e8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004e8e:	6805      	ldr	r5, [r0, #0]
 8004e90:	600b      	str	r3, [r1, #0]
 8004e92:	bf18      	it	ne
 8004e94:	b22d      	sxthne	r5, r5
 8004e96:	e7ef      	b.n	8004e78 <_printf_i+0xbc>
 8004e98:	680b      	ldr	r3, [r1, #0]
 8004e9a:	6825      	ldr	r5, [r4, #0]
 8004e9c:	1d18      	adds	r0, r3, #4
 8004e9e:	6008      	str	r0, [r1, #0]
 8004ea0:	0628      	lsls	r0, r5, #24
 8004ea2:	d501      	bpl.n	8004ea8 <_printf_i+0xec>
 8004ea4:	681d      	ldr	r5, [r3, #0]
 8004ea6:	e002      	b.n	8004eae <_printf_i+0xf2>
 8004ea8:	0669      	lsls	r1, r5, #25
 8004eaa:	d5fb      	bpl.n	8004ea4 <_printf_i+0xe8>
 8004eac:	881d      	ldrh	r5, [r3, #0]
 8004eae:	4854      	ldr	r0, [pc, #336]	; (8005000 <_printf_i+0x244>)
 8004eb0:	2f6f      	cmp	r7, #111	; 0x6f
 8004eb2:	bf0c      	ite	eq
 8004eb4:	2308      	moveq	r3, #8
 8004eb6:	230a      	movne	r3, #10
 8004eb8:	2100      	movs	r1, #0
 8004eba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ebe:	6866      	ldr	r6, [r4, #4]
 8004ec0:	60a6      	str	r6, [r4, #8]
 8004ec2:	2e00      	cmp	r6, #0
 8004ec4:	bfa2      	ittt	ge
 8004ec6:	6821      	ldrge	r1, [r4, #0]
 8004ec8:	f021 0104 	bicge.w	r1, r1, #4
 8004ecc:	6021      	strge	r1, [r4, #0]
 8004ece:	b90d      	cbnz	r5, 8004ed4 <_printf_i+0x118>
 8004ed0:	2e00      	cmp	r6, #0
 8004ed2:	d04d      	beq.n	8004f70 <_printf_i+0x1b4>
 8004ed4:	4616      	mov	r6, r2
 8004ed6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004eda:	fb03 5711 	mls	r7, r3, r1, r5
 8004ede:	5dc7      	ldrb	r7, [r0, r7]
 8004ee0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ee4:	462f      	mov	r7, r5
 8004ee6:	42bb      	cmp	r3, r7
 8004ee8:	460d      	mov	r5, r1
 8004eea:	d9f4      	bls.n	8004ed6 <_printf_i+0x11a>
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d10b      	bne.n	8004f08 <_printf_i+0x14c>
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	07df      	lsls	r7, r3, #31
 8004ef4:	d508      	bpl.n	8004f08 <_printf_i+0x14c>
 8004ef6:	6923      	ldr	r3, [r4, #16]
 8004ef8:	6861      	ldr	r1, [r4, #4]
 8004efa:	4299      	cmp	r1, r3
 8004efc:	bfde      	ittt	le
 8004efe:	2330      	movle	r3, #48	; 0x30
 8004f00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f08:	1b92      	subs	r2, r2, r6
 8004f0a:	6122      	str	r2, [r4, #16]
 8004f0c:	f8cd a000 	str.w	sl, [sp]
 8004f10:	464b      	mov	r3, r9
 8004f12:	aa03      	add	r2, sp, #12
 8004f14:	4621      	mov	r1, r4
 8004f16:	4640      	mov	r0, r8
 8004f18:	f7ff fee2 	bl	8004ce0 <_printf_common>
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d14c      	bne.n	8004fba <_printf_i+0x1fe>
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295
 8004f24:	b004      	add	sp, #16
 8004f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f2a:	4835      	ldr	r0, [pc, #212]	; (8005000 <_printf_i+0x244>)
 8004f2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	680e      	ldr	r6, [r1, #0]
 8004f34:	061f      	lsls	r7, r3, #24
 8004f36:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f3a:	600e      	str	r6, [r1, #0]
 8004f3c:	d514      	bpl.n	8004f68 <_printf_i+0x1ac>
 8004f3e:	07d9      	lsls	r1, r3, #31
 8004f40:	bf44      	itt	mi
 8004f42:	f043 0320 	orrmi.w	r3, r3, #32
 8004f46:	6023      	strmi	r3, [r4, #0]
 8004f48:	b91d      	cbnz	r5, 8004f52 <_printf_i+0x196>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	f023 0320 	bic.w	r3, r3, #32
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	2310      	movs	r3, #16
 8004f54:	e7b0      	b.n	8004eb8 <_printf_i+0xfc>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	f043 0320 	orr.w	r3, r3, #32
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	2378      	movs	r3, #120	; 0x78
 8004f60:	4828      	ldr	r0, [pc, #160]	; (8005004 <_printf_i+0x248>)
 8004f62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f66:	e7e3      	b.n	8004f30 <_printf_i+0x174>
 8004f68:	065e      	lsls	r6, r3, #25
 8004f6a:	bf48      	it	mi
 8004f6c:	b2ad      	uxthmi	r5, r5
 8004f6e:	e7e6      	b.n	8004f3e <_printf_i+0x182>
 8004f70:	4616      	mov	r6, r2
 8004f72:	e7bb      	b.n	8004eec <_printf_i+0x130>
 8004f74:	680b      	ldr	r3, [r1, #0]
 8004f76:	6826      	ldr	r6, [r4, #0]
 8004f78:	6960      	ldr	r0, [r4, #20]
 8004f7a:	1d1d      	adds	r5, r3, #4
 8004f7c:	600d      	str	r5, [r1, #0]
 8004f7e:	0635      	lsls	r5, r6, #24
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	d501      	bpl.n	8004f88 <_printf_i+0x1cc>
 8004f84:	6018      	str	r0, [r3, #0]
 8004f86:	e002      	b.n	8004f8e <_printf_i+0x1d2>
 8004f88:	0671      	lsls	r1, r6, #25
 8004f8a:	d5fb      	bpl.n	8004f84 <_printf_i+0x1c8>
 8004f8c:	8018      	strh	r0, [r3, #0]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	6123      	str	r3, [r4, #16]
 8004f92:	4616      	mov	r6, r2
 8004f94:	e7ba      	b.n	8004f0c <_printf_i+0x150>
 8004f96:	680b      	ldr	r3, [r1, #0]
 8004f98:	1d1a      	adds	r2, r3, #4
 8004f9a:	600a      	str	r2, [r1, #0]
 8004f9c:	681e      	ldr	r6, [r3, #0]
 8004f9e:	6862      	ldr	r2, [r4, #4]
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f7fb f91c 	bl	80001e0 <memchr>
 8004fa8:	b108      	cbz	r0, 8004fae <_printf_i+0x1f2>
 8004faa:	1b80      	subs	r0, r0, r6
 8004fac:	6060      	str	r0, [r4, #4]
 8004fae:	6863      	ldr	r3, [r4, #4]
 8004fb0:	6123      	str	r3, [r4, #16]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb8:	e7a8      	b.n	8004f0c <_printf_i+0x150>
 8004fba:	6923      	ldr	r3, [r4, #16]
 8004fbc:	4632      	mov	r2, r6
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	4640      	mov	r0, r8
 8004fc2:	47d0      	blx	sl
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d0ab      	beq.n	8004f20 <_printf_i+0x164>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	079b      	lsls	r3, r3, #30
 8004fcc:	d413      	bmi.n	8004ff6 <_printf_i+0x23a>
 8004fce:	68e0      	ldr	r0, [r4, #12]
 8004fd0:	9b03      	ldr	r3, [sp, #12]
 8004fd2:	4298      	cmp	r0, r3
 8004fd4:	bfb8      	it	lt
 8004fd6:	4618      	movlt	r0, r3
 8004fd8:	e7a4      	b.n	8004f24 <_printf_i+0x168>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4632      	mov	r2, r6
 8004fde:	4649      	mov	r1, r9
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	47d0      	blx	sl
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d09b      	beq.n	8004f20 <_printf_i+0x164>
 8004fe8:	3501      	adds	r5, #1
 8004fea:	68e3      	ldr	r3, [r4, #12]
 8004fec:	9903      	ldr	r1, [sp, #12]
 8004fee:	1a5b      	subs	r3, r3, r1
 8004ff0:	42ab      	cmp	r3, r5
 8004ff2:	dcf2      	bgt.n	8004fda <_printf_i+0x21e>
 8004ff4:	e7eb      	b.n	8004fce <_printf_i+0x212>
 8004ff6:	2500      	movs	r5, #0
 8004ff8:	f104 0619 	add.w	r6, r4, #25
 8004ffc:	e7f5      	b.n	8004fea <_printf_i+0x22e>
 8004ffe:	bf00      	nop
 8005000:	080053ed 	.word	0x080053ed
 8005004:	080053fe 	.word	0x080053fe

08005008 <memcpy>:
 8005008:	440a      	add	r2, r1
 800500a:	4291      	cmp	r1, r2
 800500c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005010:	d100      	bne.n	8005014 <memcpy+0xc>
 8005012:	4770      	bx	lr
 8005014:	b510      	push	{r4, lr}
 8005016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800501a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800501e:	4291      	cmp	r1, r2
 8005020:	d1f9      	bne.n	8005016 <memcpy+0xe>
 8005022:	bd10      	pop	{r4, pc}

08005024 <memmove>:
 8005024:	4288      	cmp	r0, r1
 8005026:	b510      	push	{r4, lr}
 8005028:	eb01 0402 	add.w	r4, r1, r2
 800502c:	d902      	bls.n	8005034 <memmove+0x10>
 800502e:	4284      	cmp	r4, r0
 8005030:	4623      	mov	r3, r4
 8005032:	d807      	bhi.n	8005044 <memmove+0x20>
 8005034:	1e43      	subs	r3, r0, #1
 8005036:	42a1      	cmp	r1, r4
 8005038:	d008      	beq.n	800504c <memmove+0x28>
 800503a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800503e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005042:	e7f8      	b.n	8005036 <memmove+0x12>
 8005044:	4402      	add	r2, r0
 8005046:	4601      	mov	r1, r0
 8005048:	428a      	cmp	r2, r1
 800504a:	d100      	bne.n	800504e <memmove+0x2a>
 800504c:	bd10      	pop	{r4, pc}
 800504e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005052:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005056:	e7f7      	b.n	8005048 <memmove+0x24>

08005058 <_free_r>:
 8005058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800505a:	2900      	cmp	r1, #0
 800505c:	d048      	beq.n	80050f0 <_free_r+0x98>
 800505e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005062:	9001      	str	r0, [sp, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	f1a1 0404 	sub.w	r4, r1, #4
 800506a:	bfb8      	it	lt
 800506c:	18e4      	addlt	r4, r4, r3
 800506e:	f000 f8d3 	bl	8005218 <__malloc_lock>
 8005072:	4a20      	ldr	r2, [pc, #128]	; (80050f4 <_free_r+0x9c>)
 8005074:	9801      	ldr	r0, [sp, #4]
 8005076:	6813      	ldr	r3, [r2, #0]
 8005078:	4615      	mov	r5, r2
 800507a:	b933      	cbnz	r3, 800508a <_free_r+0x32>
 800507c:	6063      	str	r3, [r4, #4]
 800507e:	6014      	str	r4, [r2, #0]
 8005080:	b003      	add	sp, #12
 8005082:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005086:	f000 b8cd 	b.w	8005224 <__malloc_unlock>
 800508a:	42a3      	cmp	r3, r4
 800508c:	d90b      	bls.n	80050a6 <_free_r+0x4e>
 800508e:	6821      	ldr	r1, [r4, #0]
 8005090:	1862      	adds	r2, r4, r1
 8005092:	4293      	cmp	r3, r2
 8005094:	bf04      	itt	eq
 8005096:	681a      	ldreq	r2, [r3, #0]
 8005098:	685b      	ldreq	r3, [r3, #4]
 800509a:	6063      	str	r3, [r4, #4]
 800509c:	bf04      	itt	eq
 800509e:	1852      	addeq	r2, r2, r1
 80050a0:	6022      	streq	r2, [r4, #0]
 80050a2:	602c      	str	r4, [r5, #0]
 80050a4:	e7ec      	b.n	8005080 <_free_r+0x28>
 80050a6:	461a      	mov	r2, r3
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	b10b      	cbz	r3, 80050b0 <_free_r+0x58>
 80050ac:	42a3      	cmp	r3, r4
 80050ae:	d9fa      	bls.n	80050a6 <_free_r+0x4e>
 80050b0:	6811      	ldr	r1, [r2, #0]
 80050b2:	1855      	adds	r5, r2, r1
 80050b4:	42a5      	cmp	r5, r4
 80050b6:	d10b      	bne.n	80050d0 <_free_r+0x78>
 80050b8:	6824      	ldr	r4, [r4, #0]
 80050ba:	4421      	add	r1, r4
 80050bc:	1854      	adds	r4, r2, r1
 80050be:	42a3      	cmp	r3, r4
 80050c0:	6011      	str	r1, [r2, #0]
 80050c2:	d1dd      	bne.n	8005080 <_free_r+0x28>
 80050c4:	681c      	ldr	r4, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	6053      	str	r3, [r2, #4]
 80050ca:	4421      	add	r1, r4
 80050cc:	6011      	str	r1, [r2, #0]
 80050ce:	e7d7      	b.n	8005080 <_free_r+0x28>
 80050d0:	d902      	bls.n	80050d8 <_free_r+0x80>
 80050d2:	230c      	movs	r3, #12
 80050d4:	6003      	str	r3, [r0, #0]
 80050d6:	e7d3      	b.n	8005080 <_free_r+0x28>
 80050d8:	6825      	ldr	r5, [r4, #0]
 80050da:	1961      	adds	r1, r4, r5
 80050dc:	428b      	cmp	r3, r1
 80050de:	bf04      	itt	eq
 80050e0:	6819      	ldreq	r1, [r3, #0]
 80050e2:	685b      	ldreq	r3, [r3, #4]
 80050e4:	6063      	str	r3, [r4, #4]
 80050e6:	bf04      	itt	eq
 80050e8:	1949      	addeq	r1, r1, r5
 80050ea:	6021      	streq	r1, [r4, #0]
 80050ec:	6054      	str	r4, [r2, #4]
 80050ee:	e7c7      	b.n	8005080 <_free_r+0x28>
 80050f0:	b003      	add	sp, #12
 80050f2:	bd30      	pop	{r4, r5, pc}
 80050f4:	200000b8 	.word	0x200000b8

080050f8 <_malloc_r>:
 80050f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fa:	1ccd      	adds	r5, r1, #3
 80050fc:	f025 0503 	bic.w	r5, r5, #3
 8005100:	3508      	adds	r5, #8
 8005102:	2d0c      	cmp	r5, #12
 8005104:	bf38      	it	cc
 8005106:	250c      	movcc	r5, #12
 8005108:	2d00      	cmp	r5, #0
 800510a:	4606      	mov	r6, r0
 800510c:	db01      	blt.n	8005112 <_malloc_r+0x1a>
 800510e:	42a9      	cmp	r1, r5
 8005110:	d903      	bls.n	800511a <_malloc_r+0x22>
 8005112:	230c      	movs	r3, #12
 8005114:	6033      	str	r3, [r6, #0]
 8005116:	2000      	movs	r0, #0
 8005118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800511a:	f000 f87d 	bl	8005218 <__malloc_lock>
 800511e:	4921      	ldr	r1, [pc, #132]	; (80051a4 <_malloc_r+0xac>)
 8005120:	680a      	ldr	r2, [r1, #0]
 8005122:	4614      	mov	r4, r2
 8005124:	b99c      	cbnz	r4, 800514e <_malloc_r+0x56>
 8005126:	4f20      	ldr	r7, [pc, #128]	; (80051a8 <_malloc_r+0xb0>)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	b923      	cbnz	r3, 8005136 <_malloc_r+0x3e>
 800512c:	4621      	mov	r1, r4
 800512e:	4630      	mov	r0, r6
 8005130:	f000 f862 	bl	80051f8 <_sbrk_r>
 8005134:	6038      	str	r0, [r7, #0]
 8005136:	4629      	mov	r1, r5
 8005138:	4630      	mov	r0, r6
 800513a:	f000 f85d 	bl	80051f8 <_sbrk_r>
 800513e:	1c43      	adds	r3, r0, #1
 8005140:	d123      	bne.n	800518a <_malloc_r+0x92>
 8005142:	230c      	movs	r3, #12
 8005144:	6033      	str	r3, [r6, #0]
 8005146:	4630      	mov	r0, r6
 8005148:	f000 f86c 	bl	8005224 <__malloc_unlock>
 800514c:	e7e3      	b.n	8005116 <_malloc_r+0x1e>
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	1b5b      	subs	r3, r3, r5
 8005152:	d417      	bmi.n	8005184 <_malloc_r+0x8c>
 8005154:	2b0b      	cmp	r3, #11
 8005156:	d903      	bls.n	8005160 <_malloc_r+0x68>
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	441c      	add	r4, r3
 800515c:	6025      	str	r5, [r4, #0]
 800515e:	e004      	b.n	800516a <_malloc_r+0x72>
 8005160:	6863      	ldr	r3, [r4, #4]
 8005162:	42a2      	cmp	r2, r4
 8005164:	bf0c      	ite	eq
 8005166:	600b      	streq	r3, [r1, #0]
 8005168:	6053      	strne	r3, [r2, #4]
 800516a:	4630      	mov	r0, r6
 800516c:	f000 f85a 	bl	8005224 <__malloc_unlock>
 8005170:	f104 000b 	add.w	r0, r4, #11
 8005174:	1d23      	adds	r3, r4, #4
 8005176:	f020 0007 	bic.w	r0, r0, #7
 800517a:	1ac2      	subs	r2, r0, r3
 800517c:	d0cc      	beq.n	8005118 <_malloc_r+0x20>
 800517e:	1a1b      	subs	r3, r3, r0
 8005180:	50a3      	str	r3, [r4, r2]
 8005182:	e7c9      	b.n	8005118 <_malloc_r+0x20>
 8005184:	4622      	mov	r2, r4
 8005186:	6864      	ldr	r4, [r4, #4]
 8005188:	e7cc      	b.n	8005124 <_malloc_r+0x2c>
 800518a:	1cc4      	adds	r4, r0, #3
 800518c:	f024 0403 	bic.w	r4, r4, #3
 8005190:	42a0      	cmp	r0, r4
 8005192:	d0e3      	beq.n	800515c <_malloc_r+0x64>
 8005194:	1a21      	subs	r1, r4, r0
 8005196:	4630      	mov	r0, r6
 8005198:	f000 f82e 	bl	80051f8 <_sbrk_r>
 800519c:	3001      	adds	r0, #1
 800519e:	d1dd      	bne.n	800515c <_malloc_r+0x64>
 80051a0:	e7cf      	b.n	8005142 <_malloc_r+0x4a>
 80051a2:	bf00      	nop
 80051a4:	200000b8 	.word	0x200000b8
 80051a8:	200000bc 	.word	0x200000bc

080051ac <_realloc_r>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	4607      	mov	r7, r0
 80051b0:	4614      	mov	r4, r2
 80051b2:	460e      	mov	r6, r1
 80051b4:	b921      	cbnz	r1, 80051c0 <_realloc_r+0x14>
 80051b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80051ba:	4611      	mov	r1, r2
 80051bc:	f7ff bf9c 	b.w	80050f8 <_malloc_r>
 80051c0:	b922      	cbnz	r2, 80051cc <_realloc_r+0x20>
 80051c2:	f7ff ff49 	bl	8005058 <_free_r>
 80051c6:	4625      	mov	r5, r4
 80051c8:	4628      	mov	r0, r5
 80051ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051cc:	f000 f830 	bl	8005230 <_malloc_usable_size_r>
 80051d0:	42a0      	cmp	r0, r4
 80051d2:	d20f      	bcs.n	80051f4 <_realloc_r+0x48>
 80051d4:	4621      	mov	r1, r4
 80051d6:	4638      	mov	r0, r7
 80051d8:	f7ff ff8e 	bl	80050f8 <_malloc_r>
 80051dc:	4605      	mov	r5, r0
 80051de:	2800      	cmp	r0, #0
 80051e0:	d0f2      	beq.n	80051c8 <_realloc_r+0x1c>
 80051e2:	4631      	mov	r1, r6
 80051e4:	4622      	mov	r2, r4
 80051e6:	f7ff ff0f 	bl	8005008 <memcpy>
 80051ea:	4631      	mov	r1, r6
 80051ec:	4638      	mov	r0, r7
 80051ee:	f7ff ff33 	bl	8005058 <_free_r>
 80051f2:	e7e9      	b.n	80051c8 <_realloc_r+0x1c>
 80051f4:	4635      	mov	r5, r6
 80051f6:	e7e7      	b.n	80051c8 <_realloc_r+0x1c>

080051f8 <_sbrk_r>:
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	4d06      	ldr	r5, [pc, #24]	; (8005214 <_sbrk_r+0x1c>)
 80051fc:	2300      	movs	r3, #0
 80051fe:	4604      	mov	r4, r0
 8005200:	4608      	mov	r0, r1
 8005202:	602b      	str	r3, [r5, #0]
 8005204:	f7fb fc82 	bl	8000b0c <_sbrk>
 8005208:	1c43      	adds	r3, r0, #1
 800520a:	d102      	bne.n	8005212 <_sbrk_r+0x1a>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	b103      	cbz	r3, 8005212 <_sbrk_r+0x1a>
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	bd38      	pop	{r3, r4, r5, pc}
 8005214:	200001f0 	.word	0x200001f0

08005218 <__malloc_lock>:
 8005218:	4801      	ldr	r0, [pc, #4]	; (8005220 <__malloc_lock+0x8>)
 800521a:	f000 b811 	b.w	8005240 <__retarget_lock_acquire_recursive>
 800521e:	bf00      	nop
 8005220:	200001f8 	.word	0x200001f8

08005224 <__malloc_unlock>:
 8005224:	4801      	ldr	r0, [pc, #4]	; (800522c <__malloc_unlock+0x8>)
 8005226:	f000 b80c 	b.w	8005242 <__retarget_lock_release_recursive>
 800522a:	bf00      	nop
 800522c:	200001f8 	.word	0x200001f8

08005230 <_malloc_usable_size_r>:
 8005230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005234:	1f18      	subs	r0, r3, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	bfbc      	itt	lt
 800523a:	580b      	ldrlt	r3, [r1, r0]
 800523c:	18c0      	addlt	r0, r0, r3
 800523e:	4770      	bx	lr

08005240 <__retarget_lock_acquire_recursive>:
 8005240:	4770      	bx	lr

08005242 <__retarget_lock_release_recursive>:
 8005242:	4770      	bx	lr

08005244 <_init>:
 8005244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005246:	bf00      	nop
 8005248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524a:	bc08      	pop	{r3}
 800524c:	469e      	mov	lr, r3
 800524e:	4770      	bx	lr

08005250 <_fini>:
 8005250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005252:	bf00      	nop
 8005254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005256:	bc08      	pop	{r3}
 8005258:	469e      	mov	lr, r3
 800525a:	4770      	bx	lr
